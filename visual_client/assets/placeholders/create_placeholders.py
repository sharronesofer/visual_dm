"""
Generate placeholder assets for use when actual resources are missing.

This script creates basic placeholder assets that can be used as fallbacks when
actual game assets are missing or fail to load. This helps prevent crashes and
provides visual indicators of missing assets during development and testing.
"""

import os
import pygame
import numpy as np
from PIL import Image, ImageDraw, ImageFont

# Ensure pygame is initialized
pygame.init()

# Create paths
PLACEHOLDER_DIR = os.path.dirname(os.path.abspath(__file__))

def create_missing_texture():
    """Create a checkerboard pattern for missing textures."""
    size = 256
    img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
    draw = ImageDraw.Draw(img)
    
    # Draw checkerboard pattern
    square_size = 32
    for y in range(0, size, square_size):
        for x in range(0, size, square_size):
            if (x // square_size + y // square_size) % 2 == 0:
                color = (255, 0, 255, 255)  # Magenta
            else:
                color = (0, 0, 0, 255)  # Black
            draw.rectangle([x, y, x + square_size, y + square_size], fill=color)
    
    # Add text
    try:
        font = ImageFont.truetype("arial.ttf", 24)
    except IOError:
        # Fallback to default
        font = ImageFont.load_default()
    
    draw.text((size//2, size//2), "MISSING\nTEXTURE", 
              fill=(255, 255, 255, 255), font=font, 
              anchor="mm", align="center")
    
    # Save
    img.save(os.path.join(PLACEHOLDER_DIR, "missing_texture.png"))
    print(f"Created missing texture placeholder at {os.path.join(PLACEHOLDER_DIR, 'missing_texture.png')}")
    
def create_missing_model():
    """Create a simple OBJ file for missing models."""
    # Create a very simple cube obj file
    with open(os.path.join(PLACEHOLDER_DIR, "missing_model.obj"), "w") as f:
        f.write("# Missing model placeholder\n")
        f.write("# Generated by placeholder script\n\n")
        
        # Vertices
        f.write("v -0.5 -0.5 -0.5\n")
        f.write("v 0.5 -0.5 -0.5\n")
        f.write("v 0.5 0.5 -0.5\n")
        f.write("v -0.5 0.5 -0.5\n")
        f.write("v -0.5 -0.5 0.5\n")
        f.write("v 0.5 -0.5 0.5\n")
        f.write("v 0.5 0.5 0.5\n")
        f.write("v -0.5 0.5 0.5\n\n")
        
        # Faces (1-indexed in OBJ format)
        f.write("f 1 2 3 4\n")  # Front
        f.write("f 5 6 7 8\n")  # Back
        f.write("f 1 5 8 4\n")  # Left
        f.write("f 2 6 7 3\n")  # Right
        f.write("f 4 3 7 8\n")  # Top
        f.write("f 1 2 6 5\n")  # Bottom
    
    print(f"Created missing model placeholder at {os.path.join(PLACEHOLDER_DIR, 'missing_model.obj')}")

def create_silent_audio():
    """Create a silent WAV file."""
    # Parameters
    sample_rate = 44100
    duration = 1.0  # seconds
    
    # Create silent audio (all zeros)
    samples = np.zeros(int(sample_rate * duration), dtype=np.int16)
    
    # Create PyGame sound and save
    sound = pygame.mixer.Sound(samples)
    with open(os.path.join(PLACEHOLDER_DIR, "silent_audio.wav"), "wb") as f:
        pygame.mixer.Sound.save(sound, f)
    
    print(f"Created silent audio placeholder at {os.path.join(PLACEHOLDER_DIR, 'silent_audio.wav')}")

def create_default_font():
    """Create a copy of a default font."""
    # Try to locate a system font
    available_fonts = pygame.font.get_fonts()
    
    if available_fonts:
        # Use first available font
        font_name = available_fonts[0]
        font = pygame.font.SysFont(font_name, 24)
        
        # Create a surface with text
        surface = font.render("Missing Font", True, (255, 255, 255))
        
        # Save a simple image as placeholder
        pygame.image.save(surface, os.path.join(PLACEHOLDER_DIR, "default_font.png"))
        
        # Create an empty TTF file
        with open(os.path.join(PLACEHOLDER_DIR, "default_font.ttf"), "wb") as f:
            # Just create an empty file for placeholder purposes
            pass
        
        print(f"Created default font placeholder at {os.path.join(PLACEHOLDER_DIR, 'default_font.ttf')}")
    else:
        print("No system fonts available to create font placeholder")

def create_empty_script():
    """Create an empty script file."""
    with open(os.path.join(PLACEHOLDER_DIR, "empty_script.py"), "w") as f:
        f.write("""# Placeholder script for missing script assets
# Generated by placeholder asset generator

def placeholder_function(*args, **kwargs):
    """Placeholder function that does nothing."""
    print("WARNING: Using placeholder script")
    return None

# This script intentionally does nothing and serves as a placeholder
# for missing script assets in the game.
""")
    
    print(f"Created empty script placeholder at {os.path.join(PLACEHOLDER_DIR, 'empty_script.py')}")

def main():
    """Generate all placeholder assets."""
    os.makedirs(PLACEHOLDER_DIR, exist_ok=True)
    
    # Create each placeholder type
    create_missing_texture()
    create_missing_model()
    create_silent_audio()
    create_default_font()
    create_empty_script()
    
    print("All placeholder assets created successfully")

if __name__ == "__main__":
    main() 