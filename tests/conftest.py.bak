"""
Test configuration and fixtures.
"""

import os
import pytest
import tempfile
from datetime import datetime, timezone
from git import Repo
from app import create_app
from app.core.database import db as _db
from app.core.models.version_control import CodeVersion, TaskVersionLink, ReviewVersionLink

@pytest.fixture(scope='session')
def app():
    """Create a Flask app context for the tests."""
    app = create_app({
        'TESTING': True,
        'SQLALCHEMY_DATABASE_URI': 'sqlite:///:memory:',
        'SQLALCHEMY_TRACK_MODIFICATIONS': False,
        'SECRET_KEY': 'test-key'
    })
    
    with app.app_context():
        _db.create_all()
        yield app
        _db.drop_all()

@pytest.fixture(scope='session')
def db(app):
    """Create a database interface for the tests."""
    return _db

@pytest.fixture(scope='function')
def session(db):
    """Create a new database session for a test."""
    connection = db.engine.connect()
    transaction = connection.begin()
    
    session = db.create_scoped_session(
        options={'bind': connection, 'binds': {}}
    )
    
    db.session = session
    
    yield session
    
    transaction.rollback()
    connection.close()
    session.remove()

@pytest.fixture(scope='function')
def test_repo():
    """Create a temporary Git repository for testing."""
    with tempfile.TemporaryDirectory() as temp_dir:
        repo = Repo.init(temp_dir)
        
        # Create a test file and commit it
        test_file = os.path.join(temp_dir, 'test.txt')
        with open(test_file, 'w') as f:
            f.write('Initial content')
        
        repo.index.add(['test.txt'])
        repo.index.commit('Initial commit')
        
        # Create a test branch
        test_branch = repo.create_head('test-branch')
        test_branch.checkout()
        
        # Create a test tag
        repo.create_tag('v1.0.0')
        
        yield repo

@pytest.fixture
def sample_version(session):
    """Create a sample code version for testing."""
    version = CodeVersion(
        commit_hash='1234567890123456789012345678901234567890',
        author='Test Author',
        commit_message='Test commit message',
        commit_timestamp=datetime.now(timezone.utc),
        branch_name='main',
        tag_name='v1.0.0',
        metadata={'key': 'value'}
    )
    session.add(version)
    session.commit()
    return version

@pytest.fixture
def sample_task_link(session, sample_version):
    """Create a sample task version link for testing."""
    link = TaskVersionLink(
        task_id=1,
        version_id=sample_version.id,
        link_type='implementation',
        link_metadata={'status': 'completed'}
    )
    session.add(link)
    session.commit()
    return link

@pytest.fixture
def sample_review_link(session, sample_version):
    """Create a sample review version link for testing."""
    link = ReviewVersionLink(
        review_id=1,
        version_id=sample_version.id,
        link_type='review',
        link_metadata={'status': 'approved'}
    )
    session.add(link)
    session.commit()
    return link 