#!/usr/bin/env python3
"""
Move Done Tasks Script

This script moves all tasks marked as "done" and their subtasks from tasks.json to done_tasks.json,
and then removes these done tasks from tasks.json. It also converts done subtasks within active tasks
to standalone tasks in done_tasks.json.

Usage:
    python move_done_tasks.py
"""

import json
import os
import sys
from datetime import datetime
import copy
import shutil

# File paths
TASKS_FILE = "tasks/tasks.json"
DONE_TASKS_FILE = "tasks/done_tasks.json"
BACKUP_SUFFIX = f".bak.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
BACKUP_FILE = "tasks/Tasks_pre_migration_backup.json"

def load_json_file(file_path):
    """Load and parse a JSON file."""
    try:
        with open(file_path, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"Error: File {file_path} not found")
        sys.exit(1)
    except json.JSONDecodeError:
        print(f"Error: {file_path} is not a valid JSON file")
        sys.exit(1)

def save_json_file(file_path, data):
    """Save data to a JSON file with pretty formatting."""
    with open(file_path, 'w') as f:
        json.dump(data, f, indent=2)

def create_backup(file_path):
    """Create a backup of the original file."""
    backup_path = f"{file_path}{BACKUP_SUFFIX}"
    try:
        shutil.copy2(file_path, backup_path)
        print(f"Created backup of {file_path} at {backup_path}")
    except Exception as e:
        print(f"Warning: Could not create backup: {str(e)}")

def is_task_done(task):
    """Check if a task is marked as done."""
    return task.get('status') == 'done'

def convert_subtask_to_task(subtask, parent_id, parent_title=None):
    """Convert a subtask to a standalone task with reference to its parent."""
    # Create a deep copy to avoid modifying the original
    task = copy.deepcopy(subtask)
    
    # Reference to parent in the title if not already included
    if parent_title and not task.get('title', '').startswith(f"Subtask of"):
        original_title = task.get('title', 'Unknown Subtask')
        task['title'] = f"Subtask of {parent_title} ({parent_id}): {original_title}"
    
    # Add reference to the parent task ID
    task['parentTaskId'] = parent_id
    
    # Ensure any subtask ID is properly formatted as a string
    if 'id' in task and not isinstance(task['id'], str) and '.' in str(task['id']):
        task['id'] = str(task['id'])
    
    return task

def filter_done_tasks(tasks):
    """
    Separate done tasks from active tasks.
    Also extract done subtasks from otherwise active tasks.
    
    Returns (done_tasks, active_tasks, extracted_done_subtasks)
    """
    done_tasks = []
    active_tasks = []
    extracted_done_subtasks = []
    
    for task in tasks:
        if is_task_done(task):
            # The entire task is done, add it to done_tasks
            done_tasks.append(task)
        else:
            # The task is active, but we need to check its subtasks
            if 'subtasks' in task and task['subtasks']:
                # Create new lists for done and active subtasks
                done_subtasks = []
                active_subtasks = []
                
                # Sort subtasks
                for subtask in task['subtasks']:
                    if is_task_done(subtask):
                        # Convert the done subtask to a standalone task
                        standalone_task = convert_subtask_to_task(subtask, task.get('id'), task.get('title'))
                        extracted_done_subtasks.append(standalone_task)
                        done_subtasks.append(subtask)
                    else:
                        active_subtasks.append(subtask)
                
                # Update the task with only active subtasks
                task['subtasks'] = active_subtasks
            
            # Keep the task with updated subtasks
            active_tasks.append(task)
    
    return done_tasks, active_tasks, extracted_done_subtasks

def extract_done_tasks(tasks):
    done = []
    remaining = []
    for task in tasks:
        # Handle subtasks recursively if present
        subtasks = task.get("subtasks", [])
        if subtasks:
            done_sub, rem_sub = extract_done_tasks(subtasks)
            task["subtasks"] = rem_sub
            if done_sub:
                done.extend(done_sub)
        # Check main task status
        if task.get("status") == "done":
            # Remove subtasks from done task if any remain (already handled above)
            task["subtasks"] = task.get("subtasks", [])
            done.append(task)
        else:
            remaining.append(task)
    return done, remaining

def main():
    """Main function to move done tasks to done_tasks.json."""
    # Create backups first
    create_backup(TASKS_FILE)
    if os.path.exists(DONE_TASKS_FILE):
        create_backup(DONE_TASKS_FILE)
    
    # Backup already created, but check if exists
    if not os.path.exists(BACKUP_FILE):
        shutil.copy(TASKS_FILE, BACKUP_FILE)
        print(f"Backup created at {BACKUP_FILE}")
    else:
        print(f"Backup already exists at {BACKUP_FILE}")
    
    # Load both files
    tasks_data = load_json_file(TASKS_FILE)
    
    # Try to load done_tasks.json, or create a new structure if it doesn't exist
    try:
        done_tasks_data = load_json_file(DONE_TASKS_FILE)
    except:
        done_tasks_data = {"tasks": []}
    
    # Extract the task lists
    tasks = tasks_data.get('tasks', [])
    done_tasks_existing = done_tasks_data.get('tasks', [])
    
    # Extract done tasks
    done_tasks, remaining_tasks = extract_done_tasks(tasks)
    
    print(f"Found {len(done_tasks)} done tasks to move")
    print(f"Remaining tasks: {len(remaining_tasks)} (not including their subtasks)")
    
    # Combine existing done tasks with new done tasks
    combined_done_tasks = done_tasks_existing + done_tasks
    
    # Update the data structures
    tasks_data['tasks'] = remaining_tasks
    done_tasks_data['tasks'] = combined_done_tasks
    
    # Save updated files
    save_json_file(TASKS_FILE, tasks_data)
    save_json_file(DONE_TASKS_FILE, done_tasks_data)
    
    print(f"Successfully moved {len(done_tasks)} done tasks to {DONE_TASKS_FILE}")
    print(f"tasks.json now has {len(remaining_tasks)} active tasks")
    print(f"done_tasks.json now has {len(combined_done_tasks)} done tasks")

if __name__ == "__main__":
    main() 