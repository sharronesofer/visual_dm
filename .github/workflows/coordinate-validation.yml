name: Coordinate System Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'visual_client/**/*.py'
      - 'backend/**/*.py'
      - 'scripts/coordinate_static_analysis.py'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'visual_client/**/*.py'
      - 'backend/**/*.py'
      - 'scripts/coordinate_static_analysis.py'
  workflow_dispatch:  # Allow manual triggering

jobs:
  coordinate-static-analysis:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-mock pytest-cov pylint mypy

      - name: Run coordinate static analysis
        run: |
          python scripts/coordinate_static_analysis.py --strict --summary --output=coordinate_analysis_results.txt visual_client/
      
      - name: Upload analysis results
        if: always()  # Upload even if analysis fails
        uses: actions/upload-artifact@v3
        with:
          name: coordinate-analysis-results
          path: coordinate_analysis_results.txt
      
      - name: Report issues in PR comment
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              const results = fs.readFileSync('coordinate_analysis_results.txt', 'utf8');
              const issueCount = (results.match(/issue/g) || []).length;
              
              const comment = `## Coordinate System Analysis Results
              
              ${results}
              
              [View detailed analysis results](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error reading analysis results:', error);
            }
  
  coordinate-runtime-validation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-mock pytest-cov pygame numpy
      
      - name: Run coordinate validation tests
        run: |
          pytest -xvs visual_client/tests/test_coordinate_validation.py
      
      - name: Run comprehensive coordinate validation on game modules
        run: |
          python -c "
          import sys
          import logging
          from visual_client.core.utils import coordinate_validation

          # Configure validation with strict mode for CI
          coordinate_validation.configure_validation({
              'strict_mode': True,
              'validate_parameters': True,
              'validate_return_values': True,
              'check_for_direct_tuples': True,
              'max_distance_warning': 10000.0,
              'enabled': True,
          })

          # Run test code that exercises coordinate validation
          try:
              # Import modules to trigger validation
              from visual_client.core.managers import viewport_manager
              from visual_client.core.managers import hex_asset_renderer
              from visual_client.core.utils import render_utils
              
              # Log validation configuration
              logging.info('Coordinate validation configuration: %s', 
                           coordinate_validation._validation_config)
              
              # Get validation stats
              stats = coordinate_validation.get_validation_stats()
              print('Validation stats:', stats)
              
              # Exit with error if there are issues
              if stats['failed_checks'] > 0:
                  sys.exit(1)
                  
          except Exception as e:
              print('Error during validation:', e)
              sys.exit(1)
          "
      
      - name: Report validation results
        if: always()  # Run even if previous step fails
        run: |
          echo "Coordinate runtime validation completed" 