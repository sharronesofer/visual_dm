# Visual DM CI/CD Pipeline
# For full architecture, see docs/ci-cd-architecture.md

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Run Jest Tests
        run: npm run test
        
      - name: Run Type Checks
        run: npm run type-check
        
      - name: Upload Jest Coverage
        uses: actions/upload-artifact@v3
        with:
          name: jest-coverage
          path: coverage/
          
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: visual_dm_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          
      - name: Run Pytest
        run: |
          pytest --cov=app tests/ --cov-report=xml
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: visual_dm_test
          
      - name: Upload Pytest Coverage
        uses: actions/upload-artifact@v3
        with:
          name: pytest-coverage
          path: coverage.xml
      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-logs
          path: .pytest_cache/

  e2e-tests:
    needs: [frontend-tests, backend-tests]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: visual_dm_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install Dependencies
        run: |
          npm ci
          npx cypress install
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          
      - name: Start Backend Server
        run: |
          python run_server.py &
          sleep 10
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: visual_dm_test
          
      - name: Start Frontend Dev Server
        run: |
          npm run dev &
          sleep 10
          
      - name: Run Cypress Tests
        run: npx cypress run
        
      - name: Upload Cypress Results
        uses: actions/upload-artifact@v3
        with:
          name: cypress-results
          path: cypress/videos/
          
  performance-tests:
    needs: [e2e-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
      - name: Start Services
        run: docker-compose up -d
          
      - name: Run k6 Tests
        run: k6 run tests/performance/chat.js
        
      - name: Upload k6 Results
        uses: actions/upload-artifact@v3
        with:
          name: k6-results
          path: k6-report.json

  security-scan:
    needs: [frontend-tests, backend-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:3000'
          
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
      - name: Upload Security Reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            zap-report/
            snyk-report.json

  deploy:
    needs: [e2e-tests, performance-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build and Push Docker Images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/visual-dm-frontend:$IMAGE_TAG -f Dockerfile.frontend .
          docker build -t $ECR_REGISTRY/visual-dm-backend:$IMAGE_TAG -f Dockerfile.backend .
          docker push $ECR_REGISTRY/visual-dm-frontend:$IMAGE_TAG
          docker push $ECR_REGISTRY/visual-dm-backend:$IMAGE_TAG
          
      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster visual-dm --service frontend --force-new-deployment
          aws ecs update-service --cluster visual-dm --service backend --force-new-deployment

  notify:
    if: failure()
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests, performance-tests, security-scan, deploy]
    steps:
      - name: Notify Slack (placeholder)
        run: |
          echo "CI/CD pipeline failed. Please check the logs."
          # Integrate with Slack/email as per docs/ci-cd-architecture.md 