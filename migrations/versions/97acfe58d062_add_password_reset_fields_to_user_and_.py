"""Add password reset fields to User and APIKey model

Revision ID: 97acfe58d062
Revises: 5fe4ea650221
Create Date: 2025-05-16 22:23:17.862930

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '97acfe58d062'
down_revision: Union[str, None] = '5fe4ea650221'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('combat_actions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('combat_id', sa.Integer(), nullable=False),
    sa.Column('actor_id', sa.Integer(), nullable=False),
    sa.Column('target_id', sa.Integer(), nullable=True),
    sa.Column('action_name', sa.String(length=100), nullable=False),
    sa.Column('damage_dealt', sa.Integer(), nullable=True),
    sa.Column('healing_done', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['actor_id'], ['combat_participants.id'], name='fk_combat_action_actor', use_alter=True),
    sa.ForeignKeyConstraint(['combat_id'], ['combats.id'], name='fk_combat_action_combat', use_alter=True),
    sa.ForeignKeyConstraint(['target_id'], ['combat_participants.id'], name='fk_combat_action_target', use_alter=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('interactions',
    sa.Column('initiator_id', sa.Integer(), nullable=True),
    sa.Column('entity1_id', sa.Integer(), nullable=False),
    sa.Column('entity1_type', sa.Enum('individual', 'faction', 'party_group', 'region', 'poi', name='entitytype', native_enum=False), nullable=False),
    sa.Column('entity2_id', sa.Integer(), nullable=False),
    sa.Column('entity2_type', sa.Enum('individual', 'faction', 'party_group', 'region', 'poi', name='entitytype', native_enum=False), nullable=False),
    sa.Column('interaction_type', sa.String(length=50), nullable=True),
    sa.Column('outcome', sa.String(length=50), nullable=True),
    sa.Column('impact', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['initiator_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_interactions_entity1', 'interactions', ['entity1_id', 'entity1_type'], unique=False)
    op.create_index('ix_interactions_entity2', 'interactions', ['entity2_id', 'entity2_type'], unique=False)
    op.create_index('ix_interactions_pair', 'interactions', ['entity1_id', 'entity1_type', 'entity2_id', 'entity2_type'], unique=False)
    op.create_table('inventory_items',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('item_type', sa.String(length=50), nullable=True),
    sa.Column('rarity', sa.String(length=20), nullable=True),
    sa.Column('value', sa.Integer(), nullable=True),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('stack_size', sa.Integer(), nullable=True),
    sa.Column('max_stack', sa.Integer(), nullable=True),
    sa.Column('properties', sa.JSON(), nullable=True),
    sa.Column('requirements', sa.JSON(), nullable=True),
    sa.Column('is_equippable', sa.Boolean(), nullable=True),
    sa.Column('is_consumable', sa.Boolean(), nullable=True),
    sa.Column('is_quest_item', sa.Boolean(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=True),
    sa.Column('item_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['characters.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_inventory_items_owner_id', 'inventory_items', ['owner_id'], unique=False)
    op.create_index('ix_inventory_items_rarity', 'inventory_items', ['rarity'], unique=False)
    op.create_index('ix_inventory_items_type', 'inventory_items', ['item_type'], unique=False)
    op.create_table('location_change_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('location_id', sa.Integer(), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('field_name', sa.String(length=100), nullable=False),
    sa.Column('old_value', sa.JSON(), nullable=True),
    sa.Column('new_value', sa.JSON(), nullable=True),
    sa.Column('change_type', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.ForeignKeyConstraint(['version_id'], ['location_versions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_location_change_logs_location_id', 'location_change_logs', ['location_id'], unique=False)
    op.create_index('ix_location_change_logs_version_id', 'location_change_logs', ['version_id'], unique=False)
    op.add_column('characters', sa.Column('gender', sa.String(length=20), nullable=True))
    op.add_column('characters', sa.Column('age', sa.Integer(), nullable=True))
    op.add_column('characters', sa.Column('xp', sa.Integer(), nullable=True))
    op.add_column('characters', sa.Column('feats', sa.JSON(), nullable=True))
    op.drop_column('characters', 'class')
    op.drop_column('characters', 'background')
    op.drop_column('characters', 'experience')
    op.drop_column('characters', 'gold')
    op.add_column('code_versions', sa.Column('author', sa.String(length=255), nullable=False))
    op.add_column('code_versions', sa.Column('commit_message', sa.Text(), nullable=False))
    op.add_column('code_versions', sa.Column('commit_timestamp', sa.DateTime(), nullable=False))
    op.add_column('code_versions', sa.Column('version_metadata', sa.JSON(), nullable=False))
    op.alter_column('code_versions', 'commit_hash',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=40),
               existing_nullable=False)
    op.alter_column('code_versions', 'branch_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               nullable=True)
    op.alter_column('code_versions', 'tag_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               nullable=True)
    op.create_index('ix_code_versions_branch_name', 'code_versions', ['branch_name'], unique=False)
    op.create_index('ix_code_versions_commit_hash', 'code_versions', ['commit_hash'], unique=False)
    op.create_index('ix_code_versions_tag_name', 'code_versions', ['tag_name'], unique=False)
    op.create_unique_constraint('uq_code_versions_commit_hash', 'code_versions', ['commit_hash'])
    op.add_column('combat_stats', sa.Column('resistances', sa.JSON(), nullable=True))
    op.add_column('combat_stats', sa.Column('vulnerabilities', sa.JSON(), nullable=True))
    op.create_foreign_key('fk_combat_location', 'combats', 'locations', ['location_id'], ['id'], use_alter=True)
    op.create_foreign_key('fk_faction_headquarters', 'factions', 'regions', ['headquarters_id'], ['id'], use_alter=True)
    op.create_foreign_key('fk_faction_leader', 'factions', 'npcs', ['leader_id'], ['id'], use_alter=True)
    op.create_foreign_key(None, 'locations', 'locations', ['parent_location_id'], ['id'])
    op.create_foreign_key(None, 'locations', 'factions', ['owner_faction_id'], ['id'])
    op.create_foreign_key('fk_location_region', 'locations', 'regions', ['region_id'], ['id'], use_alter=True)
    op.add_column('parties', sa.Column('checksum', sa.String(length=64), nullable=True))
    op.add_column('parties', sa.Column('schema_version', sa.String(length=16), nullable=False))
    op.create_foreign_key('fk_party_leader', 'parties', 'characters', ['leader_id'], ['id'], use_alter=True)
    op.create_foreign_key('fk_party_region', 'parties', 'regions', ['region_id'], ['id'], use_alter=True)
    op.add_column('regions', sa.Column('climate', sa.String(length=50), nullable=True))
    op.add_column('regions', sa.Column('terrain', sa.String(length=50), nullable=True))
    op.add_column('regions', sa.Column('level_range', sa.JSON(), nullable=True))
    op.add_column('regions', sa.Column('danger_level', sa.Float(), nullable=True))
    op.add_column('regions', sa.Column('history', sa.Text(), nullable=True))
    op.add_column('regions', sa.Column('terrain_data', sa.JSON(), nullable=True))
    op.add_column('regions', sa.Column('width', sa.Integer(), nullable=True))
    op.add_column('regions', sa.Column('height', sa.Integer(), nullable=True))
    op.add_column('regions', sa.Column('controlling_faction_id', sa.Integer(), nullable=True))
    op.add_column('regions', sa.Column('world_id', sa.Integer(), nullable=True))
    op.create_index('ix_regions_type', 'regions', ['type'], unique=False)
    op.create_foreign_key(None, 'regions', 'worlds', ['world_id'], ['id'])
    op.create_foreign_key('fk_region_controlling_faction', 'regions', 'factions', ['controlling_faction_id'], ['id'], use_alter=True)
    op.drop_column('regions', 'objects')
    op.drop_column('regions', 'current_version_id')
    op.drop_column('regions', 'is_accessible')
    op.drop_column('regions', 'encounters')
    op.drop_column('regions', 'level')
    op.drop_column('regions', 'coordinates')
    op.drop_column('regions', 'points_of_interest')
    op.drop_column('regions', 'owner_faction_id')
    op.drop_column('regions', 'difficulty')
    op.drop_column('regions', 'resources')
    op.drop_column('regions', 'features')
    op.drop_column('regions', 'parent_location_id')
    op.drop_column('regions', 'size')
    op.drop_column('regions', 'npcs')
    op.drop_column('regions', 'state')
    op.drop_column('regions', 'is_discovered')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('regions', sa.Column('is_discovered', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('state', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('npcs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('size', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('parent_location_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('features', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('resources', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('difficulty', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('owner_faction_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('points_of_interest', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('coordinates', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('level', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('encounters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('is_accessible', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('current_version_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('regions', sa.Column('objects', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint('fk_region_controlling_faction', 'regions', type_='foreignkey')
    op.drop_constraint(None, 'regions', type_='foreignkey')
    op.drop_index('ix_regions_type', table_name='regions')
    op.drop_column('regions', 'world_id')
    op.drop_column('regions', 'controlling_faction_id')
    op.drop_column('regions', 'height')
    op.drop_column('regions', 'width')
    op.drop_column('regions', 'terrain_data')
    op.drop_column('regions', 'history')
    op.drop_column('regions', 'danger_level')
    op.drop_column('regions', 'level_range')
    op.drop_column('regions', 'terrain')
    op.drop_column('regions', 'climate')
    op.drop_constraint('fk_party_region', 'parties', type_='foreignkey')
    op.drop_constraint('fk_party_leader', 'parties', type_='foreignkey')
    op.drop_column('parties', 'schema_version')
    op.drop_column('parties', 'checksum')
    op.drop_constraint('fk_location_region', 'locations', type_='foreignkey')
    op.drop_constraint(None, 'locations', type_='foreignkey')
    op.drop_constraint(None, 'locations', type_='foreignkey')
    op.drop_constraint('fk_faction_leader', 'factions', type_='foreignkey')
    op.drop_constraint('fk_faction_headquarters', 'factions', type_='foreignkey')
    op.drop_constraint('fk_combat_location', 'combats', type_='foreignkey')
    op.drop_column('combat_stats', 'vulnerabilities')
    op.drop_column('combat_stats', 'resistances')
    op.drop_constraint('uq_code_versions_commit_hash', 'code_versions', type_='unique')
    op.drop_index('ix_code_versions_tag_name', table_name='code_versions')
    op.drop_index('ix_code_versions_commit_hash', table_name='code_versions')
    op.drop_index('ix_code_versions_branch_name', table_name='code_versions')
    op.alter_column('code_versions', 'tag_name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('code_versions', 'branch_name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('code_versions', 'commit_hash',
               existing_type=sa.String(length=40),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.drop_column('code_versions', 'version_metadata')
    op.drop_column('code_versions', 'commit_timestamp')
    op.drop_column('code_versions', 'commit_message')
    op.drop_column('code_versions', 'author')
    op.add_column('characters', sa.Column('gold', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('characters', sa.Column('experience', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('characters', sa.Column('background', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('characters', sa.Column('class', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.drop_column('characters', 'feats')
    op.drop_column('characters', 'xp')
    op.drop_column('characters', 'age')
    op.drop_column('characters', 'gender')
    op.drop_index('ix_location_change_logs_version_id', table_name='location_change_logs')
    op.drop_index('ix_location_change_logs_location_id', table_name='location_change_logs')
    op.drop_table('location_change_logs')
    op.drop_index('ix_inventory_items_type', table_name='inventory_items')
    op.drop_index('ix_inventory_items_rarity', table_name='inventory_items')
    op.drop_index('ix_inventory_items_owner_id', table_name='inventory_items')
    op.drop_table('inventory_items')
    op.drop_index('ix_interactions_pair', table_name='interactions')
    op.drop_index('ix_interactions_entity2', table_name='interactions')
    op.drop_index('ix_interactions_entity1', table_name='interactions')
    op.drop_table('interactions')
    op.drop_table('combat_actions')
    # ### end Alembic commands ###
