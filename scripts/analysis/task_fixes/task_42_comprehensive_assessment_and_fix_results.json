{
  "timestamp": "2025-05-30 18:24:17",
  "task": "Task 42: Comprehensive Backend System Assessment and Fix",
  "assessment_results": {
    "systems": {
      "economy": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/economy",
        "files": [
          "shop_routes.py",
          "services.py",
          "websocket_events.py",
          "models.py",
          "deployment.py",
          "events.py",
          "resource.py",
          "__init__.py",
          "api_routes.py",
          "integration.py",
          "economy_manager.py",
          "websocket_routes.py",
          "shop_utils.py",
          "resource_service.py",
          "database_service.py",
          "routes.py",
          "routers/__init__.py",
          "migrations/001_create_economy_tables.py",
          "utils/__init__.py",
          "repositories/__init__.py",
          "models/market.py",
          "models/__init__.py",
          "models/commodity_future.py",
          "models/trade_route.py",
          "schemas/__init__.py",
          "services/__init__.py",
          "services/trade_service.py",
          "services/market_service.py",
          "services/futures_service.py"
        ],
        "modules": [
          {
            "file": "shop_routes.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Request"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_db"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy",
                "names": [
                  "EconomyManager"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.shop_utils",
                "names": [
                  "calculate_sale_value",
                  "calculate_resale_value",
                  "summarize_shop",
                  "calculate_price_with_modifiers",
                  "generate_inventory_from_tags"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.models",
                "names": [
                  "Market",
                  "Resource"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_async_session"
                ],
                "line": 25
              },
              {
                "type": "from_import",
                "module": "backend.systems.equipment.loot_utils",
                "names": [
                  "generate_item_identity"
                ],
                "line": 26
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.relationship",
                "names": [
                  "Relationship"
                ],
                "line": 27
              }
            ],
            "functions": [
              {
                "name": "sell_item_to_shop",
                "line": 46,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_shop_inventory",
                "line": 138,
                "args": [
                  "shop_id"
                ],
                "is_async": false
              },
              {
                "name": "buy_item_from_shop",
                "line": 175,
                "args": [
                  "shop_id"
                ],
                "is_async": false
              },
              {
                "name": "preview_price",
                "line": 244,
                "args": [],
                "is_async": false
              },
              {
                "name": "view_shop_inventory",
                "line": 322,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "simple_shop_inventory",
                "line": 413,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "restock_shop",
                "line": 463,
                "args": [
                  "shop_id"
                ],
                "is_async": false
              },
              {
                "name": "get_async_session",
                "line": 30,
                "args": [],
                "is_async": false
              },
              {
                "name": "generate_item_identity",
                "line": 32,
                "args": [],
                "is_async": false
              },
              {
                "name": "filter_item",
                "line": 377,
                "args": [
                  "item"
                ],
                "is_async": false
              },
              {
                "name": "rarity_color",
                "line": 384,
                "args": [
                  "item"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Relationship",
                "line": 34,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.models",
                "names": [
                  "EconomyEntity",
                  "EconomyModel",
                  "CreateEconomyRequest",
                  "UpdateEconomyRequest",
                  "EconomyResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "EconomyNotFoundError",
                  "EconomyValidationError",
                  "EconomyConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_economy_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EconomyService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104f7f7f0>"
                ],
                "methods": [
                  "__init__",
                  "create_economy",
                  "get_economy_by_id",
                  "update_economy",
                  "delete_economy",
                  "list_economys",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_economy_statistics"
                ]
              }
            ]
          },
          {
            "file": "websocket_events.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Set"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "WebSocket",
                  "WebSocketDisconnect"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.events",
                "names": [
                  "EconomyEventBus",
                  "EconomyEvent",
                  "EconomyEventType",
                  "get_event_bus",
                  "on_economy_event_async"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 30,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_setup_event_handlers",
                "line": 55,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EconomyWebSocketManager",
                "line": 22,
                "bases": [],
                "methods": [
                  "__init__",
                  "_setup_event_handlers",
                  "_handle_resource_event",
                  "_handle_market_event",
                  "_handle_price_event",
                  "_handle_trade_event",
                  "_handle_transaction_event",
                  "_handle_analytics_event",
                  "_handle_forecast_event",
                  "_handle_system_event",
                  "connect",
                  "disconnect",
                  "subscribe",
                  "unsubscribe",
                  "handle_message",
                  "broadcast_market_update",
                  "broadcast_price_update",
                  "broadcast_transaction_completed",
                  "broadcast_trade_route_update",
                  "broadcast_economic_analytics",
                  "broadcast_economic_forecast",
                  "broadcast_economy_status",
                  "broadcast_tick_results",
                  "_broadcast_to_channel",
                  "_send_to_websocket",
                  "_send_economy_status",
                  "_send_market_data",
                  "_send_price_updates"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EconomyBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "EconomyModel",
                "line": 36,
                "bases": [
                  "EconomyBaseModel"
                ],
                "methods": []
              },
              {
                "name": "EconomyEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateEconomyRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateEconomyRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "EconomyResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "EconomyListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "deployment.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 10
              },
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Tuple"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.economy_manager",
                "names": [
                  "EconomyManager"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.database_service",
                "names": [
                  "get_database_service"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.events",
                "names": [
                  "get_event_bus",
                  "EconomyEventType",
                  "publish_system_event"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.websocket_events",
                "names": [
                  "economy_websocket_manager"
                ],
                "line": 20
              },
              {
                "type": "import",
                "module": "psutil",
                "alias": null,
                "line": 386
              }
            ],
            "functions": [
              {
                "name": "get_deployment_manager",
                "line": 623,
                "args": [
                  "config"
                ],
                "is_async": false
              },
              {
                "name": "get_deployment_metrics",
                "line": 659,
                "args": [],
                "is_async": false
              },
              {
                "name": "from_environment",
                "line": 59,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 84,
                "args": [
                  "self",
                  "config"
                ],
                "is_async": false
              },
              {
                "name": "_configure_logging",
                "line": 106,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_deployment_info",
                "line": 480,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_metrics",
                "line": 507,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_get_deployment_recommendations",
                "line": 571,
                "args": [
                  "self",
                  "health_checks"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "HealthStatus",
                "line": 25,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "HealthCheck",
                "line": 33,
                "bases": [],
                "methods": []
              },
              {
                "name": "DeploymentConfig",
                "line": 43,
                "bases": [],
                "methods": [
                  "from_environment"
                ]
              },
              {
                "name": "EconomyDeploymentManager",
                "line": 76,
                "bases": [],
                "methods": [
                  "__init__",
                  "_configure_logging",
                  "initialize_system",
                  "shutdown_system",
                  "run_health_checks",
                  "_check_database_health",
                  "_check_economy_manager_health",
                  "_check_event_system_health",
                  "_check_websocket_health",
                  "_check_performance_health",
                  "_check_overall_health",
                  "get_deployment_info",
                  "get_metrics",
                  "create_deployment_report",
                  "_get_deployment_recommendations"
                ]
              }
            ]
          },
          {
            "file": "events.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Callable",
                  "Union"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 12
              },
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 13
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "get_event_bus",
                "line": 405,
                "args": [],
                "is_async": false
              },
              {
                "name": "publish_resource_event",
                "line": 413,
                "args": [
                  "event_type",
                  "resource_id",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "publish_market_event",
                "line": 424,
                "args": [
                  "event_type",
                  "market_id",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "publish_price_event",
                "line": 435,
                "args": [
                  "resource_id",
                  "market_id",
                  "old_price",
                  "new_price"
                ],
                "is_async": false
              },
              {
                "name": "publish_trade_event",
                "line": 448,
                "args": [
                  "event_type",
                  "trade_route_id",
                  "origin_region_id",
                  "destination_region_id"
                ],
                "is_async": false
              },
              {
                "name": "publish_transaction_event",
                "line": 460,
                "args": [
                  "event_type",
                  "transaction_id",
                  "buyer_id",
                  "seller_id"
                ],
                "is_async": false
              },
              {
                "name": "publish_system_event",
                "line": 472,
                "args": [
                  "event_type"
                ],
                "is_async": false
              },
              {
                "name": "on_economy_event",
                "line": 481,
                "args": [
                  "event_type"
                ],
                "is_async": false
              },
              {
                "name": "on_economy_event_async",
                "line": 488,
                "args": [
                  "event_type"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 66,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_json",
                "line": 76,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 88,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 104,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 121,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 143,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 165,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 185,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "subscribe",
                "line": 194,
                "args": [
                  "self",
                  "event_type",
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "subscribe_async",
                "line": 207,
                "args": [
                  "self",
                  "event_type",
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "subscribe_all",
                "line": 220,
                "args": [
                  "self",
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "subscribe_all_async",
                "line": 230,
                "args": [
                  "self",
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "unsubscribe",
                "line": 240,
                "args": [
                  "self",
                  "event_type",
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "unsubscribe_async",
                "line": 255,
                "args": [
                  "self",
                  "event_type",
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "publish",
                "line": 270,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "_add_to_history",
                "line": 340,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "get_event_history",
                "line": 346,
                "args": [
                  "self",
                  "event_type",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "clear_history",
                "line": 365,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_subscriber_count",
                "line": 370,
                "args": [
                  "self",
                  "event_type"
                ],
                "is_async": false
              },
              {
                "name": "get_stats",
                "line": 392,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "decorator",
                "line": 483,
                "args": [
                  "func"
                ],
                "is_async": false
              },
              {
                "name": "decorator",
                "line": 490,
                "args": [
                  "func"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EconomyEventType",
                "line": 19,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "EconomyEvent",
                "line": 58,
                "bases": [],
                "methods": [
                  "to_dict",
                  "to_json"
                ]
              },
              {
                "name": "ResourceEvent",
                "line": 81,
                "bases": [
                  "EconomyEvent"
                ],
                "methods": [
                  "__post_init__"
                ]
              },
              {
                "name": "MarketEvent",
                "line": 98,
                "bases": [
                  "EconomyEvent"
                ],
                "methods": [
                  "__post_init__"
                ]
              },
              {
                "name": "PriceEvent",
                "line": 113,
                "bases": [
                  "EconomyEvent"
                ],
                "methods": [
                  "__post_init__"
                ]
              },
              {
                "name": "TradeEvent",
                "line": 134,
                "bases": [
                  "EconomyEvent"
                ],
                "methods": [
                  "__post_init__"
                ]
              },
              {
                "name": "TransactionEvent",
                "line": 155,
                "bases": [
                  "EconomyEvent"
                ],
                "methods": [
                  "__post_init__"
                ]
              },
              {
                "name": "EconomyEventBus",
                "line": 177,
                "bases": [],
                "methods": [
                  "__init__",
                  "subscribe",
                  "subscribe_async",
                  "subscribe_all",
                  "subscribe_all_async",
                  "unsubscribe",
                  "unsubscribe_async",
                  "publish",
                  "publish_async",
                  "_safe_async_call",
                  "_add_to_history",
                  "get_event_history",
                  "clear_history",
                  "get_subscriber_count",
                  "get_stats"
                ]
              }
            ]
          },
          {
            "file": "resource.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 5
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 6
              }
            ],
            "functions": [
              {
                "name": "dict",
                "line": 29,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 58,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 73,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "add_resource",
                "line": 76,
                "args": [
                  "self",
                  "resource"
                ],
                "is_async": false
              },
              {
                "name": "get_resource",
                "line": 80,
                "args": [
                  "self",
                  "resource_id"
                ],
                "is_async": false
              },
              {
                "name": "list_resources",
                "line": 84,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ResourceData",
                "line": 9,
                "bases": [],
                "methods": [
                  "dict"
                ]
              },
              {
                "name": "Resource",
                "line": 48,
                "bases": [],
                "methods": [
                  "to_dict"
                ]
              },
              {
                "name": "ResourceManager",
                "line": 70,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_resource",
                  "get_resource",
                  "list_resources"
                ]
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.economy.economy_manager",
                "names": [
                  "EconomyManager"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.shop_routes",
                "names": [
                  "shop_bp"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.routes",
                "names": [
                  "economy_router"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.integration",
                "names": [
                  "EconomyIntegrationManager",
                  "get_integration_manager",
                  "initialize_economy_system",
                  "start_economy_system",
                  "shutdown_economy_system",
                  "process_economic_tick",
                  "get_economy_status",
                  "run_economy_health_check"
                ],
                "line": 19
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "api_routes.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Union"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "HTTPException",
                  "Depends",
                  "Query",
                  "Body"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "fastapi.responses",
                "names": [
                  "JSONResponse"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.economy_manager",
                "names": [
                  "EconomyManager"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.resource",
                "names": [
                  "ResourceData"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.models.market",
                "names": [
                  "MarketData"
                ],
                "line": 19
              }
            ],
            "functions": [
              {
                "name": "get_db_session",
                "line": 28,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_economy_manager",
                "line": 79,
                "args": [
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EconomyStatusResponse",
                "line": 33,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "ResourceResponse",
                "line": 39,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MarketResponse",
                "line": 48,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "PriceCalculationResponse",
                "line": 54,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "EconomicAnalyticsResponse",
                "line": 58,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "EconomicForecastResponse",
                "line": 64,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "TickProcessingResponse",
                "line": 70,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "integration.py",
            "imports": [
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Callable"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "contextlib",
                "names": [
                  "asynccontextmanager"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.economy_manager",
                "names": [
                  "EconomyManager"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.events",
                "names": [
                  "EconomyEventBus",
                  "EconomyEventType",
                  "EconomyEvent",
                  "ResourceEvent",
                  "MarketEvent",
                  "PriceEvent",
                  "TradeEvent",
                  "TransactionEvent",
                  "get_event_bus",
                  "publish_system_event"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.websocket_events",
                "names": [
                  "EconomyWebSocketManager",
                  "notify_market_updated",
                  "notify_price_updated",
                  "notify_transaction_completed",
                  "notify_trade_route_updated",
                  "notify_economic_analytics",
                  "notify_economy_status"
                ],
                "line": 28
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.database_service",
                "names": [
                  "EconomyDatabaseService",
                  "get_database_service",
                  "database_session"
                ],
                "line": 37
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.deployment",
                "names": [
                  "EconomyDeploymentManager",
                  "DeploymentConfig",
                  "get_deployment_manager"
                ],
                "line": 42
              }
            ],
            "functions": [
              {
                "name": "get_integration_manager",
                "line": 535,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_economy_status",
                "line": 585,
                "args": [],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 61,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_instance",
                "line": 91,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "get_status",
                "line": 334,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_metrics",
                "line": 350,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_handle_resource_event",
                "line": 422,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "_handle_market_event",
                "line": 439,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "_handle_price_event",
                "line": 455,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "_handle_trade_event",
                "line": 473,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "_handle_transaction_event",
                "line": 489,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "_handle_analytics_event",
                "line": 505,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EconomyIntegrationManager",
                "line": 50,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_instance",
                  "initialize",
                  "start",
                  "shutdown",
                  "process_economic_tick",
                  "handle_cross_system_event",
                  "get_status",
                  "get_metrics",
                  "run_health_check",
                  "_initialize_database",
                  "_setup_event_handlers",
                  "_handle_resource_event",
                  "_handle_market_event",
                  "_handle_price_event",
                  "_handle_trade_event",
                  "_handle_transaction_event",
                  "_handle_analytics_event",
                  "_handle_gameplay_event",
                  "_handle_political_event",
                  "_handle_world_event"
                ]
              }
            ]
          },
          {
            "file": "economy_manager.py",
            "imports": [
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Tuple",
                  "Union"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 13
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 14
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 15
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.models",
                "names": [
                  "Resource",
                  "ResourceData",
                  "TradeRoute",
                  "TradeRouteData",
                  "Market",
                  "MarketData",
                  "CommodityFuture",
                  "CommodityFutureData"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.services",
                "names": [
                  "ResourceService",
                  "TradeService",
                  "MarketService",
                  "FuturesService"
                ],
                "line": 25
              }
            ],
            "functions": [
              {
                "name": "get_instance",
                "line": 44,
                "args": [
                  "cls",
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 57,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "get_resource",
                "line": 78,
                "args": [
                  "self",
                  "resource_id"
                ],
                "is_async": false
              },
              {
                "name": "get_resources_by_region",
                "line": 82,
                "args": [
                  "self",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "create_resource",
                "line": 86,
                "args": [
                  "self",
                  "resource_data"
                ],
                "is_async": false
              },
              {
                "name": "update_resource",
                "line": 90,
                "args": [
                  "self",
                  "resource_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "delete_resource",
                "line": 94,
                "args": [
                  "self",
                  "resource_id"
                ],
                "is_async": false
              },
              {
                "name": "adjust_resource_amount",
                "line": 98,
                "args": [
                  "self",
                  "resource_id",
                  "amount_change"
                ],
                "is_async": false
              },
              {
                "name": "get_available_resources",
                "line": 102,
                "args": [
                  "self",
                  "region_id",
                  "resource_type"
                ],
                "is_async": false
              },
              {
                "name": "transfer_resource",
                "line": 107,
                "args": [
                  "self",
                  "source_region_id",
                  "dest_region_id",
                  "resource_id",
                  "amount"
                ],
                "is_async": false
              },
              {
                "name": "get_trade_route",
                "line": 114,
                "args": [
                  "self",
                  "route_id"
                ],
                "is_async": false
              },
              {
                "name": "get_trade_routes_by_region",
                "line": 118,
                "args": [
                  "self",
                  "region_id",
                  "as_origin",
                  "as_destination"
                ],
                "is_async": false
              },
              {
                "name": "create_trade_route",
                "line": 123,
                "args": [
                  "self",
                  "route_data"
                ],
                "is_async": false
              },
              {
                "name": "update_trade_route",
                "line": 127,
                "args": [
                  "self",
                  "route_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "delete_trade_route",
                "line": 131,
                "args": [
                  "self",
                  "route_id"
                ],
                "is_async": false
              },
              {
                "name": "process_trade_routes",
                "line": 135,
                "args": [
                  "self",
                  "tick_count"
                ],
                "is_async": false
              },
              {
                "name": "get_market",
                "line": 141,
                "args": [
                  "self",
                  "market_id"
                ],
                "is_async": false
              },
              {
                "name": "get_markets_by_region",
                "line": 145,
                "args": [
                  "self",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "create_market",
                "line": 149,
                "args": [
                  "self",
                  "market_data"
                ],
                "is_async": false
              },
              {
                "name": "update_market",
                "line": 153,
                "args": [
                  "self",
                  "market_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "delete_market",
                "line": 157,
                "args": [
                  "self",
                  "market_id"
                ],
                "is_async": false
              },
              {
                "name": "calculate_price",
                "line": 161,
                "args": [
                  "self",
                  "resource_id",
                  "market_id",
                  "quantity"
                ],
                "is_async": false
              },
              {
                "name": "update_market_conditions",
                "line": 166,
                "args": [
                  "self",
                  "region_id",
                  "event_modifiers"
                ],
                "is_async": false
              },
              {
                "name": "get_resource_price_trends",
                "line": 171,
                "args": [
                  "self",
                  "resource_id",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "get_future",
                "line": 178,
                "args": [
                  "self",
                  "future_id"
                ],
                "is_async": false
              },
              {
                "name": "get_futures_by_resource",
                "line": 182,
                "args": [
                  "self",
                  "resource_id"
                ],
                "is_async": false
              },
              {
                "name": "get_futures_by_market",
                "line": 186,
                "args": [
                  "self",
                  "market_id"
                ],
                "is_async": false
              },
              {
                "name": "get_open_futures",
                "line": 190,
                "args": [
                  "self",
                  "market_id"
                ],
                "is_async": false
              },
              {
                "name": "create_future",
                "line": 194,
                "args": [
                  "self",
                  "future_data"
                ],
                "is_async": false
              },
              {
                "name": "update_future",
                "line": 198,
                "args": [
                  "self",
                  "future_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "match_buyer",
                "line": 202,
                "args": [
                  "self",
                  "future_id",
                  "buyer_id"
                ],
                "is_async": false
              },
              {
                "name": "settle_future",
                "line": 206,
                "args": [
                  "self",
                  "future_id"
                ],
                "is_async": false
              },
              {
                "name": "process_expiring_futures",
                "line": 210,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "forecast_future_prices",
                "line": 214,
                "args": [
                  "self",
                  "resource_id",
                  "market_id",
                  "time_periods"
                ],
                "is_async": false
              },
              {
                "name": "process_tick",
                "line": 222,
                "args": [
                  "self",
                  "tick_count"
                ],
                "is_async": false
              },
              {
                "name": "calculate_price_index",
                "line": 343,
                "args": [
                  "self",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "calculate_tax_revenue",
                "line": 383,
                "args": [
                  "self",
                  "market_id"
                ],
                "is_async": false
              },
              {
                "name": "generate_economic_events",
                "line": 405,
                "args": [
                  "self",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "process_economic_event",
                "line": 443,
                "args": [
                  "self",
                  "event_type",
                  "region_id",
                  "affected_resources",
                  "severity"
                ],
                "is_async": false
              },
              {
                "name": "generate_economic_forecast",
                "line": 478,
                "args": [
                  "self",
                  "region_id",
                  "time_periods"
                ],
                "is_async": false
              },
              {
                "name": "get_economic_analytics",
                "line": 512,
                "args": [
                  "self",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "get_economy_status",
                "line": 549,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "initialize_economy",
                "line": 570,
                "args": [
                  "self",
                  "config"
                ],
                "is_async": false
              },
              {
                "name": "shutdown_economy",
                "line": 607,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_create_market_modifiers_from_trades",
                "line": 626,
                "args": [
                  "self",
                  "region_id",
                  "trade_events"
                ],
                "is_async": false
              },
              {
                "name": "_generate_economy_events",
                "line": 667,
                "args": [
                  "self",
                  "tick_count",
                  "regions_processed"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EconomyManager",
                "line": 32,
                "bases": [],
                "methods": [
                  "get_instance",
                  "__init__",
                  "get_resource",
                  "get_resources_by_region",
                  "create_resource",
                  "update_resource",
                  "delete_resource",
                  "adjust_resource_amount",
                  "get_available_resources",
                  "transfer_resource",
                  "get_trade_route",
                  "get_trade_routes_by_region",
                  "create_trade_route",
                  "update_trade_route",
                  "delete_trade_route",
                  "process_trade_routes",
                  "get_market",
                  "get_markets_by_region",
                  "create_market",
                  "update_market",
                  "delete_market",
                  "calculate_price",
                  "update_market_conditions",
                  "get_resource_price_trends",
                  "get_future",
                  "get_futures_by_resource",
                  "get_futures_by_market",
                  "get_open_futures",
                  "create_future",
                  "update_future",
                  "match_buyer",
                  "settle_future",
                  "process_expiring_futures",
                  "forecast_future_prices",
                  "process_tick",
                  "calculate_price_index",
                  "calculate_tax_revenue",
                  "generate_economic_events",
                  "process_economic_event",
                  "generate_economic_forecast",
                  "get_economic_analytics",
                  "get_economy_status",
                  "initialize_economy",
                  "shutdown_economy",
                  "_create_market_modifiers_from_trades",
                  "_generate_economy_events"
                ]
              }
            ]
          },
          {
            "file": "websocket_routes.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "WebSocket",
                  "WebSocketDisconnect",
                  "Query"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.websocket_events",
                "names": [
                  "economy_websocket_manager"
                ],
                "line": 13
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "shop_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Tuple",
                  "Union"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy",
                "names": [
                  "EconomyManager"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.equipment.inventory_utils",
                "names": [
                  "equipment_rules"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.equipment.loot_utils",
                "names": [
                  "generate_item_identity"
                ],
                "line": 20
              }
            ],
            "functions": [
              {
                "name": "get_shop_inventory",
                "line": 36,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "get_expected_gold_at_level",
                "line": 46,
                "args": [
                  "level"
                ],
                "is_async": false
              },
              {
                "name": "calculate_sale_value",
                "line": 72,
                "args": [
                  "item",
                  "player_level",
                  "economy_manager"
                ],
                "is_async": false
              },
              {
                "name": "calculate_resale_value",
                "line": 100,
                "args": [
                  "item",
                  "player_level",
                  "economy_manager"
                ],
                "is_async": false
              },
              {
                "name": "format_shop_inventory",
                "line": 124,
                "args": [
                  "inventory"
                ],
                "is_async": false
              },
              {
                "name": "summarize_shop",
                "line": 143,
                "args": [
                  "shop_id",
                  "shop_data",
                  "sort_by",
                  "filter_type",
                  "page",
                  "page_size"
                ],
                "is_async": false
              },
              {
                "name": "tick_shop_inventory",
                "line": 187,
                "args": [
                  "shop_data",
                  "max_days"
                ],
                "is_async": false
              },
              {
                "name": "buy_item_from_shop",
                "line": 217,
                "args": [
                  "character_id",
                  "npc_id",
                  "item_id"
                ],
                "is_async": false
              },
              {
                "name": "restock_shop_inventory",
                "line": 261,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "calculate_price_with_modifiers",
                "line": 285,
                "args": [
                  "base_price",
                  "character_attributes",
                  "faction_reputation"
                ],
                "is_async": false
              },
              {
                "name": "generate_inventory_from_tags",
                "line": 313,
                "args": [
                  "tags",
                  "economy_manager"
                ],
                "is_async": false
              },
              {
                "name": "generate_item_identity",
                "line": 24,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "resource_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any"
                ],
                "line": 1
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 2
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.resource",
                "names": [
                  "Resource"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.resource",
                "names": [
                  "Resource"
                ],
                "line": 32
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.resource",
                "names": [
                  "Resource"
                ],
                "line": 57
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 7,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "get_resource",
                "line": 16,
                "args": [
                  "self",
                  "resource_id"
                ],
                "is_async": false
              },
              {
                "name": "get_resources_by_region",
                "line": 29,
                "args": [
                  "self",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "create_resource",
                "line": 54,
                "args": [
                  "self",
                  "resource_data"
                ],
                "is_async": false
              },
              {
                "name": "update_resource",
                "line": 62,
                "args": [
                  "self",
                  "resource_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "delete_resource",
                "line": 71,
                "args": [
                  "self",
                  "resource_id"
                ],
                "is_async": false
              },
              {
                "name": "adjust_resource_amount",
                "line": 76,
                "args": [
                  "self",
                  "resource_id",
                  "amount_change"
                ],
                "is_async": false
              },
              {
                "name": "get_available_resources",
                "line": 83,
                "args": [
                  "self",
                  "region_id",
                  "resource_type"
                ],
                "is_async": false
              },
              {
                "name": "transfer_resource",
                "line": 96,
                "args": [
                  "self",
                  "source_region_id",
                  "dest_region_id",
                  "resource_id",
                  "amount"
                ],
                "is_async": false
              },
              {
                "name": "population_impact_on_resources",
                "line": 101,
                "args": [
                  "self",
                  "region_id",
                  "previous_population",
                  "current_population"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ResourceService",
                "line": 6,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_resource",
                  "get_resources_by_region",
                  "create_resource",
                  "update_resource",
                  "delete_resource",
                  "adjust_resource_amount",
                  "get_available_resources",
                  "transfer_resource",
                  "population_impact_on_resources"
                ]
              }
            ]
          },
          {
            "file": "database_service.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "Generator",
                  "Any",
                  "Dict",
                  "List"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "contextlib",
                "names": [
                  "contextmanager"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "create_engine",
                  "text"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "sessionmaker",
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.exc",
                "names": [
                  "SQLAlchemyError",
                  "IntegrityError"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.pool",
                "names": [
                  "StaticPool"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.models",
                "names": [
                  "Resource",
                  "Market",
                  "TradeRoute",
                  "CommodityFuture"
                ],
                "line": 134
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "Base"
                ],
                "line": 137
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.models",
                "names": [
                  "Resource",
                  "Market",
                  "TradeRoute",
                  "CommodityFuture"
                ],
                "line": 153
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "Base"
                ],
                "line": 156
              }
            ],
            "functions": [
              {
                "name": "get_database_service",
                "line": 343,
                "args": [
                  "database_url"
                ],
                "is_async": false
              },
              {
                "name": "get_db_session",
                "line": 358,
                "args": [],
                "is_async": false
              },
              {
                "name": "database_session",
                "line": 370,
                "args": [
                  "database_url"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 27,
                "args": [
                  "self",
                  "database_url"
                ],
                "is_async": false
              },
              {
                "name": "_initialize_engine",
                "line": 39,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_session",
                "line": 78,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "create_session",
                "line": 100,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "test_connection",
                "line": 111,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "create_tables",
                "line": 127,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "drop_tables",
                "line": 146,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "execute_raw_sql",
                "line": 165,
                "args": [
                  "self",
                  "sql",
                  "params"
                ],
                "is_async": false
              },
              {
                "name": "get_table_info",
                "line": 191,
                "args": [
                  "self",
                  "table_name"
                ],
                "is_async": false
              },
              {
                "name": "get_database_stats",
                "line": 236,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "backup_data",
                "line": 270,
                "args": [
                  "self",
                  "table_name"
                ],
                "is_async": false
              },
              {
                "name": "restore_data",
                "line": 286,
                "args": [
                  "self",
                  "table_name",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "optimize_database",
                "line": 317,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "close",
                "line": 334,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EconomyDatabaseService",
                "line": 19,
                "bases": [],
                "methods": [
                  "__init__",
                  "_initialize_engine",
                  "get_session",
                  "create_session",
                  "test_connection",
                  "create_tables",
                  "drop_tables",
                  "execute_raw_sql",
                  "get_table_info",
                  "get_database_stats",
                  "backup_data",
                  "restore_data",
                  "optimize_database",
                  "close"
                ]
              }
            ]
          },
          {
            "file": "routes.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "Query",
                  "Path"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Union"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.economy_manager",
                "names": [
                  "EconomyManager"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.database_service",
                "names": [
                  "get_db_session"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.models",
                "names": [
                  "ResourceData",
                  "MarketData",
                  "TradeRouteData",
                  "CommodityFutureData"
                ],
                "line": 15
              }
            ],
            "functions": [
              {
                "name": "get_economy_manager",
                "line": 118,
                "args": [
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EconomyStatusResponse",
                "line": 21,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "ProcessTickRequest",
                "line": 31,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "ProcessTickResponse",
                "line": 35,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "EconomicMetricsResponse",
                "line": 44,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "ResourceCreateRequest",
                "line": 53,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "ResourceUpdateRequest",
                "line": 61,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "ResourceTransferRequest",
                "line": 67,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MarketCreateRequest",
                "line": 73,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MarketUpdateRequest",
                "line": 80,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "TradeRouteCreateRequest",
                "line": 87,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "TradeRouteUpdateRequest",
                "line": 95,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "FutureCreateRequest",
                "line": 102,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "FutureUpdateRequest",
                "line": 111,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "migrations/001_create_economy_tables.py",
            "imports": [
              {
                "type": "from_import",
                "module": "alembic",
                "names": [
                  "op"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "sqlalchemy",
                "alias": "sa",
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects",
                "names": [
                  "postgresql"
                ],
                "line": 10
              }
            ],
            "functions": [
              {
                "name": "upgrade",
                "line": 18,
                "args": [],
                "is_async": false
              },
              {
                "name": "downgrade",
                "line": 230,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/market.py",
            "imports": [
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "Integer",
                  "String",
                  "Float",
                  "ForeignKey",
                  "DateTime",
                  "Boolean",
                  "JSON"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "Base"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "dict",
                "line": 35,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_price_modifier",
                "line": 51,
                "args": [
                  "self",
                  "resource_id"
                ],
                "is_async": false
              },
              {
                "name": "set_price_modifier",
                "line": 55,
                "args": [
                  "self",
                  "resource_id",
                  "modifier"
                ],
                "is_async": false
              },
              {
                "name": "update_supply_demand",
                "line": 59,
                "args": [
                  "self",
                  "resource_id",
                  "supply",
                  "demand"
                ],
                "is_async": false
              },
              {
                "name": "record_trade",
                "line": 71,
                "args": [
                  "self",
                  "resource_id",
                  "volume"
                ],
                "is_async": false
              },
              {
                "name": "to_data_model",
                "line": 104,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_data_model",
                "line": 121,
                "args": [
                  "cls",
                  "data_model"
                ],
                "is_async": false
              },
              {
                "name": "get_price_modifier",
                "line": 136,
                "args": [
                  "self",
                  "resource_id"
                ],
                "is_async": false
              },
              {
                "name": "set_price_modifier",
                "line": 142,
                "args": [
                  "self",
                  "resource_id",
                  "modifier"
                ],
                "is_async": false
              },
              {
                "name": "update_supply_demand",
                "line": 148,
                "args": [
                  "self",
                  "resource_id",
                  "supply",
                  "demand"
                ],
                "is_async": false
              },
              {
                "name": "record_trade",
                "line": 163,
                "args": [
                  "self",
                  "resource_id",
                  "volume"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MarketData",
                "line": 16,
                "bases": [],
                "methods": [
                  "dict",
                  "get_price_modifier",
                  "set_price_modifier",
                  "update_supply_demand",
                  "record_trade"
                ]
              },
              {
                "name": "Market",
                "line": 77,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "to_data_model",
                  "from_data_model",
                  "get_price_modifier",
                  "set_price_modifier",
                  "update_supply_demand",
                  "record_trade"
                ]
              }
            ]
          },
          {
            "file": "models/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.economy.resource",
                "names": [
                  "Resource",
                  "ResourceData"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.models.trade_route",
                "names": [
                  "TradeRoute",
                  "TradeRouteData"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.models.market",
                "names": [
                  "Market",
                  "MarketData"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.models.commodity_future",
                "names": [
                  "CommodityFuture",
                  "CommodityFutureData"
                ],
                "line": 8
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/commodity_future.py",
            "imports": [
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Float",
                  "DateTime",
                  "Boolean",
                  "ForeignKey",
                  "Integer"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "JSONB"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "Base"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "to_dict",
                "line": 70,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_data",
                "line": 92,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CommodityFutureData",
                "line": 20,
                "bases": [],
                "methods": []
              },
              {
                "name": "CommodityFuture",
                "line": 44,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "to_dict",
                  "from_data"
                ]
              }
            ]
          },
          {
            "file": "models/trade_route.py",
            "imports": [
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "Integer",
                  "String",
                  "Float",
                  "ForeignKey",
                  "DateTime",
                  "Boolean",
                  "JSON"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "Base"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "dict",
                "line": 36,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_data_model",
                "line": 83,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_data_model",
                "line": 104,
                "args": [
                  "cls",
                  "data_model"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "TradeRouteData",
                "line": 17,
                "bases": [],
                "methods": [
                  "dict"
                ]
              },
              {
                "name": "TradeRoute",
                "line": 53,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "to_data_model",
                  "from_data_model"
                ]
              }
            ]
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.economy.resource_service",
                "names": [
                  "ResourceService"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.services.trade_service",
                "names": [
                  "TradeService"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.services.market_service",
                "names": [
                  "MarketService"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.services.futures_service",
                "names": [
                  "FuturesService"
                ],
                "line": 8
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/trade_service.py",
            "imports": [
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 6
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 7
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Tuple",
                  "Union"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.models",
                "names": [
                  "TradeRoute",
                  "TradeRouteData",
                  "Resource"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.resource_service",
                "names": [
                  "ResourceService"
                ],
                "line": 15
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 22,
                "args": [
                  "self",
                  "db_session",
                  "resource_service"
                ],
                "is_async": false
              },
              {
                "name": "get_trade_route",
                "line": 33,
                "args": [
                  "self",
                  "route_id"
                ],
                "is_async": false
              },
              {
                "name": "get_trade_routes_by_region",
                "line": 63,
                "args": [
                  "self",
                  "region_id",
                  "as_origin",
                  "as_destination"
                ],
                "is_async": false
              },
              {
                "name": "create_trade_route",
                "line": 102,
                "args": [
                  "self",
                  "route_data"
                ],
                "is_async": false
              },
              {
                "name": "update_trade_route",
                "line": 143,
                "args": [
                  "self",
                  "route_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "delete_trade_route",
                "line": 182,
                "args": [
                  "self",
                  "route_id"
                ],
                "is_async": false
              },
              {
                "name": "process_trade_routes",
                "line": 216,
                "args": [
                  "self",
                  "tick_count"
                ],
                "is_async": false
              },
              {
                "name": "_determine_trade_resources",
                "line": 285,
                "args": [
                  "self",
                  "route"
                ],
                "is_async": false
              },
              {
                "name": "clear_cache",
                "line": 322,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "TradeService",
                "line": 19,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_trade_route",
                  "get_trade_routes_by_region",
                  "create_trade_route",
                  "update_trade_route",
                  "delete_trade_route",
                  "process_trade_routes",
                  "_determine_trade_resources",
                  "clear_cache"
                ]
              }
            ]
          },
          {
            "file": "services/market_service.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Tuple",
                  "Union"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.models.market",
                "names": [
                  "Market",
                  "MarketData"
                ],
                "line": 12
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 19,
                "args": [
                  "self",
                  "db_session",
                  "resource_service"
                ],
                "is_async": false
              },
              {
                "name": "get_market",
                "line": 30,
                "args": [
                  "self",
                  "market_id"
                ],
                "is_async": false
              },
              {
                "name": "get_markets_by_region",
                "line": 54,
                "args": [
                  "self",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "create_market",
                "line": 80,
                "args": [
                  "self",
                  "market_data"
                ],
                "is_async": false
              },
              {
                "name": "update_market",
                "line": 110,
                "args": [
                  "self",
                  "market_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "delete_market",
                "line": 136,
                "args": [
                  "self",
                  "market_id"
                ],
                "is_async": false
              },
              {
                "name": "calculate_price",
                "line": 157,
                "args": [
                  "self",
                  "resource_id",
                  "market_id",
                  "quantity"
                ],
                "is_async": false
              },
              {
                "name": "update_market_conditions",
                "line": 199,
                "args": [
                  "self",
                  "region_id",
                  "event_modifiers"
                ],
                "is_async": false
              },
              {
                "name": "get_resource_price_trends",
                "line": 233,
                "args": [
                  "self",
                  "resource_id",
                  "region_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MarketService",
                "line": 16,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_market",
                  "get_markets_by_region",
                  "create_market",
                  "update_market",
                  "delete_market",
                  "calculate_price",
                  "update_market_conditions",
                  "get_resource_price_trends"
                ]
              }
            ]
          },
          {
            "file": "services/futures_service.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Tuple",
                  "Union"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "or_",
                  "and_"
                ],
                "line": 14
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.models",
                "names": [
                  "CommodityFuture",
                  "CommodityFutureData",
                  "Resource",
                  "Market"
                ],
                "line": 18
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 34,
                "args": [
                  "self",
                  "db_session",
                  "resource_service",
                  "market_service"
                ],
                "is_async": false
              },
              {
                "name": "get_future",
                "line": 48,
                "args": [
                  "self",
                  "future_id"
                ],
                "is_async": false
              },
              {
                "name": "get_futures_by_resource",
                "line": 69,
                "args": [
                  "self",
                  "resource_id"
                ],
                "is_async": false
              },
              {
                "name": "get_futures_by_market",
                "line": 90,
                "args": [
                  "self",
                  "market_id"
                ],
                "is_async": false
              },
              {
                "name": "get_open_futures",
                "line": 111,
                "args": [
                  "self",
                  "market_id"
                ],
                "is_async": false
              },
              {
                "name": "create_future",
                "line": 137,
                "args": [
                  "self",
                  "future_data"
                ],
                "is_async": false
              },
              {
                "name": "update_future",
                "line": 204,
                "args": [
                  "self",
                  "future_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "match_buyer",
                "line": 254,
                "args": [
                  "self",
                  "future_id",
                  "buyer_id"
                ],
                "is_async": false
              },
              {
                "name": "settle_future",
                "line": 298,
                "args": [
                  "self",
                  "future_id"
                ],
                "is_async": false
              },
              {
                "name": "process_expiring_futures",
                "line": 369,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "forecast_future_prices",
                "line": 449,
                "args": [
                  "self",
                  "resource_id",
                  "market_id",
                  "time_periods"
                ],
                "is_async": false
              },
              {
                "name": "clear_cache",
                "line": 581,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "FuturesService",
                "line": 23,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_future",
                  "get_futures_by_resource",
                  "get_futures_by_market",
                  "get_open_futures",
                  "create_future",
                  "update_future",
                  "match_buyer",
                  "settle_future",
                  "process_expiring_futures",
                  "forecast_future_prices",
                  "clear_cache"
                ]
              }
            ]
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 14,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/deployment.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 15,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/deployment.py"
          },
          {
            "type": "non_canonical_import",
            "import": "psutil",
            "line": 386,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/deployment.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 11,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 12,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 4,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/resource.py"
          },
          {
            "type": "non_canonical_import",
            "import": "contextlib",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "contextlib",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/database_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "alembic",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/migrations/001_create_economy_tables.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 6,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/models/market.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 11,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/models/commodity_future.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 6,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/models/trade_route.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "motif": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/motif",
        "files": [
          "manager_core.py",
          "service.py",
          "services.py",
          "models.py",
          "chaos_utils.py",
          "__init__.py",
          "motif_routes.py",
          "utils.py",
          "motif_utils.py",
          "router.py",
          "motif_engine_class.py",
          "repository.py",
          "routers/__init__.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "manager_core.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Optional",
                  "Union",
                  "Any",
                  "Tuple"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 7
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.models",
                "names": [
                  "Motif",
                  "MotifCreate",
                  "MotifUpdate",
                  "MotifFilter",
                  "MotifScope",
                  "MotifLifecycle",
                  "MotifCategory",
                  "MotifEffect",
                  "LocationInfo"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.service",
                "names": [
                  "MotifService"
                ],
                "line": 66
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.repository",
                "names": [
                  "MotifRepository",
                  "Vector2"
                ],
                "line": 76
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.utils",
                "names": [
                  "generate_motif_name",
                  "generate_motif_description",
                  "estimate_motif_compatibility",
                  "generate_realistic_duration",
                  "motif_to_narrative_context",
                  "calculate_motif_spread",
                  "roll_chaos_event",
                  "NARRATIVE_CHAOS_TABLE"
                ],
                "line": 91
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.motif_utils",
                "names": [
                  "synthesize_motifs"
                ],
                "line": 123
              }
            ],
            "functions": [
              {
                "name": "get_instance",
                "line": 139,
                "args": [
                  "cls",
                  "data_path"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 145,
                "args": [
                  "self",
                  "data_path"
                ],
                "is_async": false
              },
              {
                "name": "register_event_listener",
                "line": 277,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "unregister_event_listener",
                "line": 282,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "_should_use_cache",
                "line": 307,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_invalidate_cache",
                "line": 315,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "roll_chaos_event",
                "line": 322,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "generate_motif_name",
                "line": 99,
                "args": [],
                "is_async": false
              },
              {
                "name": "generate_motif_description",
                "line": 102,
                "args": [],
                "is_async": false
              },
              {
                "name": "estimate_motif_compatibility",
                "line": 105,
                "args": [],
                "is_async": false
              },
              {
                "name": "generate_realistic_duration",
                "line": 108,
                "args": [],
                "is_async": false
              },
              {
                "name": "motif_to_narrative_context",
                "line": 111,
                "args": [],
                "is_async": false
              },
              {
                "name": "calculate_motif_spread",
                "line": 114,
                "args": [],
                "is_async": false
              },
              {
                "name": "roll_chaos_event",
                "line": 117,
                "args": [],
                "is_async": false
              },
              {
                "name": "synthesize_motifs",
                "line": 125,
                "args": [],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 36,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 41,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 46,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 51,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 56,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 61,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 69,
                "args": [
                  "self",
                  "repository"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 79,
                "args": [
                  "self",
                  "x",
                  "y"
                ],
                "is_async": false
              },
              {
                "name": "distance_to",
                "line": 83,
                "args": [
                  "self",
                  "other"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 87,
                "args": [
                  "self",
                  "data_path"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MotifManager",
                "line": 131,
                "bases": [],
                "methods": [
                  "get_instance",
                  "__init__",
                  "create_motif",
                  "get_motifs",
                  "get_motif",
                  "update_motif",
                  "delete_motif",
                  "register_event_listener",
                  "unregister_event_listener",
                  "_emit_event",
                  "_should_use_cache",
                  "_invalidate_cache",
                  "roll_chaos_event",
                  "inject_chaos_event",
                  "get_dominant_motifs",
                  "get_narrative_context",
                  "generate_random_motif",
                  "get_gpt_context"
                ]
              },
              {
                "name": "MockEnum",
                "line": 23,
                "bases": [],
                "methods": []
              },
              {
                "name": "Motif",
                "line": 35,
                "bases": [],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "MotifCreate",
                "line": 40,
                "bases": [],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "MotifUpdate",
                "line": 45,
                "bases": [],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "MotifFilter",
                "line": 50,
                "bases": [],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "MotifEffect",
                "line": 55,
                "bases": [],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "LocationInfo",
                "line": 60,
                "bases": [],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "MotifService",
                "line": 68,
                "bases": [],
                "methods": [
                  "__init__",
                  "create_motif"
                ]
              },
              {
                "name": "Vector2",
                "line": 78,
                "bases": [],
                "methods": [
                  "__init__",
                  "distance_to"
                ]
              },
              {
                "name": "MotifRepository",
                "line": 86,
                "bases": [],
                "methods": [
                  "__init__"
                ]
              }
            ]
          },
          {
            "file": "service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Optional",
                  "Any",
                  "Tuple",
                  "Union"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 2
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 3
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 4
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 5
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 6
              },
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "HTTPException",
                  "Depends",
                  "status"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.models",
                "names": [
                  "Motif",
                  "MotifCreate",
                  "MotifUpdate",
                  "MotifFilter",
                  "MotifScope",
                  "MotifLifecycle",
                  "MotifCategory",
                  "MotifEffect",
                  "MotifEffectTarget"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.repository",
                "names": [
                  "MotifRepository",
                  "Vector2"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif",
                "names": [
                  "motif_utils"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.time",
                "names": [
                  "get_current_time"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 23,
                "args": [
                  "self",
                  "repository"
                ],
                "is_async": false
              },
              {
                "name": "_extract_narrative_themes",
                "line": 133,
                "args": [
                  "self",
                  "motifs"
                ],
                "is_async": false
              },
              {
                "name": "_generate_narrative_guidance",
                "line": 256,
                "args": [
                  "self",
                  "synthesis",
                  "motifs",
                  "location_type"
                ],
                "is_async": false
              },
              {
                "name": "_generate_related_categories",
                "line": 529,
                "args": [
                  "self",
                  "starting_category",
                  "count"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MotifService",
                "line": 20,
                "bases": [],
                "methods": [
                  "__init__",
                  "create_motif",
                  "get_motif",
                  "update_motif",
                  "update_motif",
                  "delete_motif",
                  "list_motifs",
                  "get_global_motifs",
                  "get_regional_motifs",
                  "get_motifs_at_position",
                  "get_motif_context",
                  "_extract_narrative_themes",
                  "get_enhanced_narrative_context",
                  "_generate_narrative_guidance",
                  "generate_random_motif",
                  "advance_motif_lifecycles",
                  "blend_motifs",
                  "generate_motif_sequence",
                  "_generate_related_categories",
                  "apply_motif_effects",
                  "_apply_to_npc_system",
                  "_apply_to_event_system",
                  "_apply_to_quest_system",
                  "_apply_to_faction_system",
                  "_apply_to_environment_system",
                  "_apply_to_economy_system",
                  "_apply_to_narrative_system"
                ]
              }
            ]
          },
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.models",
                "names": [
                  "MotifEntity",
                  "MotifModel",
                  "CreateMotifRequest",
                  "UpdateMotifRequest",
                  "MotifResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "MotifNotFoundError",
                  "MotifValidationError",
                  "MotifConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_motif_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MotifService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104fe77f0>"
                ],
                "methods": [
                  "__init__",
                  "create_motif",
                  "get_motif_by_id",
                  "update_motif",
                  "delete_motif",
                  "list_motifs",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_motif_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any",
                  "Union"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field",
                  "validator"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 5
              }
            ],
            "functions": [
              {
                "name": "validate_sort_order",
                "line": 235,
                "args": [
                  "cls",
                  "v"
                ],
                "is_async": false
              },
              {
                "name": "update_lifecycle",
                "line": 147,
                "args": [
                  "self",
                  "new_lifecycle"
                ],
                "is_async": false
              },
              {
                "name": "as_dict",
                "line": 153,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "ensure_effects_list",
                "line": 158,
                "args": [
                  "cls",
                  "v"
                ],
                "is_async": false
              },
              {
                "name": "ensure_descriptors_list",
                "line": 164,
                "args": [
                  "cls",
                  "v"
                ],
                "is_async": false
              },
              {
                "name": "ensure_tags_list",
                "line": 170,
                "args": [
                  "cls",
                  "v"
                ],
                "is_async": false
              },
              {
                "name": "validate_intensity",
                "line": 176,
                "args": [
                  "cls",
                  "v"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MotifScope",
                "line": 7,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "MotifLifecycle",
                "line": 13,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "MotifCategory",
                "line": 21,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "LocationInfo",
                "line": 73,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MotifEffectTarget",
                "line": 80,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "MotifEffect",
                "line": 91,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MotifTriggerContext",
                "line": 98,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Motif",
                "line": 105,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "update_lifecycle",
                  "as_dict",
                  "ensure_effects_list",
                  "ensure_descriptors_list",
                  "ensure_tags_list",
                  "validate_intensity"
                ]
              },
              {
                "name": "MotifCreate",
                "line": 179,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MotifUpdate",
                "line": 193,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MotifFilter",
                "line": 207,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MotifResponse",
                "line": 240,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "chaos_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 5
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.motif_utils",
                "names": [
                  "roll_new_motif"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.motif_engine_class",
                "names": [
                  "MotifEngine"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.npc_rumor_utils",
                "names": [
                  "sync_event_beliefs"
                ],
                "line": 10
              }
            ],
            "functions": [
              {
                "name": "roll_chaos_event",
                "line": 35,
                "args": [],
                "is_async": false
              },
              {
                "name": "inject_chaos_event",
                "line": 38,
                "args": [
                  "event_type",
                  "region",
                  "context"
                ],
                "is_async": false
              },
              {
                "name": "trigger_chaos_if_needed",
                "line": 58,
                "args": [
                  "npc_id",
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "force_chaos",
                "line": 68,
                "args": [
                  "npc_id",
                  "region"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.motif.models",
                "names": [
                  "Motif",
                  "MotifCreate",
                  "MotifUpdate",
                  "MotifFilter",
                  "MotifScope",
                  "MotifLifecycle",
                  "MotifCategory",
                  "MotifEffect",
                  "LocationInfo"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.manager_core",
                "names": [
                  "MotifManager"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.service",
                "names": [
                  "MotifService"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.repository",
                "names": [
                  "MotifRepository",
                  "Vector2"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.utils",
                "names": [
                  "generate_motif_name",
                  "generate_motif_description",
                  "estimate_motif_compatibility",
                  "generate_realistic_duration",
                  "motif_to_narrative_context",
                  "calculate_motif_spread",
                  "roll_chaos_event",
                  "NARRATIVE_CHAOS_TABLE"
                ],
                "line": 24
              }
            ],
            "functions": [
              {
                "name": "get_motif_manager",
                "line": 35,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "motif_routes.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "request",
                  "jsonify"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.motif_engine_class",
                "names": [
                  "MotifEngine"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.chaos_utils",
                "names": [
                  "trigger_chaos_if_needed",
                  "force_chaos"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "init_motifs",
                "line": 14,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "tick_daily",
                "line": 20,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "tick_long_rest",
                "line": 26,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "trigger_chaos",
                "line": 34,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any",
                  "Optional",
                  "Tuple",
                  "Union"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 2
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 3
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 4
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 5
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "collections",
                "names": [
                  "defaultdict"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.models",
                "names": [
                  "Motif",
                  "MotifCategory",
                  "MotifScope",
                  "MotifLifecycle",
                  "MotifEffect",
                  "LocationInfo",
                  "MotifEffectTarget"
                ],
                "line": 9
              }
            ],
            "functions": [
              {
                "name": "calculate_distance",
                "line": 48,
                "args": [
                  "point1",
                  "point2"
                ],
                "is_async": false
              },
              {
                "name": "point_in_circle",
                "line": 52,
                "args": [
                  "point",
                  "center",
                  "radius"
                ],
                "is_async": false
              },
              {
                "name": "calculate_influence_area",
                "line": 56,
                "args": [
                  "motif"
                ],
                "is_async": false
              },
              {
                "name": "find_motifs_in_radius",
                "line": 77,
                "args": [
                  "motifs",
                  "center",
                  "radius"
                ],
                "is_async": false
              },
              {
                "name": "calculate_motif_overlap",
                "line": 88,
                "args": [
                  "motif1",
                  "motif2"
                ],
                "is_async": false
              },
              {
                "name": "validate_motif_data",
                "line": 121,
                "args": [
                  "motif_data"
                ],
                "is_async": false
              },
              {
                "name": "sanitize_motif_name",
                "line": 187,
                "args": [
                  "name"
                ],
                "is_async": false
              },
              {
                "name": "normalize_motif_description",
                "line": 204,
                "args": [
                  "description"
                ],
                "is_async": false
              },
              {
                "name": "generate_motif_name",
                "line": 224,
                "args": [
                  "category",
                  "scope"
                ],
                "is_async": false
              },
              {
                "name": "generate_motif_description",
                "line": 269,
                "args": [
                  "category",
                  "scope",
                  "intensity"
                ],
                "is_async": false
              },
              {
                "name": "estimate_motif_compatibility",
                "line": 329,
                "args": [
                  "motif1",
                  "motif2"
                ],
                "is_async": false
              },
              {
                "name": "generate_realistic_duration",
                "line": 398,
                "args": [
                  "scope",
                  "intensity"
                ],
                "is_async": false
              },
              {
                "name": "motif_to_narrative_context",
                "line": 424,
                "args": [
                  "motif"
                ],
                "is_async": false
              },
              {
                "name": "calculate_motif_spread",
                "line": 532,
                "args": [
                  "origin_motif",
                  "distance",
                  "max_distance"
                ],
                "is_async": false
              },
              {
                "name": "motif_effect_to_text",
                "line": 602,
                "args": [
                  "effect"
                ],
                "is_async": false
              },
              {
                "name": "roll_chaos_event",
                "line": 639,
                "args": [],
                "is_async": false
              },
              {
                "name": "analyze_motif_ecosystem",
                "line": 650,
                "args": [
                  "motifs"
                ],
                "is_async": false
              },
              {
                "name": "suggest_motif_narrative_hooks",
                "line": 707,
                "args": [
                  "motif"
                ],
                "is_async": false
              },
              {
                "name": "generate_motif_interaction_effects",
                "line": 766,
                "args": [
                  "motif1",
                  "motif2"
                ],
                "is_async": false
              },
              {
                "name": "calculate_motif_narrative_weight",
                "line": 815,
                "args": [
                  "motifs",
                  "location"
                ],
                "is_async": false
              },
              {
                "name": "optimize_motif_placement",
                "line": 844,
                "args": [
                  "motifs",
                  "area_bounds"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Point",
                "line": 43,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "motif_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Optional",
                  "Any",
                  "Tuple"
                ],
                "line": 5
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 6
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.models",
                "names": [
                  "Motif"
                ],
                "line": 11
              }
            ],
            "functions": [
              {
                "name": "synthesize_motifs",
                "line": 20,
                "args": [
                  "motifs"
                ],
                "is_async": false
              },
              {
                "name": "get_motif_by_id",
                "line": 151,
                "args": [
                  "motifs",
                  "motif_id"
                ],
                "is_async": false
              },
              {
                "name": "are_motifs_conflicting",
                "line": 159,
                "args": [
                  "motif1",
                  "motif2"
                ],
                "is_async": false
              },
              {
                "name": "get_region_motif_context",
                "line": 213,
                "args": [
                  "motifs",
                  "format_type"
                ],
                "is_async": false
              },
              {
                "name": "estimate_motif_compatibility",
                "line": 281,
                "args": [],
                "is_async": false
              },
              {
                "name": "calculate_motif_spread",
                "line": 286,
                "args": [],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 15,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Motif",
                "line": 14,
                "bases": [],
                "methods": [
                  "__init__"
                ]
              }
            ]
          },
          {
            "file": "router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "HTTPException",
                  "Depends"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 7
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "motif_engine_class.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 4
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.motif_utils",
                "names": [
                  "CANONICAL_MOTIFS",
                  "roll_new_motif",
                  "motif_needs_rotation"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 20,
                "args": [
                  "self",
                  "entity_id",
                  "scope"
                ],
                "is_async": false
              },
              {
                "name": "_resolve_path",
                "line": 31,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_save",
                "line": 43,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_pool",
                "line": 46,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_active_motifs",
                "line": 49,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "tick_all",
                "line": 52,
                "args": [
                  "self",
                  "on_expire"
                ],
                "is_async": false
              },
              {
                "name": "tick_random",
                "line": 70,
                "args": [
                  "self",
                  "chance"
                ],
                "is_async": false
              },
              {
                "name": "rotate",
                "line": 80,
                "args": [
                  "self",
                  "chaos"
                ],
                "is_async": false
              },
              {
                "name": "check_aggression_threshold",
                "line": 113,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "initialize",
                "line": 121,
                "args": [
                  "self",
                  "count"
                ],
                "is_async": false
              },
              {
                "name": "save",
                "line": 140,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MotifEngine",
                "line": 12,
                "bases": [],
                "methods": [
                  "__init__",
                  "_resolve_path",
                  "_save",
                  "get_pool",
                  "get_active_motifs",
                  "tick_all",
                  "tick_random",
                  "rotate",
                  "check_aggression_threshold",
                  "initialize",
                  "save"
                ]
              }
            ]
          },
          {
            "file": "repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Optional",
                  "Any",
                  "Tuple",
                  "Union"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 2
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 3
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 4
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 5
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.models",
                "names": [
                  "Motif",
                  "MotifFilter",
                  "MotifScope",
                  "MotifLifecycle",
                  "LocationInfo"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 12,
                "args": [
                  "self",
                  "x",
                  "y"
                ],
                "is_async": false
              },
              {
                "name": "distance_to",
                "line": 16,
                "args": [
                  "self",
                  "other"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 23,
                "args": [
                  "self",
                  "data_path"
                ],
                "is_async": false
              },
              {
                "name": "_ensure_data_dir_exists",
                "line": 33,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_get_motif_path",
                "line": 37,
                "args": [
                  "self",
                  "motif_id"
                ],
                "is_async": false
              },
              {
                "name": "_load_motifs",
                "line": 41,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_save_motif",
                "line": 63,
                "args": [
                  "self",
                  "motif"
                ],
                "is_async": false
              },
              {
                "name": "create_motif",
                "line": 69,
                "args": [
                  "self",
                  "motif"
                ],
                "is_async": false
              },
              {
                "name": "get_motif",
                "line": 89,
                "args": [
                  "self",
                  "motif_id"
                ],
                "is_async": false
              },
              {
                "name": "update_motif",
                "line": 93,
                "args": [
                  "self",
                  "motif_id",
                  "motif_update"
                ],
                "is_async": false
              },
              {
                "name": "delete_motif",
                "line": 112,
                "args": [
                  "self",
                  "motif_id"
                ],
                "is_async": false
              },
              {
                "name": "get_all_motifs",
                "line": 124,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_global_motifs",
                "line": 128,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_regional_motifs",
                "line": 135,
                "args": [
                  "self",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "get_motifs_at_position",
                "line": 144,
                "args": [
                  "self",
                  "position",
                  "radius"
                ],
                "is_async": false
              },
              {
                "name": "filter_motifs",
                "line": 177,
                "args": [
                  "self",
                  "filter_params"
                ],
                "is_async": false
              },
              {
                "name": "_filter_by_metadata",
                "line": 267,
                "args": [
                  "self",
                  "motifs",
                  "metadata_filters"
                ],
                "is_async": false
              },
              {
                "name": "cleanup_expired_motifs",
                "line": 306,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_entity_data_path",
                "line": 324,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "get_world_log_path",
                "line": 375,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Vector2",
                "line": 10,
                "bases": [],
                "methods": [
                  "__init__",
                  "distance_to"
                ]
              },
              {
                "name": "MotifRepository",
                "line": 20,
                "bases": [],
                "methods": [
                  "__init__",
                  "_ensure_data_dir_exists",
                  "_get_motif_path",
                  "_load_motifs",
                  "_save_motif",
                  "create_motif",
                  "get_motif",
                  "update_motif",
                  "delete_motif",
                  "get_all_motifs",
                  "get_global_motifs",
                  "get_regional_motifs",
                  "get_motifs_at_position",
                  "filter_motifs",
                  "_filter_by_metadata",
                  "cleanup_expired_motifs",
                  "get_entity_data_path",
                  "get_entity_data",
                  "update_entity_data",
                  "get_world_log_path",
                  "get_world_log",
                  "add_to_world_log",
                  "get_world_log_events"
                ]
              }
            ]
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.motif.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any",
                  "Union"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field",
                  "validator"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "update_lifecycle",
                "line": 148,
                "args": [
                  "self",
                  "new_lifecycle"
                ],
                "is_async": false
              },
              {
                "name": "as_dict",
                "line": 154,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "ensure_effects_list",
                "line": 159,
                "args": [
                  "cls",
                  "v"
                ],
                "is_async": false
              },
              {
                "name": "ensure_descriptors_list",
                "line": 165,
                "args": [
                  "cls",
                  "v"
                ],
                "is_async": false
              },
              {
                "name": "ensure_tags_list",
                "line": 171,
                "args": [
                  "cls",
                  "v"
                ],
                "is_async": false
              },
              {
                "name": "validate_intensity",
                "line": 177,
                "args": [
                  "cls",
                  "v"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MotifScope",
                "line": 9,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "MotifLifecycle",
                "line": 15,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "MotifCategory",
                "line": 23,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "LocationInfo",
                "line": 74,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MotifEffectTarget",
                "line": 81,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "MotifEffect",
                "line": 92,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MotifTriggerContext",
                "line": 99,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Motif",
                "line": 106,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "update_lifecycle",
                  "as_dict",
                  "ensure_effects_list",
                  "ensure_descriptors_list",
                  "ensure_tags_list",
                  "validate_intensity"
                ]
              },
              {
                "name": "MotifCreate",
                "line": 180,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MotifUpdate",
                "line": 194,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MotifFilter",
                "line": 208,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MotifResponse",
                "line": 217,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": true,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 1,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 6,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/motif/utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 3,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "llm": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/llm",
        "files": [
          "services.py",
          "models.py",
          "__init__.py",
          "routers/__init__.py",
          "middleware/__init__.py",
          "middleware/event_integration.py",
          "middleware/event_middleware.py",
          "core/__init__.py",
          "core/gpt_client.py",
          "core/llm_core.py",
          "core/dm_core.py",
          "utils/memory_system.py",
          "utils/__init__.py",
          "utils/faction_system.py",
          "utils/motif_system.py",
          "utils/rumor_system.py",
          "repositories/conversation_repository.py",
          "repositories/integration_repository.py",
          "repositories/__init__.py",
          "repositories/gpt_repository.py",
          "repositories/prompt_repository.py",
          "repositories/event_repository.py",
          "repositories/response_repository.py",
          "repositories/context_repository.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "api/llm_router.py",
          "api/__init__.py",
          "api/dm_routes.py",
          "services/conversation_service.py",
          "services/gpt_client_service.py",
          "services/__init__.py",
          "services/llm_service.py",
          "services/prompt_service.py",
          "services/integration_service.py",
          "services/event_processing_service.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.models",
                "names": [
                  "LlmEntity",
                  "LlmModel",
                  "CreateLlmRequest",
                  "UpdateLlmRequest",
                  "LlmResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "LlmNotFoundError",
                  "LlmValidationError",
                  "LlmConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_llm_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "LlmService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104f5f7f0>"
                ],
                "methods": [
                  "__init__",
                  "create_llm",
                  "get_llm_by_id",
                  "update_llm",
                  "delete_llm",
                  "list_llms",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_llm_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "LlmBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "LlmModel",
                "line": 36,
                "bases": [
                  "LlmBaseModel"
                ],
                "methods": []
              },
              {
                "name": "LlmEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateLlmRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateLlmRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "LlmResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "LlmListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "services.llm_service",
                "names": [
                  "LLMService"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "services.conversation_service",
                "names": [
                  "ConversationService"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "core.llm_core",
                "names": [
                  "LLMCore"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "api.llm_router",
                "names": [
                  "router"
                ],
                "line": 6
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "middleware/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "middleware/event_integration.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "middleware/event_middleware.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any",
                  "Callable"
                ],
                "line": 2
              },
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 3
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 4
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 11,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "add_middleware",
                "line": 15,
                "args": [
                  "self",
                  "middleware_func"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "LLMEventMiddleware",
                "line": 8,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_middleware",
                  "process_event"
                ]
              },
              {
                "name": "ContextMiddleware",
                "line": 25,
                "bases": [],
                "methods": [
                  "__call__"
                ]
              },
              {
                "name": "SecurityMiddleware",
                "line": 34,
                "bases": [],
                "methods": [
                  "__call__"
                ]
              }
            ]
          },
          {
            "file": "core/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "core/gpt_client.py",
            "imports": [
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 2
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 3
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 4
              },
              {
                "type": "import",
                "module": "openai",
                "alias": null,
                "line": 5
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models.base",
                "names": [
                  "BaseModel"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 14,
                "args": [
                  "self",
                  "api_key"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "GPTClient",
                "line": 11,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_response"
                ]
              }
            ]
          },
          {
            "file": "core/llm_core.py",
            "imports": [
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 2
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 3
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models.base",
                "names": [
                  "BaseModel"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 15,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "LLMCore",
                "line": 12,
                "bases": [],
                "methods": [
                  "__init__",
                  "initialize",
                  "process_request"
                ]
              }
            ]
          },
          {
            "file": "core/dm_core.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/memory_system.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Union"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 12
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.dm.event_integration",
                "names": [
                  "EventDispatcher",
                  "MemoryEvent"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "get_instance",
                "line": 63,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 69,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "create_memory",
                "line": 86,
                "args": [
                  "self",
                  "entity_id",
                  "content",
                  "is_core",
                  "category",
                  "tags",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "get_memory",
                "line": 129,
                "args": [
                  "self",
                  "memory_id",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "get_all_memories",
                "line": 168,
                "args": [
                  "self",
                  "entity_id",
                  "include_decayed"
                ],
                "is_async": false
              },
              {
                "name": "get_core_memories",
                "line": 215,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "update_memory",
                "line": 228,
                "args": [
                  "self",
                  "memory"
                ],
                "is_async": false
              },
              {
                "name": "reinforce_memory",
                "line": 263,
                "args": [
                  "self",
                  "memory_id",
                  "entity_id",
                  "reinforcement"
                ],
                "is_async": false
              },
              {
                "name": "delete_memory",
                "line": 302,
                "args": [
                  "self",
                  "memory_id",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "generate_memory_summary",
                "line": 336,
                "args": [
                  "self",
                  "entity_id",
                  "max_recent"
                ],
                "is_async": false
              },
              {
                "name": "get_recent_memories",
                "line": 367,
                "args": [
                  "self",
                  "entity_id",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "get_memories_by_category",
                "line": 385,
                "args": [
                  "self",
                  "entity_id",
                  "category"
                ],
                "is_async": false
              },
              {
                "name": "get_memories_by_tag",
                "line": 399,
                "args": [
                  "self",
                  "entity_id",
                  "tag"
                ],
                "is_async": false
              },
              {
                "name": "convert_to_core_memory",
                "line": 413,
                "args": [
                  "self",
                  "memory_id",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "_store_memory",
                "line": 451,
                "args": [
                  "self",
                  "memory"
                ],
                "is_async": false
              },
              {
                "name": "_apply_decay",
                "line": 473,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "_apply_decay_if_needed",
                "line": 521,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "_is_entity_cached",
                "line": 543,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "_cache_entity_memories",
                "line": 561,
                "args": [
                  "self",
                  "entity_id",
                  "memories"
                ],
                "is_async": false
              },
              {
                "name": "_clear_entity_cache",
                "line": 572,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_memory_from_cache",
                "line": 585,
                "args": [
                  "self",
                  "entity_id",
                  "memory_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_all_memories_from_cache",
                "line": 602,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Memory",
                "line": 23,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MemorySummary",
                "line": 42,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MemoryManager",
                "line": 54,
                "bases": [],
                "methods": [
                  "get_instance",
                  "__init__",
                  "create_memory",
                  "get_memory",
                  "get_all_memories",
                  "get_core_memories",
                  "update_memory",
                  "reinforce_memory",
                  "delete_memory",
                  "generate_memory_summary",
                  "get_recent_memories",
                  "get_memories_by_category",
                  "get_memories_by_tag",
                  "convert_to_core_memory",
                  "_store_memory",
                  "_apply_decay",
                  "_apply_decay_if_needed",
                  "_is_entity_cached",
                  "_cache_entity_memories",
                  "_clear_entity_cache",
                  "_get_memory_from_cache",
                  "_get_all_memories_from_cache"
                ]
              },
              {
                "name": "Config",
                "line": 39,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "utils/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/faction_system.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Set",
                  "Tuple",
                  "Union"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 13
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.dm.event_integration",
                "names": [
                  "EventDispatcher",
                  "FactionEvent"
                ],
                "line": 18
              }
            ],
            "functions": [
              {
                "name": "get_instance",
                "line": 136,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 142,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "create_faction",
                "line": 161,
                "args": [
                  "self",
                  "name",
                  "description",
                  "faction_type",
                  "power_level",
                  "secrecy",
                  "stability",
                  "territory",
                  "leadership",
                  "colors",
                  "symbol",
                  "values",
                  "tags",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "get_faction",
                "line": 230,
                "args": [
                  "self",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "get_factions_by_type",
                "line": 258,
                "args": [
                  "self",
                  "faction_type"
                ],
                "is_async": false
              },
              {
                "name": "set_relationship",
                "line": 284,
                "args": [
                  "self",
                  "faction_id",
                  "target_faction_id",
                  "reputation",
                  "influence",
                  "is_public"
                ],
                "is_async": false
              },
              {
                "name": "add_faction_goal",
                "line": 356,
                "args": [
                  "self",
                  "faction_id",
                  "title",
                  "description",
                  "importance",
                  "progress",
                  "opposing_factions",
                  "supporting_factions",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "add_faction_resource",
                "line": 423,
                "args": [
                  "self",
                  "faction_id",
                  "name",
                  "resource_type",
                  "amount",
                  "quality",
                  "location_id",
                  "is_public"
                ],
                "is_async": false
              },
              {
                "name": "_store_faction",
                "line": 482,
                "args": [
                  "self",
                  "faction"
                ],
                "is_async": false
              },
              {
                "name": "_store_relationship",
                "line": 504,
                "args": [
                  "self",
                  "relationship"
                ],
                "is_async": false
              },
              {
                "name": "_store_goal",
                "line": 520,
                "args": [
                  "self",
                  "goal"
                ],
                "is_async": false
              },
              {
                "name": "_store_resource",
                "line": 540,
                "args": [
                  "self",
                  "resource"
                ],
                "is_async": false
              },
              {
                "name": "_get_relationship",
                "line": 559,
                "args": [
                  "self",
                  "faction_id",
                  "target_faction_id"
                ],
                "is_async": false
              },
              {
                "name": "_dict_to_faction",
                "line": 594,
                "args": [
                  "self",
                  "faction_dict"
                ],
                "is_async": false
              },
              {
                "name": "_is_faction_cached",
                "line": 612,
                "args": [
                  "self",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "_cache_faction",
                "line": 630,
                "args": [
                  "self",
                  "faction_id",
                  "faction_dict"
                ],
                "is_async": false
              },
              {
                "name": "_clear_faction_cache",
                "line": 641,
                "args": [
                  "self",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "_clear_relationship_cache",
                "line": 654,
                "args": [
                  "self",
                  "faction_id",
                  "target_faction_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_faction_from_cache",
                "line": 669,
                "args": [
                  "self",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_goals",
                "line": 684,
                "args": [
                  "self",
                  "faction_id",
                  "include_completed"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_resources",
                "line": 724,
                "args": [
                  "self",
                  "faction_id",
                  "resource_type"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_relationships",
                "line": 766,
                "args": [
                  "self",
                  "faction_id",
                  "min_reputation",
                  "include_hidden"
                ],
                "is_async": false
              },
              {
                "name": "calculate_faction_power",
                "line": 815,
                "args": [
                  "self",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_conflicts",
                "line": 888,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_narrative_context",
                "line": 951,
                "args": [
                  "self",
                  "faction_id",
                  "region_id",
                  "include_hidden",
                  "max_factions"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "FactionRelationship",
                "line": 24,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "FactionGoal",
                "line": 38,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "FactionResource",
                "line": 58,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Faction",
                "line": 75,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "FactionSystem",
                "line": 101,
                "bases": [],
                "methods": [
                  "get_instance",
                  "__init__",
                  "create_faction",
                  "get_faction",
                  "get_factions_by_type",
                  "set_relationship",
                  "add_faction_goal",
                  "add_faction_resource",
                  "_store_faction",
                  "_store_relationship",
                  "_store_goal",
                  "_store_resource",
                  "_get_relationship",
                  "_dict_to_faction",
                  "_is_faction_cached",
                  "_cache_faction",
                  "_clear_faction_cache",
                  "_clear_relationship_cache",
                  "_get_faction_from_cache",
                  "get_faction_goals",
                  "get_faction_resources",
                  "get_faction_relationships",
                  "calculate_faction_power",
                  "get_faction_conflicts",
                  "get_faction_narrative_context"
                ]
              },
              {
                "name": "Config",
                "line": 35,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 55,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 72,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 96,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "utils/motif_system.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Set",
                  "Union"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 13
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.dm.event_integration",
                "names": [
                  "EventDispatcher",
                  "MotifEvent"
                ],
                "line": 18
              }
            ],
            "functions": [
              {
                "name": "get_instance",
                "line": 98,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 104,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "create_motif",
                "line": 123,
                "args": [
                  "self",
                  "name",
                  "description",
                  "category",
                  "intensity",
                  "associated_emotions",
                  "narrative_patterns",
                  "tags",
                  "opposing_motifs",
                  "complementary_motifs",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "record_occurrence",
                "line": 189,
                "args": [
                  "self",
                  "motif_id",
                  "narrative_text",
                  "entity_id",
                  "region_id",
                  "event_id",
                  "strength"
                ],
                "is_async": false
              },
              {
                "name": "get_motif",
                "line": 244,
                "args": [
                  "self",
                  "motif_id"
                ],
                "is_async": false
              },
              {
                "name": "get_motifs_by_category",
                "line": 272,
                "args": [
                  "self",
                  "category"
                ],
                "is_async": false
              },
              {
                "name": "get_entity_motifs",
                "line": 298,
                "args": [
                  "self",
                  "entity_id",
                  "min_strength",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "get_regional_motifs",
                "line": 357,
                "args": [
                  "self",
                  "region_id",
                  "min_strength",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "get_most_common_motifs",
                "line": 416,
                "args": [
                  "self",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "suggest_motifs_for_context",
                "line": 470,
                "args": [
                  "self",
                  "entity_id",
                  "region_id",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "get_motif_narrative_context",
                "line": 546,
                "args": [
                  "self",
                  "entity_id",
                  "region_id",
                  "max_motifs"
                ],
                "is_async": false
              },
              {
                "name": "_store_motif",
                "line": 620,
                "args": [
                  "self",
                  "motif"
                ],
                "is_async": false
              },
              {
                "name": "_store_occurrence",
                "line": 642,
                "args": [
                  "self",
                  "occurrence"
                ],
                "is_async": false
              },
              {
                "name": "_update_related_motif_strengths",
                "line": 661,
                "args": [
                  "self",
                  "motif",
                  "occurrence_strength"
                ],
                "is_async": false
              },
              {
                "name": "_dict_to_motif",
                "line": 699,
                "args": [
                  "self",
                  "motif_dict"
                ],
                "is_async": false
              },
              {
                "name": "_is_motif_cached",
                "line": 717,
                "args": [
                  "self",
                  "motif_id"
                ],
                "is_async": false
              },
              {
                "name": "_cache_motif",
                "line": 735,
                "args": [
                  "self",
                  "motif_id",
                  "motif_dict"
                ],
                "is_async": false
              },
              {
                "name": "_clear_motif_cache",
                "line": 746,
                "args": [
                  "self",
                  "motif_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_motif_from_cache",
                "line": 759,
                "args": [
                  "self",
                  "motif_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MotifOccurrence",
                "line": 24,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Motif",
                "line": 41,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MotifSystem",
                "line": 64,
                "bases": [],
                "methods": [
                  "get_instance",
                  "__init__",
                  "create_motif",
                  "record_occurrence",
                  "get_motif",
                  "get_motifs_by_category",
                  "get_entity_motifs",
                  "get_regional_motifs",
                  "get_most_common_motifs",
                  "suggest_motifs_for_context",
                  "get_motif_narrative_context",
                  "_store_motif",
                  "_store_occurrence",
                  "_update_related_motif_strengths",
                  "_dict_to_motif",
                  "_is_motif_cached",
                  "_cache_motif",
                  "_clear_motif_cache",
                  "_get_motif_from_cache"
                ]
              },
              {
                "name": "Config",
                "line": 38,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 59,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "utils/rumor_system.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Set"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 13
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.dm.event_integration",
                "names": [
                  "EventDispatcher",
                  "RumorEvent"
                ],
                "line": 18
              }
            ],
            "functions": [
              {
                "name": "get_instance",
                "line": 89,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 95,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "create_rumor",
                "line": 117,
                "args": [
                  "self",
                  "content",
                  "rumor_type",
                  "source_entity_id",
                  "truth_value",
                  "severity",
                  "region_id",
                  "tags",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "get_rumor",
                "line": 175,
                "args": [
                  "self",
                  "rumor_id"
                ],
                "is_async": false
              },
              {
                "name": "spread_rumor",
                "line": 203,
                "args": [
                  "self",
                  "rumor_id",
                  "source_entity_id",
                  "target_entity_ids",
                  "apply_mutation"
                ],
                "is_async": false
              },
              {
                "name": "get_entity_rumors",
                "line": 277,
                "args": [
                  "self",
                  "entity_id",
                  "include_expired"
                ],
                "is_async": false
              },
              {
                "name": "update_believability",
                "line": 323,
                "args": [
                  "self",
                  "entity_id",
                  "rumor_id",
                  "adjustment"
                ],
                "is_async": false
              },
              {
                "name": "get_regional_rumors",
                "line": 354,
                "args": [
                  "self",
                  "region_id",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "get_rumor_context",
                "line": 418,
                "args": [
                  "self",
                  "entity_id",
                  "region_id",
                  "max_rumors"
                ],
                "is_async": false
              },
              {
                "name": "_store_rumor",
                "line": 483,
                "args": [
                  "self",
                  "rumor"
                ],
                "is_async": false
              },
              {
                "name": "_store_rumor_spread",
                "line": 506,
                "args": [
                  "self",
                  "spread"
                ],
                "is_async": false
              },
              {
                "name": "_entity_has_rumor",
                "line": 525,
                "args": [
                  "self",
                  "entity_id",
                  "rumor_id"
                ],
                "is_async": false
              },
              {
                "name": "_mutate_rumor_content",
                "line": 539,
                "args": [
                  "self",
                  "content"
                ],
                "is_async": false
              },
              {
                "name": "_calculate_initial_believability",
                "line": 565,
                "args": [
                  "self",
                  "source_id",
                  "target_id"
                ],
                "is_async": false
              },
              {
                "name": "_apply_decay",
                "line": 591,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "_apply_decay_if_needed",
                "line": 642,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "_is_rumor_expired",
                "line": 664,
                "args": [
                  "self",
                  "spread_dict"
                ],
                "is_async": false
              },
              {
                "name": "_dict_to_rumor",
                "line": 677,
                "args": [
                  "self",
                  "rumor_dict"
                ],
                "is_async": false
              },
              {
                "name": "_is_rumor_cached",
                "line": 697,
                "args": [
                  "self",
                  "rumor_id"
                ],
                "is_async": false
              },
              {
                "name": "_cache_rumor",
                "line": 715,
                "args": [
                  "self",
                  "rumor_id",
                  "rumor_dict"
                ],
                "is_async": false
              },
              {
                "name": "_clear_rumor_cache",
                "line": 726,
                "args": [
                  "self",
                  "rumor_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_rumor_from_cache",
                "line": 739,
                "args": [
                  "self",
                  "rumor_id"
                ],
                "is_async": false
              },
              {
                "name": "_cache_rumor_spread",
                "line": 754,
                "args": [
                  "self",
                  "entity_id",
                  "rumor_id",
                  "spread_dict"
                ],
                "is_async": false
              },
              {
                "name": "_clear_spread_cache",
                "line": 772,
                "args": [
                  "self",
                  "entity_id",
                  "rumor_id"
                ],
                "is_async": false
              },
              {
                "name": "_clear_entity_spread_cache",
                "line": 787,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Rumor",
                "line": 44,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RumorSpread",
                "line": 63,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RumorSystem",
                "line": 80,
                "bases": [],
                "methods": [
                  "get_instance",
                  "__init__",
                  "create_rumor",
                  "get_rumor",
                  "spread_rumor",
                  "get_entity_rumors",
                  "update_believability",
                  "get_regional_rumors",
                  "get_rumor_context",
                  "_store_rumor",
                  "_store_rumor_spread",
                  "_entity_has_rumor",
                  "_mutate_rumor_content",
                  "_calculate_initial_believability",
                  "_apply_decay",
                  "_apply_decay_if_needed",
                  "_is_rumor_expired",
                  "_dict_to_rumor",
                  "_is_rumor_cached",
                  "_cache_rumor",
                  "_clear_rumor_cache",
                  "_get_rumor_from_cache",
                  "_cache_rumor_spread",
                  "_clear_spread_cache",
                  "_clear_entity_spread_cache"
                ]
              },
              {
                "name": "Config",
                "line": 60,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 75,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "repositories/conversation_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 3
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 4
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models.base",
                "names": [
                  "BaseRepository"
                ],
                "line": 6
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "ConversationRepository",
                "line": 8,
                "bases": [
                  "BaseRepository"
                ],
                "methods": [
                  "create_conversation",
                  "add_message",
                  "get_conversation"
                ]
              }
            ]
          },
          {
            "file": "repositories/integration_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 2
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 3
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models.base",
                "names": [
                  "BaseRepository"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "IntegrationRepository",
                "line": 7,
                "bases": [
                  "BaseRepository"
                ],
                "methods": [
                  "save_integration_data",
                  "sync_system_state",
                  "get_system_health"
                ]
              }
            ]
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/gpt_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 3
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 4
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models.base",
                "names": [
                  "BaseRepository"
                ],
                "line": 6
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "GPTRepository",
                "line": 8,
                "bases": [
                  "BaseRepository"
                ],
                "methods": [
                  "save_request",
                  "save_response",
                  "get_usage_stats"
                ]
              }
            ]
          },
          {
            "file": "repositories/prompt_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 2
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 3
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models.base",
                "names": [
                  "BaseRepository"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "PromptRepository",
                "line": 7,
                "bases": [
                  "BaseRepository"
                ],
                "methods": [
                  "save_prompt_template",
                  "get_prompt_template",
                  "list_templates"
                ]
              }
            ]
          },
          {
            "file": "repositories/event_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 2
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 3
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models.base",
                "names": [
                  "BaseRepository"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "EventRepository",
                "line": 7,
                "bases": [
                  "BaseRepository"
                ],
                "methods": [
                  "save_event",
                  "get_events",
                  "process_event_queue"
                ]
              }
            ]
          },
          {
            "file": "repositories/response_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 2
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 3
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models.base",
                "names": [
                  "BaseRepository"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "ResponseRepository",
                "line": 7,
                "bases": [
                  "BaseRepository"
                ],
                "methods": [
                  "cache_response",
                  "get_cached_response",
                  "invalidate_cache"
                ]
              }
            ]
          },
          {
            "file": "repositories/context_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 2
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 3
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models.base",
                "names": [
                  "BaseRepository"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "ContextRepository",
                "line": 7,
                "bases": [
                  "BaseRepository"
                ],
                "methods": [
                  "save_context",
                  "get_context",
                  "build_game_context"
                ]
              }
            ]
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "api/llm_router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "HTTPException",
                  "Depends"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 3
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 4
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.services.llm_service",
                "names": [
                  "LLMService"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.services.conversation_service",
                "names": [
                  "ConversationService"
                ],
                "line": 7
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "api/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "api/dm_routes.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "services/conversation_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 2
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 3
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.repositories.conversation_repository",
                "names": [
                  "ConversationRepository"
                ],
                "line": 5
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 12,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ConversationService",
                "line": 9,
                "bases": [],
                "methods": [
                  "__init__",
                  "start_conversation",
                  "add_message"
                ]
              }
            ]
          },
          {
            "file": "services/gpt_client_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 2
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 3
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.core.gpt_client",
                "names": [
                  "GPTClient"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.repositories.gpt_repository",
                "names": [
                  "GPTRepository"
                ],
                "line": 6
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 13,
                "args": [
                  "self",
                  "api_key"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "GPTClientService",
                "line": 10,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_response"
                ]
              }
            ]
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/llm_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 2
              },
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 3
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 4
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.repositories.gpt_repository",
                "names": [
                  "GPTRepository"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.repositories.conversation_repository",
                "names": [
                  "ConversationRepository"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.core.llm_core",
                "names": [
                  "LLMCore"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 15,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "LLMService",
                "line": 12,
                "bases": [],
                "methods": [
                  "__init__",
                  "process_llm_request"
                ]
              }
            ]
          },
          {
            "file": "services/prompt_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 2
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 3
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.repositories.prompt_repository",
                "names": [
                  "PromptRepository"
                ],
                "line": 5
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 12,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "PromptService",
                "line": 9,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_prompt",
                  "create_template"
                ]
              }
            ]
          },
          {
            "file": "services/integration_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 2
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 3
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.repositories.integration_repository",
                "names": [
                  "IntegrationRepository"
                ],
                "line": 5
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 12,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "IntegrationService",
                "line": 9,
                "bases": [],
                "methods": [
                  "__init__",
                  "sync_with_system",
                  "get_system_health"
                ]
              }
            ]
          },
          {
            "file": "services/event_processing_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 2
              },
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 3
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 4
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.repositories.event_repository",
                "names": [
                  "EventRepository"
                ],
                "line": 6
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 13,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventProcessingService",
                "line": 10,
                "bases": [],
                "methods": [
                  "__init__",
                  "process_event",
                  "process_event_queue"
                ]
              }
            ]
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": true,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "services.llm_service",
            "line": 3,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "services.conversation_service",
            "line": 4,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "core.llm_core",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "api.llm_router",
            "line": 6,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "openai",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/core/gpt_client.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.dm.event_integration",
            "line": 17,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/memory_system.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.dm.event_integration",
            "line": 18,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.dm.event_integration",
            "line": 18,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/motif_system.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.dm.event_integration",
            "line": 18,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/rumor_system.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "tension_war": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/tension_war",
        "files": [
          "services.py",
          "models.py",
          "tension_routes.py",
          "__init__.py",
          "schemas.py",
          "examples.py",
          "war_routes.py",
          "routers/__init__.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 5
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 11,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Tension_WarService",
                "line": 8,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_all",
                  "get_by_id"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Tension_WarBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "Tension_WarModel",
                "line": 36,
                "bases": [
                  "Tension_WarBaseModel"
                ],
                "methods": []
              },
              {
                "name": "Tension_WarEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateTension_WarRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateTension_WarRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Tension_WarResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Tension_WarListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "tension_routes.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "request",
                  "jsonify"
                ],
                "line": 12
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 13
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.tension_war.utils",
                "names": [
                  "get_tension",
                  "modify_tension",
                  "reset_tension",
                  "decay_tension",
                  "check_for_region_conflict"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "collections",
                "names": [
                  "defaultdict"
                ],
                "line": 18
              }
            ],
            "functions": [
              {
                "name": "route_get_tension",
                "line": 35,
                "args": [
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "route_modify_tension",
                "line": 39,
                "args": [],
                "is_async": false
              },
              {
                "name": "route_reset_tension",
                "line": 76,
                "args": [
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "route_decay_tension",
                "line": 81,
                "args": [
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "update_region_faction_attunement",
                "line": 88,
                "args": [],
                "is_async": false
              },
              {
                "name": "trigger_region_conflict_check",
                "line": 130,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.tension_war.models",
                "names": [
                  "TensionConfig",
                  "TensionLevel",
                  "WarConfig",
                  "WarOutcome",
                  "WarOutcomeType",
                  "WarState"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.tension_war.services",
                "names": [
                  "TensionManager",
                  "WarManager"
                ],
                "line": 30
              },
              {
                "type": "from_import",
                "module": "backend.systems.tension_war.utils",
                "names": [
                  "calculate_border_tension",
                  "calculate_event_tension",
                  "calculate_disputed_regions",
                  "calculate_war_chances",
                  "evaluate_battle_outcome",
                  "calculate_resource_changes"
                ],
                "line": 33
              },
              {
                "type": "from_import",
                "module": "backend.systems.tension_war.router",
                "names": [
                  "router"
                ],
                "line": 43
              },
              {
                "type": "from_import",
                "module": "backend.systems.tension_war.examples",
                "names": [
                  "tension_system_example",
                  "war_system_example"
                ],
                "line": 46
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas.py",
            "imports": [
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "line": 6
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "Tension_WarBase",
                "line": 9,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Tension_WarCreate",
                "line": 14,
                "bases": [
                  "Tension_WarBase"
                ],
                "methods": []
              },
              {
                "name": "Tension_WarResponse",
                "line": 19,
                "bases": [
                  "Tension_WarBase"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 23,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "examples.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.tension_war.services",
                "names": [
                  "TensionManager",
                  "WarManager"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "tension_system_example",
                "line": 10,
                "args": [],
                "is_async": false
              },
              {
                "name": "war_system_example",
                "line": 55,
                "args": [],
                "is_async": false
              },
              {
                "name": "run_examples",
                "line": 99,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "war_routes.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "request",
                  "jsonify"
                ],
                "line": 6
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.tension_war.utils",
                "names": [
                  "initialize_war",
                  "advance_war_day",
                  "record_poi_conquest",
                  "generate_daily_raids"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.player_arc_utils",
                "names": [
                  "trigger_war_arc"
                ],
                "line": 15
              }
            ],
            "functions": [
              {
                "name": "trigger_daily_raids",
                "line": 24,
                "args": [
                  "region_name"
                ],
                "is_async": false
              },
              {
                "name": "start_war",
                "line": 35,
                "args": [],
                "is_async": false
              },
              {
                "name": "tick_war_day",
                "line": 52,
                "args": [
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "conquer_poi",
                "line": 57,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_war_arcs",
                "line": 76,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.tension_war.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.tension_war.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.tension_war.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": true,
        "has_schemas": true,
        "import_issues": [],
        "syntax_errors": [],
        "missing_components": []
      },
      "world_generation": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/world_generation",
        "files": [
          "services.py",
          "continent_repository.py",
          "models.py",
          "continent_service.py",
          "__init__.py",
          "worldgen_routes.py",
          "world_generation_utils.py",
          "routers/__init__.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.models",
                "names": [
                  "World_GenerationEntity",
                  "World_GenerationModel",
                  "CreateWorld_GenerationRequest",
                  "UpdateWorld_GenerationRequest",
                  "World_GenerationResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "World_GenerationNotFoundError",
                  "World_GenerationValidationError",
                  "World_GenerationConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_world_generation_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "World_GenerationService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104f6f7f0>"
                ],
                "methods": [
                  "__init__",
                  "create_world_generation",
                  "get_world_generation_by_id",
                  "update_world_generation",
                  "delete_world_generation",
                  "list_world_generations",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_world_generation_statistics"
                ]
              }
            ]
          },
          {
            "file": "continent_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Optional",
                  "List"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.models",
                "names": [
                  "ContinentSchema"
                ],
                "line": 9
              }
            ],
            "functions": [
              {
                "name": "create_continent",
                "line": 18,
                "args": [
                  "self",
                  "continent_schema"
                ],
                "is_async": false
              },
              {
                "name": "get_continent_by_id",
                "line": 35,
                "args": [
                  "self",
                  "continent_id"
                ],
                "is_async": false
              },
              {
                "name": "list_all_continents",
                "line": 47,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "update_continent",
                "line": 56,
                "args": [
                  "self",
                  "continent_id",
                  "continent_data"
                ],
                "is_async": false
              },
              {
                "name": "delete_continent",
                "line": 75,
                "args": [
                  "self",
                  "continent_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ContinentRepository",
                "line": 11,
                "bases": [],
                "methods": [
                  "create_continent",
                  "get_continent_by_id",
                  "list_all_continents",
                  "update_continent",
                  "delete_continent"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "World_GenerationBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "World_GenerationModel",
                "line": 36,
                "bases": [
                  "World_GenerationBaseModel"
                ],
                "methods": []
              },
              {
                "name": "World_GenerationEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateWorld_GenerationRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateWorld_GenerationRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "World_GenerationResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "World_GenerationListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "continent_service.py",
            "imports": [
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 6
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.models",
                "names": [
                  "ContinentSchema",
                  "ContinentBoundarySchema",
                  "CoordinateSchema",
                  "ContinentCreationRequestSchema"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.continent_repository",
                "names": [
                  "continent_repository",
                  "ContinentRepository"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.world_generation_utils",
                "names": [
                  "generate_continent_region_coordinates",
                  "get_continent_boundary",
                  "CONTINENT_MIN_REGIONS",
                  "CONTINENT_MAX_REGIONS"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.region.services.region_service",
                "names": [
                  "region_service",
                  "RegionService"
                ],
                "line": 25
              },
              {
                "type": "from_import",
                "module": "backend.systems.region.schemas.region",
                "names": [
                  "RegionCreationSchema"
                ],
                "line": 26
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 44,
                "args": [
                  "self",
                  "repository",
                  "region_svc"
                ],
                "is_async": false
              },
              {
                "name": "create_new_continent",
                "line": 48,
                "args": [
                  "self",
                  "creation_request"
                ],
                "is_async": false
              },
              {
                "name": "get_continent_details",
                "line": 105,
                "args": [
                  "self",
                  "continent_id"
                ],
                "is_async": false
              },
              {
                "name": "list_all_continents",
                "line": 117,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "update_continent_metadata",
                "line": 126,
                "args": [
                  "self",
                  "continent_id",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "delete_continent",
                "line": 148,
                "args": [
                  "self",
                  "continent_id"
                ],
                "is_async": false
              },
              {
                "name": "create_new_region",
                "line": 30,
                "args": [
                  "self",
                  "region_data",
                  "continent_id"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 34,
                "args": [
                  "self",
                  "coordinates",
                  "biome"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ContinentService",
                "line": 40,
                "bases": [],
                "methods": [
                  "__init__",
                  "create_new_continent",
                  "get_continent_details",
                  "list_all_continents",
                  "update_continent_metadata",
                  "delete_continent"
                ]
              },
              {
                "name": "RegionService",
                "line": 29,
                "bases": [],
                "methods": [
                  "create_new_region"
                ]
              },
              {
                "name": "RegionCreationSchema",
                "line": 33,
                "bases": [],
                "methods": [
                  "__init__"
                ]
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.world_generation_utils",
                "names": [
                  "generate_continent_region_coordinates",
                  "get_continent_boundary",
                  "map_region_to_latlon",
                  "get_region_latlon",
                  "fetch_weather_for_region",
                  "fetch_weather_for_latlon",
                  "generate_region",
                  "walk_region",
                  "pick_poi_type",
                  "choose_poi_type",
                  "pick_valid_tile",
                  "pick_social_size",
                  "claim_region_hexes_for_city",
                  "generate_settlements",
                  "generate_non_settlement_pois",
                  "log_region_event",
                  "refresh_cleared_pois",
                  "generate_monsters_for_tile",
                  "attempt_rest",
                  "generate_social_poi",
                  "generate_tile",
                  "CONTINENT_MIN_REGIONS",
                  "CONTINENT_MAX_REGIONS",
                  "REGION_HEXES_PER_REGION",
                  "REGION_POPULATION_RANGE",
                  "METROPOLIS_POPULATION_RANGE",
                  "TERRAIN_TYPES",
                  "POI_TYPE_WEIGHTS"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.models",
                "names": [
                  "CoordinateSchema",
                  "ContinentSchema",
                  "ContinentBoundarySchema",
                  "ContinentCreationRequestSchema"
                ],
                "line": 46
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.continent_service",
                "names": [
                  "continent_service"
                ],
                "line": 53
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.continent_repository",
                "names": [
                  "continent_repository"
                ],
                "line": 54
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.models",
                "names": [
                  "ContinentSchema",
                  "CoordinateSchema",
                  "ContinentBoundarySchema",
                  "ContinentCreationRequestSchema"
                ],
                "line": 57
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.continent_service",
                "names": [
                  "continent_service",
                  "ContinentService"
                ],
                "line": 58
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.world_generation_utils",
                "names": [
                  "generate_continent_region_coordinates",
                  "map_region_to_latlon",
                  "get_continent_boundary",
                  "CONTINENT_MIN_REGIONS",
                  "CONTINENT_MAX_REGIONS",
                  "ORIGIN_LATITUDE",
                  "ORIGIN_LONGITUDE",
                  "REGION_LATLON_SCALE_DEGREES"
                ],
                "line": 59
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.continent_repository",
                "names": [
                  "continent_repository",
                  "ContinentRepository"
                ],
                "line": 69
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.router",
                "names": [
                  "router"
                ],
                "line": 70
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "worldgen_routes.py",
            "imports": [
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 10
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "openai",
                "alias": null,
                "line": 13
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "request",
                  "jsonify"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.combat_utils",
                "names": [
                  "initiate_combat"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.world_generation_utils",
                "names": [
                  "refresh_cleared_pois",
                  "generate_monsters_for_tile"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.gpt_client",
                "names": [
                  "GPTClient"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.party_utils",
                "names": [
                  "award_xp_to_party"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.world_generation_utils",
                "names": [
                  "generate_region"
                ],
                "line": 22
              },
              {
                "type": "import",
                "module": "traceback",
                "alias": null,
                "line": 207
              }
            ],
            "functions": [
              {
                "name": "refresh_pois",
                "line": 27,
                "args": [],
                "is_async": false
              },
              {
                "name": "monster_spawns",
                "line": 86,
                "args": [
                  "x",
                  "y"
                ],
                "is_async": false
              },
              {
                "name": "generate_encounter",
                "line": 91,
                "args": [],
                "is_async": false
              },
              {
                "name": "generate_location_gpt",
                "line": 163,
                "args": [],
                "is_async": false
              },
              {
                "name": "route_generate_region",
                "line": 194,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "world_generation_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 7
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Tuple",
                  "Set",
                  "Optional",
                  "Dict",
                  "Any",
                  "Union"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "collections.abc",
                "names": [
                  "deque"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.models",
                "names": [
                  "CoordinateSchema"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "generate_continent_region_coordinates",
                "line": 60,
                "args": [
                  "num_regions_target"
                ],
                "is_async": false
              },
              {
                "name": "map_region_to_latlon",
                "line": 118,
                "args": [
                  "region_coord"
                ],
                "is_async": false
              },
              {
                "name": "get_region_latlon",
                "line": 132,
                "args": [
                  "region_x",
                  "region_y"
                ],
                "is_async": false
              },
              {
                "name": "get_continent_boundary",
                "line": 145,
                "args": [
                  "region_coords"
                ],
                "is_async": false
              },
              {
                "name": "fetch_weather_for_region",
                "line": 163,
                "args": [
                  "region_coord"
                ],
                "is_async": false
              },
              {
                "name": "fetch_weather_for_latlon",
                "line": 179,
                "args": [
                  "latitude",
                  "longitude"
                ],
                "is_async": false
              },
              {
                "name": "walk_region",
                "line": 206,
                "args": [
                  "seed_x",
                  "seed_y",
                  "target_count"
                ],
                "is_async": false
              },
              {
                "name": "pick_poi_type",
                "line": 255,
                "args": [],
                "is_async": false
              },
              {
                "name": "choose_poi_type",
                "line": 268,
                "args": [
                  "tile_danger"
                ],
                "is_async": false
              },
              {
                "name": "pick_valid_tile",
                "line": 287,
                "args": [
                  "tiles",
                  "placed_pois",
                  "min_spacing",
                  "forbidden_terrains",
                  "less_likely_terrains",
                  "less_likely_chance"
                ],
                "is_async": false
              },
              {
                "name": "pick_social_size",
                "line": 333,
                "args": [
                  "population"
                ],
                "is_async": false
              },
              {
                "name": "claim_region_hexes_for_city",
                "line": 352,
                "args": [
                  "region_data",
                  "city_tile",
                  "is_metropolis"
                ],
                "is_async": false
              },
              {
                "name": "generate_settlements",
                "line": 388,
                "args": [
                  "region_data",
                  "tiles",
                  "total_population",
                  "min_spacing",
                  "max_settlements"
                ],
                "is_async": false
              },
              {
                "name": "generate_non_settlement_pois",
                "line": 429,
                "args": [
                  "region_data",
                  "tiles",
                  "placed_pois",
                  "num_pois",
                  "min_spacing"
                ],
                "is_async": false
              },
              {
                "name": "generate_region",
                "line": 464,
                "args": [
                  "seed_x",
                  "seed_y"
                ],
                "is_async": false
              },
              {
                "name": "log_region_event",
                "line": 563,
                "args": [
                  "region_id",
                  "event_type",
                  "details"
                ],
                "is_async": false
              },
              {
                "name": "refresh_cleared_pois",
                "line": 590,
                "args": [],
                "is_async": false
              },
              {
                "name": "generate_monsters_for_tile",
                "line": 606,
                "args": [
                  "region",
                  "tile_id",
                  "party_cr"
                ],
                "is_async": false
              },
              {
                "name": "attempt_rest",
                "line": 644,
                "args": [
                  "region_name",
                  "poi_id",
                  "character"
                ],
                "is_async": false
              },
              {
                "name": "generate_social_poi",
                "line": 672,
                "args": [
                  "region_id",
                  "x",
                  "y",
                  "size"
                ],
                "is_async": false
              },
              {
                "name": "generate_tile",
                "line": 693,
                "args": [
                  "x",
                  "y",
                  "region_id"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_generation.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": true,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "openai",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/world_generation/worldgen_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "traceback",
            "line": 207,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/world_generation/worldgen_routes.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "memory": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/memory",
        "files": [
          "services.py",
          "cognitive_frames.py",
          "models.py",
          "memory.py",
          "__init__.py",
          "saliency_scoring.py",
          "memory_associations.py",
          "memory_routes.py",
          "summarization_styles.py",
          "memory_manager_core.py",
          "memory_categories.py",
          "memory_utils.py",
          "routers/__init__.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.memory.models",
                "names": [
                  "MemoryEntity",
                  "MemoryModel",
                  "CreateMemoryRequest",
                  "UpdateMemoryRequest",
                  "MemoryResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "MemoryNotFoundError",
                  "MemoryValidationError",
                  "MemoryConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_memory_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MemoryService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x1050237f0>"
                ],
                "methods": [
                  "__init__",
                  "create_memory",
                  "get_memory_by_id",
                  "update_memory",
                  "delete_memory",
                  "list_memorys",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_memory_statistics"
                ]
              }
            ]
          },
          {
            "file": "cognitive_frames.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MemoryBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "MemoryModel",
                "line": 36,
                "bases": [
                  "MemoryBaseModel"
                ],
                "methods": []
              },
              {
                "name": "MemoryEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateMemoryRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateMemoryRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MemoryResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MemoryListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "memory.py",
            "imports": [
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 6
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any",
                  "Optional",
                  "TypeVar",
                  "Type",
                  "Set",
                  "Union"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.memory.memory_categories",
                "names": [
                  "MemoryCategory",
                  "categorize_memory_content",
                  "apply_category_modifiers"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.memory.saliency_scoring",
                "names": [
                  "calculate_initial_importance",
                  "calculate_memory_saliency"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.models.event_dispatcher",
                "names": [
                  "EventBase"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "dateutil.parser",
                "names": [
                  "parse"
                ],
                "line": 311
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 48,
                "args": [
                  "self",
                  "target_memory_id",
                  "relationship_type",
                  "strength"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 53,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 61,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 72,
                "args": [
                  "self",
                  "npc_id",
                  "content",
                  "memory_id",
                  "memory_type",
                  "summary",
                  "created_at",
                  "categories",
                  "importance",
                  "metadata",
                  "event_dispatcher"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 134,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 152,
                "args": [
                  "cls",
                  "data",
                  "event_dispatcher"
                ],
                "is_async": false
              },
              {
                "name": "get_current_saliency",
                "line": 167,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "access",
                "line": 172,
                "args": [
                  "self",
                  "context"
                ],
                "is_async": false
              },
              {
                "name": "update_categories",
                "line": 195,
                "args": [
                  "self",
                  "new_categories"
                ],
                "is_async": false
              },
              {
                "name": "_emit_created_event",
                "line": 213,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_emit_accessed_event",
                "line": 225,
                "args": [
                  "self",
                  "context"
                ],
                "is_async": false
              },
              {
                "name": "_emit_categorized_event",
                "line": 234,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "decay",
                "line": 243,
                "args": [
                  "self",
                  "delta_seconds"
                ],
                "is_async": false
              },
              {
                "name": "is_expired",
                "line": 252,
                "args": [
                  "self",
                  "threshold"
                ],
                "is_async": false
              },
              {
                "name": "add_link",
                "line": 260,
                "args": [
                  "self",
                  "target_memory_id",
                  "relationship_type",
                  "strength"
                ],
                "is_async": false
              },
              {
                "name": "has_category",
                "line": 269,
                "args": [
                  "self",
                  "category"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 284,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 305,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MemoryCreatedEvent",
                "line": 18,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "MemoryDecayedEvent",
                "line": 27,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "MemoryCategorizedEvent",
                "line": 34,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "MemoryAccessedEvent",
                "line": 40,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "MemoryGraphLink",
                "line": 46,
                "bases": [],
                "methods": [
                  "__init__",
                  "to_dict",
                  "from_dict"
                ]
              },
              {
                "name": "Memory",
                "line": 68,
                "bases": [],
                "methods": [
                  "__init__",
                  "to_dict",
                  "from_dict",
                  "get_current_saliency",
                  "access",
                  "update_categories",
                  "_emit_created_event",
                  "_emit_accessed_event",
                  "_emit_categorized_event",
                  "decay",
                  "is_expired",
                  "add_link",
                  "has_category",
                  "to_dict",
                  "from_dict"
                ]
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.memory.memory",
                "names": [
                  "Memory",
                  "MemoryGraphLink",
                  "MemoryCreatedEvent",
                  "MemoryDecayedEvent",
                  "MemoryReinforcedEvent"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.memory.memory_manager",
                "names": [
                  "MemoryManager",
                  "VectorDBCollection",
                  "MockChromaCollection",
                  "DEFAULT_SUMMARIZATION_CONFIG"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.memory.memory_utils",
                "names": [
                  "store_interaction",
                  "update_long_term_memory",
                  "summarize_and_clean_memory",
                  "get_recent_interactions",
                  "generate_beliefs_from_meta_summary",
                  "log_permanent_memory",
                  "update_faction_memory",
                  "update_region_memory",
                  "update_world_memory",
                  "add_touchstone_memory",
                  "process_gpt_memory_entry",
                  "update_poi_memory"
                ],
                "line": 29
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "saliency_scoring.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "memory_associations.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "memory_routes.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "summarization_styles.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "memory_manager_core.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "memory_categories.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "memory_utils.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.memory.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.memory.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.memory.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "dateutil.parser",
            "line": 311,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "diplomacy": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/diplomacy",
        "files": [
          "services.py",
          "integration_services.py",
          "models.py",
          "core_services.py",
          "core_models.py",
          "__init__.py",
          "schemas.py",
          "db_models.py",
          "router.py",
          "repository.py",
          "db_repository.py",
          "models/diplomacy_model.py",
          "models/__init__.py",
          "services/diplomacy_service.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.models",
                "names": [
                  "DiplomacyEntity",
                  "DiplomacyModel",
                  "CreateDiplomacyRequest",
                  "UpdateDiplomacyRequest",
                  "DiplomacyResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "DiplomacyNotFoundError",
                  "DiplomacyValidationError",
                  "DiplomacyConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_diplomacy_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DiplomacyService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104fa37f0>"
                ],
                "methods": [
                  "__init__",
                  "create_diplomacy",
                  "get_diplomacy_by_id",
                  "update_diplomacy",
                  "delete_diplomacy",
                  "list_diplomacys",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_diplomacy_statistics"
                ]
              }
            ]
          },
          {
            "file": "integration_services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Union"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.core_services",
                "names": [
                  "DiplomacyService",
                  "TensionService"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.core_models",
                "names": [
                  "DiplomaticStatus",
                  "TreatyType",
                  "DiplomaticEventType",
                  "DiplomaticIncidentType",
                  "DiplomaticIncidentSeverity"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.event_dispatcher",
                "names": [
                  "EventDispatcher"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.services",
                "names": [
                  "FactionService",
                  "FactionRelationshipService"
                ],
                "line": 25
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services",
                "names": [
                  "CharacterService"
                ],
                "line": 34
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.services",
                "names": [
                  "QuestService"
                ],
                "line": 40
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.services",
                "names": [
                  "WorldStateService"
                ],
                "line": 46
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 57,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_register_event_handlers",
                "line": 68,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "sync_faction_relationships",
                "line": 254,
                "args": [
                  "self",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 306,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_register_event_handlers",
                "line": 316,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 477,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_register_event_handlers",
                "line": 487,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 725,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_register_event_handlers",
                "line": 735,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_regional_diplomatic_status",
                "line": 873,
                "args": [
                  "self",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 909,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "initialize_all_integrations",
                "line": 917,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_integration_status",
                "line": 934,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "FactionDiplomacyIntegration",
                "line": 54,
                "bases": [],
                "methods": [
                  "__init__",
                  "_register_event_handlers",
                  "_handle_faction_created",
                  "_handle_faction_dissolved",
                  "_handle_faction_reputation_changed",
                  "_handle_faction_leadership_changed",
                  "_handle_faction_territory_changed",
                  "sync_faction_relationships"
                ]
              },
              {
                "name": "CharacterDiplomacyIntegration",
                "line": 303,
                "bases": [],
                "methods": [
                  "__init__",
                  "_register_event_handlers",
                  "_handle_diplomatic_action",
                  "_handle_character_faction_joined",
                  "_handle_character_faction_left",
                  "_handle_character_reputation_changed"
                ]
              },
              {
                "name": "QuestDiplomacyIntegration",
                "line": 474,
                "bases": [],
                "methods": [
                  "__init__",
                  "_register_event_handlers",
                  "_handle_quest_completed",
                  "_handle_quest_failed",
                  "_handle_treaty_signed",
                  "_handle_incident_created",
                  "_handle_ultimatum_issued"
                ]
              },
              {
                "name": "WorldStateDiplomacyIntegration",
                "line": 722,
                "bases": [],
                "methods": [
                  "__init__",
                  "_register_event_handlers",
                  "_handle_day_passed",
                  "_handle_season_changed",
                  "_handle_economic_crisis",
                  "_handle_natural_disaster",
                  "_handle_resource_discovered",
                  "get_regional_diplomatic_status"
                ]
              },
              {
                "name": "DiplomacyIntegrationManager",
                "line": 906,
                "bases": [],
                "methods": [
                  "__init__",
                  "initialize_all_integrations",
                  "get_integration_status"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DiplomacyBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "DiplomacyModel",
                "line": 36,
                "bases": [
                  "DiplomacyBaseModel"
                ],
                "methods": []
              },
              {
                "name": "DiplomacyEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateDiplomacyRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateDiplomacyRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "DiplomacyResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "DiplomacyListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "core_services.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Tuple",
                  "Union"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.models",
                "names": [
                  "DiplomaticEvent",
                  "DiplomaticEventType",
                  "DiplomaticStatus",
                  "Negotiation",
                  "NegotiationOffer",
                  "NegotiationStatus",
                  "Treaty",
                  "TreatyType",
                  "TreatyViolation",
                  "TreatyViolationType",
                  "DiplomaticIncident",
                  "DiplomaticIncidentType",
                  "DiplomaticIncidentSeverity",
                  "Ultimatum",
                  "UltimatumStatus",
                  "Sanction",
                  "SanctionType",
                  "SanctionStatus"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.repository",
                "names": [
                  "DiplomacyRepository"
                ],
                "line": 35
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.event_dispatcher",
                "names": [
                  "EventDispatcher"
                ],
                "line": 36
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 50,
                "args": [
                  "self",
                  "repository"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_relationship",
                "line": 69,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_relationships",
                "line": 77,
                "args": [
                  "self",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "update_faction_tension",
                "line": 81,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id",
                  "tension_change",
                  "reason"
                ],
                "is_async": false
              },
              {
                "name": "set_diplomatic_status",
                "line": 151,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id",
                  "status"
                ],
                "is_async": false
              },
              {
                "name": "are_at_war",
                "line": 221,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id"
                ],
                "is_async": false
              },
              {
                "name": "are_allied",
                "line": 226,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id"
                ],
                "is_async": false
              },
              {
                "name": "check_war_threshold",
                "line": 231,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 240,
                "args": [
                  "self",
                  "repository"
                ],
                "is_async": false
              },
              {
                "name": "create_treaty",
                "line": 252,
                "args": [
                  "self",
                  "name",
                  "treaty_type",
                  "parties",
                  "terms",
                  "end_date",
                  "is_public",
                  "negotiation_id",
                  "created_by"
                ],
                "is_async": false
              },
              {
                "name": "_update_faction_relationships_for_treaty",
                "line": 305,
                "args": [
                  "self",
                  "treaty"
                ],
                "is_async": false
              },
              {
                "name": "_create_treaty_event",
                "line": 346,
                "args": [
                  "self",
                  "treaty"
                ],
                "is_async": false
              },
              {
                "name": "get_treaty",
                "line": 366,
                "args": [
                  "self",
                  "treaty_id"
                ],
                "is_async": false
              },
              {
                "name": "expire_treaty",
                "line": 370,
                "args": [
                  "self",
                  "treaty_id"
                ],
                "is_async": false
              },
              {
                "name": "_update_relationships_for_expired_treaty",
                "line": 399,
                "args": [
                  "self",
                  "treaty"
                ],
                "is_async": false
              },
              {
                "name": "list_treaties",
                "line": 434,
                "args": [
                  "self",
                  "faction_id",
                  "active_only",
                  "treaty_type"
                ],
                "is_async": false
              },
              {
                "name": "start_negotiation",
                "line": 445,
                "args": [
                  "self",
                  "parties",
                  "initiator_id",
                  "treaty_type",
                  "initial_offer",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "_create_negotiation_event",
                "line": 498,
                "args": [
                  "self",
                  "negotiation",
                  "action"
                ],
                "is_async": false
              },
              {
                "name": "_update_relationships_for_negotiation",
                "line": 520,
                "args": [
                  "self",
                  "negotiation"
                ],
                "is_async": false
              },
              {
                "name": "get_negotiation",
                "line": 547,
                "args": [
                  "self",
                  "negotiation_id"
                ],
                "is_async": false
              },
              {
                "name": "make_offer",
                "line": 551,
                "args": [
                  "self",
                  "negotiation_id",
                  "faction_id",
                  "terms",
                  "counter_to"
                ],
                "is_async": false
              },
              {
                "name": "accept_offer",
                "line": 600,
                "args": [
                  "self",
                  "negotiation_id",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "reject_offer",
                "line": 679,
                "args": [
                  "self",
                  "negotiation_id",
                  "faction_id",
                  "final"
                ],
                "is_async": false
              },
              {
                "name": "_update_relationships_for_completed_negotiation",
                "line": 751,
                "args": [
                  "self",
                  "negotiation",
                  "successful"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_relationship",
                "line": 780,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_relationships",
                "line": 784,
                "args": [
                  "self",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "update_faction_tension",
                "line": 788,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id",
                  "tension_change",
                  "reason"
                ],
                "is_async": false
              },
              {
                "name": "set_diplomatic_status",
                "line": 800,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id",
                  "status"
                ],
                "is_async": false
              },
              {
                "name": "are_at_war",
                "line": 809,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id"
                ],
                "is_async": false
              },
              {
                "name": "are_allied",
                "line": 813,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id"
                ],
                "is_async": false
              },
              {
                "name": "has_treaty_of_type",
                "line": 817,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id",
                  "treaty_type"
                ],
                "is_async": false
              },
              {
                "name": "report_treaty_violation",
                "line": 832,
                "args": [
                  "self",
                  "treaty_id",
                  "violator_id",
                  "violation_type",
                  "description",
                  "evidence",
                  "reported_by",
                  "severity"
                ],
                "is_async": false
              },
              {
                "name": "acknowledge_violation",
                "line": 917,
                "args": [
                  "self",
                  "violation_id",
                  "acknowledging_faction_id",
                  "resolution_details"
                ],
                "is_async": false
              },
              {
                "name": "resolve_violation",
                "line": 968,
                "args": [
                  "self",
                  "violation_id",
                  "resolution_details"
                ],
                "is_async": false
              },
              {
                "name": "get_treaty_violations",
                "line": 1015,
                "args": [
                  "self",
                  "treaty_id",
                  "faction_id",
                  "violation_type",
                  "resolved"
                ],
                "is_async": false
              },
              {
                "name": "check_treaty_compliance",
                "line": 1041,
                "args": [
                  "self",
                  "faction_id",
                  "violation_types"
                ],
                "is_async": false
              },
              {
                "name": "enforce_treaties_automatically",
                "line": 1081,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "create_diplomatic_incident",
                "line": 1109,
                "args": [
                  "self",
                  "incident_type",
                  "perpetrator_id",
                  "victim_id",
                  "description",
                  "evidence",
                  "severity",
                  "tension_impact",
                  "public",
                  "witnessed_by",
                  "related_event_id",
                  "related_treaty_id"
                ],
                "is_async": false
              },
              {
                "name": "get_diplomatic_incident",
                "line": 1177,
                "args": [
                  "self",
                  "incident_id"
                ],
                "is_async": false
              },
              {
                "name": "update_diplomatic_incident",
                "line": 1192,
                "args": [
                  "self",
                  "incident_id",
                  "severity",
                  "resolved",
                  "resolution_details"
                ],
                "is_async": false
              },
              {
                "name": "list_diplomatic_incidents",
                "line": 1227,
                "args": [
                  "self",
                  "faction_id",
                  "as_perpetrator",
                  "as_victim",
                  "resolved",
                  "incident_type",
                  "limit",
                  "offset"
                ],
                "is_async": false
              },
              {
                "name": "resolve_diplomatic_incident",
                "line": 1262,
                "args": [
                  "self",
                  "incident_id",
                  "resolution_details"
                ],
                "is_async": false
              },
              {
                "name": "notify_treaty_breach",
                "line": 1285,
                "args": [
                  "self",
                  "treaty_id",
                  "violator_id",
                  "incident_id"
                ],
                "is_async": false
              },
              {
                "name": "create_ultimatum",
                "line": 1329,
                "args": [
                  "self",
                  "issuer_id",
                  "recipient_id",
                  "demands",
                  "consequences",
                  "deadline",
                  "justification",
                  "public",
                  "witnessed_by",
                  "related_incident_id",
                  "related_treaty_id",
                  "related_event_id",
                  "tension_change_on_issue",
                  "tension_change_on_accept",
                  "tension_change_on_reject"
                ],
                "is_async": false
              },
              {
                "name": "get_ultimatum",
                "line": 1397,
                "args": [
                  "self",
                  "ultimatum_id"
                ],
                "is_async": false
              },
              {
                "name": "update_ultimatum",
                "line": 1412,
                "args": [
                  "self",
                  "ultimatum_id",
                  "status",
                  "deadline",
                  "demands",
                  "consequences"
                ],
                "is_async": false
              },
              {
                "name": "list_ultimatums",
                "line": 1482,
                "args": [
                  "self",
                  "faction_id",
                  "as_issuer",
                  "as_recipient",
                  "status",
                  "active_only",
                  "limit",
                  "offset"
                ],
                "is_async": false
              },
              {
                "name": "respond_to_ultimatum",
                "line": 1517,
                "args": [
                  "self",
                  "ultimatum_id",
                  "accept",
                  "response_justification"
                ],
                "is_async": false
              },
              {
                "name": "check_expired_ultimatums",
                "line": 1557,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_handle_accepted_ultimatum",
                "line": 1603,
                "args": [
                  "self",
                  "ultimatum"
                ],
                "is_async": false
              },
              {
                "name": "_handle_rejected_ultimatum",
                "line": 1630,
                "args": [
                  "self",
                  "ultimatum"
                ],
                "is_async": false
              },
              {
                "name": "create_sanction",
                "line": 1673,
                "args": [
                  "self",
                  "imposer_id",
                  "target_id",
                  "sanction_type",
                  "description",
                  "justification",
                  "end_date",
                  "conditions_for_lifting",
                  "severity",
                  "economic_impact",
                  "diplomatic_impact",
                  "enforcement_measures",
                  "supporting_factions",
                  "opposing_factions",
                  "is_public"
                ],
                "is_async": false
              },
              {
                "name": "get_sanction",
                "line": 1785,
                "args": [
                  "self",
                  "sanction_id"
                ],
                "is_async": false
              },
              {
                "name": "update_sanction",
                "line": 1797,
                "args": [
                  "self",
                  "sanction_id",
                  "status",
                  "end_date",
                  "lifted_date",
                  "conditions_for_lifting",
                  "enforcement_measures",
                  "supporting_factions",
                  "opposing_factions"
                ],
                "is_async": false
              },
              {
                "name": "lift_sanction",
                "line": 1885,
                "args": [
                  "self",
                  "sanction_id",
                  "reason"
                ],
                "is_async": false
              },
              {
                "name": "list_sanctions",
                "line": 1915,
                "args": [
                  "self",
                  "imposer_id",
                  "target_id",
                  "sanction_type",
                  "status",
                  "active_only",
                  "limit",
                  "offset"
                ],
                "is_async": false
              },
              {
                "name": "record_sanction_violation",
                "line": 1950,
                "args": [
                  "self",
                  "sanction_id",
                  "description",
                  "evidence",
                  "reported_by",
                  "severity"
                ],
                "is_async": false
              },
              {
                "name": "check_expired_sanctions",
                "line": 2016,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "TensionService",
                "line": 40,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_faction_relationship",
                  "get_faction_relationships",
                  "update_faction_tension",
                  "set_diplomatic_status",
                  "are_at_war",
                  "are_allied",
                  "check_war_threshold"
                ]
              },
              {
                "name": "DiplomacyService",
                "line": 237,
                "bases": [],
                "methods": [
                  "__init__",
                  "create_treaty",
                  "_update_faction_relationships_for_treaty",
                  "_create_treaty_event",
                  "get_treaty",
                  "expire_treaty",
                  "_update_relationships_for_expired_treaty",
                  "list_treaties",
                  "start_negotiation",
                  "_create_negotiation_event",
                  "_update_relationships_for_negotiation",
                  "get_negotiation",
                  "make_offer",
                  "accept_offer",
                  "reject_offer",
                  "_update_relationships_for_completed_negotiation",
                  "get_faction_relationship",
                  "get_faction_relationships",
                  "update_faction_tension",
                  "set_diplomatic_status",
                  "are_at_war",
                  "are_allied",
                  "has_treaty_of_type",
                  "report_treaty_violation",
                  "acknowledge_violation",
                  "resolve_violation",
                  "get_treaty_violations",
                  "check_treaty_compliance",
                  "enforce_treaties_automatically",
                  "create_diplomatic_incident",
                  "get_diplomatic_incident",
                  "update_diplomatic_incident",
                  "list_diplomatic_incidents",
                  "resolve_diplomatic_incident",
                  "notify_treaty_breach",
                  "create_ultimatum",
                  "get_ultimatum",
                  "update_ultimatum",
                  "list_ultimatums",
                  "respond_to_ultimatum",
                  "check_expired_ultimatums",
                  "_handle_accepted_ultimatum",
                  "_handle_rejected_ultimatum",
                  "create_sanction",
                  "get_sanction",
                  "update_sanction",
                  "lift_sanction",
                  "list_sanctions",
                  "record_sanction_violation",
                  "check_expired_sanctions"
                ]
              }
            ]
          },
          {
            "file": "core_models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Union"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 16
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "DiplomaticStatus",
                "line": 19,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "TreatyType",
                "line": 29,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "NegotiationOffer",
                "line": 41,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "NegotiationStatus",
                "line": 50,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "Treaty",
                "line": 60,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Negotiation",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "DiplomaticEventType",
                "line": 92,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "DiplomaticEvent",
                "line": 116,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "TreatyViolationType",
                "line": 131,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "TreatyViolation",
                "line": 145,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "DiplomaticIncidentType",
                "line": 161,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "DiplomaticIncidentSeverity",
                "line": 184,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "DiplomaticIncident",
                "line": 192,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UltimatumStatus",
                "line": 212,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "Ultimatum",
                "line": 220,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "SanctionType",
                "line": 242,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "SanctionStatus",
                "line": 256,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "Sanction",
                "line": 265,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "TreatyStatus",
                "line": 288,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "FactionRelationship",
                "line": 301,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 328,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.core_models",
                "names": [
                  "DiplomaticStatus",
                  "TreatyType",
                  "TreatyStatus",
                  "NegotiationStatus",
                  "DiplomaticEventType",
                  "TreatyViolationType",
                  "DiplomaticIncidentType",
                  "DiplomaticIncidentSeverity",
                  "UltimatumStatus",
                  "SanctionType",
                  "SanctionStatus",
                  "Treaty",
                  "Negotiation",
                  "NegotiationOffer",
                  "DiplomaticEvent",
                  "TreatyViolation",
                  "DiplomaticIncident",
                  "Ultimatum",
                  "Sanction"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.schemas",
                "names": [
                  "TreatyCreate",
                  "TreatyUpdate",
                  "TreatySchema",
                  "NegotiationCreate",
                  "NegotiationUpdate",
                  "NegotiationSchema",
                  "NegotiationOfferCreate",
                  "NegotiationOfferSchema",
                  "DiplomaticEventCreate",
                  "DiplomaticEventSchema",
                  "FactionRelationshipSchema",
                  "TreatyViolationCreate",
                  "TreatyViolationUpdate",
                  "TreatyViolationSchema",
                  "DiplomaticIncidentCreate",
                  "DiplomaticIncidentUpdate",
                  "DiplomaticIncidentSchema",
                  "UltimatumCreate",
                  "UltimatumUpdate",
                  "UltimatumSchema",
                  "SanctionCreate",
                  "SanctionUpdate",
                  "SanctionSchema",
                  "SanctionViolationRecord"
                ],
                "line": 33
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.core_services",
                "names": [
                  "DiplomacyService",
                  "TensionService"
                ],
                "line": 60
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.integration_services",
                "names": [
                  "FactionDiplomacyIntegration",
                  "CharacterDiplomacyIntegration",
                  "QuestDiplomacyIntegration",
                  "WorldStateDiplomacyIntegration",
                  "DiplomacyIntegrationManager"
                ],
                "line": 65
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.router",
                "names": [
                  "diplomacy_router"
                ],
                "line": 73
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Union"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.core_models",
                "names": [
                  "DiplomaticEventType",
                  "DiplomaticIncidentSeverity",
                  "DiplomaticIncidentType",
                  "DiplomaticStatus",
                  "NegotiationStatus",
                  "SanctionStatus",
                  "SanctionType",
                  "TreatyType",
                  "TreatyViolationType",
                  "UltimatumStatus"
                ],
                "line": 14
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "TreatyCreate",
                "line": 28,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "TreatyUpdate",
                "line": 39,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "TreatySchema",
                "line": 48,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "NegotiationOfferCreate",
                "line": 67,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "NegotiationOfferSchema",
                "line": 74,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "NegotiationCreate",
                "line": 86,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "NegotiationUpdate",
                "line": 95,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "NegotiationSchema",
                "line": 104,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "DiplomaticEventCreate",
                "line": 122,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "DiplomaticEventSchema",
                "line": 135,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "FactionRelationshipSchema",
                "line": 153,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "TreatyViolationCreate",
                "line": 167,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "TreatyViolationUpdate",
                "line": 178,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "TreatyViolationSchema",
                "line": 185,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "DiplomaticIncidentCreate",
                "line": 204,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "DiplomaticIncidentUpdate",
                "line": 219,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "DiplomaticIncidentSchema",
                "line": 227,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UltimatumCreate",
                "line": 250,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UltimatumUpdate",
                "line": 268,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UltimatumSchema",
                "line": 277,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "SanctionCreate",
                "line": 302,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "SanctionUpdate",
                "line": 320,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "SanctionViolationRecord",
                "line": 332,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "SanctionSchema",
                "line": 341,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 63,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 82,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 118,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 149,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 163,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 200,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 246,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 298,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 363,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "db_models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "Float",
                  "Boolean",
                  "DateTime",
                  "Text",
                  "JSON",
                  "ForeignKey",
                  "Enum",
                  "UniqueConstraint",
                  "Index"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.sql",
                "names": [
                  "func"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.models",
                "names": [
                  "DiplomaticStatus",
                  "TreatyType",
                  "TreatyStatus",
                  "NegotiationStatus",
                  "DiplomaticEventType",
                  "TreatyViolationType",
                  "DiplomaticIncidentType",
                  "DiplomaticIncidentSeverity",
                  "UltimatumStatus",
                  "SanctionType",
                  "SanctionStatus"
                ],
                "line": 21
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "DiplomaticRelationship",
                "line": 31,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "Treaty",
                "line": 54,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "Negotiation",
                "line": 84,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "DiplomaticEvent",
                "line": 112,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "TreatyViolation",
                "line": 138,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "DiplomaticIncident",
                "line": 170,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "Ultimatum",
                "line": 201,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "Sanction",
                "line": 234,
                "bases": [
                  "Base"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "Query",
                  "Body"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.models",
                "names": [
                  "DiplomaticEventType",
                  "DiplomaticIncidentType",
                  "DiplomaticStatus",
                  "SanctionStatus",
                  "SanctionType",
                  "TreatyType",
                  "TreatyViolationType",
                  "UltimatumStatus"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.schemas",
                "names": [
                  "DiplomaticEventCreate",
                  "DiplomaticEventSchema",
                  "DiplomaticIncidentCreate",
                  "DiplomaticIncidentSchema",
                  "DiplomaticIncidentUpdate",
                  "FactionRelationshipSchema",
                  "NegotiationCreate",
                  "NegotiationOfferCreate",
                  "NegotiationSchema",
                  "NegotiationUpdate",
                  "SanctionCreate",
                  "SanctionSchema",
                  "SanctionUpdate",
                  "SanctionViolationRecord",
                  "TreatyCreate",
                  "TreatySchema",
                  "TreatyUpdate",
                  "TreatyViolationCreate",
                  "TreatyViolationSchema",
                  "UltimatumCreate",
                  "UltimatumSchema",
                  "UltimatumUpdate"
                ],
                "line": 23
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.services",
                "names": [
                  "DiplomacyService",
                  "TensionService"
                ],
                "line": 47
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.integration_services",
                "names": [
                  "DiplomacyIntegrationManager"
                ],
                "line": 787
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.integration_services",
                "names": [
                  "DiplomacyIntegrationManager"
                ],
                "line": 798
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.integration_services",
                "names": [
                  "FactionDiplomacyIntegration"
                ],
                "line": 814
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.integration_services",
                "names": [
                  "WorldStateDiplomacyIntegration"
                ],
                "line": 831
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.integration_services",
                "names": [
                  "DiplomacyIntegrationManager"
                ],
                "line": 854
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.integration_services",
                "names": [
                  "DiplomacyIntegrationManager"
                ],
                "line": 880
              }
            ],
            "functions": [
              {
                "name": "get_diplomacy_service",
                "line": 59,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_tension_service",
                "line": 64,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "repository.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Tuple",
                  "Union"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.models",
                "names": [
                  "DiplomaticEvent",
                  "DiplomaticEventType",
                  "DiplomaticIncident",
                  "DiplomaticIncidentSeverity",
                  "DiplomaticIncidentType",
                  "DiplomaticStatus",
                  "Negotiation",
                  "NegotiationStatus",
                  "Sanction",
                  "SanctionStatus",
                  "SanctionType",
                  "Treaty",
                  "TreatyType",
                  "TreatyViolation",
                  "TreatyViolationType",
                  "Ultimatum",
                  "UltimatumStatus"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 38,
                "args": [
                  "self",
                  "data_dir"
                ],
                "is_async": false
              },
              {
                "name": "create_treaty",
                "line": 63,
                "args": [
                  "self",
                  "treaty"
                ],
                "is_async": false
              },
              {
                "name": "get_treaty",
                "line": 70,
                "args": [
                  "self",
                  "treaty_id"
                ],
                "is_async": false
              },
              {
                "name": "update_treaty",
                "line": 79,
                "args": [
                  "self",
                  "treaty_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "delete_treaty",
                "line": 100,
                "args": [
                  "self",
                  "treaty_id"
                ],
                "is_async": false
              },
              {
                "name": "list_treaties",
                "line": 109,
                "args": [
                  "self",
                  "faction_id",
                  "active_only",
                  "treaty_type"
                ],
                "is_async": false
              },
              {
                "name": "create_negotiation",
                "line": 144,
                "args": [
                  "self",
                  "negotiation"
                ],
                "is_async": false
              },
              {
                "name": "get_negotiation",
                "line": 151,
                "args": [
                  "self",
                  "negotiation_id"
                ],
                "is_async": false
              },
              {
                "name": "update_negotiation",
                "line": 160,
                "args": [
                  "self",
                  "negotiation_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "delete_negotiation",
                "line": 178,
                "args": [
                  "self",
                  "negotiation_id"
                ],
                "is_async": false
              },
              {
                "name": "list_negotiations",
                "line": 187,
                "args": [
                  "self",
                  "faction_id",
                  "status"
                ],
                "is_async": false
              },
              {
                "name": "create_event",
                "line": 217,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "get_event",
                "line": 224,
                "args": [
                  "self",
                  "event_id"
                ],
                "is_async": false
              },
              {
                "name": "list_events",
                "line": 233,
                "args": [
                  "self",
                  "faction_id",
                  "event_type",
                  "start_time",
                  "end_time",
                  "public_only"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_relationship",
                "line": 279,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id"
                ],
                "is_async": false
              },
              {
                "name": "update_faction_relationship",
                "line": 301,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "get_all_faction_relationships",
                "line": 329,
                "args": [
                  "self",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "create_violation",
                "line": 365,
                "args": [
                  "self",
                  "violation"
                ],
                "is_async": false
              },
              {
                "name": "get_violation",
                "line": 372,
                "args": [
                  "self",
                  "violation_id"
                ],
                "is_async": false
              },
              {
                "name": "update_violation",
                "line": 381,
                "args": [
                  "self",
                  "violation_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "list_violations",
                "line": 399,
                "args": [
                  "self",
                  "treaty_id",
                  "faction_id",
                  "violation_type",
                  "resolved"
                ],
                "is_async": false
              },
              {
                "name": "create_ultimatum",
                "line": 439,
                "args": [
                  "self",
                  "ultimatum"
                ],
                "is_async": false
              },
              {
                "name": "get_ultimatum",
                "line": 498,
                "args": [
                  "self",
                  "ultimatum_id"
                ],
                "is_async": false
              },
              {
                "name": "update_ultimatum",
                "line": 516,
                "args": [
                  "self",
                  "ultimatum_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "list_ultimatums",
                "line": 582,
                "args": [
                  "self",
                  "faction_id",
                  "as_issuer",
                  "as_recipient",
                  "status",
                  "active_only",
                  "limit",
                  "offset"
                ],
                "is_async": false
              },
              {
                "name": "_load_ultimatums",
                "line": 650,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_save_ultimatums",
                "line": 663,
                "args": [
                  "self",
                  "ultimatums"
                ],
                "is_async": false
              },
              {
                "name": "create_sanction",
                "line": 675,
                "args": [
                  "self",
                  "sanction"
                ],
                "is_async": false
              },
              {
                "name": "get_sanction",
                "line": 690,
                "args": [
                  "self",
                  "sanction_id"
                ],
                "is_async": false
              },
              {
                "name": "update_sanction",
                "line": 707,
                "args": [
                  "self",
                  "sanction_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "delete_sanction",
                "line": 734,
                "args": [
                  "self",
                  "sanction_id"
                ],
                "is_async": false
              },
              {
                "name": "list_sanctions",
                "line": 751,
                "args": [
                  "self",
                  "imposer_id",
                  "target_id",
                  "sanction_type",
                  "status",
                  "active_only",
                  "limit",
                  "offset"
                ],
                "is_async": false
              },
              {
                "name": "record_sanction_violation",
                "line": 810,
                "args": [
                  "self",
                  "sanction_id",
                  "violation"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DiplomacyRepository",
                "line": 35,
                "bases": [],
                "methods": [
                  "__init__",
                  "create_treaty",
                  "get_treaty",
                  "update_treaty",
                  "delete_treaty",
                  "list_treaties",
                  "create_negotiation",
                  "get_negotiation",
                  "update_negotiation",
                  "delete_negotiation",
                  "list_negotiations",
                  "create_event",
                  "get_event",
                  "list_events",
                  "get_faction_relationship",
                  "update_faction_relationship",
                  "get_all_faction_relationships",
                  "create_violation",
                  "get_violation",
                  "update_violation",
                  "list_violations",
                  "create_ultimatum",
                  "get_ultimatum",
                  "update_ultimatum",
                  "list_ultimatums",
                  "_load_ultimatums",
                  "_save_ultimatums",
                  "create_sanction",
                  "get_sanction",
                  "update_sanction",
                  "delete_sanction",
                  "list_sanctions",
                  "record_sanction_violation"
                ]
              }
            ]
          },
          {
            "file": "db_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Tuple",
                  "Union"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "desc",
                  "asc"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.exc",
                "names": [
                  "IntegrityError"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.db_models",
                "names": [
                  "DiplomaticRelationship",
                  "Treaty",
                  "Negotiation",
                  "DiplomaticEvent",
                  "TreatyViolation",
                  "DiplomaticIncident",
                  "Ultimatum",
                  "Sanction"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacy.models",
                "names": [
                  "DiplomaticStatus",
                  "TreatyType",
                  "TreatyStatus",
                  "NegotiationStatus",
                  "DiplomaticEventType",
                  "TreatyViolationType",
                  "DiplomaticIncidentType",
                  "DiplomaticIncidentSeverity",
                  "UltimatumStatus",
                  "SanctionType",
                  "SanctionStatus",
                  "Treaty",
                  "Negotiation",
                  "DiplomaticEvent",
                  "TreatyViolation",
                  "DiplomaticIncident",
                  "Ultimatum",
                  "Sanction"
                ],
                "line": 28
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 40,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "_get_session",
                "line": 49,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_relationship",
                "line": 58,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id"
                ],
                "is_async": false
              },
              {
                "name": "create_or_update_faction_relationship",
                "line": 88,
                "args": [
                  "self",
                  "faction_a_id",
                  "faction_b_id",
                  "status",
                  "trust_level",
                  "tension_level"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_relationships",
                "line": 145,
                "args": [
                  "self",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "create_treaty",
                "line": 173,
                "args": [
                  "self",
                  "treaty_data"
                ],
                "is_async": false
              },
              {
                "name": "get_treaty",
                "line": 196,
                "args": [
                  "self",
                  "treaty_id"
                ],
                "is_async": false
              },
              {
                "name": "update_treaty",
                "line": 206,
                "args": [
                  "self",
                  "treaty_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "list_treaties",
                "line": 223,
                "args": [
                  "self",
                  "faction_id",
                  "active_only",
                  "treaty_type",
                  "limit",
                  "offset"
                ],
                "is_async": false
              },
              {
                "name": "create_negotiation",
                "line": 253,
                "args": [
                  "self",
                  "negotiation_data"
                ],
                "is_async": false
              },
              {
                "name": "get_negotiation",
                "line": 274,
                "args": [
                  "self",
                  "negotiation_id"
                ],
                "is_async": false
              },
              {
                "name": "update_negotiation",
                "line": 287,
                "args": [
                  "self",
                  "negotiation_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "_db_treaty_to_pydantic",
                "line": 308,
                "args": [
                  "self",
                  "db_treaty"
                ],
                "is_async": false
              },
              {
                "name": "_db_negotiation_to_pydantic",
                "line": 326,
                "args": [
                  "self",
                  "db_negotiation"
                ],
                "is_async": false
              },
              {
                "name": "create_diplomatic_event",
                "line": 345,
                "args": [
                  "self",
                  "event_data"
                ],
                "is_async": false
              },
              {
                "name": "_db_event_to_pydantic",
                "line": 365,
                "args": [
                  "self",
                  "db_event"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DiplomacyDatabaseRepository",
                "line": 37,
                "bases": [],
                "methods": [
                  "__init__",
                  "_get_session",
                  "get_faction_relationship",
                  "create_or_update_faction_relationship",
                  "get_faction_relationships",
                  "create_treaty",
                  "get_treaty",
                  "update_treaty",
                  "list_treaties",
                  "create_negotiation",
                  "get_negotiation",
                  "update_negotiation",
                  "_db_treaty_to_pydantic",
                  "_db_negotiation_to_pydantic",
                  "create_diplomatic_event",
                  "_db_event_to_pydantic"
                ]
              }
            ]
          },
          {
            "file": "models/diplomacy_model.py",
            "imports": [
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "Integer",
                  "String",
                  "DateTime",
                  "Text"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "Optional"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "to_dict",
                "line": 23,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 34,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DiplomacyModel",
                "line": 12,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "to_dict",
                  "from_dict"
                ]
              }
            ]
          },
          {
            "file": "models/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.diplomacydiplomacy_model",
                "names": [
                  "DiplomacyModel"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/diplomacy_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.diplomacymodels.diplomacy_model",
                "names": [
                  "DiplomacyModel"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 12,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "get_diplomacy",
                "line": 15,
                "args": [
                  "self",
                  "diplomacy_id"
                ],
                "is_async": false
              },
              {
                "name": "get_all_diplomacys",
                "line": 29,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "create_diplomacy",
                "line": 40,
                "args": [
                  "self",
                  "diplomacy_data"
                ],
                "is_async": false
              },
              {
                "name": "update_diplomacy",
                "line": 51,
                "args": [
                  "self",
                  "diplomacy_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "delete_diplomacy",
                "line": 66,
                "args": [
                  "self",
                  "diplomacy_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DiplomacyService",
                "line": 9,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_diplomacy",
                  "get_all_diplomacys",
                  "create_diplomacy",
                  "update_diplomacy",
                  "delete_diplomacy"
                ]
              }
            ]
          },
          {
            "file": "services/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.diplomacydiplomacy_service",
                "names": [
                  "DiplomacyService"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": true,
        "has_routers": true,
        "has_schemas": true,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 12,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.diplomacydiplomacy_model",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/models/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.diplomacymodels.diplomacy_model",
            "line": 7,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/services/diplomacy_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.diplomacydiplomacy_service",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/services/__init__.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "combat": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/combat",
        "files": [
          "combat_ram.py",
          "fog_of_war.py",
          "services.py",
          "effect_pipeline.py",
          "models.py",
          "combat_area.py",
          "combat_debug_interface.py",
          "effect_visualizer.py",
          "__init__.py",
          "object_pool.py",
          "status_effects_utils.py",
          "combat_handler_class.py",
          "combat_class.py",
          "combat_narrative_utils.py",
          "action_system.py",
          "combat_animation_system.py",
          "combat_state_class.py",
          "turn_queue.py",
          "combat_state_firebase_utils.py",
          "routers/combat_router.py",
          "routers/__init__.py",
          "repositories/__init__.py",
          "repositories/combat_repository.py",
          "models/__init__.py",
          "models/stats.py",
          "schemas/combat.py",
          "schemas/__init__.py",
          "services/__init__.py",
          "services/combat_service.py"
        ],
        "modules": [
          {
            "file": "combat_ram.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "fog_of_war.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 15
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 16
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Tuple",
                  "Set",
                  "Union"
                ],
                "line": 17
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 18
              },
              {
                "type": "import",
                "module": "time",
                "alias": null,
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.combat_area",
                "names": [
                  "CombatArea",
                  "Position"
                ],
                "line": 21
              }
            ],
            "functions": [
              {
                "name": "create_fog_of_war",
                "line": 437,
                "args": [
                  "combat_area"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 41,
                "args": [
                  "self",
                  "combat_area"
                ],
                "is_async": false
              },
              {
                "name": "update_entity",
                "line": 65,
                "args": [
                  "self",
                  "entity_id",
                  "stealth",
                  "detection",
                  "position"
                ],
                "is_async": false
              },
              {
                "name": "_clear_los_cache_for_entity",
                "line": 106,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_los_data",
                "line": 126,
                "args": [
                  "self",
                  "entity_id",
                  "target_id"
                ],
                "is_async": false
              },
              {
                "name": "update_awareness",
                "line": 175,
                "args": [
                  "self",
                  "observer_id",
                  "target_id",
                  "delta_awareness"
                ],
                "is_async": false
              },
              {
                "name": "calculate_visibility",
                "line": 205,
                "args": [
                  "self",
                  "observer_id",
                  "target_id",
                  "recalculate"
                ],
                "is_async": false
              },
              {
                "name": "_update_visibility",
                "line": 281,
                "args": [
                  "self",
                  "observer_id",
                  "target_id",
                  "visibility"
                ],
                "is_async": false
              },
              {
                "name": "get_visible_entities",
                "line": 302,
                "args": [
                  "self",
                  "observer_id",
                  "min_visibility"
                ],
                "is_async": false
              },
              {
                "name": "update_all_visibility",
                "line": 348,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "simulate_perception_check",
                "line": 357,
                "args": [
                  "self",
                  "observer_id",
                  "target_id",
                  "check_bonus"
                ],
                "is_async": false
              },
              {
                "name": "reset",
                "line": 416,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 427,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "VisibilityStatus",
                "line": 26,
                "bases": [],
                "methods": []
              },
              {
                "name": "FogOfWar",
                "line": 33,
                "bases": [],
                "methods": [
                  "__init__",
                  "update_entity",
                  "_clear_los_cache_for_entity",
                  "_get_los_data",
                  "update_awareness",
                  "calculate_visibility",
                  "_update_visibility",
                  "get_visible_entities",
                  "update_all_visibility",
                  "simulate_perception_check",
                  "reset",
                  "to_dict"
                ]
              }
            ]
          },
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.models",
                "names": [
                  "CombatEntity",
                  "CombatModel",
                  "CreateCombatRequest",
                  "UpdateCombatRequest",
                  "CombatResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "CombatNotFoundError",
                  "CombatValidationError",
                  "CombatConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_combat_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CombatService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104f637f0>"
                ],
                "methods": [
                  "__init__",
                  "create_combat",
                  "get_combat_by_id",
                  "update_combat",
                  "delete_combat",
                  "list_combats",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_combat_statistics"
                ]
              }
            ]
          },
          {
            "file": "effect_pipeline.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 12
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Set",
                  "Optional",
                  "Callable",
                  "Tuple"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum",
                  "auto"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "apply",
                "line": 64,
                "args": [
                  "self",
                  "target"
                ],
                "is_async": false
              },
              {
                "name": "remove",
                "line": 83,
                "args": [
                  "self",
                  "target"
                ],
                "is_async": false
              },
              {
                "name": "on_turn_start_trigger",
                "line": 99,
                "args": [
                  "self",
                  "target"
                ],
                "is_async": false
              },
              {
                "name": "on_turn_end_trigger",
                "line": 109,
                "args": [
                  "self",
                  "target"
                ],
                "is_async": false
              },
              {
                "name": "on_stacked_trigger",
                "line": 123,
                "args": [
                  "self",
                  "target",
                  "stack_count"
                ],
                "is_async": false
              },
              {
                "name": "can_stack",
                "line": 134,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "stack",
                "line": 144,
                "args": [
                  "self",
                  "new_effect"
                ],
                "is_async": false
              },
              {
                "name": "is_expired",
                "line": 169,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "modify_damage",
                "line": 178,
                "args": [
                  "self",
                  "damage",
                  "damage_type"
                ],
                "is_async": false
              },
              {
                "name": "get_icon_info",
                "line": 192,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 211,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 217,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 223,
                "args": [
                  "self",
                  "damage_per_turn",
                  "damage_type"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 240,
                "args": [
                  "self",
                  "heal_per_turn"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 256,
                "args": [
                  "self",
                  "condition"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 264,
                "args": [
                  "self",
                  "damage_types",
                  "resistance_multiplier"
                ],
                "is_async": false
              },
              {
                "name": "modify_damage",
                "line": 269,
                "args": [
                  "self",
                  "damage",
                  "damage_type"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 277,
                "args": [
                  "self",
                  "damage_types",
                  "vulnerability_multiplier"
                ],
                "is_async": false
              },
              {
                "name": "modify_damage",
                "line": 282,
                "args": [
                  "self",
                  "damage",
                  "damage_type"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 290,
                "args": [
                  "self",
                  "damage_types",
                  "immune_effects"
                ],
                "is_async": false
              },
              {
                "name": "modify_damage",
                "line": 295,
                "args": [
                  "self",
                  "damage",
                  "damage_type"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 308,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_applied_effects",
                "line": 318,
                "args": [
                  "self",
                  "combatant"
                ],
                "is_async": false
              },
              {
                "name": "_get_combatant_id",
                "line": 331,
                "args": [
                  "self",
                  "combatant"
                ],
                "is_async": false
              },
              {
                "name": "_get_matching_effects",
                "line": 347,
                "args": [
                  "self",
                  "combatant",
                  "effect_type",
                  "effect_name"
                ],
                "is_async": false
              },
              {
                "name": "apply_effect",
                "line": 374,
                "args": [
                  "self",
                  "source",
                  "target",
                  "effect"
                ],
                "is_async": false
              },
              {
                "name": "remove_effect",
                "line": 444,
                "args": [
                  "self",
                  "target",
                  "effect"
                ],
                "is_async": false
              },
              {
                "name": "remove_effects_by_type",
                "line": 476,
                "args": [
                  "self",
                  "target",
                  "effect_type"
                ],
                "is_async": false
              },
              {
                "name": "remove_effects_by_name",
                "line": 501,
                "args": [
                  "self",
                  "target",
                  "effect_name"
                ],
                "is_async": false
              },
              {
                "name": "clear_effects",
                "line": 526,
                "args": [
                  "self",
                  "target"
                ],
                "is_async": false
              },
              {
                "name": "clear_all_effects",
                "line": 550,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "process_turn_start",
                "line": 570,
                "args": [
                  "self",
                  "combatant"
                ],
                "is_async": false
              },
              {
                "name": "process_turn_end",
                "line": 586,
                "args": [
                  "self",
                  "combatant"
                ],
                "is_async": false
              },
              {
                "name": "process_before_action",
                "line": 611,
                "args": [
                  "self",
                  "source",
                  "action",
                  "target"
                ],
                "is_async": false
              },
              {
                "name": "process_after_action",
                "line": 640,
                "args": [
                  "self",
                  "source",
                  "action",
                  "target"
                ],
                "is_async": false
              },
              {
                "name": "modify_damage",
                "line": 652,
                "args": [
                  "self",
                  "source",
                  "target",
                  "damage",
                  "damage_type"
                ],
                "is_async": false
              },
              {
                "name": "process_damage",
                "line": 678,
                "args": [
                  "self",
                  "target",
                  "damage"
                ],
                "is_async": false
              },
              {
                "name": "process_deal_damage",
                "line": 689,
                "args": [
                  "self",
                  "source",
                  "target",
                  "damage"
                ],
                "is_async": false
              },
              {
                "name": "process_death",
                "line": 701,
                "args": [
                  "self",
                  "target"
                ],
                "is_async": false
              },
              {
                "name": "process_kill",
                "line": 711,
                "args": [
                  "self",
                  "source",
                  "target"
                ],
                "is_async": false
              },
              {
                "name": "process_heal",
                "line": 722,
                "args": [
                  "self",
                  "source",
                  "target",
                  "healing"
                ],
                "is_async": false
              },
              {
                "name": "process_healed",
                "line": 734,
                "args": [
                  "self",
                  "target",
                  "source",
                  "healing"
                ],
                "is_async": false
              },
              {
                "name": "register_effect_applied_callback",
                "line": 746,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "register_effect_removed_callback",
                "line": 756,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "register_effect_expired_callback",
                "line": 766,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "unregister_effect_applied_callback",
                "line": 776,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "unregister_effect_removed_callback",
                "line": 786,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "unregister_effect_expired_callback",
                "line": 796,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "is_immune_to_effect",
                "line": 806,
                "args": [
                  "self",
                  "target",
                  "effect"
                ],
                "is_async": false
              },
              {
                "name": "apply_damage",
                "line": 229,
                "args": [
                  "effect",
                  "target"
                ],
                "is_async": false
              },
              {
                "name": "apply_healing",
                "line": 245,
                "args": [
                  "effect",
                  "target"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EffectStackingBehavior",
                "line": 21,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "EffectType",
                "line": 29,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "CombatEffect",
                "line": 41,
                "bases": [],
                "methods": [
                  "apply",
                  "remove",
                  "on_turn_start_trigger",
                  "on_turn_end_trigger",
                  "on_stacked_trigger",
                  "can_stack",
                  "stack",
                  "is_expired",
                  "modify_damage",
                  "get_icon_info"
                ]
              },
              {
                "name": "BuffEffect",
                "line": 208,
                "bases": [
                  "CombatEffect"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "DebuffEffect",
                "line": 214,
                "bases": [
                  "CombatEffect"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "DamageOverTimeEffect",
                "line": 220,
                "bases": [
                  "CombatEffect"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "HealOverTimeEffect",
                "line": 237,
                "bases": [
                  "CombatEffect"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "ConditionEffect",
                "line": 253,
                "bases": [
                  "CombatEffect"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "ResistanceEffect",
                "line": 261,
                "bases": [
                  "CombatEffect"
                ],
                "methods": [
                  "__init__",
                  "modify_damage"
                ]
              },
              {
                "name": "VulnerabilityEffect",
                "line": 274,
                "bases": [
                  "CombatEffect"
                ],
                "methods": [
                  "__init__",
                  "modify_damage"
                ]
              },
              {
                "name": "ImmunityEffect",
                "line": 287,
                "bases": [
                  "CombatEffect"
                ],
                "methods": [
                  "__init__",
                  "modify_damage"
                ]
              },
              {
                "name": "EffectPipeline",
                "line": 300,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_applied_effects",
                  "_get_combatant_id",
                  "_get_matching_effects",
                  "apply_effect",
                  "remove_effect",
                  "remove_effects_by_type",
                  "remove_effects_by_name",
                  "clear_effects",
                  "clear_all_effects",
                  "process_turn_start",
                  "process_turn_end",
                  "process_before_action",
                  "process_after_action",
                  "modify_damage",
                  "process_damage",
                  "process_deal_damage",
                  "process_death",
                  "process_kill",
                  "process_heal",
                  "process_healed",
                  "register_effect_applied_callback",
                  "register_effect_removed_callback",
                  "register_effect_expired_callback",
                  "unregister_effect_applied_callback",
                  "unregister_effect_removed_callback",
                  "unregister_effect_expired_callback",
                  "is_immune_to_effect"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CombatBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "CombatModel",
                "line": 36,
                "bases": [
                  "CombatBaseModel"
                ],
                "methods": []
              },
              {
                "name": "CombatEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateCombatRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateCombatRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CombatResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CombatListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "combat_area.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 15
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 16
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 17
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Tuple",
                  "Set",
                  "Union"
                ],
                "line": 18
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 19
              }
            ],
            "functions": [
              {
                "name": "create_combat_area",
                "line": 713,
                "args": [
                  "name",
                  "size",
                  "add_default_terrain"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 31,
                "args": [
                  "self",
                  "feature_id",
                  "name",
                  "position",
                  "size",
                  "feature_type",
                  "properties"
                ],
                "is_async": false
              },
              {
                "name": "is_point_inside",
                "line": 58,
                "args": [
                  "self",
                  "point"
                ],
                "is_async": false
              },
              {
                "name": "get_movement_modifier",
                "line": 85,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "provides_cover",
                "line": 94,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "is_passable",
                "line": 103,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 112,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 131,
                "args": [
                  "self",
                  "area_id",
                  "name",
                  "size",
                  "grid_size"
                ],
                "is_async": false
              },
              {
                "name": "_position_to_grid",
                "line": 167,
                "args": [
                  "self",
                  "position"
                ],
                "is_async": false
              },
              {
                "name": "_grid_to_position",
                "line": 187,
                "args": [
                  "self",
                  "grid_coord"
                ],
                "is_async": false
              },
              {
                "name": "add_entity",
                "line": 203,
                "args": [
                  "self",
                  "entity_id",
                  "position"
                ],
                "is_async": false
              },
              {
                "name": "remove_entity",
                "line": 231,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "move_entity",
                "line": 261,
                "args": [
                  "self",
                  "entity_id",
                  "new_position"
                ],
                "is_async": false
              },
              {
                "name": "get_entity_position",
                "line": 309,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "get_entities_at_position",
                "line": 321,
                "args": [
                  "self",
                  "position",
                  "radius"
                ],
                "is_async": false
              },
              {
                "name": "is_position_valid",
                "line": 362,
                "args": [
                  "self",
                  "position"
                ],
                "is_async": false
              },
              {
                "name": "can_move_to",
                "line": 377,
                "args": [
                  "self",
                  "entity_id",
                  "position"
                ],
                "is_async": false
              },
              {
                "name": "calculate_path",
                "line": 399,
                "args": [
                  "self",
                  "entity_id",
                  "target_position",
                  "avoid_entities"
                ],
                "is_async": false
              },
              {
                "name": "add_terrain_feature",
                "line": 436,
                "args": [
                  "self",
                  "feature"
                ],
                "is_async": false
              },
              {
                "name": "remove_terrain_feature",
                "line": 457,
                "args": [
                  "self",
                  "feature_id"
                ],
                "is_async": false
              },
              {
                "name": "get_terrain_at_position",
                "line": 476,
                "args": [
                  "self",
                  "position"
                ],
                "is_async": false
              },
              {
                "name": "is_line_of_sight_clear",
                "line": 494,
                "args": [
                  "self",
                  "start",
                  "end"
                ],
                "is_async": false
              },
              {
                "name": "get_movement_cost",
                "line": 542,
                "args": [
                  "self",
                  "start",
                  "end"
                ],
                "is_async": false
              },
              {
                "name": "get_nearest_position",
                "line": 576,
                "args": [
                  "self",
                  "target",
                  "max_distance"
                ],
                "is_async": false
              },
              {
                "name": "create_default_terrain",
                "line": 635,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 694,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "TerrainFeature",
                "line": 28,
                "bases": [],
                "methods": [
                  "__init__",
                  "is_point_inside",
                  "get_movement_modifier",
                  "provides_cover",
                  "is_passable",
                  "to_dict"
                ]
              },
              {
                "name": "CombatArea",
                "line": 123,
                "bases": [],
                "methods": [
                  "__init__",
                  "_position_to_grid",
                  "_grid_to_position",
                  "add_entity",
                  "remove_entity",
                  "move_entity",
                  "get_entity_position",
                  "get_entities_at_position",
                  "is_position_valid",
                  "can_move_to",
                  "calculate_path",
                  "add_terrain_feature",
                  "remove_terrain_feature",
                  "get_terrain_at_position",
                  "is_line_of_sight_clear",
                  "get_movement_cost",
                  "get_nearest_position",
                  "create_default_terrain",
                  "to_dict"
                ]
              }
            ]
          },
          {
            "file": "combat_debug_interface.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "effect_visualizer.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 16
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Tuple",
                  "Optional",
                  "Set"
                ],
                "line": 17
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.object_pool",
                "names": [
                  "ObjectPool"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.effect_pipeline",
                "names": [
                  "CombatEffect",
                  "EffectType"
                ],
                "line": 21
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 29,
                "args": [
                  "self",
                  "effect_id",
                  "effect_type",
                  "position",
                  "scale",
                  "color"
                ],
                "is_async": false
              },
              {
                "name": "set_position",
                "line": 51,
                "args": [
                  "self",
                  "position"
                ],
                "is_async": false
              },
              {
                "name": "set_color",
                "line": 55,
                "args": [
                  "self",
                  "color"
                ],
                "is_async": false
              },
              {
                "name": "set_scale",
                "line": 59,
                "args": [
                  "self",
                  "scale"
                ],
                "is_async": false
              },
              {
                "name": "set_visible",
                "line": 63,
                "args": [
                  "self",
                  "visible"
                ],
                "is_async": false
              },
              {
                "name": "set_parent",
                "line": 67,
                "args": [
                  "self",
                  "parent_id"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 71,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 92,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_reset_icon",
                "line": 120,
                "args": [
                  "self",
                  "icon"
                ],
                "is_async": false
              },
              {
                "name": "create_icon_for_effect",
                "line": 135,
                "args": [
                  "self",
                  "effect",
                  "combatant_id",
                  "position",
                  "scale"
                ],
                "is_async": false
              },
              {
                "name": "remove_icon_for_effect",
                "line": 178,
                "args": [
                  "self",
                  "effect_id"
                ],
                "is_async": false
              },
              {
                "name": "update_icon_positions",
                "line": 213,
                "args": [
                  "self",
                  "combatant_id",
                  "base_position"
                ],
                "is_async": false
              },
              {
                "name": "update_all_icons",
                "line": 244,
                "args": [
                  "self",
                  "combat_state"
                ],
                "is_async": false
              },
              {
                "name": "clear_all_icons",
                "line": 299,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_all_icons",
                "line": 309,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "handle_effect_applied",
                "line": 318,
                "args": [
                  "self",
                  "effect",
                  "target_id",
                  "position"
                ],
                "is_async": false
              },
              {
                "name": "handle_effect_removed",
                "line": 329,
                "args": [
                  "self",
                  "effect_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EffectIcon",
                "line": 26,
                "bases": [],
                "methods": [
                  "__init__",
                  "set_position",
                  "set_color",
                  "set_scale",
                  "set_visible",
                  "set_parent",
                  "to_dict"
                ]
              },
              {
                "name": "EffectVisualizer",
                "line": 84,
                "bases": [],
                "methods": [
                  "__init__",
                  "_reset_icon",
                  "create_icon_for_effect",
                  "remove_icon_for_effect",
                  "update_icon_positions",
                  "update_all_icons",
                  "clear_all_icons",
                  "get_all_icons",
                  "handle_effect_applied",
                  "handle_effect_removed"
                ]
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.combat.combat_class",
                "names": [
                  "Combatant",
                  "Combat"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.combat_state_class",
                "names": [
                  "CombatState"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.combat_handler_class",
                "names": [
                  "CombatAction"
                ],
                "line": 23
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.utils",
                "names": [
                  "roll_d20",
                  "roll_initiative",
                  "resolve_saving_throw",
                  "calculate_attribute_modifier",
                  "calculate_armor_class",
                  "roll_dice",
                  "initiate_combat",
                  "resolve_combat_action",
                  "get_active_combat",
                  "end_combat",
                  "lookup_actions_for_combatant",
                  "choose_action_gpt",
                  "fallback_combat_action",
                  "generate_scaled_encounter",
                  "generate_location_appropriate_encounter",
                  "roll_fumble_effect",
                  "apply_fumble",
                  "apply_critical_hit_effect",
                  "apply_area_effect",
                  "generate_monster_stats",
                  "scale_monster_to_party"
                ],
                "line": 26
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.status_effects_utils",
                "names": [
                  "apply_status_effect",
                  "tick_status_effects",
                  "resolve_status_effects",
                  "remove_status_effect"
                ],
                "line": 48
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.combat_narrative_utils",
                "names": [
                  "narrate_action",
                  "format_combat_summary",
                  "log_combat_event"
                ],
                "line": 54
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.combat_state_firebase_utils",
                "names": [
                  "start_firebase_combat",
                  "CombatActionHandler",
                  "sync_post_combat_state_to_firebase",
                  "update_combatant_state"
                ],
                "line": 59
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.routers",
                "names": [
                  "combat_router"
                ],
                "line": 65
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.repositories",
                "names": [
                  "CombatRepository",
                  "combat_repository"
                ],
                "line": 68
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.services",
                "names": [
                  "CombatService",
                  "combat_service"
                ],
                "line": 71
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.combat_ram",
                "names": [
                  "ACTIVE_BATTLES"
                ],
                "line": 74
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "object_pool.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 15
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Type",
                  "TypeVar",
                  "Generic",
                  "Optional",
                  "Callable"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 31,
                "args": [
                  "self",
                  "object_type",
                  "initial_size",
                  "factory",
                  "reset_func",
                  "max_size"
                ],
                "is_async": false
              },
              {
                "name": "_expand_pool",
                "line": 58,
                "args": [
                  "self",
                  "count"
                ],
                "is_async": false
              },
              {
                "name": "acquire",
                "line": 69,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "release",
                "line": 99,
                "args": [
                  "self",
                  "obj"
                ],
                "is_async": false
              },
              {
                "name": "clear",
                "line": 129,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "reset",
                "line": 138,
                "args": [
                  "self",
                  "initial_size"
                ],
                "is_async": false
              },
              {
                "name": "available_count",
                "line": 152,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "in_use_count",
                "line": 157,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "total_count",
                "line": 162,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 174,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_set_pool",
                "line": 178,
                "args": [
                  "self",
                  "pool"
                ],
                "is_async": false
              },
              {
                "name": "release",
                "line": 187,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 206,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "register_pool",
                "line": 210,
                "args": [
                  "self",
                  "object_type",
                  "initial_size",
                  "factory",
                  "reset_func",
                  "max_size"
                ],
                "is_async": false
              },
              {
                "name": "get_pool",
                "line": 235,
                "args": [
                  "self",
                  "object_type"
                ],
                "is_async": false
              },
              {
                "name": "acquire",
                "line": 247,
                "args": [
                  "self",
                  "object_type"
                ],
                "is_async": false
              },
              {
                "name": "release",
                "line": 271,
                "args": [
                  "self",
                  "obj"
                ],
                "is_async": false
              },
              {
                "name": "reset_all_pools",
                "line": 289,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "clear_all_pools",
                "line": 296,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_stats",
                "line": 303,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ObjectPool",
                "line": 23,
                "bases": [
                  "<ast.Subscript object at 0x104f73af0>"
                ],
                "methods": [
                  "__init__",
                  "_expand_pool",
                  "acquire",
                  "release",
                  "clear",
                  "reset",
                  "available_count",
                  "in_use_count",
                  "total_count"
                ]
              },
              {
                "name": "PooledObjectMixin",
                "line": 166,
                "bases": [],
                "methods": [
                  "__init__",
                  "_set_pool",
                  "release"
                ]
              },
              {
                "name": "CombatObjectPoolManager",
                "line": 199,
                "bases": [],
                "methods": [
                  "__init__",
                  "register_pool",
                  "get_pool",
                  "acquire",
                  "release",
                  "reset_all_pools",
                  "clear_all_pools",
                  "get_stats"
                ]
              }
            ]
          },
          {
            "file": "status_effects_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 4
              }
            ],
            "functions": [
              {
                "name": "apply_status_effect",
                "line": 7,
                "args": [
                  "combatant",
                  "effect_name",
                  "duration",
                  "source",
                  "value"
                ],
                "is_async": false
              },
              {
                "name": "tick_status_effects",
                "line": 46,
                "args": [
                  "combatant"
                ],
                "is_async": false
              },
              {
                "name": "resolve_status_effects",
                "line": 74,
                "args": [
                  "target_id"
                ],
                "is_async": false
              },
              {
                "name": "remove_status_effect",
                "line": 116,
                "args": [
                  "target_id",
                  "effect_name"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "combat_handler_class.py",
            "imports": [],
            "functions": [
              {
                "name": "__init__",
                "line": 2,
                "args": [
                  "self",
                  "combat_state",
                  "actor_id",
                  "target_id",
                  "db_ref"
                ],
                "is_async": false
              },
              {
                "name": "_get_actor",
                "line": 10,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_get_target",
                "line": 13,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "apply_action",
                "line": 16,
                "args": [
                  "self",
                  "action_type",
                  "modifiers"
                ],
                "is_async": false
              },
              {
                "name": "_resolve_attack",
                "line": 25,
                "args": [
                  "self",
                  "modifiers"
                ],
                "is_async": false
              },
              {
                "name": "_log_to_firebase",
                "line": 30,
                "args": [
                  "self",
                  "log_data"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "actor_id",
                  "action_data",
                  "full_attributes",
                  "combatant_state"
                ],
                "is_async": false
              },
              {
                "name": "parse",
                "line": 42,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 52,
                "args": [
                  "self",
                  "combat_state",
                  "characters"
                ],
                "is_async": false
              },
              {
                "name": "initiate_combat",
                "line": 56,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "resolve_turn",
                "line": 60,
                "args": [
                  "self",
                  "actor_id"
                ],
                "is_async": false
              },
              {
                "name": "narrate_combat_action",
                "line": 64,
                "args": [
                  "self",
                  "actor",
                  "action",
                  "outcome"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CombatActionHandler",
                "line": 1,
                "bases": [],
                "methods": [
                  "__init__",
                  "_get_actor",
                  "_get_target",
                  "apply_action",
                  "_resolve_attack",
                  "_log_to_firebase"
                ]
              },
              {
                "name": "CombatAction",
                "line": 34,
                "bases": [],
                "methods": [
                  "__init__",
                  "parse"
                ]
              },
              {
                "name": "CombatEngine",
                "line": 51,
                "bases": [],
                "methods": [
                  "__init__",
                  "initiate_combat",
                  "resolve_turn",
                  "narrate_combat_action"
                ]
              }
            ]
          },
          {
            "file": "combat_class.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 10
              },
              {
                "type": "import",
                "module": "time",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 12
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Set",
                  "Tuple",
                  "Union",
                  "Callable"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.combat_state_class",
                "names": [
                  "CombatState"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.turn_queue",
                "names": [
                  "TurnQueue"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.effect_pipeline",
                "names": [
                  "EffectPipeline",
                  "CombatEffect"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.object_pool",
                "names": [
                  "combat_pool_manager"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.action_system",
                "names": [
                  "action_system",
                  "ActionResult",
                  "ActionType"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.combat_area",
                "names": [
                  "create_combat_area",
                  "CombatArea",
                  "Position"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.fog_of_war",
                "names": [
                  "create_fog_of_war",
                  "FogOfWar",
                  "VisibilityStatus"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.combat_animation_system",
                "names": [
                  "combat_animation_system"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.effect_visualizer",
                "names": [
                  "effect_visualizer"
                ],
                "line": 25
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.debug_interface",
                "names": [
                  "combat_debug_interface"
                ],
                "line": 30
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 41,
                "args": [
                  "self",
                  "character_id",
                  "character_data"
                ],
                "is_async": false
              },
              {
                "name": "get_attribute_modifier",
                "line": 55,
                "args": [
                  "self",
                  "attribute"
                ],
                "is_async": false
              },
              {
                "name": "is_alive",
                "line": 60,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "take_damage",
                "line": 64,
                "args": [
                  "self",
                  "amount"
                ],
                "is_async": false
              },
              {
                "name": "heal",
                "line": 70,
                "args": [
                  "self",
                  "amount"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 77,
                "args": [
                  "self",
                  "character_dict",
                  "combat_state",
                  "area_size"
                ],
                "is_async": false
              },
              {
                "name": "_initialize_character_positions",
                "line": 125,
                "args": [
                  "self",
                  "character_dict"
                ],
                "is_async": false
              },
              {
                "name": "_on_turn_start",
                "line": 189,
                "args": [
                  "self",
                  "combatant_id"
                ],
                "is_async": false
              },
              {
                "name": "_on_turn_end",
                "line": 217,
                "args": [
                  "self",
                  "combatant_id"
                ],
                "is_async": false
              },
              {
                "name": "start_combat",
                "line": 231,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_initialize_turn_queue",
                "line": 256,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "next_turn",
                "line": 271,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "take_action",
                "line": 297,
                "args": [
                  "self",
                  "character_id",
                  "action_id",
                  "target_id"
                ],
                "is_async": false
              },
              {
                "name": "apply_effect",
                "line": 342,
                "args": [
                  "self",
                  "effect",
                  "target_id",
                  "source_id"
                ],
                "is_async": false
              },
              {
                "name": "get_combat_state",
                "line": 374,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_check_combat_end",
                "line": 413,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_determine_winner",
                "line": 423,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "end_combat",
                "line": 435,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Combatant",
                "line": 37,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_attribute_modifier",
                  "is_alive",
                  "take_damage",
                  "heal"
                ]
              },
              {
                "name": "Combat",
                "line": 76,
                "bases": [],
                "methods": [
                  "__init__",
                  "_initialize_character_positions",
                  "_on_turn_start",
                  "_on_turn_end",
                  "start_combat",
                  "_initialize_turn_queue",
                  "next_turn",
                  "take_action",
                  "apply_effect",
                  "get_combat_state",
                  "_check_combat_end",
                  "_determine_winner",
                  "end_combat"
                ]
              }
            ]
          },
          {
            "file": "combat_narrative_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.gpt_client",
                "names": [
                  "GPTClient"
                ],
                "line": 24
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.combat_ram",
                "names": [
                  "ACTIVE_BATTLES"
                ],
                "line": 59
              }
            ],
            "functions": [
              {
                "name": "narrate_action",
                "line": 12,
                "args": [
                  "actor_name",
                  "action_details",
                  "outcome"
                ],
                "is_async": false
              },
              {
                "name": "log_combat_event",
                "line": 42,
                "args": [
                  "combat_id",
                  "event_data"
                ],
                "is_async": false
              },
              {
                "name": "log_combat_start",
                "line": 72,
                "args": [
                  "region_name",
                  "poi_id",
                  "participant_ids"
                ],
                "is_async": false
              },
              {
                "name": "format_combat_summary",
                "line": 110,
                "args": [
                  "combat_state"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "action_system.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 14
              },
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum",
                  "auto"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Callable",
                  "Type",
                  "TypeVar",
                  "Set",
                  "Union"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "register_basic_actions",
                "line": 559,
                "args": [],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 41,
                "args": [
                  "self",
                  "success",
                  "message",
                  "effects",
                  "damage",
                  "damage_type"
                ],
                "is_async": false
              },
              {
                "name": "__bool__",
                "line": 60,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "can_use",
                "line": 96,
                "args": [
                  "self",
                  "source",
                  "target"
                ],
                "is_async": false
              },
              {
                "name": "execute",
                "line": 117,
                "args": [
                  "self",
                  "source",
                  "target"
                ],
                "is_async": false
              },
              {
                "name": "update_cooldown",
                "line": 141,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 153,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "reset",
                "line": 164,
                "args": [
                  "self",
                  "movement"
                ],
                "is_async": false
              },
              {
                "name": "can_use_action",
                "line": 183,
                "args": [
                  "self",
                  "action"
                ],
                "is_async": false
              },
              {
                "name": "use_action",
                "line": 211,
                "args": [
                  "self",
                  "action"
                ],
                "is_async": false
              },
              {
                "name": "use_movement",
                "line": 233,
                "args": [
                  "self",
                  "distance"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 255,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "register_action",
                "line": 269,
                "args": [
                  "self",
                  "action",
                  "categories"
                ],
                "is_async": false
              },
              {
                "name": "get_action",
                "line": 289,
                "args": [
                  "self",
                  "action_id"
                ],
                "is_async": false
              },
              {
                "name": "get_actions_by_category",
                "line": 301,
                "args": [
                  "self",
                  "category"
                ],
                "is_async": false
              },
              {
                "name": "get_actions_for_combatant",
                "line": 317,
                "args": [
                  "self",
                  "combatant"
                ],
                "is_async": false
              },
              {
                "name": "reset_combatant_actions",
                "line": 331,
                "args": [
                  "self",
                  "combatant",
                  "movement"
                ],
                "is_async": false
              },
              {
                "name": "_get_combatant_id",
                "line": 346,
                "args": [
                  "self",
                  "combatant"
                ],
                "is_async": false
              },
              {
                "name": "_get_combatant_state",
                "line": 362,
                "args": [
                  "self",
                  "combatant"
                ],
                "is_async": false
              },
              {
                "name": "can_use_action",
                "line": 379,
                "args": [
                  "self",
                  "combatant",
                  "action",
                  "target"
                ],
                "is_async": false
              },
              {
                "name": "use_action",
                "line": 413,
                "args": [
                  "self",
                  "combatant",
                  "action",
                  "target"
                ],
                "is_async": false
              },
              {
                "name": "use_movement",
                "line": 453,
                "args": [
                  "self",
                  "combatant",
                  "distance"
                ],
                "is_async": false
              },
              {
                "name": "register_reaction_trigger",
                "line": 467,
                "args": [
                  "self",
                  "trigger_type",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "trigger_reaction",
                "line": 480,
                "args": [
                  "self",
                  "trigger_type",
                  "source",
                  "target",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "get_available_reactions",
                "line": 509,
                "args": [
                  "self",
                  "combatant",
                  "trigger_type",
                  "source"
                ],
                "is_async": false
              },
              {
                "name": "get_remaining_actions",
                "line": 536,
                "args": [
                  "self",
                  "combatant"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ActionType",
                "line": 22,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "ActionTarget",
                "line": 30,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "ActionResult",
                "line": 38,
                "bases": [],
                "methods": [
                  "__init__",
                  "__bool__"
                ]
              },
              {
                "name": "ActionDefinition",
                "line": 65,
                "bases": [],
                "methods": [
                  "can_use",
                  "execute",
                  "update_cooldown"
                ]
              },
              {
                "name": "CombatantActionState",
                "line": 146,
                "bases": [],
                "methods": [
                  "__init__",
                  "reset",
                  "can_use_action",
                  "use_action",
                  "use_movement"
                ]
              },
              {
                "name": "ActionSystem",
                "line": 247,
                "bases": [],
                "methods": [
                  "__init__",
                  "register_action",
                  "get_action",
                  "get_actions_by_category",
                  "get_actions_for_combatant",
                  "reset_combatant_actions",
                  "_get_combatant_id",
                  "_get_combatant_state",
                  "can_use_action",
                  "use_action",
                  "use_movement",
                  "register_reaction_trigger",
                  "trigger_reaction",
                  "get_available_reactions",
                  "get_remaining_actions"
                ]
              }
            ]
          },
          {
            "file": "combat_animation_system.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 15
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 16
              },
              {
                "type": "import",
                "module": "time",
                "alias": null,
                "line": 17
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Callable",
                  "Tuple",
                  "Set"
                ],
                "line": 18
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 19
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 32,
                "args": [
                  "self",
                  "anim_id",
                  "name",
                  "category",
                  "duration",
                  "properties"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 56,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 74,
                "args": [
                  "self",
                  "instance_id",
                  "definition",
                  "source_id",
                  "target_ids",
                  "start_time",
                  "parameters",
                  "on_complete"
                ],
                "is_async": false
              },
              {
                "name": "update",
                "line": 110,
                "args": [
                  "self",
                  "current_time"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 141,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 163,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_init_default_animations",
                "line": 177,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "register_animation",
                "line": 260,
                "args": [
                  "self",
                  "definition"
                ],
                "is_async": false
              },
              {
                "name": "play_animation",
                "line": 270,
                "args": [
                  "self",
                  "definition_id",
                  "source_id",
                  "target_ids",
                  "parameters",
                  "on_complete",
                  "queue"
                ],
                "is_async": false
              },
              {
                "name": "stop_animation",
                "line": 336,
                "args": [
                  "self",
                  "instance_id",
                  "complete_callback"
                ],
                "is_async": false
              },
              {
                "name": "stop_all_animations",
                "line": 365,
                "args": [
                  "self",
                  "complete_callbacks"
                ],
                "is_async": false
              },
              {
                "name": "pause_animations",
                "line": 389,
                "args": [
                  "self",
                  "pause"
                ],
                "is_async": false
              },
              {
                "name": "update",
                "line": 414,
                "args": [
                  "self",
                  "delta_time"
                ],
                "is_async": false
              },
              {
                "name": "get_active_animations",
                "line": 463,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_animation_definitions",
                "line": 472,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_animation_count",
                "line": 481,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "set_global_speed_multiplier",
                "line": 493,
                "args": [
                  "self",
                  "multiplier"
                ],
                "is_async": false
              },
              {
                "name": "play_action_animation",
                "line": 503,
                "args": [
                  "self",
                  "action_type",
                  "source_id",
                  "target_ids",
                  "action_parameters"
                ],
                "is_async": false
              },
              {
                "name": "play_reaction_animation",
                "line": 607,
                "args": [
                  "self",
                  "reaction_type",
                  "character_id",
                  "reaction_parameters"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "AnimationDefinition",
                "line": 24,
                "bases": [],
                "methods": [
                  "__init__",
                  "to_dict"
                ]
              },
              {
                "name": "AnimationInstance",
                "line": 66,
                "bases": [],
                "methods": [
                  "__init__",
                  "update",
                  "to_dict"
                ]
              },
              {
                "name": "CombatAnimationSystem",
                "line": 154,
                "bases": [],
                "methods": [
                  "__init__",
                  "_init_default_animations",
                  "register_animation",
                  "play_animation",
                  "stop_animation",
                  "stop_all_animations",
                  "pause_animations",
                  "update",
                  "get_active_animations",
                  "get_animation_definitions",
                  "get_animation_count",
                  "set_global_speed_multiplier",
                  "play_action_animation",
                  "play_reaction_animation"
                ]
              }
            ]
          },
          {
            "file": "combat_state_class.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 10
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 12
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Set",
                  "Tuple",
                  "Union"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.combat_class",
                "names": [
                  "Combatant"
                ],
                "line": 18
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 37,
                "args": [
                  "self",
                  "character_dict"
                ],
                "is_async": false
              },
              {
                "name": "add_character",
                "line": 66,
                "args": [
                  "self",
                  "character_id",
                  "character"
                ],
                "is_async": false
              },
              {
                "name": "add_characters",
                "line": 77,
                "args": [
                  "self",
                  "character_dict"
                ],
                "is_async": false
              },
              {
                "name": "set_player_character",
                "line": 87,
                "args": [
                  "self",
                  "character_id",
                  "is_player"
                ],
                "is_async": false
              },
              {
                "name": "get_character",
                "line": 108,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "get_all_characters",
                "line": 120,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_player_characters",
                "line": 129,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_enemy_characters",
                "line": 140,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "remove_character",
                "line": 151,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "add_log",
                "line": 171,
                "args": [
                  "self",
                  "message"
                ],
                "is_async": false
              },
              {
                "name": "change_status",
                "line": 181,
                "args": [
                  "self",
                  "new_status"
                ],
                "is_async": false
              },
              {
                "name": "_save_state_snapshot",
                "line": 195,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_previous_state",
                "line": 204,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "rollback_to_previous_state",
                "line": 215,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "is_player_turn",
                "line": 237,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "is_over",
                "line": 249,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 258,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 283,
                "args": [
                  "self",
                  "state_dict",
                  "character_dict"
                ],
                "is_async": false
              },
              {
                "name": "to_json",
                "line": 308,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_json",
                "line": 317,
                "args": [
                  "self",
                  "json_str",
                  "character_dict"
                ],
                "is_async": false
              },
              {
                "name": "get_current_actor",
                "line": 328,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_opponents",
                "line": 331,
                "args": [
                  "self",
                  "actor"
                ],
                "is_async": false
              },
              {
                "name": "advance_turn",
                "line": 334,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "accept_surrender",
                "line": 339,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "handle_retreat",
                "line": 352,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 22,
                "args": [
                  "self",
                  "character_id",
                  "character_data"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CombatState",
                "line": 31,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_character",
                  "add_characters",
                  "set_player_character",
                  "get_character",
                  "get_all_characters",
                  "get_player_characters",
                  "get_enemy_characters",
                  "remove_character",
                  "add_log",
                  "change_status",
                  "_save_state_snapshot",
                  "get_previous_state",
                  "rollback_to_previous_state",
                  "is_player_turn",
                  "is_over",
                  "to_dict",
                  "from_dict",
                  "to_json",
                  "from_json",
                  "get_current_actor",
                  "get_opponents",
                  "advance_turn",
                  "accept_surrender",
                  "handle_retreat"
                ]
              },
              {
                "name": "Combatant",
                "line": 21,
                "bases": [],
                "methods": [
                  "__init__"
                ]
              }
            ]
          },
          {
            "file": "turn_queue.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 15
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Optional",
                  "Callable",
                  "Any",
                  "Set",
                  "Tuple"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 29,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "current_combatant",
                "line": 41,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "queue",
                "line": 48,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "is_empty",
                "line": 53,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "initialize_queue",
                "line": 57,
                "args": [
                  "self",
                  "combatants"
                ],
                "is_async": false
              },
              {
                "name": "_sort_queue",
                "line": 88,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "add_combatant",
                "line": 92,
                "args": [
                  "self",
                  "combatant",
                  "initiative"
                ],
                "is_async": false
              },
              {
                "name": "remove_combatant",
                "line": 123,
                "args": [
                  "self",
                  "combatant"
                ],
                "is_async": false
              },
              {
                "name": "advance_queue",
                "line": 154,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "delay_turn",
                "line": 183,
                "args": [
                  "self",
                  "combatant"
                ],
                "is_async": false
              },
              {
                "name": "recompute_initiative",
                "line": 202,
                "args": [
                  "self",
                  "combatant",
                  "new_initiative"
                ],
                "is_async": false
              },
              {
                "name": "clear",
                "line": 226,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "register_turn_start_callback",
                "line": 233,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "register_turn_end_callback",
                "line": 243,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "unregister_turn_start_callback",
                "line": 253,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "unregister_turn_end_callback",
                "line": 263,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "TurnQueue",
                "line": 21,
                "bases": [],
                "methods": [
                  "__init__",
                  "current_combatant",
                  "queue",
                  "is_empty",
                  "initialize_queue",
                  "_sort_queue",
                  "add_combatant",
                  "remove_combatant",
                  "advance_queue",
                  "delay_turn",
                  "recompute_initiative",
                  "clear",
                  "register_turn_start_callback",
                  "register_turn_end_callback",
                  "unregister_turn_start_callback",
                  "unregister_turn_end_callback"
                ]
              }
            ]
          },
          {
            "file": "combat_state_firebase_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 6
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.utils",
                "names": [
                  "roll_initiative"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.status_effects_utils",
                "names": [
                  "apply_status_effect",
                  "resolve_status_effects"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "start_firebase_combat",
                "line": 124,
                "args": [
                  "encounter_name",
                  "player_party",
                  "enemy_party",
                  "battle_map"
                ],
                "is_async": false
              },
              {
                "name": "sync_post_combat_state_to_firebase",
                "line": 158,
                "args": [
                  "party",
                  "enemies"
                ],
                "is_async": false
              },
              {
                "name": "update_combatant_state",
                "line": 176,
                "args": [
                  "combat_id",
                  "character_id",
                  "combatant_obj"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 25,
                "args": [
                  "self",
                  "battle_id",
                  "actor_id",
                  "target_id"
                ],
                "is_async": false
              },
              {
                "name": "_validate_combat_exists",
                "line": 42,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_get_participant",
                "line": 46,
                "args": [
                  "self",
                  "pid"
                ],
                "is_async": false
              },
              {
                "name": "is_actor_turn",
                "line": 49,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "apply_action",
                "line": 56,
                "args": [
                  "self",
                  "action_type",
                  "roll",
                  "value",
                  "notes",
                  "status_effect",
                  "spell_name"
                ],
                "is_async": false
              },
              {
                "name": "_narrate_action",
                "line": 86,
                "args": [
                  "self",
                  "action_type",
                  "value",
                  "roll",
                  "status_effect",
                  "spell_name",
                  "notes"
                ],
                "is_async": false
              },
              {
                "name": "_advance_turn",
                "line": 112,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_get_next_turn_id",
                "line": 117,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "roll_initiative",
                "line": 17,
                "args": [],
                "is_async": false
              },
              {
                "name": "apply_status_effect",
                "line": 19,
                "args": [],
                "is_async": false
              },
              {
                "name": "resolve_status_effects",
                "line": 21,
                "args": [],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CombatActionHandler",
                "line": 24,
                "bases": [],
                "methods": [
                  "__init__",
                  "_validate_combat_exists",
                  "_get_participant",
                  "is_actor_turn",
                  "apply_action",
                  "_narrate_action",
                  "_advance_turn",
                  "_get_next_turn_id"
                ]
              }
            ]
          },
          {
            "file": "routers/combat_router.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "HTTPException",
                  "status",
                  "Body"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.schemas.combat",
                "names": [
                  "CombatStateSchema"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.services.combat_service",
                "names": [
                  "combat_service"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.combat_class",
                "names": [
                  "Combat"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.utils",
                "names": [
                  "initiate_combat",
                  "resolve_combat_action",
                  "apply_fumble",
                  "apply_critical_hit_effect",
                  "apply_area_effect",
                  "generate_scaled_encounter",
                  "generate_location_appropriate_encounter"
                ],
                "line": 12
              }
            ],
            "functions": [
              {
                "name": "create_combat_state_endpoint",
                "line": 34,
                "args": [
                  "initial_state_data"
                ],
                "is_async": false
              },
              {
                "name": "get_combat_state_endpoint",
                "line": 50,
                "args": [
                  "combat_id"
                ],
                "is_async": false
              },
              {
                "name": "update_combat_state_endpoint",
                "line": 61,
                "args": [
                  "combat_id",
                  "combat_state_update"
                ],
                "is_async": false
              },
              {
                "name": "delete_combat_state_endpoint",
                "line": 73,
                "args": [
                  "combat_id"
                ],
                "is_async": false
              },
              {
                "name": "list_all_combat_states_endpoint",
                "line": 87,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.routers.combat_router",
                "names": [
                  "router"
                ],
                "line": 12
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.combat.repositories.combat_repository",
                "names": [
                  "CombatRepository",
                  "combat_repository"
                ],
                "line": 1
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/combat_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Optional"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.schemas.combat",
                "names": [
                  "CombatStateSchema"
                ],
                "line": 4
              }
            ],
            "functions": [
              {
                "name": "create_combat",
                "line": 9,
                "args": [
                  "self",
                  "initial_combat_data"
                ],
                "is_async": false
              },
              {
                "name": "get_combat_by_id",
                "line": 23,
                "args": [
                  "self",
                  "combat_id"
                ],
                "is_async": false
              },
              {
                "name": "update_combat",
                "line": 26,
                "args": [
                  "self",
                  "combat_id",
                  "combat_data"
                ],
                "is_async": false
              },
              {
                "name": "delete_combat",
                "line": 38,
                "args": [
                  "self",
                  "combat_id"
                ],
                "is_async": false
              },
              {
                "name": "list_all_combats",
                "line": 44,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CombatRepository",
                "line": 6,
                "bases": [],
                "methods": [
                  "create_combat",
                  "get_combat_by_id",
                  "update_combat",
                  "delete_combat",
                  "list_all_combats"
                ]
              }
            ]
          },
          {
            "file": "models/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.combat.models.stats",
                "names": [
                  "CombatStats"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/stats.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "Integer",
                  "String",
                  "Boolean",
                  "Float",
                  "ForeignKey",
                  "JSON"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models.base",
                "names": [
                  "CoreBaseModel"
                ],
                "line": 10
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 37,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 40,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 62,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CombatStats",
                "line": 12,
                "bases": [
                  "CoreBaseModel"
                ],
                "methods": [
                  "__repr__",
                  "to_dict",
                  "from_dict"
                ]
              }
            ]
          },
          {
            "file": "schemas/combat.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any",
                  "Optional"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel"
                ],
                "line": 2
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "CombatEffectSchema",
                "line": 4,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CombatantSchema",
                "line": 13,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CombatStateSchema",
                "line": 23,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "schemas/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.combat.schemas.combat",
                "names": [
                  "CombatStateSchema",
                  "CombatantSchema",
                  "CombatEffectSchema"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.combat.services.combat_service",
                "names": [
                  "CombatService",
                  "combat_service"
                ],
                "line": 1
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/combat_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.schemas.combat",
                "names": [
                  "CombatStateSchema"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "backend.systems.combat.repositories.combat_repository",
                "names": [
                  "combat_repository",
                  "CombatRepository"
                ],
                "line": 3
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 6,
                "args": [
                  "self",
                  "repository"
                ],
                "is_async": false
              },
              {
                "name": "create_new_combat_instance",
                "line": 9,
                "args": [
                  "self",
                  "initial_combat_data"
                ],
                "is_async": false
              },
              {
                "name": "get_combat_state",
                "line": 14,
                "args": [
                  "self",
                  "combat_id"
                ],
                "is_async": false
              },
              {
                "name": "update_combat_state",
                "line": 18,
                "args": [
                  "self",
                  "combat_id",
                  "combat_data_update"
                ],
                "is_async": false
              },
              {
                "name": "end_combat_instance",
                "line": 35,
                "args": [
                  "self",
                  "combat_id"
                ],
                "is_async": false
              },
              {
                "name": "list_all_combat_instances",
                "line": 40,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CombatService",
                "line": 5,
                "bases": [],
                "methods": [
                  "__init__",
                  "create_new_combat_instance",
                  "get_combat_state",
                  "update_combat_state",
                  "end_combat_instance",
                  "list_all_combat_instances"
                ]
              }
            ]
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": true,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 14,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 15,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 15,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/combat/action_system.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 17,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/combat/action_system.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "magic": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/magic",
        "files": [
          "services.py",
          "models.py",
          "__init__.py",
          "router.py",
          "websocket.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.magic.models",
                "names": [
                  "Spell",
                  "Character",
                  "Spellbook",
                  "KnownSpell",
                  "PreparedSpell",
                  "SpellSlots",
                  "ActiveSpellEffect",
                  "CastSpellRequest"
                ],
                "line": 18
              },
              {
                "type": "import",
                "module": "re",
                "alias": null,
                "line": 191
              },
              {
                "type": "import",
                "module": "re",
                "alias": null,
                "line": 197
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 26,
                "args": [
                  "self",
                  "db"
                ],
                "is_async": false
              },
              {
                "name": "_parse_duration_minutes",
                "line": 189,
                "args": [
                  "self",
                  "duration"
                ],
                "is_async": false
              },
              {
                "name": "_parse_duration_hours",
                "line": 195,
                "args": [
                  "self",
                  "duration"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MagicService",
                "line": 23,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_spells",
                  "get_spell",
                  "get_spellbook",
                  "prepare_spells",
                  "cast_spell",
                  "get_spell_slots",
                  "restore_spell_slots",
                  "get_active_effects",
                  "dispel_effect",
                  "_use_spell_slot",
                  "_handle_concentration",
                  "_parse_duration_minutes",
                  "_parse_duration_hours"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Union"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field",
                  "validator"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey",
                  "Float"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB",
                  "ARRAY"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database",
                "names": [
                  "Base",
                  "BaseModel"
                ],
                "line": 22
              }
            ],
            "functions": [
              {
                "name": "calculate_remaining",
                "line": 251,
                "args": [
                  "cls",
                  "v",
                  "values"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MagicSchool",
                "line": 25,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "SpellLevel",
                "line": 36,
                "bases": [
                  "int",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "SpellComponent",
                "line": 49,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "SpellDuration",
                "line": 55,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "Spell",
                "line": 63,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "SpellPreparation",
                "line": 90,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "SpellComponentRequirement",
                "line": 100,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "SpellDurationTracking",
                "line": 114,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "Character",
                "line": 129,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "Spellbook",
                "line": 141,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "KnownSpell",
                "line": 155,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "PreparedSpell",
                "line": 168,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "SpellSlots",
                "line": 181,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "ActiveSpellEffect",
                "line": 192,
                "bases": [
                  "Base"
                ],
                "methods": []
              },
              {
                "name": "SpellResponse",
                "line": 210,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "SpellbookResponse",
                "line": 231,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "SpellSlotsResponse",
                "line": 243,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "calculate_remaining"
                ]
              },
              {
                "name": "CastSpellRequest",
                "line": 254,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "PrepareSpellsRequest",
                "line": 261,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 228,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 240,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.magic.models",
                "names": [
                  "MagicSchool",
                  "SpellLevel",
                  "SpellComponent",
                  "SpellDuration",
                  "Spell",
                  "Character",
                  "Spellbook",
                  "KnownSpell",
                  "PreparedSpell",
                  "SpellSlots",
                  "ActiveSpellEffect",
                  "SpellPreparation",
                  "SpellComponentRequirement",
                  "SpellDurationTracking",
                  "SpellResponse",
                  "SpellbookResponse",
                  "SpellSlotsResponse",
                  "CastSpellRequest",
                  "PrepareSpellsRequest"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.magic.services",
                "names": [
                  "MagicService"
                ],
                "line": 28
              },
              {
                "type": "from_import",
                "module": "backend.systems.magic.router",
                "names": [
                  "router"
                ],
                "line": 31
              },
              {
                "type": "from_import",
                "module": "backend.systems.magic.websocket",
                "names": [
                  "magic_ws_manager",
                  "magic_websocket_endpoint"
                ],
                "line": 36
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database",
                "names": [
                  "get_db"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.magic.models",
                "names": [
                  "SpellResponse",
                  "SpellbookResponse",
                  "SpellSlotsResponse",
                  "CastSpellRequest",
                  "PrepareSpellsRequest"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.magic.services",
                "names": [
                  "MagicService"
                ],
                "line": 21
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "websocket.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "WebSocket",
                  "WebSocketDisconnect"
                ],
                "line": 13
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 14
              },
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 15
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 21,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "disconnect",
                "line": 31,
                "args": [
                  "self",
                  "websocket",
                  "character_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MagicWebSocketManager",
                "line": 18,
                "bases": [],
                "methods": [
                  "__init__",
                  "connect",
                  "disconnect",
                  "send_to_character",
                  "broadcast_spell_cast",
                  "broadcast_effect_expired",
                  "broadcast_spell_slots_updated",
                  "broadcast_concentration_broken"
                ]
              }
            ]
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "re",
            "line": 191,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/magic/services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "re",
            "line": 197,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/magic/services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 15,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/magic/models.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "character": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/character",
        "files": [
          "services.py",
          "character_schemas.py",
          "models.py",
          "prompt_manager.py",
          "__init__.py",
          "gpt_client.py",
          "player_routes.py",
          "history.py",
          "routers/character_router.py",
          "routers/__init__.py",
          "routers/relationship_router.py",
          "database/__init__.py",
          "database/setup.py",
          "database/models/__init__.py",
          "core/character_model.py",
          "core/__init__.py",
          "core/character_builder_class.py",
          "utils/character_utils.py",
          "utils/context_manager.py",
          "utils/extractors.py",
          "utils/cache.py",
          "utils/__init__.py",
          "utils/party_utils.py",
          "utils/validation.py",
          "repositories/__init__.py",
          "repositories/character_repository.py",
          "models/character_builder.py",
          "models/relationship.py",
          "models/__init__.py",
          "models/mood.py",
          "models/character.py",
          "models/goal.py",
          "models/visual_model.py",
          "schemas/__init__.py",
          "api/party_api.py",
          "api/__init__.py",
          "api/character_api.py",
          "api/api.py",
          "services/__init__.py",
          "services/mood_service.py",
          "services/relationship_service.py",
          "services/character_service.py",
          "services/party_service.py",
          "services/goal_service.py",
          "services/utils/__init__.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models",
                "names": [
                  "CharacterEntity",
                  "CharacterModel",
                  "CreateCharacterRequest",
                  "UpdateCharacterRequest",
                  "CharacterResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "CharacterNotFoundError",
                  "CharacterValidationError",
                  "CharacterConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_character_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CharacterService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x10504f7f0>"
                ],
                "methods": [
                  "__init__",
                  "create_character",
                  "get_character_by_id",
                  "update_character",
                  "delete_character",
                  "list_characters",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_character_statistics"
                ]
              }
            ]
          },
          {
            "file": "character_schemas.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel"
                ],
                "line": 4
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "CharacterSchema",
                "line": 6,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CharacterCreateSchema",
                "line": 17,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CharacterUpdateSchema",
                "line": 23,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 14,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CharacterBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "CharacterModel",
                "line": 36,
                "bases": [
                  "CharacterBaseModel"
                ],
                "methods": []
              },
              {
                "name": "CharacterEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateCharacterRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateCharacterRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CharacterResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CharacterListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "prompt_manager.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict"
                ],
                "line": 1
              }
            ],
            "functions": [
              {
                "name": "build_prompt",
                "line": 14,
                "args": [
                  "event",
                  "rumor",
                  "traits",
                  "distortion_level"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "RumorPromptManager",
                "line": 3,
                "bases": [],
                "methods": [
                  "build_prompt"
                ]
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.character.models.character",
                "names": [
                  "Character",
                  "Skill"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.character_builder",
                "names": [
                  "CharacterBuilder",
                  "generate_basic_stats"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.visual_model",
                "names": [
                  "CharacterModel",
                  "MeshSlot",
                  "BlendShape",
                  "MaterialAssignment",
                  "AnimationState",
                  "VisualModel",
                  "Mesh",
                  "Material",
                  "Animation"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.core.character_model",
                "names": [
                  "Character"
                ],
                "line": 19
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "gpt_client.py",
            "imports": [
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 1
              },
              {
                "type": "import",
                "module": "httpx",
                "alias": null,
                "line": 2
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "Optional"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel"
                ],
                "line": 4
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 18,
                "args": [
                  "self",
                  "api_key",
                  "base_url"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "GPTRequest",
                "line": 6,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "GPTResponse",
                "line": 12,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "GPTClient",
                "line": 17,
                "bases": [],
                "methods": [
                  "__init__",
                  "complete"
                ]
              }
            ]
          },
          {
            "file": "player_routes.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.character_routes",
                "names": [
                  "character_bp"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "history.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/character_router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "Query",
                  "Path"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_db"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.core.character_model",
                "names": [
                  "Character"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.character",
                "names": [
                  "Character"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.character_service",
                "names": [
                  "CharacterService"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.schemas.character_schemas",
                "names": [
                  "CharacterCreateSchema",
                  "CharacterUpdateSchema",
                  "CharacterResponseSchema",
                  "CharacterListResponseSchema"
                ],
                "line": 18
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.routers.character_router",
                "names": [
                  "router"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.routers.relationship_router",
                "names": [
                  "router"
                ],
                "line": 13
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/relationship_router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "Query",
                  "Path"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_db"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.character_service",
                "names": [
                  "CharacterService"
                ],
                "line": 15
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "database/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.character.setup",
                "names": [
                  "async_engine",
                  "AsyncSessionLocal",
                  "get_async_db"
                ],
                "line": 2
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "database/setup.py",
            "imports": [
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.asyncio",
                "names": [
                  "create_async_engine",
                  "AsyncSession"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "sessionmaker"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.config",
                "names": [
                  "config"
                ],
                "line": 4
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "database/models/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.character.base",
                "names": [
                  "Base",
                  "CoreBaseModel"
                ],
                "line": 2
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "core/character_model.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "core/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.character.core.character_model",
                "names": [
                  "Character"
                ],
                "line": 7
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "core/character_builder_class.py",
            "imports": [
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 5
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 6
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.rules.rules_utils",
                "names": [
                  "calculate_dr"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.json_utils",
                "names": [
                  "load_json"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm.exc",
                "names": [
                  "NoResultFound"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.character",
                "names": [
                  "Character"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.user",
                "names": [
                  "User"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.party",
                "names": [
                  "Party"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.world",
                "names": [
                  "Region"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest",
                "names": [
                  "Quest"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.spell",
                "names": [
                  "Spell"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory",
                "names": [
                  "InventoryItem"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.save",
                "names": [
                  "SaveGame"
                ],
                "line": 22
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 151
              }
            ],
            "functions": [
              {
                "name": "finalize_character",
                "line": 226,
                "args": [
                  "character_data"
                ],
                "is_async": false
              },
              {
                "name": "generate_basic_tiles",
                "line": 289,
                "args": [],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 36,
                "args": [
                  "self",
                  "race_data",
                  "feat_data",
                  "skill_list"
                ],
                "is_async": false
              },
              {
                "name": "load_from_input",
                "line": 52,
                "args": [
                  "self",
                  "input_data"
                ],
                "is_async": false
              },
              {
                "name": "set_race",
                "line": 75,
                "args": [
                  "self",
                  "race_name"
                ],
                "is_async": false
              },
              {
                "name": "apply_racial_modifiers",
                "line": 81,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "assign_attribute",
                "line": 87,
                "args": [
                  "self",
                  "attribute",
                  "value"
                ],
                "is_async": false
              },
              {
                "name": "add_feat",
                "line": 92,
                "args": [
                  "self",
                  "feat_name"
                ],
                "is_async": false
              },
              {
                "name": "assign_skill",
                "line": 102,
                "args": [
                  "self",
                  "skill_name"
                ],
                "is_async": false
              },
              {
                "name": "assign_skills",
                "line": 109,
                "args": [
                  "self",
                  "skills_dict"
                ],
                "is_async": false
              },
              {
                "name": "get_available_starter_kits",
                "line": 114,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "apply_starter_kit",
                "line": 123,
                "args": [
                  "self",
                  "kit_name"
                ],
                "is_async": false
              },
              {
                "name": "is_valid",
                "line": 137,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "finalize",
                "line": 150,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 213,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "generate_hidden_traits",
                "line": 216,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CharacterBuilder",
                "line": 33,
                "bases": [],
                "methods": [
                  "__init__",
                  "load_from_input",
                  "set_race",
                  "apply_racial_modifiers",
                  "assign_attribute",
                  "add_feat",
                  "assign_skill",
                  "assign_skills",
                  "get_available_starter_kits",
                  "apply_starter_kit",
                  "is_valid",
                  "finalize",
                  "to_dict",
                  "generate_hidden_traits"
                ]
              }
            ]
          },
          {
            "file": "utils/character_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any",
                  "Tuple",
                  "Union"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 10
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 12
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 13
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.error_utils",
                "names": [
                  "ValidationError",
                  "NotFoundError",
                  "DatabaseError"
                ],
                "line": 18
              }
            ],
            "functions": [
              {
                "name": "generate_character_stats",
                "line": 111,
                "args": [],
                "is_async": false
              },
              {
                "name": "generate_character_skills",
                "line": 127,
                "args": [],
                "is_async": false
              },
              {
                "name": "validate_character_data",
                "line": 140,
                "args": [
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "validate_character_stats",
                "line": 177,
                "args": [
                  "stats"
                ],
                "is_async": false
              },
              {
                "name": "calculate_level",
                "line": 200,
                "args": [
                  "xp"
                ],
                "is_async": false
              },
              {
                "name": "calculate_xp_for_level",
                "line": 214,
                "args": [
                  "level"
                ],
                "is_async": false
              },
              {
                "name": "calculate_ability_modifier",
                "line": 220,
                "args": [
                  "score"
                ],
                "is_async": false
              },
              {
                "name": "calculate_hit_points",
                "line": 224,
                "args": [
                  "level",
                  "constitution",
                  "class_"
                ],
                "is_async": false
              },
              {
                "name": "calculate_mana_points",
                "line": 242,
                "args": [
                  "level",
                  "spellcasting_ability",
                  "class_"
                ],
                "is_async": false
              },
              {
                "name": "has_spellcasting",
                "line": 260,
                "args": [
                  "class_"
                ],
                "is_async": false
              },
              {
                "name": "get_spellcasting_ability",
                "line": 264,
                "args": [
                  "class_"
                ],
                "is_async": false
              },
              {
                "name": "calculate_skill_modifier",
                "line": 268,
                "args": [
                  "character_stats",
                  "skill",
                  "is_proficient"
                ],
                "is_async": false
              },
              {
                "name": "get_character_creation_summary",
                "line": 285,
                "args": [
                  "character_data"
                ],
                "is_async": false
              },
              {
                "name": "apply_racial_modifiers",
                "line": 305,
                "args": [
                  "stats",
                  "race"
                ],
                "is_async": false
              },
              {
                "name": "get_available_skills_for_class",
                "line": 331,
                "args": [
                  "class_"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ValidationError",
                "line": 21,
                "bases": [
                  "Exception"
                ],
                "methods": []
              },
              {
                "name": "NotFoundError",
                "line": 24,
                "bases": [
                  "Exception"
                ],
                "methods": []
              },
              {
                "name": "DatabaseError",
                "line": 27,
                "bases": [
                  "Exception"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "utils/context_manager.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 1
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any",
                  "Optional",
                  "Callable",
                  "Union"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.scoring",
                "names": [
                  "relevance_score"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.extractors",
                "names": [
                  "extract_key_info"
                ],
                "line": 5
              }
            ],
            "functions": [
              {
                "name": "count_tokens",
                "line": 8,
                "args": [
                  "text"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 12,
                "args": [
                  "self",
                  "speaker",
                  "message",
                  "timestamp",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 18,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 27,
                "args": [
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 40,
                "args": [
                  "self",
                  "max_tokens",
                  "max_messages"
                ],
                "is_async": false
              },
              {
                "name": "add_entry",
                "line": 46,
                "args": [
                  "self",
                  "speaker",
                  "message",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "_enforce_limits",
                "line": 52,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_context_window",
                "line": 67,
                "args": [
                  "self",
                  "scoring_fn",
                  "by_tokens"
                ],
                "is_async": false
              },
              {
                "name": "extract_key_info",
                "line": 88,
                "args": [
                  "self",
                  "extractor_fn"
                ],
                "is_async": false
              },
              {
                "name": "to_json",
                "line": 98,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_json",
                "line": 103,
                "args": [
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "save",
                "line": 109,
                "args": [
                  "self",
                  "filepath"
                ],
                "is_async": false
              },
              {
                "name": "load",
                "line": 115,
                "args": [
                  "filepath"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ConversationEntry",
                "line": 11,
                "bases": [],
                "methods": [
                  "__init__",
                  "to_dict",
                  "from_dict"
                ]
              },
              {
                "name": "ConversationHistory",
                "line": 35,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_entry",
                  "_enforce_limits",
                  "get_context_window",
                  "extract_key_info",
                  "to_json",
                  "from_json",
                  "save",
                  "load"
                ]
              }
            ]
          },
          {
            "file": "utils/extractors.py",
            "imports": [
              {
                "type": "import",
                "module": "re",
                "alias": null,
                "line": 1
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 2
              }
            ],
            "functions": [
              {
                "name": "extract_key_info",
                "line": 4,
                "args": [
                  "message"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/cache.py",
            "imports": [],
            "functions": [],
            "classes": [
              {
                "name": "DialogueCache",
                "line": 4,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "utils/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.character.utils.character_utils",
                "names": [
                  "RACES",
                  "CLASSES",
                  "BALANCE_CONSTANTS",
                  "generate_character_stats",
                  "generate_character_skills",
                  "validate_character_data",
                  "validate_character_stats",
                  "calculate_level",
                  "calculate_ability_modifier",
                  "calculate_hit_points",
                  "calculate_mana_points",
                  "calculate_proficiency_bonus",
                  "calculate_saving_throw",
                  "calculate_skill_bonus",
                  "roll_dice",
                  "has_spellcasting",
                  "apply_level_up_benefits",
                  "calculate_xp_for_level",
                  "generate_random_name"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.utils.visual_utils",
                "names": [
                  "RandomCharacterGenerator",
                  "serialize_character",
                  "deserialize_character",
                  "load_preset",
                  "save_preset",
                  "SERIALIZATION_VERSION"
                ],
                "line": 19
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/party_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Union"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "backend.systems.memory.memory_utils",
                "names": [
                  "log_permanent_memory"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.core.repositories.party_repository",
                "names": [
                  "PartyRepository"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "create_party",
                "line": 10,
                "args": [
                  "player_id",
                  "npc_ids"
                ],
                "is_async": false
              },
              {
                "name": "add_to_party",
                "line": 29,
                "args": [
                  "party_id",
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "remove_from_party",
                "line": 47,
                "args": [
                  "party_id",
                  "member_id"
                ],
                "is_async": false
              },
              {
                "name": "get_total_party_level",
                "line": 64,
                "args": [
                  "party_id",
                  "mode"
                ],
                "is_async": false
              },
              {
                "name": "award_xp_to_party",
                "line": 70,
                "args": [
                  "party_id",
                  "amount"
                ],
                "is_async": false
              },
              {
                "name": "abandon_party",
                "line": 83,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/validation.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Dict",
                  "Callable",
                  "Type"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "ValidationError"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 11,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "register_schema",
                "line": 16,
                "args": [
                  "self",
                  "name",
                  "schema"
                ],
                "is_async": false
              },
              {
                "name": "register_pre_condition",
                "line": 19,
                "args": [
                  "self",
                  "name",
                  "check"
                ],
                "is_async": false
              },
              {
                "name": "register_post_condition",
                "line": 22,
                "args": [
                  "self",
                  "name",
                  "check"
                ],
                "is_async": false
              },
              {
                "name": "validate",
                "line": 25,
                "args": [
                  "self",
                  "name",
                  "data"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ValidationManager",
                "line": 10,
                "bases": [],
                "methods": [
                  "__init__",
                  "register_schema",
                  "register_pre_condition",
                  "register_post_condition",
                  "validate"
                ]
              }
            ]
          },
          {
            "file": "repositories/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.character.repositories.character_repository",
                "names": [
                  "CharacterRepository"
                ],
                "line": 7
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/character_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any",
                  "Union"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session",
                  "Query"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.exc",
                "names": [
                  "SQLAlchemyError"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_db_session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.error",
                "names": [
                  "NotFoundError",
                  "DatabaseError"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.character",
                "names": [
                  "Character",
                  "Skill"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 22,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "get_session",
                "line": 31,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_by_id",
                "line": 42,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "get_by_name",
                "line": 55,
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false
              },
              {
                "name": "get_all",
                "line": 68,
                "args": [
                  "self",
                  "limit",
                  "offset",
                  "filters"
                ],
                "is_async": false
              },
              {
                "name": "create",
                "line": 102,
                "args": [
                  "self",
                  "character"
                ],
                "is_async": false
              },
              {
                "name": "update",
                "line": 122,
                "args": [
                  "self",
                  "character"
                ],
                "is_async": false
              },
              {
                "name": "delete",
                "line": 141,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "count",
                "line": 164,
                "args": [
                  "self",
                  "filters"
                ],
                "is_async": false
              },
              {
                "name": "get_skills",
                "line": 190,
                "args": [
                  "self",
                  "limit",
                  "offset"
                ],
                "is_async": false
              },
              {
                "name": "get_skill_by_name",
                "line": 204,
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false
              },
              {
                "name": "create_skill",
                "line": 217,
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false
              },
              {
                "name": "add_skill_to_character",
                "line": 238,
                "args": [
                  "self",
                  "character_id",
                  "skill_name"
                ],
                "is_async": false
              },
              {
                "name": "remove_skill_from_character",
                "line": 269,
                "args": [
                  "self",
                  "character_id",
                  "skill_name"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CharacterRepository",
                "line": 16,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_session",
                  "get_by_id",
                  "get_by_name",
                  "get_all",
                  "create",
                  "update",
                  "delete",
                  "count",
                  "get_skills",
                  "get_skill_by_name",
                  "create_skill",
                  "add_skill_to_character",
                  "remove_skill_from_character"
                ]
              }
            ]
          },
          {
            "file": "models/character_builder.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models/relationship.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.character.models.character",
                "names": [
                  "Character",
                  "Skill"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.character_builder",
                "names": [
                  "CharacterBuilder",
                  "generate_basic_stats"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.visual_model",
                "names": [
                  "CharacterModel",
                  "MeshSlot",
                  "BlendShape",
                  "MaterialAssignment",
                  "AnimationState",
                  "VisualModel",
                  "Mesh",
                  "Material"
                ],
                "line": 11
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/mood.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models/character.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "Integer",
                  "String",
                  "JSON",
                  "ForeignKey",
                  "Table",
                  "DateTime"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Optional",
                  "Any",
                  "Union"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4",
                  "UUID"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "Base"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.core.character_builder_class",
                "names": [
                  "CharacterBuilder",
                  "RACES_DATA",
                  "FEATS_LIST"
                ],
                "line": 48
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.relationship_service",
                "names": [
                  "RelationshipService"
                ],
                "line": 82
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.relationship_service",
                "names": [
                  "RelationshipService"
                ],
                "line": 90
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.relationship",
                "names": [
                  "RelationshipType"
                ],
                "line": 91
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.relationship_service",
                "names": [
                  "RelationshipService"
                ],
                "line": 102
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.relationship",
                "names": [
                  "RelationshipType"
                ],
                "line": 103
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.relationship_service",
                "names": [
                  "RelationshipService"
                ],
                "line": 114
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.mood_service",
                "names": [
                  "MoodService"
                ],
                "line": 128
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.mood_service",
                "names": [
                  "MoodService"
                ],
                "line": 136
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.mood_service",
                "names": [
                  "MoodService"
                ],
                "line": 143
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.goal_service",
                "names": [
                  "GoalService"
                ],
                "line": 152
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.goal_service",
                "names": [
                  "GoalService"
                ],
                "line": 160
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.goal_service",
                "names": [
                  "GoalService"
                ],
                "line": 168
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.visual_model",
                "names": [
                  "CharacterModel"
                ],
                "line": 177
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.visual_model",
                "names": [
                  "CharacterModel"
                ],
                "line": 191
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_db_session"
                ],
                "line": 50
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 43,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_builder",
                "line": 46,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_relationships",
                "line": 80,
                "args": [
                  "self",
                  "relationship_type"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_relationships",
                "line": 88,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_character_relationships",
                "line": 100,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "add_relationship",
                "line": 112,
                "args": [
                  "self",
                  "target_id",
                  "relationship_type",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "get_mood",
                "line": 126,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_mood_description",
                "line": 134,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "update_mood",
                "line": 141,
                "args": [
                  "self",
                  "mood_data"
                ],
                "is_async": false
              },
              {
                "name": "get_goals",
                "line": 150,
                "args": [
                  "self",
                  "active_only"
                ],
                "is_async": false
              },
              {
                "name": "add_goal",
                "line": 158,
                "args": [
                  "self",
                  "goal_data"
                ],
                "is_async": false
              },
              {
                "name": "update_goal",
                "line": 166,
                "args": [
                  "self",
                  "goal_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "get_visual_model",
                "line": 175,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "set_visual_model",
                "line": 189,
                "args": [
                  "self",
                  "visual_model"
                ],
                "is_async": false
              },
              {
                "name": "update_visual_appearance",
                "line": 200,
                "args": [
                  "self",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "__repr__",
                "line": 236,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Character",
                "line": 22,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_builder",
                  "get_relationships",
                  "get_faction_relationships",
                  "get_character_relationships",
                  "add_relationship",
                  "get_mood",
                  "get_mood_description",
                  "update_mood",
                  "get_goals",
                  "add_goal",
                  "update_goal",
                  "get_visual_model",
                  "set_visual_model",
                  "update_visual_appearance"
                ]
              },
              {
                "name": "Skill",
                "line": 225,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__"
                ]
              }
            ]
          },
          {
            "file": "models/goal.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models/visual_model.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "Optional",
                  "List"
                ],
                "line": 11
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 17,
                "args": [
                  "self",
                  "name",
                  "mesh_id",
                  "compatible_types"
                ],
                "is_async": false
              },
              {
                "name": "is_compatible",
                "line": 22,
                "args": [
                  "self",
                  "mesh_type"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 30,
                "args": [
                  "self",
                  "name",
                  "value"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 38,
                "args": [
                  "self",
                  "slot",
                  "material_id",
                  "properties"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 47,
                "args": [
                  "self",
                  "animation_id",
                  "speed",
                  "weight",
                  "loop",
                  "transition_time"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 61,
                "args": [
                  "self",
                  "race",
                  "base_mesh",
                  "mesh_slots",
                  "blendshapes",
                  "materials",
                  "animations",
                  "scale"
                ],
                "is_async": false
              },
              {
                "name": "swap_mesh",
                "line": 75,
                "args": [
                  "self",
                  "slot_name",
                  "mesh_id"
                ],
                "is_async": false
              },
              {
                "name": "set_blendshape",
                "line": 82,
                "args": [
                  "self",
                  "name",
                  "value"
                ],
                "is_async": false
              },
              {
                "name": "assign_material",
                "line": 89,
                "args": [
                  "self",
                  "slot",
                  "material_id",
                  "properties"
                ],
                "is_async": false
              },
              {
                "name": "play_animation",
                "line": 93,
                "args": [
                  "self",
                  "animation_id",
                  "speed",
                  "transition_time"
                ],
                "is_async": false
              },
              {
                "name": "stop_animation",
                "line": 109,
                "args": [
                  "self",
                  "animation_id"
                ],
                "is_async": false
              },
              {
                "name": "apply_preset",
                "line": 119,
                "args": [
                  "self",
                  "preset_data"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 137,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 157,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MeshSlot",
                "line": 13,
                "bases": [],
                "methods": [
                  "__init__",
                  "is_compatible"
                ]
              },
              {
                "name": "BlendShape",
                "line": 26,
                "bases": [],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "MaterialAssignment",
                "line": 34,
                "bases": [],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "AnimationState",
                "line": 43,
                "bases": [],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "CharacterModel",
                "line": 56,
                "bases": [],
                "methods": [
                  "__init__",
                  "swap_mesh",
                  "set_blendshape",
                  "assign_material",
                  "play_animation",
                  "stop_animation",
                  "apply_preset",
                  "to_dict",
                  "from_dict"
                ]
              },
              {
                "name": "VisualModel",
                "line": 190,
                "bases": [],
                "methods": []
              },
              {
                "name": "Mesh",
                "line": 193,
                "bases": [],
                "methods": []
              },
              {
                "name": "Material",
                "line": 196,
                "bases": [],
                "methods": []
              },
              {
                "name": "Animation",
                "line": 199,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "schemas/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.character.character_schemas",
                "names": [
                  "CharacterBaseSchema",
                  "CharacterStatsSchema",
                  "CharacterCreateSchema",
                  "CharacterUpdateSchema",
                  "CharacterResponseSchema",
                  "CharacterListResponseSchema",
                  "CharacterSearchSchema",
                  "CharacterVisualModelSchema"
                ],
                "line": 7
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "api/party_api.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_db_session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.party_service",
                "names": [
                  "PartyService"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.error",
                "names": [
                  "NotFoundError",
                  "DatabaseError"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "create_party",
                "line": 27,
                "args": [
                  "player_id",
                  "npc_ids",
                  "db"
                ],
                "is_async": false
              },
              {
                "name": "add_to_party",
                "line": 46,
                "args": [
                  "party_id",
                  "npc_id",
                  "db"
                ],
                "is_async": false
              },
              {
                "name": "remove_from_party",
                "line": 73,
                "args": [
                  "party_id",
                  "member_id",
                  "db"
                ],
                "is_async": false
              },
              {
                "name": "get_party_level",
                "line": 100,
                "args": [
                  "party_id",
                  "mode",
                  "db"
                ],
                "is_async": false
              },
              {
                "name": "award_xp_to_party",
                "line": 119,
                "args": [
                  "party_id",
                  "amount",
                  "db"
                ],
                "is_async": false
              },
              {
                "name": "abandon_party",
                "line": 143,
                "args": [
                  "npc_id",
                  "db"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "api/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "api/character_api.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_db_session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.character_service",
                "names": [
                  "CharacterService"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.character_builder",
                "names": [
                  "CharacterBuilder"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.api.schemas",
                "names": [
                  "CharacterCreate",
                  "CharacterResponse",
                  "CharacterUpdate",
                  "CharacterList"
                ],
                "line": 15
              }
            ],
            "functions": [
              {
                "name": "create_character",
                "line": 25,
                "args": [
                  "character_data",
                  "db"
                ],
                "is_async": false
              },
              {
                "name": "get_character",
                "line": 48,
                "args": [
                  "character_id",
                  "db"
                ],
                "is_async": false
              },
              {
                "name": "list_characters",
                "line": 65,
                "args": [
                  "db"
                ],
                "is_async": false
              },
              {
                "name": "delete_character",
                "line": 83,
                "args": [
                  "character_id",
                  "db"
                ],
                "is_async": false
              },
              {
                "name": "update_character",
                "line": 101,
                "args": [
                  "character_id",
                  "update_data",
                  "db"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "api/api.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "HTTPException"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.schemas",
                "names": [
                  "RumorTransformationRequest",
                  "RumorTransformationResponse"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.gpt_client",
                "names": [
                  "GPTClient"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.rumor_transformer",
                "names": [
                  "RumorTransformer"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.truth_tracker",
                "names": [
                  "TruthTracker"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.cache",
                "names": [
                  "async_cached"
                ],
                "line": 6
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/mood_service.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "services/relationship_service.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "services/character_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any",
                  "Tuple",
                  "Union"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.exc",
                "names": [
                  "SQLAlchemyError"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 12
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.character",
                "names": [
                  "Character",
                  "Skill"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.character_builder",
                "names": [
                  "CharacterBuilder"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.relationship",
                "names": [
                  "Relationship",
                  "RelationshipType"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.mood",
                "names": [
                  "CharacterMood",
                  "EmotionalState",
                  "MoodIntensity",
                  "MoodModifier"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.goal",
                "names": [
                  "Goal",
                  "GoalType",
                  "GoalPriority",
                  "GoalStatus"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.relationship_service",
                "names": [
                  "RelationshipService"
                ],
                "line": 24
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.mood_service",
                "names": [
                  "MoodService"
                ],
                "line": 25
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.services.goal_service",
                "names": [
                  "GoalService"
                ],
                "line": 26
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.event_dispatcher",
                "names": [
                  "EventDispatcher"
                ],
                "line": 28
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.canonical_events",
                "names": [
                  "CharacterCreated",
                  "CharacterLeveledUp",
                  "CharacterUpdated",
                  "CharacterDeleted",
                  "MoodChanged",
                  "GoalCreated",
                  "GoalCompleted",
                  "GoalFailed",
                  "GoalProgressUpdated"
                ],
                "line": 29
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_db_session"
                ],
                "line": 35
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.error",
                "names": [
                  "NotFoundError",
                  "DatabaseError",
                  "ValidationError"
                ],
                "line": 36
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.rules",
                "names": [
                  "balance_constants",
                  "load_data"
                ],
                "line": 37
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.visual_model",
                "names": [
                  "CharacterModel"
                ],
                "line": 718
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.visual_model",
                "names": [
                  "CharacterModel"
                ],
                "line": 805
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm.attributes",
                "names": [
                  "flag_modified"
                ],
                "line": 179
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 44,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "_calculate_ability_modifier",
                "line": 52,
                "args": [
                  "self",
                  "score"
                ],
                "is_async": false
              },
              {
                "name": "_has_spellcasting",
                "line": 56,
                "args": [
                  "self",
                  "class_name"
                ],
                "is_async": false
              },
              {
                "name": "_calculate_xp_for_level",
                "line": 61,
                "args": [
                  "self",
                  "level"
                ],
                "is_async": false
              },
              {
                "name": "_get_character_orm_by_id",
                "line": 68,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_character_orm_by_uuid",
                "line": 75,
                "args": [
                  "self",
                  "character_uuid"
                ],
                "is_async": false
              },
              {
                "name": "create_character_from_builder",
                "line": 83,
                "args": [
                  "self",
                  "builder",
                  "commit"
                ],
                "is_async": false
              },
              {
                "name": "get_character_by_id",
                "line": 151,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "get_character_by_uuid",
                "line": 155,
                "args": [
                  "self",
                  "character_uuid"
                ],
                "is_async": false
              },
              {
                "name": "get_character_builder_by_id",
                "line": 159,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "update_character_data",
                "line": 167,
                "args": [
                  "self",
                  "character_id",
                  "update_data",
                  "commit"
                ],
                "is_async": false
              },
              {
                "name": "delete_character",
                "line": 202,
                "args": [
                  "self",
                  "character_id",
                  "commit"
                ],
                "is_async": false
              },
              {
                "name": "level_up_character",
                "line": 223,
                "args": [
                  "self",
                  "character_id",
                  "commit"
                ],
                "is_async": false
              },
              {
                "name": "validate_character_creation_data",
                "line": 295,
                "args": [
                  "self",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "add_faction_relationship",
                "line": 311,
                "args": [
                  "self",
                  "character_id",
                  "faction_id",
                  "reputation",
                  "standing"
                ],
                "is_async": false
              },
              {
                "name": "get_character_relationships",
                "line": 340,
                "args": [
                  "self",
                  "character_id",
                  "relationship_type"
                ],
                "is_async": false
              },
              {
                "name": "add_quest_relationship",
                "line": 361,
                "args": [
                  "self",
                  "character_id",
                  "quest_id",
                  "status",
                  "progress"
                ],
                "is_async": false
              },
              {
                "name": "add_character_relationship",
                "line": 391,
                "args": [
                  "self",
                  "source_character_id",
                  "target_character_id",
                  "relationship_data"
                ],
                "is_async": false
              },
              {
                "name": "get_character_mood",
                "line": 418,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "add_character_mood_modifier",
                "line": 433,
                "args": [
                  "self",
                  "character_id",
                  "emotional_state",
                  "intensity",
                  "reason",
                  "duration_hours"
                ],
                "is_async": false
              },
              {
                "name": "add_character_goal",
                "line": 464,
                "args": [
                  "self",
                  "character_id",
                  "description",
                  "goal_type",
                  "priority",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "get_character_goals",
                "line": 494,
                "args": [
                  "self",
                  "character_id",
                  "status",
                  "goal_type",
                  "priority"
                ],
                "is_async": false
              },
              {
                "name": "update_goal_progress",
                "line": 521,
                "args": [
                  "self",
                  "character_id",
                  "goal_id",
                  "progress"
                ],
                "is_async": false
              },
              {
                "name": "complete_goal",
                "line": 545,
                "args": [
                  "self",
                  "character_id",
                  "goal_id"
                ],
                "is_async": false
              },
              {
                "name": "fail_goal",
                "line": 575,
                "args": [
                  "self",
                  "character_id",
                  "goal_id",
                  "reason"
                ],
                "is_async": false
              },
              {
                "name": "build_character_from_input",
                "line": 608,
                "args": [
                  "self",
                  "input_data"
                ],
                "is_async": false
              },
              {
                "name": "_initialize_character_goals",
                "line": 634,
                "args": [
                  "self",
                  "character"
                ],
                "is_async": false
              },
              {
                "name": "_initialize_character_mood",
                "line": 676,
                "args": [
                  "self",
                  "character"
                ],
                "is_async": false
              },
              {
                "name": "get_character_visual_model",
                "line": 716,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "set_character_visual_model",
                "line": 723,
                "args": [
                  "self",
                  "character_id",
                  "visual_model_data",
                  "commit"
                ],
                "is_async": false
              },
              {
                "name": "update_character_appearance",
                "line": 740,
                "args": [
                  "self",
                  "character_id",
                  "appearance_updates",
                  "commit"
                ],
                "is_async": false
              },
              {
                "name": "randomize_character_appearance",
                "line": 757,
                "args": [
                  "self",
                  "character_id",
                  "constraints",
                  "commit"
                ],
                "is_async": false
              },
              {
                "name": "apply_visual_preset",
                "line": 776,
                "args": [
                  "self",
                  "character_id",
                  "preset_data",
                  "commit"
                ],
                "is_async": false
              },
              {
                "name": "export_character_visual_data",
                "line": 795,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "import_character_visual_data",
                "line": 801,
                "args": [
                  "self",
                  "character_id",
                  "visual_data",
                  "commit"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CharacterService",
                "line": 43,
                "bases": [],
                "methods": [
                  "__init__",
                  "_calculate_ability_modifier",
                  "_has_spellcasting",
                  "_calculate_xp_for_level",
                  "_get_character_orm_by_id",
                  "_get_character_orm_by_uuid",
                  "create_character_from_builder",
                  "get_character_by_id",
                  "get_character_by_uuid",
                  "get_character_builder_by_id",
                  "update_character_data",
                  "delete_character",
                  "level_up_character",
                  "validate_character_creation_data",
                  "add_faction_relationship",
                  "get_character_relationships",
                  "add_quest_relationship",
                  "add_character_relationship",
                  "get_character_mood",
                  "add_character_mood_modifier",
                  "add_character_goal",
                  "get_character_goals",
                  "update_goal_progress",
                  "complete_goal",
                  "fail_goal",
                  "build_character_from_input",
                  "_initialize_character_goals",
                  "_initialize_character_mood",
                  "get_character_visual_model",
                  "set_character_visual_model",
                  "update_character_appearance",
                  "randomize_character_appearance",
                  "apply_visual_preset",
                  "export_character_visual_data",
                  "import_character_visual_data"
                ]
              }
            ]
          },
          {
            "file": "services/party_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any",
                  "Union"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.exc",
                "names": [
                  "SQLAlchemyError"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_db_session"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.error",
                "names": [
                  "NotFoundError",
                  "DatabaseError",
                  "ValidationError"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.character",
                "names": [
                  "Character"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.memory.memory_utils",
                "names": [
                  "log_permanent_memory"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 19,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "create_party",
                "line": 22,
                "args": [
                  "self",
                  "player_id",
                  "npc_ids"
                ],
                "is_async": false
              },
              {
                "name": "add_to_party",
                "line": 69,
                "args": [
                  "self",
                  "party_id",
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "remove_from_party",
                "line": 111,
                "args": [
                  "self",
                  "party_id",
                  "member_id"
                ],
                "is_async": false
              },
              {
                "name": "get_total_party_level",
                "line": 153,
                "args": [
                  "self",
                  "party_id",
                  "mode"
                ],
                "is_async": false
              },
              {
                "name": "award_xp_to_party",
                "line": 184,
                "args": [
                  "self",
                  "party_id",
                  "amount"
                ],
                "is_async": false
              },
              {
                "name": "abandon_party",
                "line": 217,
                "args": [
                  "self",
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_character_by_id",
                "line": 265,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_party_by_id",
                "line": 272,
                "args": [
                  "self",
                  "party_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "PartyService",
                "line": 18,
                "bases": [],
                "methods": [
                  "__init__",
                  "create_party",
                  "add_to_party",
                  "remove_from_party",
                  "get_total_party_level",
                  "award_xp_to_party",
                  "abandon_party",
                  "_get_character_by_id",
                  "_get_party_by_id"
                ]
              }
            ]
          },
          {
            "file": "services/goal_service.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Union",
                  "Any"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 11
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.event_dispatcher",
                "names": [
                  "EventDispatcher"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.character.models.goal",
                "names": [
                  "Goal",
                  "GoalType",
                  "GoalPriority",
                  "GoalStatus",
                  "GoalCreated",
                  "GoalCompleted",
                  "GoalFailed",
                  "GoalAbandoned",
                  "GoalProgressUpdated"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 29,
                "args": [
                  "self",
                  "data_dir"
                ],
                "is_async": false
              },
              {
                "name": "_get_character_goal_file",
                "line": 43,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "_load_character_goals",
                "line": 55,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "_save_character_goals",
                "line": 86,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "get_character_goals",
                "line": 125,
                "args": [
                  "self",
                  "character_id",
                  "goal_type",
                  "status",
                  "priority",
                  "load_if_needed"
                ],
                "is_async": false
              },
              {
                "name": "get_goal",
                "line": 177,
                "args": [
                  "self",
                  "character_id",
                  "goal_id",
                  "load_if_needed"
                ],
                "is_async": false
              },
              {
                "name": "add_goal",
                "line": 205,
                "args": [
                  "self",
                  "character_id",
                  "description",
                  "goal_type",
                  "priority",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "add_subgoal",
                "line": 257,
                "args": [
                  "self",
                  "character_id",
                  "parent_goal_id",
                  "description",
                  "goal_type",
                  "priority",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "update_goal_progress",
                "line": 302,
                "args": [
                  "self",
                  "character_id",
                  "goal_id",
                  "progress"
                ],
                "is_async": false
              },
              {
                "name": "complete_goal",
                "line": 331,
                "args": [
                  "self",
                  "character_id",
                  "goal_id"
                ],
                "is_async": false
              },
              {
                "name": "fail_goal",
                "line": 358,
                "args": [
                  "self",
                  "character_id",
                  "goal_id",
                  "reason"
                ],
                "is_async": false
              },
              {
                "name": "abandon_goal",
                "line": 387,
                "args": [
                  "self",
                  "character_id",
                  "goal_id",
                  "reason"
                ],
                "is_async": false
              },
              {
                "name": "update_goal_priority",
                "line": 416,
                "args": [
                  "self",
                  "character_id",
                  "goal_id",
                  "priority"
                ],
                "is_async": false
              },
              {
                "name": "remove_goal",
                "line": 445,
                "args": [
                  "self",
                  "character_id",
                  "goal_id"
                ],
                "is_async": false
              },
              {
                "name": "get_active_goals",
                "line": 483,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "get_completed_goals",
                "line": 495,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "get_highest_priority_goals",
                "line": 507,
                "args": [
                  "self",
                  "character_id",
                  "status",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "get_goal_progress_summary",
                "line": 539,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "GoalService",
                "line": 23,
                "bases": [],
                "methods": [
                  "__init__",
                  "_get_character_goal_file",
                  "_load_character_goals",
                  "_save_character_goals",
                  "get_character_goals",
                  "get_goal",
                  "add_goal",
                  "add_subgoal",
                  "update_goal_progress",
                  "complete_goal",
                  "fail_goal",
                  "abandon_goal",
                  "update_goal_priority",
                  "remove_goal",
                  "get_active_goals",
                  "get_completed_goals",
                  "get_highest_priority_goals",
                  "get_goal_progress_summary"
                ]
              }
            ]
          },
          {
            "file": "services/utils/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.utils",
                "names": [
                  "validate_password_strength",
                  "validate_username_format",
                  "validate_email_format"
                ],
                "line": 2
              }
            ],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": true,
        "has_routers": true,
        "has_schemas": true,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "backend.systems.user",
            "line": 16,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.party",
            "line": 17,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.world",
            "line": 18,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.spell",
            "line": 20,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.save",
            "line": 22,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py"
          },
          {
            "type": "non_canonical_import",
            "import": "re",
            "line": 1,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/character/utils/extractors.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.core.repositories.party_repository",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/character/utils/party_utils.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "auth_user": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/auth_user",
        "files": [
          "services.py",
          "models.py",
          "__init__.py",
          "base.py",
          "routers/__init__.py",
          "routers/auth_relationship_router.py",
          "routers/auth_router.py",
          "utils/auth_utils.py",
          "utils/__init__.py",
          "utils/validation_utils.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "models/user_models.py",
          "models/auth_relationship_models.py",
          "schemas/__init__.py",
          "services/auth_service.py",
          "services/__init__.py",
          "services/password_service.py",
          "services/security_service.py",
          "services/token_service.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.models",
                "names": [
                  "Auth_UserEntity",
                  "Auth_UserModel",
                  "CreateAuth_UserRequest",
                  "UpdateAuth_UserRequest",
                  "Auth_UserResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "Auth_UserNotFoundError",
                  "Auth_UserValidationError",
                  "Auth_UserConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_auth_user_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Auth_UserService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104f847c0>"
                ],
                "methods": [
                  "__init__",
                  "create_auth_user",
                  "get_auth_user_by_id",
                  "update_auth_user",
                  "delete_auth_user",
                  "list_auth_users",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_auth_user_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Auth_UserBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "Auth_UserModel",
                "line": 36,
                "bases": [
                  "Auth_UserBaseModel"
                ],
                "methods": []
              },
              {
                "name": "Auth_UserEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateAuth_UserRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateAuth_UserRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Auth_UserResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Auth_UserListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.models",
                "names": [
                  "User",
                  "Role",
                  "Permission"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.services",
                "names": [
                  "verify_password",
                  "get_password_hash",
                  "authenticate_user",
                  "get_current_active_user",
                  "check_permissions",
                  "require_permissions",
                  "check_user_character_access",
                  "get_user_accessible_characters",
                  "oauth2_scheme",
                  "create_access_token",
                  "create_refresh_token",
                  "create_token_pair",
                  "verify_token",
                  "refresh_access_token",
                  "TOKEN_TYPE_ACCESS",
                  "TOKEN_TYPE_REFRESH",
                  "encrypt_data",
                  "decrypt_data",
                  "generate_api_key",
                  "generate_secure_token",
                  "hash_sensitive_data",
                  "verify_hashed_data"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.utils",
                "names": [
                  "validate_password_strength",
                  "validate_username_format",
                  "validate_email_format",
                  "create_auth_relationship",
                  "update_auth_relationship",
                  "remove_auth_relationship",
                  "get_auth_relationship",
                  "check_permission",
                  "add_permission",
                  "remove_permission",
                  "set_ownership",
                  "get_user_characters",
                  "get_character_users",
                  "bulk_create_auth_relationships",
                  "bulk_remove_auth_relationships",
                  "transfer_character_ownership",
                  "check_multi_character_permission",
                  "get_permission_matrix"
                ],
                "line": 48
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.schemas",
                "names": [
                  "LoginRequest",
                  "TokenResponse",
                  "RefreshTokenRequest",
                  "UserCreate",
                  "UserUpdate",
                  "UserResponse",
                  "RoleCreate",
                  "RoleResponse",
                  "PermissionResponse",
                  "AuthRelationshipCreate",
                  "AuthRelationshipUpdate",
                  "AuthRelationshipResponse"
                ],
                "line": 81
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.repositories",
                "names": [
                  "UserRepository",
                  "RoleRepository",
                  "PermissionRepository",
                  "AuthRelationshipRepository"
                ],
                "line": 106
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "base.py",
            "imports": [
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "DateTime",
                  "Boolean",
                  "Integer"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.sql",
                "names": [
                  "func"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Dict"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "to_dict",
                "line": 51,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "update",
                "line": 63,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__repr__",
                "line": 69,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "AuthBaseModel",
                "line": 18,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "to_dict",
                  "update",
                  "__repr__"
                ]
              }
            ]
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.auth_router",
                "names": [
                  "router"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.auth_relationship_router",
                "names": [
                  "router"
                ],
                "line": 13
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/auth_relationship_router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any",
                  "Optional"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "UUID4"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.services",
                "names": [
                  "get_current_active_user"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.utils",
                "names": [
                  "create_auth_relationship",
                  "update_auth_relationship",
                  "remove_auth_relationship",
                  "get_auth_relationship",
                  "check_permission",
                  "add_permission",
                  "remove_permission",
                  "set_ownership",
                  "get_user_characters",
                  "get_character_users",
                  "bulk_create_auth_relationships",
                  "bulk_remove_auth_relationships",
                  "transfer_character_ownership",
                  "check_multi_character_permission",
                  "get_permission_matrix",
                  "check_admin_access",
                  "create_relationship_group",
                  "get_relationship_group_members",
                  "add_to_relationship_group",
                  "get_relationship_history",
                  "validate_api_key_access",
                  "generate_character_api_key",
                  "cache_user_permissions",
                  "lookup_cached_permission",
                  "invalidate_permission_cache"
                ],
                "line": 12
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "AuthRelationshipBase",
                "line": 58,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "AuthRelationshipCreate",
                "line": 62,
                "bases": [
                  "AuthRelationshipBase"
                ],
                "methods": []
              },
              {
                "name": "AuthRelationshipUpdate",
                "line": 65,
                "bases": [
                  "AuthRelationshipBase"
                ],
                "methods": []
              },
              {
                "name": "AuthRelationshipResponse",
                "line": 68,
                "bases": [
                  "AuthRelationshipBase"
                ],
                "methods": []
              },
              {
                "name": "PermissionRequest",
                "line": 74,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "OwnershipRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "TransferOwnershipRequest",
                "line": 80,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "MultiCharacterPermissionRequest",
                "line": 84,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "PermissionMatrixRequest",
                "line": 89,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "AdminAccessRequest",
                "line": 93,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RelationshipGroupCreate",
                "line": 96,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RelationshipGroupAddRequest",
                "line": 102,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "ApiKeyCreateRequest",
                "line": 107,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "ApiKeyValidateRequest",
                "line": 112,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "routers/auth_router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "Optional"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status",
                  "Request"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "fastapi.security",
                "names": [
                  "OAuth2PasswordBearer",
                  "OAuth2PasswordRequestForm"
                ],
                "line": 23
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.asyncio",
                "names": [
                  "AsyncSession"
                ],
                "line": 24
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.services.auth_service",
                "names": [
                  "AuthService"
                ],
                "line": 26
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.services.token_service",
                "names": [
                  "TokenService"
                ],
                "line": 27
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.services.password_service",
                "names": [
                  "PasswordService"
                ],
                "line": 28
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.repositories",
                "names": [
                  "UserRepository",
                  "RoleRepository"
                ],
                "line": 29
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.schemas.auth_schemas",
                "names": [
                  "UserCreate",
                  "UserResponse",
                  "UserUpdate",
                  "TokenResponse",
                  "RefreshTokenRequest",
                  "PasswordResetRequest",
                  "PasswordResetConfirm"
                ],
                "line": 30
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.models.user_models",
                "names": [
                  "User"
                ],
                "line": 35
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "SessionManager"
                ],
                "line": 36
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.error",
                "names": [
                  "AuthenticationError",
                  "ValidationError"
                ],
                "line": 37
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/auth_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Optional",
                  "Any",
                  "Union",
                  "Set"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 798
              },
              {
                "type": "import",
                "module": "datetime",
                "alias": null,
                "line": 799
              },
              {
                "type": "import",
                "module": "datetime",
                "alias": null,
                "line": 857
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.validation_utils",
                "names": [
                  "validate_password_strength",
                  "validate_username_format",
                  "validate_email_format"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.auth_utils",
                "names": [
                  "create_auth_relationship",
                  "update_auth_relationship",
                  "remove_auth_relationship",
                  "get_auth_relationship",
                  "check_permission",
                  "add_permission",
                  "remove_permission",
                  "set_ownership",
                  "get_user_characters",
                  "get_character_users",
                  "bulk_create_auth_relationships",
                  "bulk_remove_auth_relationships",
                  "transfer_character_ownership",
                  "check_multi_character_permission",
                  "get_permission_matrix",
                  "check_admin_access",
                  "create_relationship_group",
                  "get_relationship_group_members",
                  "add_to_relationship_group",
                  "get_relationship_history",
                  "validate_api_key_access",
                  "generate_character_api_key",
                  "cache_user_permissions",
                  "lookup_cached_permission",
                  "invalidate_permission_cache"
                ],
                "line": 11
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/validation_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "re",
                "alias": null,
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "Tuple"
                ],
                "line": 6
              }
            ],
            "functions": [
              {
                "name": "validate_password_strength",
                "line": 8,
                "args": [
                  "password"
                ],
                "is_async": false
              },
              {
                "name": "validate_username_format",
                "line": 32,
                "args": [
                  "username"
                ],
                "is_async": false
              },
              {
                "name": "validate_email_format",
                "line": 52,
                "args": [
                  "email"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Union"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.asyncio",
                "names": [
                  "AsyncSession"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "select",
                  "update",
                  "delete"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.exc",
                "names": [
                  "SQLAlchemyError"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "selectinload"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "BaseRepository"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.models.user_models",
                "names": [
                  "User",
                  "Role",
                  "Permission"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.models.auth_relationship_models",
                "names": [
                  "AuthRelationship"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 22,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 119,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 216,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 261,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "UserRepository",
                "line": 19,
                "bases": [
                  "<ast.Subscript object at 0x105022b00>"
                ],
                "methods": [
                  "__init__",
                  "create_user",
                  "get_user_by_id",
                  "get_user_by_email",
                  "update_user",
                  "delete_user",
                  "list_users",
                  "add_role_to_user",
                  "remove_role_from_user"
                ]
              },
              {
                "name": "RoleRepository",
                "line": 116,
                "bases": [
                  "<ast.Subscript object at 0x105036fe0>"
                ],
                "methods": [
                  "__init__",
                  "create_role",
                  "get_role_by_id",
                  "get_role_by_name",
                  "update_role",
                  "delete_role",
                  "list_roles",
                  "add_permission_to_role",
                  "remove_permission_from_role"
                ]
              },
              {
                "name": "PermissionRepository",
                "line": 213,
                "bases": [
                  "<ast.Subscript object at 0x104f769e0>"
                ],
                "methods": [
                  "__init__",
                  "create_permission",
                  "get_permission_by_id",
                  "get_permission_by_name",
                  "list_permissions"
                ]
              },
              {
                "name": "AuthRelationshipRepository",
                "line": 258,
                "bases": [
                  "<ast.Subscript object at 0x104f6ee60>"
                ],
                "methods": [
                  "__init__",
                  "create_relationship",
                  "get_relationship",
                  "update_relationship",
                  "delete_relationship",
                  "get_user_characters",
                  "get_character_users",
                  "check_permission"
                ]
              }
            ]
          },
          {
            "file": "models/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.base",
                "names": [
                  "AuthBaseModel",
                  "Base"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.models.user_models",
                "names": [
                  "User",
                  "Role",
                  "Permission",
                  "user_roles_table",
                  "role_permissions_table"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.models.auth_relationship_models",
                "names": [
                  "AuthRelationship"
                ],
                "line": 13
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/user_models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "Integer",
                  "String",
                  "Boolean",
                  "DateTime",
                  "ForeignKey",
                  "Table",
                  "UniqueConstraint",
                  "Index"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.sql",
                "names": [
                  "func"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.base",
                "names": [
                  "AuthBaseModel",
                  "Base"
                ],
                "line": 6
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 48,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__repr__",
                "line": 66,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__repr__",
                "line": 83,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "User",
                "line": 24,
                "bases": [
                  "AuthBaseModel"
                ],
                "methods": [
                  "__repr__"
                ]
              },
              {
                "name": "Role",
                "line": 51,
                "bases": [
                  "AuthBaseModel"
                ],
                "methods": [
                  "__repr__"
                ]
              },
              {
                "name": "Permission",
                "line": 69,
                "bases": [
                  "AuthBaseModel"
                ],
                "methods": [
                  "__repr__"
                ]
              }
            ]
          },
          {
            "file": "models/auth_relationship_models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Boolean",
                  "ForeignKey",
                  "UniqueConstraint",
                  "Index",
                  "JSON"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.base",
                "names": [
                  "AuthBaseModel",
                  "Base"
                ],
                "line": 12
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 42,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "has_permission",
                "line": 45,
                "args": [
                  "self",
                  "permission"
                ],
                "is_async": false
              },
              {
                "name": "add_permission",
                "line": 51,
                "args": [
                  "self",
                  "permission"
                ],
                "is_async": false
              },
              {
                "name": "remove_permission",
                "line": 58,
                "args": [
                  "self",
                  "permission"
                ],
                "is_async": false
              },
              {
                "name": "get_all_permissions",
                "line": 63,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "AuthRelationship",
                "line": 14,
                "bases": [
                  "AuthBaseModel"
                ],
                "methods": [
                  "__repr__",
                  "has_permission",
                  "add_permission",
                  "remove_permission",
                  "get_all_permissions"
                ]
              }
            ]
          },
          {
            "file": "schemas/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field",
                  "validator"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 11
              },
              {
                "type": "import",
                "module": "re",
                "alias": null,
                "line": 12
              }
            ],
            "functions": [
              {
                "name": "validate_email",
                "line": 24,
                "args": [
                  "cls",
                  "v"
                ],
                "is_async": false
              },
              {
                "name": "validate_email",
                "line": 48,
                "args": [
                  "cls",
                  "v"
                ],
                "is_async": false
              },
              {
                "name": "validate_email",
                "line": 64,
                "args": [
                  "cls",
                  "v"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "LoginRequest",
                "line": 18,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "validate_email"
                ]
              },
              {
                "name": "TokenResponse",
                "line": 29,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RefreshTokenRequest",
                "line": 36,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UserBase",
                "line": 41,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "validate_email"
                ]
              },
              {
                "name": "UserCreate",
                "line": 53,
                "bases": [
                  "UserBase"
                ],
                "methods": []
              },
              {
                "name": "UserUpdate",
                "line": 57,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "validate_email"
                ]
              },
              {
                "name": "UserResponse",
                "line": 69,
                "bases": [
                  "UserBase"
                ],
                "methods": []
              },
              {
                "name": "RoleBase",
                "line": 80,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RoleCreate",
                "line": 85,
                "bases": [
                  "RoleBase"
                ],
                "methods": []
              },
              {
                "name": "RoleResponse",
                "line": 89,
                "bases": [
                  "RoleBase"
                ],
                "methods": []
              },
              {
                "name": "PermissionBase",
                "line": 97,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "PermissionResponse",
                "line": 102,
                "bases": [
                  "PermissionBase"
                ],
                "methods": []
              },
              {
                "name": "AuthRelationshipBase",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "AuthRelationshipCreate",
                "line": 117,
                "bases": [
                  "AuthRelationshipBase"
                ],
                "methods": []
              },
              {
                "name": "AuthRelationshipUpdate",
                "line": 120,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "AuthRelationshipResponse",
                "line": 125,
                "bases": [
                  "AuthRelationshipBase"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 76,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 94,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 130,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "services/auth_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "Any",
                  "Dict",
                  "List"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "fastapi.security",
                "names": [
                  "OAuth2PasswordBearer"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.asyncio",
                "names": [
                  "AsyncSession"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.services.token_service",
                "names": [
                  "verify_token"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.utils",
                "names": [
                  "check_permission"
                ],
                "line": 169
              },
              {
                "type": "from_import",
                "module": "backend.systems.utils",
                "names": [
                  "get_user_characters"
                ],
                "line": 183
              }
            ],
            "functions": [
              {
                "name": "check_permissions",
                "line": 92,
                "args": [
                  "user",
                  "required_permissions"
                ],
                "is_async": false
              },
              {
                "name": "require_permissions",
                "line": 121,
                "args": [
                  "required_permissions"
                ],
                "is_async": false
              },
              {
                "name": "decorator",
                "line": 131,
                "args": [
                  "func"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.services.auth_service",
                "names": [
                  "get_current_active_user",
                  "authenticate_user",
                  "check_permissions",
                  "require_permissions",
                  "check_user_character_access",
                  "get_user_accessible_characters",
                  "oauth2_scheme"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.services.token_service",
                "names": [
                  "create_access_token",
                  "create_refresh_token",
                  "create_token_pair",
                  "verify_token",
                  "refresh_access_token",
                  "decode_token_without_verification",
                  "TOKEN_TYPE_ACCESS",
                  "TOKEN_TYPE_REFRESH"
                ],
                "line": 23
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.services.password_service",
                "names": [
                  "verify_password",
                  "get_password_hash",
                  "pwd_context"
                ],
                "line": 35
              },
              {
                "type": "from_import",
                "module": "backend.systems.auth_user.services.security_service",
                "names": [
                  "encrypt_data",
                  "decrypt_data",
                  "generate_api_key",
                  "generate_secure_token",
                  "hash_sensitive_data",
                  "verify_hashed_data"
                ],
                "line": 42
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/password_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "passlib.context",
                "names": [
                  "CryptContext"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "verify_password",
                "line": 12,
                "args": [
                  "plain_password",
                  "hashed_password"
                ],
                "is_async": false
              },
              {
                "name": "get_password_hash",
                "line": 25,
                "args": [
                  "password"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "services/security_service.py",
            "imports": [
              {
                "type": "import",
                "module": "secrets",
                "alias": null,
                "line": 7
              },
              {
                "type": "import",
                "module": "string",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "base64",
                "alias": null,
                "line": 10
              },
              {
                "type": "import",
                "module": "hashlib",
                "alias": null,
                "line": 11
              }
            ],
            "functions": [
              {
                "name": "encrypt_data",
                "line": 13,
                "args": [
                  "data",
                  "key"
                ],
                "is_async": false
              },
              {
                "name": "decrypt_data",
                "line": 39,
                "args": [
                  "encrypted_data",
                  "key"
                ],
                "is_async": false
              },
              {
                "name": "generate_api_key",
                "line": 68,
                "args": [
                  "length"
                ],
                "is_async": false
              },
              {
                "name": "generate_secure_token",
                "line": 81,
                "args": [
                  "length"
                ],
                "is_async": false
              },
              {
                "name": "hash_sensitive_data",
                "line": 93,
                "args": [
                  "data",
                  "salt"
                ],
                "is_async": false
              },
              {
                "name": "verify_hashed_data",
                "line": 117,
                "args": [
                  "data",
                  "hashed_data"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "services/token_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "jose",
                "names": [
                  "JWTError",
                  "jwt"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "secrets",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.config",
                "names": [
                  "config"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "create_access_token",
                "line": 18,
                "args": [
                  "data",
                  "expires_delta",
                  "subject"
                ],
                "is_async": false
              },
              {
                "name": "create_refresh_token",
                "line": 70,
                "args": [
                  "data",
                  "expires_delta",
                  "subject"
                ],
                "is_async": false
              },
              {
                "name": "create_token_pair",
                "line": 118,
                "args": [
                  "data",
                  "subject"
                ],
                "is_async": false
              },
              {
                "name": "verify_token",
                "line": 136,
                "args": [
                  "token",
                  "token_type"
                ],
                "is_async": false
              },
              {
                "name": "refresh_access_token",
                "line": 177,
                "args": [
                  "refresh_token"
                ],
                "is_async": false
              },
              {
                "name": "decode_token_without_verification",
                "line": 197,
                "args": [
                  "token"
                ],
                "is_async": false
              }
            ],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "re",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/utils/validation_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "re",
            "line": 12,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/schemas/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.utils",
            "line": 169,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/auth_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.utils",
            "line": 183,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/auth_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "passlib.context",
            "line": 7,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/password_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "secrets",
            "line": 7,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/security_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "string",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/security_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "base64",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/security_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "hashlib",
            "line": 11,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/security_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "jose",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/token_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "secrets",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/token_service.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "integration": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/integration",
        "files": [
          "services.py",
          "models.py",
          "monitoring.py",
          "__init__.py",
          "event_bus.py",
          "state_sync.py",
          "validation.py",
          "routers/__init__.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.integration.models",
                "names": [
                  "IntegrationEntity",
                  "IntegrationModel",
                  "CreateIntegrationRequest",
                  "UpdateIntegrationRequest",
                  "IntegrationResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "IntegrationNotFoundError",
                  "IntegrationValidationError",
                  "IntegrationConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_integration_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "IntegrationService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x1050237f0>"
                ],
                "methods": [
                  "__init__",
                  "create_integration",
                  "get_integration_by_id",
                  "update_integration",
                  "delete_integration",
                  "list_integrations",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_integration_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "IntegrationBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "IntegrationModel",
                "line": 36,
                "bases": [
                  "IntegrationBaseModel"
                ],
                "methods": []
              },
              {
                "name": "IntegrationEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateIntegrationRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateIntegrationRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "IntegrationResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "IntegrationListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "monitoring.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "time",
                "alias": null,
                "line": 13
              },
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 14
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 15
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Callable",
                  "Union"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "collections",
                "names": [
                  "defaultdict",
                  "deque"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 20
              },
              {
                "type": "import",
                "module": "threading",
                "alias": null,
                "line": 21
              },
              {
                "type": "import",
                "module": "statistics",
                "alias": null,
                "line": 22
              }
            ],
            "functions": [
              {
                "name": "get_integration_logger",
                "line": 541,
                "args": [
                  "system_id"
                ],
                "is_async": false
              },
              {
                "name": "get_integration_metrics",
                "line": 545,
                "args": [
                  "system_id"
                ],
                "is_async": false
              },
              {
                "name": "get_integration_alerting",
                "line": 549,
                "args": [
                  "system_id"
                ],
                "is_async": false
              },
              {
                "name": "acknowledge",
                "line": 57,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "resolve",
                "line": 61,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 76,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 93,
                "args": [
                  "self",
                  "system_id"
                ],
                "is_async": false
              },
              {
                "name": "set_correlation_id",
                "line": 99,
                "args": [
                  "self",
                  "correlation_id"
                ],
                "is_async": false
              },
              {
                "name": "set_trace_id",
                "line": 103,
                "args": [
                  "self",
                  "trace_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_log_context",
                "line": 107,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "info",
                "line": 122,
                "args": [
                  "self",
                  "message"
                ],
                "is_async": false
              },
              {
                "name": "warning",
                "line": 128,
                "args": [
                  "self",
                  "message"
                ],
                "is_async": false
              },
              {
                "name": "error",
                "line": 134,
                "args": [
                  "self",
                  "message"
                ],
                "is_async": false
              },
              {
                "name": "critical",
                "line": 140,
                "args": [
                  "self",
                  "message"
                ],
                "is_async": false
              },
              {
                "name": "debug",
                "line": 146,
                "args": [
                  "self",
                  "message"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 158,
                "args": [
                  "self",
                  "system_id"
                ],
                "is_async": false
              },
              {
                "name": "increment_counter",
                "line": 167,
                "args": [
                  "self",
                  "name",
                  "value",
                  "labels"
                ],
                "is_async": false
              },
              {
                "name": "set_gauge",
                "line": 182,
                "args": [
                  "self",
                  "name",
                  "value",
                  "labels"
                ],
                "is_async": false
              },
              {
                "name": "record_histogram",
                "line": 197,
                "args": [
                  "self",
                  "name",
                  "value",
                  "labels"
                ],
                "is_async": false
              },
              {
                "name": "record_timer",
                "line": 212,
                "args": [
                  "self",
                  "name",
                  "duration",
                  "labels"
                ],
                "is_async": false
              },
              {
                "name": "get_counter_value",
                "line": 227,
                "args": [
                  "self",
                  "name",
                  "labels"
                ],
                "is_async": false
              },
              {
                "name": "get_gauge_value",
                "line": 232,
                "args": [
                  "self",
                  "name",
                  "labels"
                ],
                "is_async": false
              },
              {
                "name": "get_histogram_stats",
                "line": 237,
                "args": [
                  "self",
                  "name",
                  "labels"
                ],
                "is_async": false
              },
              {
                "name": "get_timer_stats",
                "line": 253,
                "args": [
                  "self",
                  "name",
                  "labels"
                ],
                "is_async": false
              },
              {
                "name": "get_all_metrics",
                "line": 269,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 283,
                "args": [
                  "self",
                  "system_id"
                ],
                "is_async": false
              },
              {
                "name": "add_alert_rule",
                "line": 291,
                "args": [
                  "self",
                  "metric_name",
                  "threshold",
                  "operator",
                  "severity",
                  "message_template"
                ],
                "is_async": false
              },
              {
                "name": "remove_alert_rule",
                "line": 308,
                "args": [
                  "self",
                  "metric_name"
                ],
                "is_async": false
              },
              {
                "name": "check_metric",
                "line": 314,
                "args": [
                  "self",
                  "metric"
                ],
                "is_async": false
              },
              {
                "name": "acknowledge_alert",
                "line": 362,
                "args": [
                  "self",
                  "alert_id"
                ],
                "is_async": false
              },
              {
                "name": "resolve_alert",
                "line": 370,
                "args": [
                  "self",
                  "alert_id"
                ],
                "is_async": false
              },
              {
                "name": "get_active_alerts",
                "line": 379,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_alert_history",
                "line": 383,
                "args": [
                  "self",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "add_alert_handler",
                "line": 389,
                "args": [
                  "self",
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 399,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_logger",
                "line": 407,
                "args": [
                  "self",
                  "system_id"
                ],
                "is_async": false
              },
              {
                "name": "get_metrics",
                "line": 413,
                "args": [
                  "self",
                  "system_id"
                ],
                "is_async": false
              },
              {
                "name": "get_alerting",
                "line": 419,
                "args": [
                  "self",
                  "system_id"
                ],
                "is_async": false
              },
              {
                "name": "get_performance_summary",
                "line": 457,
                "args": [
                  "self",
                  "system_id"
                ],
                "is_async": false
              },
              {
                "name": "get_system_health",
                "line": 484,
                "args": [
                  "self",
                  "system_id"
                ],
                "is_async": false
              },
              {
                "name": "get_global_health",
                "line": 511,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "AlertSeverity",
                "line": 27,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "MetricType",
                "line": 35,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "Alert",
                "line": 44,
                "bases": [],
                "methods": [
                  "acknowledge",
                  "resolve"
                ]
              },
              {
                "name": "Metric",
                "line": 67,
                "bases": [],
                "methods": [
                  "to_dict"
                ]
              },
              {
                "name": "IntegrationLogger",
                "line": 88,
                "bases": [],
                "methods": [
                  "__init__",
                  "set_correlation_id",
                  "set_trace_id",
                  "_get_log_context",
                  "info",
                  "warning",
                  "error",
                  "critical",
                  "debug"
                ]
              },
              {
                "name": "IntegrationMetrics",
                "line": 153,
                "bases": [],
                "methods": [
                  "__init__",
                  "increment_counter",
                  "set_gauge",
                  "record_histogram",
                  "record_timer",
                  "get_counter_value",
                  "get_gauge_value",
                  "get_histogram_stats",
                  "get_timer_stats",
                  "get_all_metrics"
                ]
              },
              {
                "name": "IntegrationAlerting",
                "line": 278,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_alert_rule",
                  "remove_alert_rule",
                  "check_metric",
                  "acknowledge_alert",
                  "resolve_alert",
                  "get_active_alerts",
                  "get_alert_history",
                  "add_alert_handler"
                ]
              },
              {
                "name": "MonitoringManager",
                "line": 394,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_logger",
                  "get_metrics",
                  "get_alerting",
                  "record_performance_profile",
                  "get_performance_summary",
                  "get_system_health",
                  "get_global_health"
                ]
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.integration.state_sync",
                "names": [
                  "state_sync_manager",
                  "StateSyncManager"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.integration.validation",
                "names": [
                  "validation_manager",
                  "ValidationManager",
                  "ValidationResult"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.integration.monitoring",
                "names": [
                  "integration_logger",
                  "integration_metrics",
                  "integration_alerting",
                  "monitoring_manager",
                  "IntegrationLogger",
                  "IntegrationMetrics",
                  "IntegrationAlerting",
                  "MonitoringManager"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.integration.event_bus",
                "names": [
                  "integration_event_bus",
                  "register_handler",
                  "dispatch_event",
                  "unregister_handler",
                  "IntegrationEventBus"
                ],
                "line": 27
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "event_bus.py",
            "imports": [
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 14
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 15
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Callable",
                  "Union",
                  "Set"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "collections",
                "names": [
                  "defaultdict"
                ],
                "line": 19
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 20
              },
              {
                "type": "import",
                "module": "threading",
                "alias": null,
                "line": 21
              },
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.event_base",
                "names": [
                  "BaseEvent",
                  "EventType",
                  "EventPriority"
                ],
                "line": 25
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 33,
                "args": [
                  "self",
                  "event_types",
                  "source_systems",
                  "priorities",
                  "custom_filter"
                ],
                "is_async": false
              },
              {
                "name": "matches",
                "line": 43,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 91,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "add_routing_rule",
                "line": 277,
                "args": [
                  "self",
                  "source_system",
                  "target_systems"
                ],
                "is_async": false
              },
              {
                "name": "remove_routing_rule",
                "line": 281,
                "args": [
                  "self",
                  "source_system",
                  "target_system"
                ],
                "is_async": false
              },
              {
                "name": "set_metrics_callback",
                "line": 289,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "set_validation_callback",
                "line": 293,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "get_stats",
                "line": 297,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_system_subscriptions",
                "line": 307,
                "args": [
                  "self",
                  "system_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventFilter",
                "line": 30,
                "bases": [],
                "methods": [
                  "__init__",
                  "matches"
                ]
              },
              {
                "name": "EventSubscription",
                "line": 65,
                "bases": [],
                "methods": [
                  "handle_event"
                ]
              },
              {
                "name": "IntegrationEventBus",
                "line": 85,
                "bases": [],
                "methods": [
                  "__init__",
                  "subscribe",
                  "unsubscribe",
                  "publish",
                  "replay_events",
                  "add_routing_rule",
                  "remove_routing_rule",
                  "set_metrics_callback",
                  "set_validation_callback",
                  "get_stats",
                  "get_system_subscriptions",
                  "shutdown"
                ]
              }
            ]
          },
          {
            "file": "state_sync.py",
            "imports": [
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 13
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Callable",
                  "Union"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "collections",
                "names": [
                  "defaultdict"
                ],
                "line": 17
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 18
              },
              {
                "type": "import",
                "module": "hashlib",
                "alias": null,
                "line": 19
              }
            ],
            "functions": [
              {
                "name": "get_sync_status",
                "line": 411,
                "args": [
                  "operation_id"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 33,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_calculate_checksum",
                "line": 36,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 70,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_sync_status",
                "line": 327,
                "args": [
                  "self",
                  "operation_id"
                ],
                "is_async": false
              },
              {
                "name": "get_system_state",
                "line": 351,
                "args": [
                  "self",
                  "system_id"
                ],
                "is_async": false
              },
              {
                "name": "get_system_version",
                "line": 356,
                "args": [
                  "self",
                  "system_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "StateSnapshot",
                "line": 25,
                "bases": [],
                "methods": [
                  "__post_init__",
                  "_calculate_checksum"
                ]
              },
              {
                "name": "SyncOperation",
                "line": 43,
                "bases": [],
                "methods": []
              },
              {
                "name": "StateSyncManager",
                "line": 58,
                "bases": [],
                "methods": [
                  "__init__",
                  "register_state_sync",
                  "sync_state",
                  "_execute_sync_operation",
                  "rollback_state",
                  "validate_state",
                  "get_sync_status",
                  "get_system_state",
                  "get_system_version",
                  "_call_async_safe"
                ]
              }
            ]
          },
          {
            "file": "validation.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 13
              },
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 14
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Callable",
                  "Union",
                  "Type",
                  "Set"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "collections",
                "names": [
                  "defaultdict"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "ValidationError",
                  "validator"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 20
              }
            ],
            "functions": [
              {
                "name": "add_error",
                "line": 45,
                "args": [
                  "self",
                  "field",
                  "message",
                  "severity"
                ],
                "is_async": false
              },
              {
                "name": "get_error_summary",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 85,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_validation_stats",
                "line": 488,
                "args": [
                  "self",
                  "system_id"
                ],
                "is_async": false
              },
              {
                "name": "clear_validation_cache",
                "line": 492,
                "args": [
                  "self",
                  "system_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ValidationSeverity",
                "line": 25,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "ValidationResult",
                "line": 34,
                "bases": [],
                "methods": [
                  "add_error",
                  "get_error_summary"
                ]
              },
              {
                "name": "ValidationManager",
                "line": 73,
                "bases": [],
                "methods": [
                  "__init__",
                  "register_schema",
                  "validate_data",
                  "validate_cross_system",
                  "validate_business_rules",
                  "validate_performance",
                  "validate_security",
                  "register_cross_system_validator",
                  "register_business_rule_validator",
                  "get_validation_stats",
                  "clear_validation_cache",
                  "_validate_referential_integrity",
                  "_call_async_safe"
                ]
              }
            ]
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.integration.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.integration.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.integration.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": false,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 17,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/monitoring.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 20,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/monitoring.py"
          },
          {
            "type": "non_canonical_import",
            "import": "threading",
            "line": 21,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/monitoring.py"
          },
          {
            "type": "non_canonical_import",
            "import": "statistics",
            "line": 22,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/monitoring.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 17,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/event_bus.py"
          },
          {
            "type": "non_canonical_import",
            "import": "threading",
            "line": 21,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/event_bus.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 22,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/event_bus.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 15,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/state_sync.py"
          },
          {
            "type": "non_canonical_import",
            "import": "hashlib",
            "line": 19,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/state_sync.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 16,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/validation.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 20,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/validation.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "faction": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/faction",
        "files": [
          "services.py",
          "faction_manager.py",
          "models.py",
          "faction_tick_utils.py",
          "__init__.py",
          "faction_routes.py",
          "faction_utils.py",
          "routers/faction_router.py",
          "routers/__init__.py",
          "utils/validators.py",
          "utils/__init__.py",
          "repositories/__init__.py",
          "repositories/faction_repository.py",
          "models/__init__.py",
          "models/faction.py",
          "models/faction_goal.py",
          "models/repositories/__init__.py",
          "models/repositories/routers/__init__.py",
          "models/repositories/routers/schemas/__init__.py",
          "models/repositories/routers/schemas/services/__init__.py",
          "models/repositories/routers/schemas/services/utils/__init__.py",
          "schemas/faction_types.py",
          "schemas/__init__.py",
          "services/reputation_service.py",
          "services/relationship_service_core.py",
          "services/influence_service.py",
          "services/__init__.py",
          "services/faction_service.py",
          "services/membership_service.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.models",
                "names": [
                  "FactionEntity",
                  "FactionModel",
                  "CreateFactionRequest",
                  "UpdateFactionRequest",
                  "FactionResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "FactionNotFoundError",
                  "FactionValidationError",
                  "FactionConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_faction_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "FactionService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104fa37f0>"
                ],
                "methods": [
                  "__init__",
                  "create_faction",
                  "get_faction_by_id",
                  "update_faction",
                  "delete_faction",
                  "list_factions",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_faction_statistics"
                ]
              }
            ]
          },
          {
            "file": "faction_manager.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "FactionBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "FactionModel",
                "line": 36,
                "bases": [
                  "FactionBaseModel"
                ],
                "methods": []
              },
              {
                "name": "FactionEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateFactionRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateFactionRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "FactionResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "FactionListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "faction_tick_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 4
              },
              {
                "type": "from_import",
                "module": "collections.abc",
                "names": [
                  "deque"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 136
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.models.faction",
                "names": [
                  "FactionRelationship"
                ],
                "line": 137
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 138
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "text"
                ],
                "line": 139
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 140
              }
            ],
            "functions": [
              {
                "name": "log_poi_event",
                "line": 9,
                "args": [
                  "region",
                  "poi_id",
                  "event_type",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "get_all_poi_states",
                "line": 27,
                "args": [],
                "is_async": false
              },
              {
                "name": "propagate_faction_influence",
                "line": 40,
                "args": [],
                "is_async": false
              },
              {
                "name": "propagate_faction_to_npcs",
                "line": 89,
                "args": [
                  "faction_id",
                  "region_data",
                  "poi_data_map"
                ],
                "is_async": false
              },
              {
                "name": "decay_faction_tensions",
                "line": 118,
                "args": [
                  "session",
                  "decay_rate_positive",
                  "decay_rate_negative",
                  "min_decay",
                  "max_decay"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.faction.models",
                "names": [
                  "Faction",
                  "FactionRelationship",
                  "FactionMembership"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.schemas",
                "names": [
                  "FactionSchema",
                  "FactionType",
                  "FactionAlignment",
                  "DiplomaticStance"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.services",
                "names": [
                  "FactionService",
                  "FactionRelationshipService"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.faction_manager",
                "names": [
                  "FactionManager"
                ],
                "line": 23
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.routers",
                "names": [
                  "faction_router"
                ],
                "line": 24
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "faction_routes.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "request",
                  "jsonify"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "jsonify"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any",
                  "Optional"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "HTTPException",
                  "Depends",
                  "Query"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.models",
                "names": [
                  "Faction",
                  "FactionType",
                  "FactionRelationship"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.services",
                "names": [
                  "FactionService",
                  "MembershipService",
                  "RelationshipService"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "propagate_faction_influence",
                "line": 20,
                "args": [],
                "is_async": false
              },
              {
                "name": "drift_npc_faction_opinions",
                "line": 23,
                "args": [],
                "is_async": false
              },
              {
                "name": "trigger_faction_influence",
                "line": 29,
                "args": [],
                "is_async": false
              },
              {
                "name": "tick_all_factions",
                "line": 41,
                "args": [],
                "is_async": false
              },
              {
                "name": "create_faction",
                "line": 49,
                "args": [],
                "is_async": false
              },
              {
                "name": "drift_all_npc_opinions",
                "line": 78,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_faction_influence_log",
                "line": 86,
                "args": [
                  "region",
                  "poi_id"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "faction_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 10
              }
            ],
            "functions": [
              {
                "name": "calculate_affinity",
                "line": 14,
                "args": [
                  "npc_data",
                  "faction_data"
                ],
                "is_async": false
              },
              {
                "name": "assign_faction_affiliations_to_npc",
                "line": 37,
                "args": [
                  "npc_id",
                  "npc_traits"
                ],
                "is_async": false
              },
              {
                "name": "initialize_faction_opinions",
                "line": 66,
                "args": [
                  "npc_id",
                  "npc_traits"
                ],
                "is_async": false
              },
              {
                "name": "register_faction_conflict",
                "line": 90,
                "args": [
                  "faction_a_id",
                  "faction_b_id",
                  "region_id",
                  "reason"
                ],
                "is_async": false
              },
              {
                "name": "escalate_conflict_to_war",
                "line": 119,
                "args": [
                  "conflict_id"
                ],
                "is_async": false
              },
              {
                "name": "create_faction",
                "line": 133,
                "args": [
                  "faction_data"
                ],
                "is_async": false
              },
              {
                "name": "adjust_faction_opinion",
                "line": 190,
                "args": [
                  "faction_id",
                  "character_id",
                  "delta"
                ],
                "is_async": false
              },
              {
                "name": "assign_faction_to_poi",
                "line": 204,
                "args": [
                  "region_id",
                  "poi_id",
                  "faction_id",
                  "control_level"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/faction_router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_db"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.faction_manager",
                "names": [
                  "FactionManager"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.models.faction",
                "names": [
                  "Faction"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.schemas.faction_types",
                "names": [
                  "FactionSchema",
                  "FactionType"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.services.faction_service",
                "names": [
                  "FactionNotFoundError",
                  "DuplicateFactionError"
                ],
                "line": 15
              }
            ],
            "functions": [
              {
                "name": "get_faction_manager",
                "line": 28,
                "args": [
                  "db"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.routers.faction_router",
                "names": [
                  "faction_router"
                ],
                "line": 12
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/validators.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.schemas.faction_types",
                "names": [
                  "DiplomaticStance"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "validate_faction_name",
                "line": 13,
                "args": [
                  "name"
                ],
                "is_async": false
              },
              {
                "name": "validate_faction_influence",
                "line": 37,
                "args": [
                  "influence"
                ],
                "is_async": false
              },
              {
                "name": "validate_diplomatic_stance",
                "line": 58,
                "args": [
                  "stance",
                  "allow_none"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "FactionValidationError",
                "line": 10,
                "bases": [
                  "Exception"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "utils/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.faction.utils.validators",
                "names": [
                  "validate_faction_name",
                  "validate_faction_influence",
                  "validate_diplomatic_stance"
                ],
                "line": 7
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.faction.repositories.faction_repository",
                "names": [
                  "FactionRepository",
                  "FactionRelationshipRepository"
                ],
                "line": 7
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/faction_repository.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Optional",
                  "Any",
                  "Union"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.models.faction",
                "names": [
                  "Faction",
                  "FactionRelationship",
                  "FactionMembership"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.schemas.faction_types",
                "names": [
                  "FactionType",
                  "FactionAlignment",
                  "DiplomaticStance"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 18,
                "args": [
                  "self",
                  "data_dir"
                ],
                "is_async": false
              },
              {
                "name": "_ensure_files_exist",
                "line": 30,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_all_factions",
                "line": 36,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_by_id",
                "line": 47,
                "args": [
                  "self",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_by_name",
                "line": 63,
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false
              },
              {
                "name": "create_faction",
                "line": 79,
                "args": [
                  "self",
                  "faction_data"
                ],
                "is_async": false
              },
              {
                "name": "update_faction",
                "line": 120,
                "args": [
                  "self",
                  "faction_id",
                  "faction_data"
                ],
                "is_async": false
              },
              {
                "name": "delete_faction",
                "line": 164,
                "args": [
                  "self",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "_generate_faction_id",
                "line": 187,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 207,
                "args": [
                  "self",
                  "data_dir"
                ],
                "is_async": false
              },
              {
                "name": "_ensure_files_exist",
                "line": 219,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_all_relationships",
                "line": 225,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_relationship",
                "line": 236,
                "args": [
                  "self",
                  "faction_id",
                  "other_faction_id"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_relationships",
                "line": 253,
                "args": [
                  "self",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "create_or_update_relationship",
                "line": 266,
                "args": [
                  "self",
                  "relationship_data"
                ],
                "is_async": false
              },
              {
                "name": "delete_relationship",
                "line": 319,
                "args": [
                  "self",
                  "faction_id",
                  "other_faction_id"
                ],
                "is_async": false
              },
              {
                "name": "delete_all_faction_relationships",
                "line": 347,
                "args": [
                  "self",
                  "faction_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "FactionRepository",
                "line": 15,
                "bases": [],
                "methods": [
                  "__init__",
                  "_ensure_files_exist",
                  "get_all_factions",
                  "get_faction_by_id",
                  "get_faction_by_name",
                  "create_faction",
                  "update_faction",
                  "delete_faction",
                  "_generate_faction_id"
                ]
              },
              {
                "name": "FactionRelationshipRepository",
                "line": 204,
                "bases": [],
                "methods": [
                  "__init__",
                  "_ensure_files_exist",
                  "get_all_relationships",
                  "get_relationship",
                  "get_faction_relationships",
                  "create_or_update_relationship",
                  "delete_relationship",
                  "delete_all_faction_relationships"
                ]
              }
            ]
          },
          {
            "file": "models/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.faction.models.faction",
                "names": [
                  "Faction",
                  "FactionRelationship",
                  "FactionMembership"
                ],
                "line": 8
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/faction.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models/faction_goal.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "Integer",
                  "String",
                  "Float",
                  "Text",
                  "Boolean",
                  "ForeignKey",
                  "JSON",
                  "DateTime"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.sql",
                "names": [
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.models.faction",
                "names": [
                  "Base"
                ],
                "line": 15
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 73,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 76,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "FactionGoal",
                "line": 17,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              }
            ]
          },
          {
            "file": "models/repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/repositories/routers/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/repositories/routers/schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/repositories/routers/schemas/services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/repositories/routers/schemas/services/utils/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/faction_types.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.faction.schemas.faction_types",
                "names": [
                  "FactionType",
                  "FactionAlignment",
                  "DiplomaticStance",
                  "FactionSchema"
                ],
                "line": 7
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/reputation_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.models.faction",
                "names": [
                  "Faction",
                  "FactionMembership"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.services.faction_service",
                "names": [
                  "FactionNotFoundError"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "get_reputation_bracket",
                "line": 547,
                "args": [
                  "reputation"
                ],
                "is_async": false
              },
              {
                "name": "modify_global_reputation",
                "line": 19,
                "args": [
                  "db",
                  "faction_id",
                  "amount",
                  "reason",
                  "source"
                ],
                "is_async": false
              },
              {
                "name": "modify_regional_reputation",
                "line": 105,
                "args": [
                  "db",
                  "faction_id",
                  "region_id",
                  "amount",
                  "reason",
                  "source"
                ],
                "is_async": false
              },
              {
                "name": "modify_character_reputation",
                "line": 238,
                "args": [
                  "db",
                  "faction_id",
                  "character_id",
                  "amount",
                  "reason",
                  "source",
                  "affect_membership"
                ],
                "is_async": false
              },
              {
                "name": "get_regional_reputation_summary",
                "line": 367,
                "args": [
                  "db",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "calculate_faction_reputation_modifiers",
                "line": 466,
                "args": [
                  "db",
                  "faction_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "FactionReputationService",
                "line": 15,
                "bases": [],
                "methods": [
                  "modify_global_reputation",
                  "modify_regional_reputation",
                  "modify_character_reputation",
                  "get_regional_reputation_summary",
                  "calculate_faction_reputation_modifiers"
                ]
              }
            ]
          },
          {
            "file": "services/relationship_service_core.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "services/influence_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Optional",
                  "Any",
                  "Tuple"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.models.faction",
                "names": [
                  "Faction"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.services.faction_service",
                "names": [
                  "FactionNotFoundError"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "update_faction_influence",
                "line": 19,
                "args": [
                  "db",
                  "faction_id",
                  "delta",
                  "reason",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "get_region_influence",
                "line": 77,
                "args": [
                  "db",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "update_region_influence",
                "line": 120,
                "args": [
                  "db",
                  "faction_id",
                  "region_id",
                  "influence",
                  "contested",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "get_poi_control",
                "line": 186,
                "args": [
                  "db",
                  "poi_id"
                ],
                "is_async": false
              },
              {
                "name": "update_poi_control",
                "line": 269,
                "args": [
                  "db",
                  "faction_id",
                  "poi_id",
                  "control_level",
                  "details"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "FactionInfluenceService",
                "line": 15,
                "bases": [],
                "methods": [
                  "update_faction_influence",
                  "get_region_influence",
                  "update_region_influence",
                  "get_poi_control",
                  "update_poi_control"
                ]
              }
            ]
          },
          {
            "file": "services/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.faction.services.faction_service",
                "names": [
                  "FactionService",
                  "FactionNotFoundError",
                  "DuplicateFactionError"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.services.relationship_service_core",
                "names": [
                  "FactionRelationshipService",
                  "InvalidRelationshipError"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.services.membership_service",
                "names": [
                  "FactionMembershipService",
                  "MembershipNotFoundError",
                  "InvalidMembershipError"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.services.influence_service",
                "names": [
                  "FactionInfluenceService"
                ],
                "line": 21
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/faction_service.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "services/membership_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Optional",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.models.faction",
                "names": [
                  "Faction",
                  "FactionMembership"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.services.faction_service",
                "names": [
                  "FactionNotFoundError"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.faction_manager",
                "names": [
                  "FactionManager"
                ],
                "line": 539
              }
            ],
            "functions": [
              {
                "name": "add_member",
                "line": 25,
                "args": [
                  "db",
                  "faction_id",
                  "character_id",
                  "role",
                  "rank",
                  "join_reason",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "get_membership",
                "line": 118,
                "args": [
                  "db",
                  "faction_id",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "get_faction_members",
                "line": 140,
                "args": [
                  "db",
                  "faction_id",
                  "active_only",
                  "role",
                  "min_rank"
                ],
                "is_async": false
              },
              {
                "name": "get_character_factions",
                "line": 189,
                "args": [
                  "db",
                  "character_id",
                  "active_only"
                ],
                "is_async": false
              },
              {
                "name": "update_membership",
                "line": 231,
                "args": [
                  "db",
                  "faction_id",
                  "character_id",
                  "role",
                  "rank",
                  "active",
                  "metadata",
                  "reason"
                ],
                "is_async": false
              },
              {
                "name": "remove_member",
                "line": 325,
                "args": [
                  "db",
                  "faction_id",
                  "character_id",
                  "reason",
                  "permanent"
                ],
                "is_async": false
              },
              {
                "name": "transfer_leader",
                "line": 375,
                "args": [
                  "db",
                  "faction_id",
                  "new_leader_id",
                  "reason"
                ],
                "is_async": false
              },
              {
                "name": "switch_faction_by_affinity",
                "line": 470,
                "args": [
                  "db",
                  "character_id",
                  "current_faction_id",
                  "target_faction_id",
                  "affinity_score",
                  "min_affinity_threshold",
                  "contextual_restrictions"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MembershipNotFoundError",
                "line": 15,
                "bases": [
                  "Exception"
                ],
                "methods": []
              },
              {
                "name": "InvalidMembershipError",
                "line": 18,
                "bases": [
                  "Exception"
                ],
                "methods": []
              },
              {
                "name": "FactionMembershipService",
                "line": 21,
                "bases": [],
                "methods": [
                  "add_member",
                  "get_membership",
                  "get_faction_members",
                  "get_character_factions",
                  "update_membership",
                  "remove_member",
                  "transfer_leader",
                  "switch_faction_by_affinity"
                ]
              }
            ]
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": true,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [],
        "syntax_errors": [],
        "missing_components": []
      },
      "event_base": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/event_base",
        "files": [
          "services.py",
          "models.py",
          "__init__.py",
          "router.py",
          "repositories/event_base_repository.py",
          "repositories/__init__.py",
          "models/event_handler_model.py",
          "models/event_base_model.py",
          "models/__init__.py",
          "schemas/event_base_schema.py",
          "schemas/__init__.py",
          "services/__init__.py",
          "services/event_base_service.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.event_base.models",
                "names": [
                  "Event_BaseEntity",
                  "Event_BaseModel",
                  "CreateEvent_BaseRequest",
                  "UpdateEvent_BaseRequest",
                  "Event_BaseResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "Event_BaseNotFoundError",
                  "Event_BaseValidationError",
                  "Event_BaseConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_event_base_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Event_BaseService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104f6f7f0>"
                ],
                "methods": [
                  "__init__",
                  "create_event_base",
                  "get_event_base_by_id",
                  "update_event_base",
                  "delete_event_base",
                  "list_event_bases",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_event_base_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Event_BaseBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "Event_BaseModel",
                "line": 36,
                "bases": [
                  "Event_BaseBaseModel"
                ],
                "methods": []
              },
              {
                "name": "Event_BaseEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateEvent_BaseRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateEvent_BaseRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Event_BaseResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Event_BaseListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "models",
                "names": [
                  "EventBase",
                  "EventHandler",
                  "EventPriority",
                  "EventStatus",
                  "HandlerType"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "services",
                "names": [
                  "EventBaseService"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "schemas",
                "names": [
                  "EventBaseCreate",
                  "EventBaseUpdate",
                  "EventBaseResponse",
                  "EventHandlerCreate",
                  "EventHandlerResponse"
                ],
                "line": 11
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.event_base.models",
                "names": [
                  "EventBase",
                  "EventStatus"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.event_base.services",
                "names": [
                  "EventBaseService"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.event_base.schemas",
                "names": [
                  "EventBaseCreate",
                  "EventBaseUpdate",
                  "EventBaseResponse",
                  "EventStatisticsResponse"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/event_base_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.event_base.models",
                "names": [
                  "EventBase",
                  "EventStatus"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 12,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventBaseRepository",
                "line": 9,
                "bases": [],
                "methods": [
                  "__init__",
                  "save_event",
                  "get_event",
                  "get_events_by_status",
                  "get_events_by_type",
                  "get_pending_events",
                  "get_failed_events",
                  "delete_event",
                  "cleanup_old_events",
                  "get_event_statistics"
                ]
              }
            ]
          },
          {
            "file": "repositories/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "event_base_repository",
                "names": [
                  "EventBaseRepository"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/event_handler_model.py",
            "imports": [
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Callable",
                  "Any",
                  "Optional",
                  "List"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "can_handle",
                "line": 31,
                "args": [
                  "self",
                  "event_type"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "HandlerType",
                "line": 9,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "EventHandler",
                "line": 15,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "can_handle"
                ]
              },
              {
                "name": "Config",
                "line": 26,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "models/event_base_model.py",
            "imports": [
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "Optional"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "mark_processing",
                "line": 48,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "mark_completed",
                "line": 53,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "mark_failed",
                "line": 57,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "can_retry",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventPriority",
                "line": 10,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "EventStatus",
                "line": 17,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "EventBase",
                "line": 25,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "mark_processing",
                  "mark_completed",
                  "mark_failed",
                  "can_retry"
                ]
              },
              {
                "name": "Config",
                "line": 41,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "models/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "event_base_model",
                "names": [
                  "EventBase",
                  "EventPriority",
                  "EventStatus"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "event_handler_model",
                "names": [
                  "EventHandler",
                  "HandlerType"
                ],
                "line": 6
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/event_base_schema.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "Optional",
                  "List"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.event_base.models",
                "names": [
                  "EventPriority",
                  "EventStatus",
                  "HandlerType"
                ],
                "line": 8
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "EventBaseCreate",
                "line": 10,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "EventBaseUpdate",
                "line": 19,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "EventBaseResponse",
                "line": 25,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "EventHandlerCreate",
                "line": 39,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "EventHandlerResponse",
                "line": 47,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "EventStatisticsResponse",
                "line": 55,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "schemas/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "event_base_schema",
                "names": [
                  "EventBaseCreate",
                  "EventBaseUpdate",
                  "EventBaseResponse",
                  "EventHandlerCreate",
                  "EventHandlerResponse"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "event_base_service",
                "names": [
                  "EventBaseService"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/event_base_service.py",
            "imports": [
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Callable",
                  "Any"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.event_base.models",
                "names": [
                  "EventBase",
                  "EventHandler",
                  "EventStatus",
                  "EventPriority"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 13,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "register_handler",
                "line": 19,
                "args": [
                  "self",
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "unregister_handler",
                "line": 28,
                "args": [
                  "self",
                  "handler_name",
                  "event_type"
                ],
                "is_async": false
              },
              {
                "name": "add_middleware",
                "line": 36,
                "args": [
                  "self",
                  "middleware"
                ],
                "is_async": false
              },
              {
                "name": "_generate_event_id",
                "line": 121,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_event_statistics",
                "line": 126,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventBaseService",
                "line": 10,
                "bases": [],
                "methods": [
                  "__init__",
                  "register_handler",
                  "unregister_handler",
                  "add_middleware",
                  "emit_event",
                  "_process_events",
                  "_process_single_event",
                  "_generate_event_id",
                  "get_event_statistics"
                ]
              }
            ]
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": true,
        "has_routers": true,
        "has_schemas": true,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "models",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "services",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "schemas",
            "line": 11,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "event_base_repository",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/repositories/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/models/event_handler_model.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/models/event_base_model.py"
          },
          {
            "type": "non_canonical_import",
            "import": "event_base_model",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/models/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "event_handler_model",
            "line": 6,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/models/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "event_base_schema",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/schemas/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "event_base_service",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/services/__init__.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "rumor": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/rumor",
        "files": [
          "services.py",
          "models.py",
          "__init__.py",
          "transformer.py",
          "decay_and_propagation.py",
          "truth_tracker.py",
          "npc_rumor_routes.py",
          "npc_rumor_utils.py",
          "routers/__init__.py",
          "repositories/rumor_repository.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "models/rumor.py",
          "schemas/rumor_types.py",
          "schemas/__init__.py",
          "services/__init__.py",
          "services/rumor_service.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.rumor.models",
                "names": [
                  "RumorEntity",
                  "RumorModel",
                  "CreateRumorRequest",
                  "UpdateRumorRequest",
                  "RumorResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "RumorNotFoundError",
                  "RumorValidationError",
                  "RumorConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_rumor_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "RumorService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104f877f0>"
                ],
                "methods": [
                  "__init__",
                  "create_rumor",
                  "get_rumor_by_id",
                  "update_rumor",
                  "delete_rumor",
                  "list_rumors",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_rumor_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "RumorBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "RumorModel",
                "line": 36,
                "bases": [
                  "RumorBaseModel"
                ],
                "methods": []
              },
              {
                "name": "RumorEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateRumorRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateRumorRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RumorResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RumorListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.rumor.models.rumor",
                "names": [
                  "Rumor",
                  "RumorVariant",
                  "RumorSpread",
                  "RumorCategory",
                  "RumorSeverity",
                  "RumorEvent"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.rumor.services.rumor_service",
                "names": [
                  "RumorService"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.rumor.repositories.rumor_repository",
                "names": [
                  "RumorRepository"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.rumor.transformer",
                "names": [
                  "RumorTransformer"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.rumor.schemas",
                "names": [
                  "CreateRumorRequest",
                  "SpreadRumorRequest",
                  "EntityRumorsRequest",
                  "DecayRumorsRequest",
                  "RumorResponse",
                  "RumorListResponse",
                  "EntityRumorsResponse",
                  "RumorOperationResponse",
                  "RumorSummaryResponse"
                ],
                "line": 25
              },
              {
                "type": "from_import",
                "module": "backend.systems.rumor.api",
                "names": [
                  "router"
                ],
                "line": 38
              },
              {
                "type": "from_import",
                "module": "backend.systems.rumor.decay_and_propagation",
                "names": [
                  "calculate_rumor_decay",
                  "calculate_mutation_probability",
                  "calculate_spread_radius",
                  "calculate_believability_threshold"
                ],
                "line": 41
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "transformer.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "re",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.services.gpt_client",
                "names": [
                  "GPTClient"
                ],
                "line": 12
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 26,
                "args": [
                  "self",
                  "gpt_client"
                ],
                "is_async": false
              },
              {
                "name": "_build_transformation_prompt",
                "line": 82,
                "args": [
                  "self",
                  "event",
                  "rumor",
                  "traits",
                  "distortion_level",
                  "semantic_direction"
                ],
                "is_async": false
              },
              {
                "name": "_extract_transformed_rumor",
                "line": 130,
                "args": [
                  "self",
                  "response"
                ],
                "is_async": false
              },
              {
                "name": "fallback_transform",
                "line": 165,
                "args": [
                  "self",
                  "rumor",
                  "distortion_level"
                ],
                "is_async": false
              },
              {
                "name": "calculate_truth_value",
                "line": 207,
                "args": [
                  "self",
                  "original_event",
                  "transformed_rumor",
                  "base_truth"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "RumorTransformer",
                "line": 16,
                "bases": [],
                "methods": [
                  "__init__",
                  "transform_rumor",
                  "_build_transformation_prompt",
                  "_extract_transformed_rumor",
                  "fallback_transform",
                  "calculate_truth_value",
                  "evaluate_rumor_truthfulness"
                ]
              }
            ]
          },
          {
            "file": "decay_and_propagation.py",
            "imports": [
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.rumor.models.rumor",
                "names": [
                  "RumorSeverity"
                ],
                "line": 9
              }
            ],
            "functions": [
              {
                "name": "calculate_rumor_decay",
                "line": 11,
                "args": [
                  "days_inactive",
                  "rumor_severity",
                  "base_decay"
                ],
                "is_async": false
              },
              {
                "name": "calculate_mutation_probability",
                "line": 43,
                "args": [
                  "base_chance",
                  "rumor_severity",
                  "spread_count"
                ],
                "is_async": false
              },
              {
                "name": "calculate_spread_radius",
                "line": 78,
                "args": [
                  "initial_radius",
                  "rumor_severity",
                  "days_active",
                  "saturation_factor"
                ],
                "is_async": false
              },
              {
                "name": "calculate_believability_threshold",
                "line": 114,
                "args": [
                  "base_threshold",
                  "rumor_severity",
                  "relationship_strength"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "truth_tracker.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any"
                ],
                "line": 1
              },
              {
                "type": "import",
                "module": "difflib",
                "alias": null,
                "line": 2
              }
            ],
            "functions": [
              {
                "name": "calculate_truth_value",
                "line": 6,
                "args": [
                  "original",
                  "rumor"
                ],
                "is_async": false
              },
              {
                "name": "update_truth_value",
                "line": 12,
                "args": [
                  "prev_truth",
                  "new_truth",
                  "decay"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "TruthTracker",
                "line": 4,
                "bases": [],
                "methods": [
                  "calculate_truth_value",
                  "update_truth_value"
                ]
              }
            ]
          },
          {
            "file": "npc_rumor_routes.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "request",
                  "jsonify"
                ],
                "line": 5
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 6
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 7
              },
              {
                "type": "import",
                "module": "openai",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.llm.gpt_client",
                "names": [
                  "GPTClient"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.memory.memory_utils",
                "names": [
                  "store_interaction"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.npc_rumor_utils",
                "names": [
                  "share_rumors_between_npcs"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.npc_relationships_utils",
                "names": [
                  "update_npc_location"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.npc_rumor_utils",
                "names": [
                  "drift_faction_from_rumors"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "simulate_npc_interactions",
                "line": 21,
                "args": [],
                "is_async": false
              },
              {
                "name": "npc_travel",
                "line": 94,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "npc_rumor_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 12
              }
            ],
            "functions": [
              {
                "name": "propagate_rumor_between_npcs",
                "line": 15,
                "args": [
                  "npc_a_id",
                  "npc_b_id"
                ],
                "is_async": false
              },
              {
                "name": "decay_npc_rumors",
                "line": 49,
                "args": [
                  "npc_id",
                  "max_rumors"
                ],
                "is_async": false
              },
              {
                "name": "score_npc_rumor_truth",
                "line": 67,
                "args": [
                  "rumor",
                  "ground_truth"
                ],
                "is_async": false
              },
              {
                "name": "generate_npc_belief",
                "line": 79,
                "args": [
                  "npc_name",
                  "event_data"
                ],
                "is_async": false
              },
              {
                "name": "fabricate_alternate",
                "line": 105,
                "args": [
                  "event_data"
                ],
                "is_async": false
              },
              {
                "name": "distort_summary",
                "line": 108,
                "args": [
                  "summary"
                ],
                "is_async": false
              },
              {
                "name": "propagate_beliefs",
                "line": 112,
                "args": [
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "share_between_npcs",
                "line": 144,
                "args": [
                  "npc_a",
                  "npc_b",
                  "strength_threshold"
                ],
                "is_async": false
              },
              {
                "name": "drift_faction_from_rumors",
                "line": 175,
                "args": [
                  "npc_id",
                  "rumor_text"
                ],
                "is_async": false
              },
              {
                "name": "distort_rumors_if_needed",
                "line": 197,
                "args": [],
                "is_async": false
              },
              {
                "name": "fabricate_false_rumors",
                "line": 227,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_memory_log",
                "line": 20,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "write_memory",
                "line": 24,
                "args": [
                  "npc_id",
                  "new_entries"
                ],
                "is_async": false
              },
              {
                "name": "sample_memories",
                "line": 33,
                "args": [
                  "memories",
                  "count"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.rumor.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.rumor.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.rumor.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/rumor_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 4
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 5
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 6
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.rumor.models.rumor",
                "names": [
                  "Rumor"
                ],
                "line": 11
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 21,
                "args": [
                  "self",
                  "storage_path"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "RumorRepository",
                "line": 15,
                "bases": [],
                "methods": [
                  "__init__",
                  "save_rumor",
                  "get_rumor",
                  "get_all_rumors",
                  "delete_rumor"
                ]
              }
            ]
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/rumor.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "schemas/rumor_types.py",
            "imports": [
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Optional"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 3
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "RumorEvent",
                "line": 5,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Rumor",
                "line": 11,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RumorTransformationRequest",
                "line": 22,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RumorTransformationResponse",
                "line": 28,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "schemas/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.rumor.rumor_types",
                "names": [
                  "RumorEvent",
                  "Rumor",
                  "RumorTransformationRequest",
                  "RumorTransformationResponse"
                ],
                "line": 1
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/rumor_service.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": true,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "re",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/rumor/transformer.py"
          },
          {
            "type": "non_canonical_import",
            "import": "difflib",
            "line": 2,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/rumor/truth_tracker.py"
          },
          {
            "type": "non_canonical_import",
            "import": "openai",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/rumor/npc_rumor_routes.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "shared": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/shared",
        "files": [
          "services.py",
          "config.py",
          "models.py",
          "database.py",
          "__init__.py",
          "routers/__init__.py",
          "database/session.py",
          "database/__init__.py",
          "database/base.py",
          "config/__init__.py",
          "utils/floating_origin.py",
          "utils/time.py",
          "utils/logging.py",
          "utils/error.py",
          "utils/data_loader.py",
          "utils/security.py",
          "utils/__init__.py",
          "utils/file.py",
          "utils/firebase.py",
          "utils/coordinates.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "models/base.py",
          "schemas/__init__.py",
          "rules/__init__.py",
          "events/dispatcher.py",
          "events/__init__.py",
          "events/bus.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "SharedEntity",
                  "SharedModel",
                  "CreateSharedRequest",
                  "UpdateSharedRequest",
                  "SharedResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "SharedNotFoundError",
                  "SharedValidationError",
                  "SharedConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_shared_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "SharedService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104fcf7f0>"
                ],
                "methods": [
                  "__init__",
                  "create_shared",
                  "get_shared_by_id",
                  "update_shared",
                  "delete_shared",
                  "list_shareds",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_shared_statistics"
                ]
              }
            ]
          },
          {
            "file": "config.py",
            "imports": [
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 6
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "load_config",
                "line": 55,
                "args": [],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 51,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DatabaseConfig",
                "line": 11,
                "bases": [],
                "methods": []
              },
              {
                "name": "AppConfig",
                "line": 21,
                "bases": [],
                "methods": [
                  "__post_init__"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "SharedBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "SharedModel",
                "line": 36,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "SharedEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateSharedRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateSharedRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "SharedResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "SharedListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "database.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "Base",
                  "BaseModel",
                  "TimestampMixin",
                  "UUIDMixin",
                  "GUID",
                  "get_db",
                  "get_async_db",
                  "SessionLocal",
                  "AsyncSessionLocal",
                  "engine",
                  "async_engine"
                ],
                "line": 6
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "*"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.schemas",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "*"
                ],
                "line": 8
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "database/session.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "contextlib",
                "names": [
                  "contextmanager"
                ],
                "line": 4
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 9,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_session",
                "line": 12,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "create_session",
                "line": 16,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "session_scope",
                "line": 23,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 37,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "commit",
                "line": 40,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "rollback",
                "line": 43,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "close",
                "line": 46,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "SessionManager",
                "line": 6,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_session",
                  "create_session",
                  "session_scope"
                ]
              },
              {
                "name": "MockSession",
                "line": 34,
                "bases": [],
                "methods": [
                  "__init__",
                  "commit",
                  "rollback",
                  "close"
                ]
              }
            ]
          },
          {
            "file": "database/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "Base",
                  "BaseModel",
                  "TimestampMixin",
                  "UUIDMixin",
                  "GUID",
                  "get_db",
                  "get_async_db",
                  "create_tables",
                  "create_tables_sync",
                  "SessionLocal",
                  "AsyncSessionLocal",
                  "engine",
                  "async_engine"
                ],
                "line": 5
              }
            ],
            "functions": [
              {
                "name": "SessionManager",
                "line": 27,
                "args": [],
                "is_async": false
              },
              {
                "name": "configure_database",
                "line": 31,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "database/base.py",
            "imports": [
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 5
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 6
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Generator",
                  "AsyncGenerator",
                  "Optional"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "contextlib",
                "names": [
                  "asynccontextmanager"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "create_engine",
                  "Column",
                  "String",
                  "DateTime",
                  "TypeDecorator",
                  "CHAR",
                  "event"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.asyncio",
                "names": [
                  "AsyncSession",
                  "create_async_engine",
                  "async_sessionmaker"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "sessionmaker",
                  "Session"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.sql",
                "names": [
                  "func"
                ],
                "line": 19
              },
              {
                "type": "import",
                "module": "sqlalchemy",
                "alias": "sa",
                "line": 20
              }
            ],
            "functions": [
              {
                "name": "get_db",
                "line": 146,
                "args": [],
                "is_async": false
              },
              {
                "name": "create_tables_sync",
                "line": 163,
                "args": [],
                "is_async": false
              },
              {
                "name": "drop_tables_sync",
                "line": 172,
                "args": [],
                "is_async": false
              },
              {
                "name": "set_sqlite_pragma",
                "line": 183,
                "args": [
                  "dbapi_connection",
                  "connection_record"
                ],
                "is_async": false
              },
              {
                "name": "check_database_health",
                "line": 191,
                "args": [],
                "is_async": false
              },
              {
                "name": "load_dialect_impl",
                "line": 70,
                "args": [
                  "self",
                  "dialect"
                ],
                "is_async": false
              },
              {
                "name": "process_bind_param",
                "line": 76,
                "args": [
                  "self",
                  "value",
                  "dialect"
                ],
                "is_async": false
              },
              {
                "name": "process_result_value",
                "line": 87,
                "args": [
                  "self",
                  "value",
                  "dialect"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 127,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "update",
                "line": 139,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 231,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "initialize",
                "line": 239,
                "args": [
                  "self",
                  "database_url",
                  "async_database_url"
                ],
                "is_async": false
              },
              {
                "name": "get_session",
                "line": 244,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "GUID",
                "line": 64,
                "bases": [
                  "TypeDecorator"
                ],
                "methods": [
                  "load_dialect_impl",
                  "process_bind_param",
                  "process_result_value"
                ]
              },
              {
                "name": "TimestampMixin",
                "line": 96,
                "bases": [],
                "methods": []
              },
              {
                "name": "UUIDMixin",
                "line": 111,
                "bases": [],
                "methods": []
              },
              {
                "name": "BaseModel",
                "line": 122,
                "bases": [
                  "Base",
                  "TimestampMixin"
                ],
                "methods": [
                  "to_dict",
                  "update"
                ]
              },
              {
                "name": "DatabaseManager",
                "line": 226,
                "bases": [],
                "methods": [
                  "__init__",
                  "initialize",
                  "get_session",
                  "get_async_session",
                  "session_scope",
                  "create_tables",
                  "close"
                ]
              }
            ]
          },
          {
            "file": "config/__init__.py",
            "imports": [
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Dict",
                  "Optional"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 13,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get",
                "line": 52,
                "args": [
                  "self",
                  "key",
                  "default"
                ],
                "is_async": false
              },
              {
                "name": "is_development",
                "line": 56,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "is_testing",
                "line": 60,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "is_production",
                "line": 64,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_database_url",
                "line": 68,
                "args": [
                  "self",
                  "async_mode"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 76,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Config",
                "line": 10,
                "bases": [],
                "methods": [
                  "__init__",
                  "get",
                  "is_development",
                  "is_testing",
                  "is_production",
                  "get_database_url",
                  "to_dict"
                ]
              }
            ]
          },
          {
            "file": "utils/floating_origin.py",
            "imports": [
              {
                "type": "import",
                "module": "re",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 23
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 24
              }
            ],
            "functions": [
              {
                "name": "secure_filename",
                "line": 7,
                "args": [
                  "filename"
                ],
                "is_async": false
              },
              {
                "name": "load_data_file",
                "line": 21,
                "args": [
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 15,
                "args": [
                  "self",
                  "origin"
                ],
                "is_async": false
              },
              {
                "name": "transform",
                "line": 18,
                "args": [
                  "self",
                  "point"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CoordinateSystem",
                "line": 13,
                "bases": [],
                "methods": [
                  "__init__",
                  "transform"
                ]
              }
            ]
          },
          {
            "file": "utils/time.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timezone"
                ],
                "line": 3
              }
            ],
            "functions": [
              {
                "name": "get_current_time",
                "line": 6,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_current_timestamp",
                "line": 11,
                "args": [],
                "is_async": false
              },
              {
                "name": "format_datetime",
                "line": 16,
                "args": [
                  "dt",
                  "format_str"
                ],
                "is_async": false
              },
              {
                "name": "parse_datetime",
                "line": 21,
                "args": [
                  "dt_str",
                  "format_str"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/logging.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/error.py",
            "imports": [],
            "functions": [],
            "classes": [
              {
                "name": "AuthorizationError",
                "line": 3,
                "bases": [
                  "Exception"
                ],
                "methods": []
              },
              {
                "name": "ValidationError",
                "line": 6,
                "bases": [
                  "Exception"
                ],
                "methods": []
              },
              {
                "name": "NotFoundError",
                "line": 9,
                "bases": [
                  "Exception"
                ],
                "methods": []
              },
              {
                "name": "DatabaseError",
                "line": 12,
                "bases": [
                  "Exception"
                ],
                "methods": []
              },
              {
                "name": "ConfigurationError",
                "line": 15,
                "bases": [
                  "Exception"
                ],
                "methods": []
              },
              {
                "name": "BusinessLogicError",
                "line": 18,
                "bases": [
                  "Exception"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "utils/data_loader.py",
            "imports": [
              {
                "type": "import",
                "module": "re",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 23
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 24
              }
            ],
            "functions": [
              {
                "name": "secure_filename",
                "line": 7,
                "args": [
                  "filename"
                ],
                "is_async": false
              },
              {
                "name": "load_data_file",
                "line": 21,
                "args": [
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 15,
                "args": [
                  "self",
                  "origin"
                ],
                "is_async": false
              },
              {
                "name": "transform",
                "line": 18,
                "args": [
                  "self",
                  "point"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CoordinateSystem",
                "line": 13,
                "bases": [],
                "methods": [
                  "__init__",
                  "transform"
                ]
              }
            ]
          },
          {
            "file": "utils/security.py",
            "imports": [
              {
                "type": "import",
                "module": "re",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 23
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 24
              }
            ],
            "functions": [
              {
                "name": "secure_filename",
                "line": 7,
                "args": [
                  "filename"
                ],
                "is_async": false
              },
              {
                "name": "load_data_file",
                "line": 21,
                "args": [
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 15,
                "args": [
                  "self",
                  "origin"
                ],
                "is_async": false
              },
              {
                "name": "transform",
                "line": 18,
                "args": [
                  "self",
                  "point"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CoordinateSystem",
                "line": 13,
                "bases": [],
                "methods": [
                  "__init__",
                  "transform"
                ]
              }
            ]
          },
          {
            "file": "utils/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/file.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/firebase.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/coordinates.py",
            "imports": [
              {
                "type": "import",
                "module": "re",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 23
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 24
              }
            ],
            "functions": [
              {
                "name": "secure_filename",
                "line": 7,
                "args": [
                  "filename"
                ],
                "is_async": false
              },
              {
                "name": "load_data_file",
                "line": 21,
                "args": [
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 15,
                "args": [
                  "self",
                  "origin"
                ],
                "is_async": false
              },
              {
                "name": "transform",
                "line": 18,
                "args": [
                  "self",
                  "point"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CoordinateSystem",
                "line": 13,
                "bases": [],
                "methods": [
                  "__init__",
                  "transform"
                ]
              }
            ]
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/base.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any",
                  "TypeVar",
                  "Generic"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "abc",
                "names": [
                  "ABC",
                  "abstractmethod"
                ],
                "line": 4
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 5
              }
            ],
            "functions": [
              {
                "name": "to_dict",
                "line": 15,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "update",
                "line": 19,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 28,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 38,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "BaseModel",
                "line": 12,
                "bases": [],
                "methods": [
                  "to_dict",
                  "update"
                ]
              },
              {
                "name": "BaseRepository",
                "line": 25,
                "bases": [
                  "ABC"
                ],
                "methods": [
                  "__init__",
                  "health_check"
                ]
              },
              {
                "name": "BaseService",
                "line": 35,
                "bases": [
                  "ABC"
                ],
                "methods": [
                  "__init__",
                  "health_check"
                ]
              }
            ]
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "rules/__init__.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 3
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 4
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any"
                ],
                "line": 5
              }
            ],
            "functions": [
              {
                "name": "load_data",
                "line": 23,
                "args": [
                  "filename"
                ],
                "is_async": false
              },
              {
                "name": "get_balance_constants",
                "line": 50,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "events/dispatcher.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "events/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "events/bus.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": false,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/config.py"
          },
          {
            "type": "non_canonical_import",
            "import": "contextlib",
            "line": 4,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/database/session.py"
          },
          {
            "type": "non_canonical_import",
            "import": "contextlib",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/database/base.py"
          },
          {
            "type": "non_canonical_import",
            "import": "re",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py"
          },
          {
            "type": "non_canonical_import",
            "import": "re",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/data_loader.py"
          },
          {
            "type": "non_canonical_import",
            "import": "re",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/security.py"
          },
          {
            "type": "non_canonical_import",
            "import": "re",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/coordinates.py"
          },
          {
            "type": "non_canonical_import",
            "import": "abc",
            "line": 4,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/models/base.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "loot": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/loot",
        "files": [
          "loot_utils_core.py",
          "services.py",
          "generation.py",
          "models.py",
          "loot_routes.py",
          "events.py",
          "database.py",
          "__init__.py",
          "core.py",
          "loot_core.py",
          "initialization.py",
          "loot_manager.py",
          "loot_shop.py",
          "loot_events.py",
          "routers/__init__.py",
          "repositories/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py",
          "models_old/__init__.py",
          "models_old/location.py",
          "models_old/shop.py",
          "models_old/item.py"
        ],
        "modules": [
          {
            "file": "loot_utils_core.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Tuple",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 7
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "hashlib",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.events.dispatcher",
                "names": [
                  "EventDispatcher",
                  "EventBase"
                ],
                "line": 11
              }
            ],
            "functions": [
              {
                "name": "group_equipment_by_type",
                "line": 98,
                "args": [
                  "equipment_list"
                ],
                "is_async": false
              },
              {
                "name": "gpt_name_and_flavor",
                "line": 117,
                "args": [
                  "base_type"
                ],
                "is_async": false
              },
              {
                "name": "merge_loot_sets",
                "line": 133,
                "args": [
                  "loot_sets"
                ],
                "is_async": false
              },
              {
                "name": "apply_biome_to_loot_table",
                "line": 153,
                "args": [
                  "loot_table",
                  "biome_type"
                ],
                "is_async": false
              },
              {
                "name": "apply_motif_to_loot_table",
                "line": 199,
                "args": [
                  "loot_table",
                  "motif"
                ],
                "is_async": false
              },
              {
                "name": "adjust_price_for_supply_demand",
                "line": 245,
                "args": [
                  "base_price",
                  "item_name",
                  "item_id",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "apply_motif_to_prices",
                "line": 315,
                "args": [
                  "base_price",
                  "item_name",
                  "item_id",
                  "region_id",
                  "motif"
                ],
                "is_async": false
              },
              {
                "name": "apply_event_to_prices",
                "line": 399,
                "args": [
                  "base_price",
                  "item_name",
                  "item_id",
                  "region_id",
                  "event_type"
                ],
                "is_async": false
              },
              {
                "name": "log_loot_acquisition",
                "line": 485,
                "args": [
                  "character_id",
                  "items",
                  "gold_amount",
                  "source_type",
                  "location_id",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "log_shop_transaction",
                "line": 568,
                "args": [
                  "character_id",
                  "shop_id",
                  "items_bought",
                  "items_sold",
                  "gold_spent",
                  "gold_earned",
                  "location_id",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "sell_item_to_shop",
                "line": 661,
                "args": [
                  "shop_id",
                  "shop_type",
                  "shop_tier",
                  "item",
                  "character_id",
                  "negotiation_bonus",
                  "location_id",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "apply_rarity_to_item",
                "line": 762,
                "args": [
                  "item",
                  "rarity"
                ],
                "is_async": false
              },
              {
                "name": "apply_magical_effects",
                "line": 812,
                "args": [
                  "item",
                  "rarity",
                  "level"
                ],
                "is_async": false
              },
              {
                "name": "apply_thematic_elements",
                "line": 883,
                "args": [
                  "item",
                  "faction_id",
                  "motif"
                ],
                "is_async": false
              },
              {
                "name": "add_enchantment_to_item",
                "line": 970,
                "args": [
                  "item",
                  "enchantment",
                  "character_id",
                  "skill_level",
                  "use_catalyst",
                  "catalyst_bonus"
                ],
                "is_async": false
              },
              {
                "name": "select_rarity",
                "line": 1115,
                "args": [],
                "is_async": false
              },
              {
                "name": "select_item_type",
                "line": 1128,
                "args": [],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "LootGeneratedEvent",
                "line": 13,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "ItemIdentificationEvent",
                "line": 26,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "ItemEnhancementEvent",
                "line": 38,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "ShopInventoryEvent",
                "line": 51,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "ShopRestockEvent",
                "line": 63,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "ShopTransactionEvent",
                "line": 74,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "LootAnalyticsEvent",
                "line": 86,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.models",
                "names": [
                  "LootEntity",
                  "LootModel",
                  "CreateLootRequest",
                  "UpdateLootRequest",
                  "LootResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "LootNotFoundError",
                  "LootValidationError",
                  "LootConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_loot_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "LootService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104fea290>"
                ],
                "methods": [
                  "__init__",
                  "create_loot",
                  "get_loot_by_id",
                  "update_loot",
                  "delete_loot",
                  "list_loots",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_loot_statistics"
                ]
              }
            ]
          },
          {
            "file": "generation.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 57,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 60,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "LootBaseModel",
                "line": 20,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "LootModel",
                "line": 34,
                "bases": [
                  "LootBaseModel"
                ],
                "methods": []
              },
              {
                "name": "LootEntity",
                "line": 43,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateLootRequest",
                "line": 75,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateLootRequest",
                "line": 83,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "LootResponse",
                "line": 92,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "LootListResponse",
                "line": 108,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 29,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 104,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "loot_routes.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "request",
                  "jsonify"
                ],
                "line": 4
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 5
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.loot_utils",
                "names": [
                  "group_equipment_by_type",
                  "generate_loot_bundle",
                  "gpt_name_and_flavor",
                  "generate_location_specific_loot",
                  "get_dynamic_item_price",
                  "get_item_description_for_player",
                  "attempt_identify_item",
                  "identify_item_completely",
                  "enhance_item",
                  "add_enchantment_to_item",
                  "generate_random_item",
                  "generate_shop_inventory",
                  "update_shop_prices"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "HTTPException",
                  "Path",
                  "Query",
                  "Body"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel"
                ],
                "line": 23
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 265
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 307
              }
            ],
            "functions": [
              {
                "name": "generate_loot",
                "line": 75,
                "args": [],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "LootBundleRequest",
                "line": 46,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "IdentifyItemRequest",
                "line": 57,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "EnhanceItemRequest",
                "line": 64,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "events.py",
            "imports": [
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 6
              },
              {
                "type": "from_import",
                "module": "random",
                "names": [
                  "random",
                  "choice",
                  "randint"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "copy",
                "names": [
                  "deepcopy"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Tuple",
                  "Optional"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 11
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "hashlib",
                "alias": null,
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.events.dispatcher",
                "names": [
                  "EventDispatcher",
                  "EventBase"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "log_loot_generation_stats",
                "line": 16,
                "args": [
                  "monster_levels",
                  "items_generated",
                  "gold_amount",
                  "source_type",
                  "location_id",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "rarity_progression_to_level",
                "line": 81,
                "args": [
                  "rarity"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "database.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.loot.models",
                "names": [
                  "LootBaseModel",
                  "LootModel",
                  "LootEntity",
                  "CreateLootRequest",
                  "UpdateLootRequest",
                  "LootResponse",
                  "LootListResponse"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.loot_core",
                "names": [
                  "validate_item",
                  "calculate_item_power_score",
                  "group_equipment_by_type",
                  "gpt_name_and_flavor",
                  "generate_item_identity",
                  "generate_item_effects",
                  "generate_loot_bundle",
                  "merge_loot_sets",
                  "generate_location_specific_loot",
                  "LootValidationError",
                  "ItemGenerationError"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.loot_manager",
                "names": [
                  "LootManager",
                  "LootManagerError"
                ],
                "line": 35
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.loot_shop",
                "names": [
                  "get_shop_type_specialization",
                  "get_region_economic_factors",
                  "get_dynamic_item_price",
                  "calculate_shop_price_modifier",
                  "ShopSpecialization",
                  "EconomicFactors",
                  "ShopError"
                ],
                "line": 41
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.loot_events",
                "names": [
                  "LootEventType",
                  "IdentificationResult",
                  "EnhancementResult",
                  "TransactionType",
                  "LootGeneratedEvent",
                  "ItemIdentificationEvent",
                  "ItemEnhancementEvent",
                  "ShopInventoryEvent",
                  "ShopTransactionEvent",
                  "LootAnalyticsEvent",
                  "create_loot_generated_event",
                  "create_item_identification_event",
                  "create_item_enhancement_event",
                  "create_shop_inventory_event",
                  "create_shop_transaction_event",
                  "LootEventPublisher"
                ],
                "line": 52
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "core.py",
            "imports": [
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 6
              },
              {
                "type": "from_import",
                "module": "random",
                "names": [
                  "random",
                  "choice",
                  "randint"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "copy",
                "names": [
                  "deepcopy"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Tuple",
                  "Optional"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 11
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "hashlib",
                "alias": null,
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.events.dispatcher",
                "names": [
                  "EventDispatcher",
                  "EventBase"
                ],
                "line": 14
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 949
              }
            ],
            "functions": [
              {
                "name": "group_equipment_by_type",
                "line": 16,
                "args": [
                  "equipment_list"
                ],
                "is_async": false
              },
              {
                "name": "gpt_name_and_flavor",
                "line": 35,
                "args": [
                  "base_type"
                ],
                "is_async": false
              },
              {
                "name": "merge_loot_sets",
                "line": 51,
                "args": [
                  "loot_sets"
                ],
                "is_async": false
              },
              {
                "name": "apply_biome_to_loot_table",
                "line": 71,
                "args": [
                  "loot_table",
                  "biome_type"
                ],
                "is_async": false
              },
              {
                "name": "apply_motif_to_loot_table",
                "line": 117,
                "args": [
                  "loot_table",
                  "motif"
                ],
                "is_async": false
              },
              {
                "name": "adjust_price_for_supply_demand",
                "line": 163,
                "args": [
                  "base_price",
                  "item_name",
                  "item_id",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "apply_motif_to_prices",
                "line": 233,
                "args": [
                  "base_price",
                  "item_name",
                  "item_id",
                  "region_id",
                  "motif"
                ],
                "is_async": false
              },
              {
                "name": "apply_event_to_prices",
                "line": 317,
                "args": [
                  "base_price",
                  "item_name",
                  "item_id",
                  "region_id",
                  "event_type"
                ],
                "is_async": false
              },
              {
                "name": "log_loot_acquisition",
                "line": 403,
                "args": [
                  "character_id",
                  "items",
                  "gold_amount",
                  "source_type",
                  "location_id",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "log_shop_transaction",
                "line": 486,
                "args": [
                  "character_id",
                  "shop_id",
                  "items_bought",
                  "items_sold",
                  "gold_spent",
                  "gold_earned",
                  "location_id",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "sell_item_to_shop",
                "line": 579,
                "args": [
                  "shop_id",
                  "shop_type",
                  "shop_tier",
                  "item",
                  "character_id",
                  "negotiation_bonus",
                  "location_id",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "apply_rarity_to_item",
                "line": 680,
                "args": [
                  "item",
                  "rarity"
                ],
                "is_async": false
              },
              {
                "name": "apply_magical_effects",
                "line": 730,
                "args": [
                  "item",
                  "rarity",
                  "level"
                ],
                "is_async": false
              },
              {
                "name": "apply_thematic_elements",
                "line": 801,
                "args": [
                  "item",
                  "faction_id",
                  "motif"
                ],
                "is_async": false
              },
              {
                "name": "add_enchantment_to_item",
                "line": 888,
                "args": [
                  "item",
                  "enchantment",
                  "character_id",
                  "skill_level",
                  "use_catalyst",
                  "catalyst_bonus"
                ],
                "is_async": false
              },
              {
                "name": "select_rarity",
                "line": 1038,
                "args": [],
                "is_async": false
              },
              {
                "name": "select_item_type",
                "line": 1051,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "loot_core.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Tuple"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "random",
                "names": [
                  "choice",
                  "randint"
                ],
                "line": 12
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 13
              },
              {
                "type": "from_import",
                "module": "copy",
                "names": [
                  "deepcopy"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "group_equipment_by_type",
                "line": 31,
                "args": [
                  "equipment_list"
                ],
                "is_async": false
              },
              {
                "name": "validate_item",
                "line": 51,
                "args": [
                  "item",
                  "valid_effects"
                ],
                "is_async": false
              },
              {
                "name": "calculate_item_power_score",
                "line": 75,
                "args": [
                  "item"
                ],
                "is_async": false
              },
              {
                "name": "gpt_name_and_flavor",
                "line": 110,
                "args": [
                  "base_type"
                ],
                "is_async": false
              },
              {
                "name": "generate_item_identity",
                "line": 127,
                "args": [
                  "item"
                ],
                "is_async": false
              },
              {
                "name": "generate_item_effects",
                "line": 155,
                "args": [
                  "rarity",
                  "max_effects",
                  "effect_pool",
                  "monster_pool"
                ],
                "is_async": false
              },
              {
                "name": "generate_loot_bundle",
                "line": 193,
                "args": [
                  "monster_levels",
                  "equipment_pool",
                  "item_effects",
                  "monster_feats",
                  "source_type",
                  "location_id",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "merge_loot_sets",
                "line": 288,
                "args": [
                  "loot_sets"
                ],
                "is_async": false
              },
              {
                "name": "generate_location_specific_loot",
                "line": 309,
                "args": [
                  "location_id",
                  "location_type",
                  "biome_type",
                  "faction_id",
                  "faction_type",
                  "motif",
                  "monster_levels",
                  "equipment_pool",
                  "item_effects",
                  "monster_feats"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "LootValidationError",
                "line": 21,
                "bases": [
                  "Exception"
                ],
                "methods": []
              },
              {
                "name": "ItemGenerationError",
                "line": 26,
                "bases": [
                  "Exception"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "initialization.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "loot_manager.py",
            "imports": [
              {
                "type": "import",
                "module": "threading",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.loot_core",
                "names": [
                  "generate_loot_bundle",
                  "validate_item",
                  "calculate_item_power_score",
                  "generate_item_identity",
                  "generate_location_specific_loot"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.loot_events",
                "names": [
                  "LootGeneratedEvent"
                ],
                "line": 128
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.loot_events",
                "names": [
                  "ItemIdentificationEvent"
                ],
                "line": 193
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.loot_shop",
                "names": [
                  "generate_shop_inventory"
                ],
                "line": 302
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.loot_events",
                "names": [
                  "ShopInventoryEvent"
                ],
                "line": 316
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.loot_events",
                "names": [
                  "ItemEnhancementEvent"
                ],
                "line": 258
              }
            ],
            "functions": [
              {
                "name": "get_loot_manager",
                "line": 481,
                "args": [],
                "is_async": false
              },
              {
                "name": "__new__",
                "line": 35,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 42,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "initialize",
                "line": 71,
                "args": [
                  "self",
                  "config"
                ],
                "is_async": false
              },
              {
                "name": "generate_loot",
                "line": 93,
                "args": [
                  "self",
                  "location",
                  "level",
                  "context"
                ],
                "is_async": false
              },
              {
                "name": "identify_item",
                "line": 147,
                "args": [
                  "self",
                  "item",
                  "character_id",
                  "skill_level"
                ],
                "is_async": false
              },
              {
                "name": "enhance_item",
                "line": 213,
                "args": [
                  "self",
                  "item",
                  "enhancement_type",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "get_shop_inventory",
                "line": 279,
                "args": [
                  "self",
                  "shop_type",
                  "location",
                  "shop_tier"
                ],
                "is_async": false
              },
              {
                "name": "calculate_item_value",
                "line": 335,
                "args": [
                  "self",
                  "item",
                  "context"
                ],
                "is_async": false
              },
              {
                "name": "process_loot_event",
                "line": 378,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "get_loot_analytics",
                "line": 401,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "load_configuration",
                "line": 416,
                "args": [
                  "self",
                  "config_path"
                ],
                "is_async": false
              },
              {
                "name": "setup_integrations",
                "line": 434,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "validate_system",
                "line": 449,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "reset_caches",
                "line": 470,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_loot_statistics",
                "line": 475,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "LootManager",
                "line": 24,
                "bases": [],
                "methods": [
                  "__new__",
                  "__init__",
                  "initialize",
                  "generate_loot",
                  "identify_item",
                  "enhance_item",
                  "get_shop_inventory",
                  "calculate_item_value",
                  "process_loot_event",
                  "get_loot_analytics",
                  "load_configuration",
                  "setup_integrations",
                  "validate_system",
                  "reset_caches",
                  "get_loot_statistics"
                ]
              },
              {
                "name": "LootManagerError",
                "line": 487,
                "bases": [
                  "Exception"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "loot_shop.py",
            "imports": [
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "copy",
                "names": [
                  "deepcopy"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.loot_core",
                "names": [
                  "generate_item_identity",
                  "calculate_item_power_score"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "get_shop_type_specialization",
                "line": 43,
                "args": [
                  "shop_type"
                ],
                "is_async": false
              },
              {
                "name": "get_region_economic_factors",
                "line": 167,
                "args": [
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "get_dynamic_item_price",
                "line": 204,
                "args": [
                  "item",
                  "shop_type",
                  "region_id",
                  "shop_tier",
                  "supply_demand_modifier"
                ],
                "is_async": false
              },
              {
                "name": "calculate_shop_price_modifier",
                "line": 279,
                "args": [
                  "shop",
                  "item",
                  "context"
                ],
                "is_async": false
              },
              {
                "name": "generate_shop_inventory",
                "line": 341,
                "args": [
                  "shop_type",
                  "shop_tier",
                  "region_id",
                  "faction_id",
                  "equipment_pool",
                  "item_effects",
                  "count"
                ],
                "is_async": false
              },
              {
                "name": "restock_shop_inventory",
                "line": 449,
                "args": [
                  "current_inventory",
                  "shop_type",
                  "shop_tier",
                  "region_id",
                  "faction_id",
                  "equipment_pool",
                  "item_effects",
                  "restock_percentage"
                ],
                "is_async": false
              },
              {
                "name": "calculate_sell_price",
                "line": 515,
                "args": [
                  "item",
                  "shop_type",
                  "shop_tier",
                  "region_id",
                  "player_reputation"
                ],
                "is_async": false
              },
              {
                "name": "get_shop_specialization_bonus",
                "line": 575,
                "args": [
                  "shop_type",
                  "item"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 24,
                "args": [
                  "self",
                  "shop_type",
                  "modifiers"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 32,
                "args": [
                  "self",
                  "region_id",
                  "factors"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ShopSpecialization",
                "line": 21,
                "bases": [],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "EconomicFactors",
                "line": 29,
                "bases": [],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "ShopError",
                "line": 38,
                "bases": [
                  "Exception"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "loot_events.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Union"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 14
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 15
              }
            ],
            "functions": [
              {
                "name": "create_loot_generated_event",
                "line": 462,
                "args": [
                  "location",
                  "loot_bundle",
                  "generation_context",
                  "source_type",
                  "player_id",
                  "session_id"
                ],
                "is_async": false
              },
              {
                "name": "create_item_identification_event",
                "line": 481,
                "args": [
                  "item",
                  "player_context",
                  "identification_method",
                  "skill_level"
                ],
                "is_async": false
              },
              {
                "name": "create_item_enhancement_event",
                "line": 496,
                "args": [
                  "item",
                  "enhancement_type",
                  "enhancement_level",
                  "materials_used",
                  "enhancer_skill"
                ],
                "is_async": false
              },
              {
                "name": "create_shop_inventory_event",
                "line": 513,
                "args": [
                  "shop",
                  "inventory_changes",
                  "economic_context",
                  "restock_reason"
                ],
                "is_async": false
              },
              {
                "name": "create_shop_transaction_event",
                "line": 528,
                "args": [
                  "shop",
                  "item",
                  "player",
                  "transaction_type",
                  "price",
                  "quantity"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 86,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 103,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 150,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 166,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 221,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 237,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 299,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 306,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 375,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 391,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 444,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "publish_loot_generated",
                "line": 552,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "publish_item_identification",
                "line": 560,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "publish_item_enhancement",
                "line": 568,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "publish_shop_inventory",
                "line": 576,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "publish_shop_transaction",
                "line": 584,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "publish_loot_analytics",
                "line": 592,
                "args": [
                  "event"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventBase",
                "line": 21,
                "bases": [],
                "methods": []
              },
              {
                "name": "LootEventType",
                "line": 26,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "IdentificationResult",
                "line": 36,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "EnhancementResult",
                "line": 44,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "TransactionType",
                "line": 53,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "LootGeneratedEvent",
                "line": 62,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "ItemIdentificationEvent",
                "line": 122,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "ItemEnhancementEvent",
                "line": 187,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "ShopInventoryEvent",
                "line": 262,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "ShopTransactionEvent",
                "line": 332,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "LootAnalyticsEvent",
                "line": 423,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "to_dict"
                ]
              },
              {
                "name": "LootEventPublisher",
                "line": 548,
                "bases": [],
                "methods": [
                  "publish_loot_generated",
                  "publish_item_identification",
                  "publish_item_enhancement",
                  "publish_shop_inventory",
                  "publish_shop_transaction",
                  "publish_loot_analytics"
                ]
              }
            ]
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models_old/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.loot.base",
                "names": [
                  "LootBase"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.item",
                "names": [
                  "BaseItem",
                  "RarityTier"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.location",
                "names": [
                  "Location",
                  "LocationType",
                  "Container",
                  "ContainerType",
                  "ContainerContent"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.shop",
                "names": [
                  "Shop",
                  "ShopType",
                  "ShopInventory"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.loot.history",
                "names": [
                  "LootHistory",
                  "LootSourceType",
                  "LootAnalytics",
                  "MetricType"
                ],
                "line": 11
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "models_old/location.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models_old/shop.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models_old/item.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "hashlib",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py"
          },
          {
            "type": "non_canonical_import",
            "import": "hashlib",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/loot/events.py"
          },
          {
            "type": "non_canonical_import",
            "import": "hashlib",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
          },
          {
            "type": "non_canonical_import",
            "import": "threading",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_manager.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 14,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "storage": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/storage",
        "files": [
          "services.py",
          "models.py",
          "__init__.py",
          "routers/__init__.py",
          "utils/__init__.py",
          "repositories/__init__.py",
          "models/storage_config.py",
          "models/storage_bucket.py",
          "models/__init__.py",
          "models/file_record.py",
          "models/cache_entry.py",
          "schemas/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.storage.models",
                "names": [
                  "StorageEntity",
                  "StorageModel",
                  "CreateStorageRequest",
                  "UpdateStorageRequest",
                  "StorageResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "StorageNotFoundError",
                  "StorageValidationError",
                  "StorageConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_storage_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "StorageService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104f87820>"
                ],
                "methods": [
                  "__init__",
                  "create_storage",
                  "get_storage_by_id",
                  "update_storage",
                  "delete_storage",
                  "list_storages",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_storage_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "StorageBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "StorageModel",
                "line": 36,
                "bases": [
                  "StorageBaseModel"
                ],
                "methods": []
              },
              {
                "name": "StorageEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateStorageRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateStorageRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "StorageResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "StorageListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.storage.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.storage.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.storage.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/storage_config.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models/storage_bucket.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.storage.models.storage_config",
                "names": [
                  "StorageConfig",
                  "StorageProvider",
                  "StorageType"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.storage.models.file_record",
                "names": [
                  "FileRecord",
                  "FileType",
                  "FileStatus"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.storage.models.storage_bucket",
                "names": [
                  "StorageBucket",
                  "BucketType",
                  "BucketStatus"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.storage.models.cache_entry",
                "names": [
                  "CacheEntry",
                  "CachePolicy",
                  "CacheStatus"
                ],
                "line": 10
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/file_record.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models/cache_entry.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": false,
        "has_schemas": false,
        "import_issues": [],
        "syntax_errors": [],
        "missing_components": []
      },
      "time": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/time",
        "files": [
          "services.py",
          "models.py",
          "__init__.py",
          "routers/__init__.py",
          "routers/time_router.py",
          "utils/__init__.py",
          "utils/time_utils.py",
          "repositories/time_repository.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "models/time_model.py",
          "schemas/__init__.py",
          "services/__init__.py",
          "services/time_manager.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.time.models",
                "names": [
                  "TimeEntity",
                  "TimeModel",
                  "CreateTimeRequest",
                  "UpdateTimeRequest",
                  "TimeResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "TimeNotFoundError",
                  "TimeValidationError",
                  "TimeConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_time_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "TimeService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x1050337f0>"
                ],
                "methods": [
                  "__init__",
                  "create_time",
                  "get_time_by_id",
                  "update_time",
                  "delete_time",
                  "list_times",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_time_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "TimeBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "TimeModel",
                "line": 36,
                "bases": [
                  "TimeBaseModel"
                ],
                "methods": []
              },
              {
                "name": "TimeEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateTimeRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateTimeRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "TimeResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "TimeListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.time.models.time_model",
                "names": [
                  "GameTime",
                  "Calendar",
                  "TimeConfig",
                  "TimeEvent",
                  "EventType",
                  "Season",
                  "TimeUnit",
                  "WeatherCondition",
                  "CalendarEvent",
                  "WorldTime"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.time.utils.time_utils",
                "names": [
                  "get_time_of_day_name",
                  "is_daytime",
                  "time_since",
                  "format_time_since",
                  "time_to_string",
                  "calculate_time_difference",
                  "format_time_difference",
                  "format_time_remaining",
                  "convert_time_units",
                  "parse_time_string",
                  "is_valid_date",
                  "get_date_string",
                  "is_same_day",
                  "is_same_month",
                  "time_in_range"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.time.services.time_manager",
                "names": [
                  "TimeManager",
                  "EventScheduler",
                  "CalendarService"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.time.repositories.time_repository",
                "names": [
                  "TimeRepository"
                ],
                "line": 23
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.time.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.time.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.time.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.time.routers.time_router",
                "names": [
                  "router"
                ],
                "line": 12
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/time_router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "Query"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Union",
                  "Dict",
                  "Any"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "backend.systems.time",
                "names": [
                  "TimeManager",
                  "GameTime",
                  "TimeEvent",
                  "TimeUnit",
                  "Season",
                  "Calendar",
                  "WorldTime",
                  "CalendarEvent",
                  "EventType"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.time.utils.time_utils",
                "names": [
                  "get_current_time",
                  "get_current_season",
                  "get_formatted_time",
                  "time_to_string",
                  "calculate_season",
                  "convert_time_units",
                  "format_time_remaining"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/time_utils.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "repositories/time_repository.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 1
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 2
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any",
                  "Union"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "backend.systems.time.models.time_model",
                "names": [
                  "GameTime",
                  "Calendar",
                  "TimeConfig",
                  "TimeEvent",
                  "EventType",
                  "Season"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 152
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 18,
                "args": [
                  "self",
                  "data_dir"
                ],
                "is_async": false
              },
              {
                "name": "save_game_time",
                "line": 34,
                "args": [
                  "self",
                  "game_time"
                ],
                "is_async": false
              },
              {
                "name": "load_game_time",
                "line": 44,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "save_calendar",
                "line": 61,
                "args": [
                  "self",
                  "calendar"
                ],
                "is_async": false
              },
              {
                "name": "load_calendar",
                "line": 71,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "save_config",
                "line": 88,
                "args": [
                  "self",
                  "config"
                ],
                "is_async": false
              },
              {
                "name": "load_config",
                "line": 98,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "save_events",
                "line": 115,
                "args": [
                  "self",
                  "events"
                ],
                "is_async": false
              },
              {
                "name": "load_events",
                "line": 137,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "save_all",
                "line": 166,
                "args": [
                  "self",
                  "game_time",
                  "calendar",
                  "config",
                  "events"
                ],
                "is_async": false
              },
              {
                "name": "load_all",
                "line": 181,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "create_backup",
                "line": 195,
                "args": [
                  "self",
                  "backup_name"
                ],
                "is_async": false
              },
              {
                "name": "restore_backup",
                "line": 219,
                "args": [
                  "self",
                  "backup_name"
                ],
                "is_async": false
              },
              {
                "name": "get_available_backups",
                "line": 241,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "TimeRepository",
                "line": 11,
                "bases": [],
                "methods": [
                  "__init__",
                  "save_game_time",
                  "load_game_time",
                  "save_calendar",
                  "load_calendar",
                  "save_config",
                  "load_config",
                  "save_events",
                  "load_events",
                  "save_all",
                  "load_all",
                  "create_backup",
                  "restore_backup",
                  "get_available_backups"
                ]
              }
            ]
          },
          {
            "file": "repositories/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.time.repositories.time_repository",
                "names": [
                  "TimeRepository"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.time.models.time_model",
                "names": [
                  "GameTime",
                  "Calendar",
                  "TimeConfig",
                  "TimeEvent",
                  "EventType",
                  "Season",
                  "TimeUnit",
                  "WeatherCondition",
                  "CalendarEvent",
                  "WorldTime"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/time_model.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.time.services.time_manager",
                "names": [
                  "TimeManager"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/time_manager.py",
            "imports": [
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 1
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 2
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 3
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "heapq",
                "names": [
                  "heappush",
                  "heappop"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Callable",
                  "Tuple",
                  "Any",
                  "Union"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.time.models.time_model",
                "names": [
                  "GameTime",
                  "Calendar",
                  "TimeConfig",
                  "TimeEvent",
                  "EventType",
                  "Season",
                  "TimeUnit"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 19,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "schedule_event",
                "line": 25,
                "args": [
                  "self",
                  "event_type",
                  "callback_name",
                  "callback_data",
                  "trigger_time",
                  "time_offset",
                  "recurrence_interval",
                  "priority"
                ],
                "is_async": false
              },
              {
                "name": "cancel_event",
                "line": 85,
                "args": [
                  "self",
                  "event_id"
                ],
                "is_async": false
              },
              {
                "name": "register_callback",
                "line": 94,
                "args": [
                  "self",
                  "callback_name",
                  "callback_func"
                ],
                "is_async": false
              },
              {
                "name": "unregister_callback",
                "line": 99,
                "args": [
                  "self",
                  "callback_name"
                ],
                "is_async": false
              },
              {
                "name": "get_event",
                "line": 107,
                "args": [
                  "self",
                  "event_id"
                ],
                "is_async": false
              },
              {
                "name": "get_events",
                "line": 111,
                "args": [
                  "self",
                  "upcoming_only"
                ],
                "is_async": false
              },
              {
                "name": "process_events_due",
                "line": 121,
                "args": [
                  "self",
                  "current_time"
                ],
                "is_async": false
              },
              {
                "name": "_execute_event_callback",
                "line": 163,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 179,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "calendar",
                "line": 183,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "configure_calendar",
                "line": 187,
                "args": [
                  "self",
                  "days_per_month",
                  "months_per_year",
                  "leap_year_interval",
                  "has_leap_year"
                ],
                "is_async": false
              },
              {
                "name": "add_important_date",
                "line": 209,
                "args": [
                  "self",
                  "name",
                  "month",
                  "day",
                  "year"
                ],
                "is_async": false
              },
              {
                "name": "remove_important_date",
                "line": 229,
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false
              },
              {
                "name": "get_important_dates_for_date",
                "line": 237,
                "args": [
                  "self",
                  "year",
                  "month",
                  "day"
                ],
                "is_async": false
              },
              {
                "name": "update_calendar_from_game_time",
                "line": 249,
                "args": [
                  "self",
                  "game_time"
                ],
                "is_async": false
              },
              {
                "name": "calculate_season",
                "line": 253,
                "args": [
                  "self",
                  "day_of_year"
                ],
                "is_async": false
              },
              {
                "name": "get_days_in_month",
                "line": 268,
                "args": [
                  "self",
                  "month",
                  "year"
                ],
                "is_async": false
              },
              {
                "name": "is_special_date",
                "line": 275,
                "args": [
                  "self",
                  "date"
                ],
                "is_async": false
              },
              {
                "name": "_is_leap_year",
                "line": 282,
                "args": [
                  "self",
                  "year"
                ],
                "is_async": false
              },
              {
                "name": "__new__",
                "line": 296,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 302,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "game_time",
                "line": 321,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_time",
                "line": 325,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "calendar",
                "line": 330,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_calendar",
                "line": 334,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "config",
                "line": 339,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "start_time_progression",
                "line": 343,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "stop_time_progression",
                "line": 350,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "set_time_scale",
                "line": 356,
                "args": [
                  "self",
                  "scale"
                ],
                "is_async": false
              },
              {
                "name": "pause",
                "line": 363,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "resume",
                "line": 368,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "set_time",
                "line": 374,
                "args": [
                  "self",
                  "game_time"
                ],
                "is_async": false
              },
              {
                "name": "advance_time",
                "line": 391,
                "args": [
                  "self",
                  "amount",
                  "unit"
                ],
                "is_async": false
              },
              {
                "name": "schedule_event",
                "line": 435,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "cancel_event",
                "line": 439,
                "args": [
                  "self",
                  "event_id"
                ],
                "is_async": false
              },
              {
                "name": "register_callback",
                "line": 443,
                "args": [
                  "self",
                  "callback_name",
                  "callback_func"
                ],
                "is_async": false
              },
              {
                "name": "unregister_callback",
                "line": 447,
                "args": [
                  "self",
                  "callback_name"
                ],
                "is_async": false
              },
              {
                "name": "get_event",
                "line": 451,
                "args": [
                  "self",
                  "event_id"
                ],
                "is_async": false
              },
              {
                "name": "get_events",
                "line": 455,
                "args": [
                  "self",
                  "upcoming_only"
                ],
                "is_async": false
              },
              {
                "name": "configure_calendar",
                "line": 460,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "add_important_date",
                "line": 464,
                "args": [
                  "self",
                  "name",
                  "month",
                  "day",
                  "year"
                ],
                "is_async": false
              },
              {
                "name": "remove_important_date",
                "line": 468,
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false
              },
              {
                "name": "get_important_dates_for_date",
                "line": 472,
                "args": [
                  "self",
                  "year",
                  "month",
                  "day"
                ],
                "is_async": false
              },
              {
                "name": "get_current_time_formatted",
                "line": 476,
                "args": [
                  "self",
                  "include_date"
                ],
                "is_async": false
              },
              {
                "name": "get_days_in_month",
                "line": 483,
                "args": [
                  "self",
                  "month",
                  "year"
                ],
                "is_async": false
              },
              {
                "name": "is_special_date",
                "line": 487,
                "args": [
                  "self",
                  "date"
                ],
                "is_async": false
              },
              {
                "name": "get_current_season",
                "line": 491,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_current_weather",
                "line": 495,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_current_temperature",
                "line": 500,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_weather_last_changed",
                "line": 505,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "save_state",
                "line": 510,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "reset",
                "line": 517,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_advance_ticks",
                "line": 554,
                "args": [
                  "self",
                  "ticks"
                ],
                "is_async": false
              },
              {
                "name": "_advance_seconds",
                "line": 564,
                "args": [
                  "self",
                  "seconds"
                ],
                "is_async": false
              },
              {
                "name": "_advance_minutes",
                "line": 574,
                "args": [
                  "self",
                  "minutes"
                ],
                "is_async": false
              },
              {
                "name": "_advance_hours",
                "line": 584,
                "args": [
                  "self",
                  "hours"
                ],
                "is_async": false
              },
              {
                "name": "_advance_days",
                "line": 594,
                "args": [
                  "self",
                  "days"
                ],
                "is_async": false
              },
              {
                "name": "_advance_months",
                "line": 605,
                "args": [
                  "self",
                  "months"
                ],
                "is_async": false
              },
              {
                "name": "_advance_years",
                "line": 615,
                "args": [
                  "self",
                  "years"
                ],
                "is_async": false
              },
              {
                "name": "_update_season",
                "line": 619,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_emit_season_changed",
                "line": 628,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventScheduler",
                "line": 14,
                "bases": [],
                "methods": [
                  "__init__",
                  "schedule_event",
                  "cancel_event",
                  "register_callback",
                  "unregister_callback",
                  "get_event",
                  "get_events",
                  "process_events_due",
                  "_execute_event_callback"
                ]
              },
              {
                "name": "CalendarService",
                "line": 174,
                "bases": [],
                "methods": [
                  "__init__",
                  "calendar",
                  "configure_calendar",
                  "add_important_date",
                  "remove_important_date",
                  "get_important_dates_for_date",
                  "update_calendar_from_game_time",
                  "calculate_season",
                  "get_days_in_month",
                  "is_special_date",
                  "_is_leap_year"
                ]
              },
              {
                "name": "TimeManager",
                "line": 288,
                "bases": [],
                "methods": [
                  "__new__",
                  "__init__",
                  "game_time",
                  "get_time",
                  "calendar",
                  "get_calendar",
                  "config",
                  "start_time_progression",
                  "stop_time_progression",
                  "set_time_scale",
                  "pause",
                  "resume",
                  "set_time",
                  "advance_time",
                  "schedule_event",
                  "cancel_event",
                  "register_callback",
                  "unregister_callback",
                  "get_event",
                  "get_events",
                  "configure_calendar",
                  "add_important_date",
                  "remove_important_date",
                  "get_important_dates_for_date",
                  "get_current_time_formatted",
                  "get_days_in_month",
                  "is_special_date",
                  "get_current_season",
                  "get_current_weather",
                  "get_current_temperature",
                  "get_weather_last_changed",
                  "save_state",
                  "reset",
                  "_tick_loop",
                  "_advance_ticks",
                  "_advance_seconds",
                  "_advance_minutes",
                  "_advance_hours",
                  "_advance_days",
                  "_advance_months",
                  "_advance_years",
                  "_update_season",
                  "_emit_season_changed"
                ]
              }
            ]
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": true,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "heapq",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "population": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/population",
        "files": [
          "services.py",
          "models.py",
          "__init__.py",
          "routers/__init__.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.population.models",
                "names": [
                  "PopulationEntity",
                  "PopulationModel",
                  "CreatePopulationRequest",
                  "UpdatePopulationRequest",
                  "PopulationResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "PopulationNotFoundError",
                  "PopulationValidationError",
                  "PopulationConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_population_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "PopulationService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x1050137f0>"
                ],
                "methods": [
                  "__init__",
                  "create_population",
                  "get_population_by_id",
                  "update_population",
                  "delete_population",
                  "list_populations",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_population_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "PopulationBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "PopulationModel",
                "line": 36,
                "bases": [
                  "PopulationBaseModel"
                ],
                "methods": []
              },
              {
                "name": "PopulationEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreatePopulationRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdatePopulationRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "PopulationResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "PopulationListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.population.models",
                "names": [
                  "POIType",
                  "POIState",
                  "POIPopulation",
                  "PopulationConfig",
                  "PopulationChangedEvent",
                  "PopulationChangeRequest",
                  "GlobalMultiplierRequest",
                  "BaseRateRequest"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.population.service",
                "names": [
                  "PopulationService",
                  "population_service"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.population.router",
                "names": [
                  "router"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.population.events",
                "names": [
                  "PopulationEventType",
                  "PopulationEventBase",
                  "PopulationChangedEventData",
                  "PopulationStateChangedEventData",
                  "PopulationCatastropheEventData",
                  "PopulationWarImpactEventData",
                  "PopulationEvent",
                  "PopulationChangedEvent",
                  "PopulationStateChangedEvent",
                  "PopulationCatastropheEvent",
                  "PopulationWarImpactEvent"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.population.utils",
                "names": [
                  "calculate_growth_rate",
                  "calculate_next_state",
                  "estimate_population_timeline",
                  "calculate_target_population"
                ],
                "line": 36
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.population.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.population.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.population.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": false,
        "has_schemas": false,
        "import_issues": [],
        "syntax_errors": [],
        "missing_components": []
      },
      "dialogue": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/dialogue",
        "files": [
          "analytics_integration.py",
          "quest_integration.py",
          "dialogue_system_new.py",
          "services.py",
          "population_integration.py",
          "time_integration.py",
          "war_integration.py",
          "models.py",
          "dialogue_system.py",
          "conversation.py",
          "region_integration.py",
          "poi_integration.py",
          "__init__.py",
          "faction_integration.py",
          "memory_integration.py",
          "world_state_integration.py",
          "rumor_integration.py",
          "relationship_integration.py",
          "dialogue_manager.py",
          "motif_integration.py",
          "routers/__init__.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "analytics_integration.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Set"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.analytics.analytics_manager",
                "names": [
                  "AnalyticsManager"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.analytics.event_logger",
                "names": [
                  "EventLogger"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 30,
                "args": [
                  "self",
                  "analytics_manager",
                  "event_logger"
                ],
                "is_async": false
              },
              {
                "name": "log_dialogue_event",
                "line": 50,
                "args": [
                  "self",
                  "event_type",
                  "dialogue_data",
                  "player_id",
                  "character_id",
                  "location_id",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "export_dialogue_for_training",
                "line": 106,
                "args": [
                  "self",
                  "start_time",
                  "end_time",
                  "limit",
                  "export_path"
                ],
                "is_async": false
              },
              {
                "name": "track_dialogue_topic",
                "line": 201,
                "args": [
                  "self",
                  "topic",
                  "subtopics",
                  "player_id",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "log_player_response_choice",
                "line": 253,
                "args": [
                  "self",
                  "player_id",
                  "character_id",
                  "conversation_id",
                  "options",
                  "chosen_option_index",
                  "response_time"
                ],
                "is_async": false
              },
              {
                "name": "track_character_interaction_frequency",
                "line": 320,
                "args": [
                  "self",
                  "player_id",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "get_dialogue_metrics",
                "line": 352,
                "args": [
                  "self",
                  "metric_type"
                ],
                "is_async": false
              },
              {
                "name": "record_dialogue_quality_rating",
                "line": 379,
                "args": [
                  "self",
                  "conversation_id",
                  "rating",
                  "feedback",
                  "player_id"
                ],
                "is_async": false
              },
              {
                "name": "get_player_dialogue_history",
                "line": 425,
                "args": [
                  "self",
                  "player_id",
                  "character_id",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "_update_dialogue_metrics",
                "line": 519,
                "args": [
                  "self",
                  "event_type",
                  "dialogue_data",
                  "character_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DialogueAnalyticsIntegration",
                "line": 22,
                "bases": [],
                "methods": [
                  "__init__",
                  "log_dialogue_event",
                  "export_dialogue_for_training",
                  "track_dialogue_topic",
                  "log_player_response_choice",
                  "track_character_interaction_frequency",
                  "get_dialogue_metrics",
                  "record_dialogue_quality_rating",
                  "get_player_dialogue_history",
                  "_update_dialogue_metrics"
                ]
              }
            ]
          },
          {
            "file": "quest_integration.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "dialogue_system_new.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Callable"
                ],
                "line": 20
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 21
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 22
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 23
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.memory_integration",
                "names": [
                  "DialogueMemoryIntegration"
                ],
                "line": 26
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.rumor_integration",
                "names": [
                  "DialogueRumorIntegration"
                ],
                "line": 27
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.motif_integration",
                "names": [
                  "DialogueMotifIntegration"
                ],
                "line": 28
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.faction_integration",
                "names": [
                  "DialogueFactionIntegration"
                ],
                "line": 29
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.population_integration",
                "names": [
                  "DialoguePopulationIntegration"
                ],
                "line": 30
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.world_state_integration",
                "names": [
                  "DialogueWorldStateIntegration"
                ],
                "line": 31
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.time_integration",
                "names": [
                  "DialogueTimeIntegration"
                ],
                "line": 32
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.poi_integration",
                "names": [
                  "DialoguePOIIntegration"
                ],
                "line": 33
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.quest_integration",
                "names": [
                  "DialogueQuestIntegration"
                ],
                "line": 34
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.region_integration",
                "names": [
                  "DialogueRegionIntegration"
                ],
                "line": 35
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.war_integration",
                "names": [
                  "DialogueWarIntegration"
                ],
                "line": 36
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.relationship_integration",
                "names": [
                  "DialogueRelationshipIntegration"
                ],
                "line": 37
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.analytics_integration",
                "names": [
                  "DialogueAnalyticsIntegration"
                ],
                "line": 38
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.events",
                "names": [
                  "DialogueEventEmitter",
                  "DialogueStartedEvent",
                  "DialogueMessageEvent",
                  "DialogueEndedEvent"
                ],
                "line": 39
              },
              {
                "type": "from_import",
                "module": "backend.systems.language.language_generator",
                "names": [
                  "LanguageGenerator"
                ],
                "line": 42
              },
              {
                "type": "from_import",
                "module": "backend.systems.memory.memory_manager",
                "names": [
                  "MemoryManager"
                ],
                "line": 908
              },
              {
                "type": "from_import",
                "module": "backend.systems.rumors.rumor_manager",
                "names": [
                  "RumorManager"
                ],
                "line": 909
              },
              {
                "type": "from_import",
                "module": "backend.systems.motifs.motif_manager",
                "names": [
                  "MotifManager"
                ],
                "line": 910
              },
              {
                "type": "from_import",
                "module": "backend.systems.factions.faction_manager",
                "names": [
                  "FactionManager"
                ],
                "line": 911
              },
              {
                "type": "from_import",
                "module": "backend.systems.population.population_manager",
                "names": [
                  "PopulationManager"
                ],
                "line": 912
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.world_state_manager",
                "names": [
                  "WorldStateManager"
                ],
                "line": 913
              },
              {
                "type": "from_import",
                "module": "backend.systems.time.time_manager",
                "names": [
                  "TimeManager"
                ],
                "line": 914
              },
              {
                "type": "from_import",
                "module": "backend.systems.locations.poi_manager",
                "names": [
                  "POIManager"
                ],
                "line": 915
              },
              {
                "type": "from_import",
                "module": "backend.systems.quests.quest_manager",
                "names": [
                  "QuestManager"
                ],
                "line": 916
              },
              {
                "type": "from_import",
                "module": "backend.systems.regions.region_manager",
                "names": [
                  "RegionManager"
                ],
                "line": 917
              },
              {
                "type": "from_import",
                "module": "backend.systems.factions.war_manager",
                "names": [
                  "WarManager"
                ],
                "line": 918
              },
              {
                "type": "from_import",
                "module": "backend.systems.characters.relationship_manager",
                "names": [
                  "RelationshipManager"
                ],
                "line": 919
              },
              {
                "type": "from_import",
                "module": "backend.systems.analytics.analytics_manager",
                "names": [
                  "AnalyticsManager"
                ],
                "line": 920
              },
              {
                "type": "from_import",
                "module": "backend.systems.language.language_generator",
                "names": [
                  "LanguageGenerator"
                ],
                "line": 938
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.events",
                "names": [
                  "DialogueEventEmitter"
                ],
                "line": 942
              }
            ],
            "functions": [
              {
                "name": "get_dialogue_system",
                "line": 897,
                "args": [],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 55,
                "args": [
                  "self",
                  "conversation_id",
                  "participants",
                  "location_id",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "add_message",
                "line": 85,
                "args": [
                  "self",
                  "sender_id",
                  "content",
                  "message_type",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "get_context",
                "line": 133,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "end_conversation",
                "line": 142,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "is_active",
                "line": 157,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "add_to_context",
                "line": 166,
                "args": [
                  "self",
                  "key",
                  "value"
                ],
                "is_async": false
              },
              {
                "name": "_update_recent_messages",
                "line": 176,
                "args": [
                  "self",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 194,
                "args": [
                  "self",
                  "memory_integration",
                  "rumor_integration",
                  "motif_integration",
                  "faction_integration",
                  "population_integration",
                  "world_state_integration",
                  "time_integration",
                  "poi_integration",
                  "quest_integration",
                  "region_integration",
                  "war_integration",
                  "relationship_integration",
                  "analytics_integration",
                  "language_generator",
                  "event_emitter"
                ],
                "is_async": false
              },
              {
                "name": "start_conversation",
                "line": 256,
                "args": [
                  "self",
                  "participants",
                  "location_id",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "send_message",
                "line": 296,
                "args": [
                  "self",
                  "conversation_id",
                  "sender_id",
                  "content",
                  "message_type",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "generate_response",
                "line": 350,
                "args": [
                  "self",
                  "conversation_id",
                  "responder_id",
                  "target_id",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "end_conversation",
                "line": 424,
                "args": [
                  "self",
                  "conversation_id",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "get_conversation_context",
                "line": 464,
                "args": [
                  "self",
                  "conversation_id"
                ],
                "is_async": false
              },
              {
                "name": "_enhance_conversation_context",
                "line": 482,
                "args": [
                  "self",
                  "conversation"
                ],
                "is_async": false
              },
              {
                "name": "_process_message_with_integrations",
                "line": 578,
                "args": [
                  "self",
                  "conversation",
                  "message"
                ],
                "is_async": false
              },
              {
                "name": "_get_response_context",
                "line": 654,
                "args": [
                  "self",
                  "conversation",
                  "responder_id",
                  "target_id"
                ],
                "is_async": false
              },
              {
                "name": "_process_conversation_end",
                "line": 793,
                "args": [
                  "self",
                  "conversation",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "_calculate_conversation_duration",
                "line": 868,
                "args": [
                  "self",
                  "conversation"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Conversation",
                "line": 47,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_message",
                  "get_context",
                  "end_conversation",
                  "is_active",
                  "add_to_context",
                  "_update_recent_messages"
                ]
              },
              {
                "name": "DialogueSystem",
                "line": 186,
                "bases": [],
                "methods": [
                  "__init__",
                  "start_conversation",
                  "send_message",
                  "generate_response",
                  "end_conversation",
                  "get_conversation_context",
                  "_enhance_conversation_context",
                  "_process_message_with_integrations",
                  "_get_response_context",
                  "_process_conversation_end",
                  "_calculate_conversation_duration"
                ]
              }
            ]
          },
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.models",
                "names": [
                  "DialogueEntity",
                  "DialogueModel",
                  "CreateDialogueRequest",
                  "UpdateDialogueRequest",
                  "DialogueResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "DialogueNotFoundError",
                  "DialogueValidationError",
                  "DialogueConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_dialogue_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DialogueService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x105034be0>"
                ],
                "methods": [
                  "__init__",
                  "create_dialogue",
                  "get_dialogue_by_id",
                  "update_dialogue",
                  "delete_dialogue",
                  "list_dialogues",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_dialogue_statistics"
                ]
              }
            ]
          },
          {
            "file": "population_integration.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Set"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.population.population_manager",
                "names": [
                  "PopulationManager"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 26,
                "args": [
                  "self",
                  "population_manager"
                ],
                "is_async": false
              },
              {
                "name": "add_population_data_to_context",
                "line": 35,
                "args": [
                  "self",
                  "context",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "get_location_population_data",
                "line": 62,
                "args": [
                  "self",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "get_occupation_dialogue",
                "line": 102,
                "args": [
                  "self",
                  "character_id",
                  "occupation_type"
                ],
                "is_async": false
              },
              {
                "name": "get_social_status_dialogue",
                "line": 144,
                "args": [
                  "self",
                  "character_id",
                  "target_id"
                ],
                "is_async": false
              },
              {
                "name": "modify_dialogue_for_demographics",
                "line": 220,
                "args": [
                  "self",
                  "message",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "generate_demographic_comment",
                "line": 275,
                "args": [
                  "self",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "generate_occupation_comment",
                "line": 335,
                "args": [
                  "self",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "_generate_occupation_dialogue",
                "line": 384,
                "args": [
                  "self",
                  "occupation_type"
                ],
                "is_async": false
              },
              {
                "name": "_get_character_social_status",
                "line": 611,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_most_notable_demographic",
                "line": 677,
                "args": [
                  "self",
                  "demographics"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DialoguePopulationIntegration",
                "line": 18,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_population_data_to_context",
                  "get_location_population_data",
                  "get_occupation_dialogue",
                  "get_social_status_dialogue",
                  "modify_dialogue_for_demographics",
                  "generate_demographic_comment",
                  "generate_occupation_comment",
                  "_generate_occupation_dialogue",
                  "_get_character_social_status",
                  "_get_most_notable_demographic"
                ]
              }
            ]
          },
          {
            "file": "time_integration.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Set"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.calendar.calendar_manager",
                "names": [
                  "CalendarManager"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.calendar.time_manager",
                "names": [
                  "TimeManager"
                ],
                "line": 15
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 28,
                "args": [
                  "self",
                  "calendar_manager",
                  "time_manager"
                ],
                "is_async": false
              },
              {
                "name": "add_time_context_to_dialogue",
                "line": 39,
                "args": [
                  "self",
                  "context",
                  "location_id",
                  "include_events",
                  "events_lookahead_days",
                  "include_season"
                ],
                "is_async": false
              },
              {
                "name": "get_time_references_for_dialogue",
                "line": 88,
                "args": [
                  "self",
                  "reference_type",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "get_event_dialogue_context",
                "line": 123,
                "args": [
                  "self",
                  "event_id",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "get_time_sensitive_dialogue_options",
                "line": 169,
                "args": [
                  "self",
                  "character_id",
                  "location_id",
                  "dialogue_type"
                ],
                "is_async": false
              },
              {
                "name": "_get_current_time_info",
                "line": 241,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_get_season_info",
                "line": 276,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_get_upcoming_events",
                "line": 303,
                "args": [
                  "self",
                  "location_id",
                  "days_ahead"
                ],
                "is_async": false
              },
              {
                "name": "_get_current_festival_info",
                "line": 365,
                "args": [
                  "self",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_day_period_info",
                "line": 415,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_get_weather_info",
                "line": 452,
                "args": [
                  "self",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_time_of_day",
                "line": 484,
                "args": [
                  "self",
                  "hour"
                ],
                "is_async": false
              },
              {
                "name": "_is_daytime",
                "line": 503,
                "args": [
                  "self",
                  "hour"
                ],
                "is_async": false
              },
              {
                "name": "_get_typical_activities_for_time",
                "line": 515,
                "args": [
                  "self",
                  "time_of_day"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DialogueTimeIntegration",
                "line": 20,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_time_context_to_dialogue",
                  "get_time_references_for_dialogue",
                  "get_event_dialogue_context",
                  "get_time_sensitive_dialogue_options",
                  "_get_current_time_info",
                  "_get_season_info",
                  "_get_upcoming_events",
                  "_get_current_festival_info",
                  "_get_day_period_info",
                  "_get_weather_info",
                  "_get_time_of_day",
                  "_is_daytime",
                  "_get_typical_activities_for_time"
                ]
              }
            ]
          },
          {
            "file": "war_integration.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DialogueBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "DialogueModel",
                "line": 36,
                "bases": [
                  "DialogueBaseModel"
                ],
                "methods": []
              },
              {
                "name": "DialogueEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateDialogueRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateDialogueRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "DialogueResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "DialogueListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "dialogue_system.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "conversation.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any",
                  "Optional",
                  "Callable"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.utils",
                "names": [
                  "count_tokens",
                  "extract_key_info"
                ],
                "line": 12
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 18,
                "args": [
                  "self",
                  "speaker",
                  "message",
                  "timestamp",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 24,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 34,
                "args": [
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 48,
                "args": [
                  "self",
                  "max_tokens",
                  "max_messages"
                ],
                "is_async": false
              },
              {
                "name": "add_entry",
                "line": 54,
                "args": [
                  "self",
                  "speaker",
                  "message",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "_enforce_limits",
                "line": 67,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_context_window",
                "line": 84,
                "args": [
                  "self",
                  "scoring_fn",
                  "by_tokens"
                ],
                "is_async": false
              },
              {
                "name": "extract_key_info",
                "line": 113,
                "args": [
                  "self",
                  "extractor_fn"
                ],
                "is_async": false
              },
              {
                "name": "to_json",
                "line": 126,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_json",
                "line": 131,
                "args": [
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "save",
                "line": 138,
                "args": [
                  "self",
                  "filepath"
                ],
                "is_async": false
              },
              {
                "name": "load",
                "line": 144,
                "args": [
                  "filepath"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ConversationEntry",
                "line": 14,
                "bases": [],
                "methods": [
                  "__init__",
                  "to_dict",
                  "from_dict"
                ]
              },
              {
                "name": "ConversationHistory",
                "line": 43,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_entry",
                  "_enforce_limits",
                  "get_context_window",
                  "extract_key_info",
                  "to_json",
                  "from_json",
                  "save",
                  "load"
                ]
              }
            ]
          },
          {
            "file": "region_integration.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "poi_integration.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Set"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.poi.poi_manager",
                "names": [
                  "POIManager"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.poi.settlement_manager",
                "names": [
                  "SettlementManager"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 27,
                "args": [
                  "self",
                  "poi_manager",
                  "settlement_manager"
                ],
                "is_async": false
              },
              {
                "name": "add_poi_context_to_dialogue",
                "line": 38,
                "args": [
                  "self",
                  "context",
                  "location_id",
                  "include_nearby",
                  "nearby_radius",
                  "include_details"
                ],
                "is_async": false
              },
              {
                "name": "get_location_state_for_dialogue",
                "line": 90,
                "args": [
                  "self",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "get_settlement_dialogue_context",
                "line": 128,
                "args": [
                  "self",
                  "settlement_id",
                  "include_details"
                ],
                "is_async": false
              },
              {
                "name": "get_poi_description_for_dialogue",
                "line": 188,
                "args": [
                  "self",
                  "poi_id",
                  "perspective",
                  "time_of_day"
                ],
                "is_async": false
              },
              {
                "name": "get_relevant_pois_for_dialogue",
                "line": 244,
                "args": [
                  "self",
                  "character_id",
                  "topic",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "_get_location_info",
                "line": 303,
                "args": [
                  "self",
                  "location_id",
                  "include_details"
                ],
                "is_async": false
              },
              {
                "name": "_get_nearby_locations",
                "line": 351,
                "args": [
                  "self",
                  "location_id",
                  "radius",
                  "include_details"
                ],
                "is_async": false
              },
              {
                "name": "_get_state_description",
                "line": 405,
                "args": [
                  "self",
                  "state"
                ],
                "is_async": false
              },
              {
                "name": "_get_state_visible_effects",
                "line": 428,
                "args": [
                  "self",
                  "state"
                ],
                "is_async": false
              },
              {
                "name": "_get_state_narrative",
                "line": 451,
                "args": [
                  "self",
                  "state"
                ],
                "is_async": false
              },
              {
                "name": "_get_time_based_poi_description",
                "line": 474,
                "args": [
                  "self",
                  "poi_id",
                  "time_of_day"
                ],
                "is_async": false
              },
              {
                "name": "_get_character_info",
                "line": 517,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DialoguePOIIntegration",
                "line": 19,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_poi_context_to_dialogue",
                  "get_location_state_for_dialogue",
                  "get_settlement_dialogue_context",
                  "get_poi_description_for_dialogue",
                  "get_relevant_pois_for_dialogue",
                  "_get_location_info",
                  "_get_nearby_locations",
                  "_get_state_description",
                  "_get_state_visible_effects",
                  "_get_state_narrative",
                  "_get_time_based_poi_description",
                  "_get_character_info"
                ]
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.dialogue_manager",
                "names": [
                  "DialogueManager"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.conversation",
                "names": [
                  "ConversationHistory",
                  "ConversationEntry"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.cache",
                "names": [
                  "DialogueCache"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.utils",
                "names": [
                  "count_tokens",
                  "relevance_score",
                  "extract_key_info",
                  "SCORING_WEIGHTS",
                  "IMPORTANT_SPEAKERS",
                  "KEYWORDS"
                ],
                "line": 11
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "faction_integration.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "memory_integration.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "world_state_integration.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Set"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.world.world_state_manager",
                "names": [
                  "WorldStateManager"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 26,
                "args": [
                  "self",
                  "world_state_manager"
                ],
                "is_async": false
              },
              {
                "name": "add_world_state_to_context",
                "line": 35,
                "args": [
                  "self",
                  "context",
                  "region_id",
                  "categories",
                  "max_vars"
                ],
                "is_async": false
              },
              {
                "name": "get_state_variable_for_dialogue",
                "line": 76,
                "args": [
                  "self",
                  "variable_key",
                  "region_id",
                  "default_value"
                ],
                "is_async": false
              },
              {
                "name": "get_state_history_for_dialogue",
                "line": 106,
                "args": [
                  "self",
                  "variable_key",
                  "region_id",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "update_world_state_from_dialogue",
                "line": 147,
                "args": [
                  "self",
                  "variable_key",
                  "new_value",
                  "region_id",
                  "category",
                  "source"
                ],
                "is_async": false
              },
              {
                "name": "_get_relevant_state_variables",
                "line": 185,
                "args": [
                  "self",
                  "region_id",
                  "categories",
                  "max_vars"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DialogueWorldStateIntegration",
                "line": 18,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_world_state_to_context",
                  "get_state_variable_for_dialogue",
                  "get_state_history_for_dialogue",
                  "update_world_state_from_dialogue",
                  "_get_relevant_state_variables"
                ]
              }
            ]
          },
          {
            "file": "rumor_integration.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Set"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 10
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.rumors.rumor_manager",
                "names": [
                  "RumorManager"
                ],
                "line": 15
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 28,
                "args": [
                  "self",
                  "rumor_manager"
                ],
                "is_async": false
              },
              {
                "name": "generate_rumor_from_dialogue",
                "line": 38,
                "args": [
                  "self",
                  "speaker_id",
                  "message",
                  "location_id",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "add_rumors_to_context",
                "line": 92,
                "args": [
                  "self",
                  "character_id",
                  "context",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "get_relevant_rumors",
                "line": 125,
                "args": [
                  "self",
                  "character_id",
                  "context",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "spread_rumor_via_dialogue",
                "line": 166,
                "args": [
                  "self",
                  "rumor_id",
                  "speaker_id",
                  "listener_id",
                  "belief_modifier"
                ],
                "is_async": false
              },
              {
                "name": "_evaluate_rumor_potential",
                "line": 203,
                "args": [
                  "self",
                  "message"
                ],
                "is_async": false
              },
              {
                "name": "_extract_rumor_content",
                "line": 235,
                "args": [
                  "self",
                  "message"
                ],
                "is_async": false
              },
              {
                "name": "_determine_veracity",
                "line": 276,
                "args": [
                  "self",
                  "message"
                ],
                "is_async": false
              },
              {
                "name": "_extract_topics_from_context",
                "line": 317,
                "args": [
                  "self",
                  "context"
                ],
                "is_async": false
              },
              {
                "name": "_calculate_rumor_relevance",
                "line": 354,
                "args": [
                  "self",
                  "rumor",
                  "topics",
                  "context"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DialogueRumorIntegration",
                "line": 20,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_rumor_from_dialogue",
                  "add_rumors_to_context",
                  "get_relevant_rumors",
                  "spread_rumor_via_dialogue",
                  "_evaluate_rumor_potential",
                  "_extract_rumor_content",
                  "_determine_veracity",
                  "_extract_topics_from_context",
                  "_calculate_rumor_relevance"
                ]
              }
            ]
          },
          {
            "file": "relationship_integration.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Set"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.characters.relationship_manager",
                "names": [
                  "RelationshipManager"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.characters.character_manager",
                "names": [
                  "CharacterManager"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 28,
                "args": [
                  "self",
                  "relationship_manager",
                  "character_manager"
                ],
                "is_async": false
              },
              {
                "name": "add_relationship_context_to_dialogue",
                "line": 39,
                "args": [
                  "self",
                  "context",
                  "character1_id",
                  "character2_id",
                  "include_history",
                  "include_network",
                  "network_depth"
                ],
                "is_async": false
              },
              {
                "name": "get_relationship_dialogue_modifiers",
                "line": 99,
                "args": [
                  "self",
                  "character1_id",
                  "character2_id"
                ],
                "is_async": false
              },
              {
                "name": "get_relationship_specific_greetings",
                "line": 208,
                "args": [
                  "self",
                  "character1_id",
                  "character2_id",
                  "count"
                ],
                "is_async": false
              },
              {
                "name": "get_relationship_specific_farewells",
                "line": 311,
                "args": [
                  "self",
                  "character1_id",
                  "character2_id",
                  "count"
                ],
                "is_async": false
              },
              {
                "name": "get_relationship_dialogue_topics",
                "line": 413,
                "args": [
                  "self",
                  "character1_id",
                  "character2_id",
                  "count"
                ],
                "is_async": false
              },
              {
                "name": "update_relationship_from_dialogue",
                "line": 541,
                "args": [
                  "self",
                  "character1_id",
                  "character2_id",
                  "dialogue_data",
                  "event_type"
                ],
                "is_async": false
              },
              {
                "name": "_get_relationship_info",
                "line": 607,
                "args": [
                  "self",
                  "character1_id",
                  "character2_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_relationship_history",
                "line": 655,
                "args": [
                  "self",
                  "character1_id",
                  "character2_id",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "_get_relationship_network",
                "line": 700,
                "args": [
                  "self",
                  "character1_id",
                  "character2_id",
                  "depth"
                ],
                "is_async": false
              },
              {
                "name": "_get_relationship_status_description",
                "line": 743,
                "args": [
                  "self",
                  "status"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DialogueRelationshipIntegration",
                "line": 20,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_relationship_context_to_dialogue",
                  "get_relationship_dialogue_modifiers",
                  "get_relationship_specific_greetings",
                  "get_relationship_specific_farewells",
                  "get_relationship_dialogue_topics",
                  "update_relationship_from_dialogue",
                  "_get_relationship_info",
                  "_get_relationship_history",
                  "_get_relationship_network",
                  "_get_relationship_status_description"
                ]
              }
            ]
          },
          {
            "file": "dialogue_manager.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "motif_integration.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Set"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.motifs.motif_manager",
                "names": [
                  "MotifManager"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 26,
                "args": [
                  "self",
                  "motif_manager"
                ],
                "is_async": false
              },
              {
                "name": "add_motifs_to_context",
                "line": 115,
                "args": [
                  "self",
                  "context",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "apply_motif_style",
                "line": 153,
                "args": [
                  "self",
                  "message",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "get_active_motifs",
                "line": 186,
                "args": [
                  "self",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "_apply_motif_characteristics",
                "line": 215,
                "args": [
                  "self",
                  "message",
                  "motif_data"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DialogueMotifIntegration",
                "line": 18,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_motifs_to_context",
                  "apply_motif_style",
                  "get_active_motifs",
                  "_apply_motif_characteristics"
                ]
              }
            ]
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.dialogue.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": false,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "backend.systems.language.language_generator",
            "line": 42,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.rumors.rumor_manager",
            "line": 909,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.motifs.motif_manager",
            "line": 910,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.factions.faction_manager",
            "line": 911,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.locations.poi_manager",
            "line": 915,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.quests.quest_manager",
            "line": 916,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.regions.region_manager",
            "line": 917,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.factions.war_manager",
            "line": 918,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.characters.relationship_manager",
            "line": 919,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.language.language_generator",
            "line": 938,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.calendar.calendar_manager",
            "line": 14,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/time_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.calendar.time_manager",
            "line": 15,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/time_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.world.world_state_manager",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/world_state_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.rumors.rumor_manager",
            "line": 15,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/rumor_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.characters.relationship_manager",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/relationship_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.characters.character_manager",
            "line": 14,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/relationship_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.motifs.motif_manager",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/motif_integration.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "poi": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/poi",
        "files": [
          "services.py",
          "models.py",
          "__init__.py",
          "tilemap_service.py",
          "routers/__init__.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.poi.models",
                "names": [
                  "PoiEntity",
                  "PoiModel",
                  "CreatePoiRequest",
                  "UpdatePoiRequest",
                  "PoiResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "PoiNotFoundError",
                  "PoiValidationError",
                  "PoiConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_poi_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "PoiService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104fa37f0>"
                ],
                "methods": [
                  "__init__",
                  "create_poi",
                  "get_poi_by_id",
                  "update_poi",
                  "delete_poi",
                  "list_pois",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_poi_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "PoiBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "PoiModel",
                "line": 36,
                "bases": [
                  "PoiBaseModel"
                ],
                "methods": []
              },
              {
                "name": "PoiEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreatePoiRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdatePoiRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "PoiResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "PoiListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.poi.models",
                "names": [
                  "PointOfInterest",
                  "POIState",
                  "POIType"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.poi.schemas",
                "names": [
                  "POISchema",
                  "POICreationSchema",
                  "HexCoordinateSchema"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.poi.services",
                "names": [
                  "POIService",
                  "POIStateService"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.poi.utils",
                "names": [
                  "calculate_poi_distance"
                ],
                "line": 11
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "tilemap_service.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.poi.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.poi.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.poi.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": false,
        "has_schemas": false,
        "import_issues": [],
        "syntax_errors": [],
        "missing_components": []
      },
      "region": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/region",
        "files": [
          "services.py",
          "models.py",
          "__init__.py",
          "worldgen.py",
          "mapping.py",
          "tension.py",
          "routers/__init__.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.region.models",
                "names": [
                  "RegionEntity",
                  "RegionModel",
                  "CreateRegionRequest",
                  "UpdateRegionRequest",
                  "RegionResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "RegionNotFoundError",
                  "RegionValidationError",
                  "RegionConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_region_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "RegionService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104f6c820>"
                ],
                "methods": [
                  "__init__",
                  "create_region",
                  "get_region_by_id",
                  "update_region",
                  "delete_region",
                  "list_regions",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_region_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "RegionBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "RegionModel",
                "line": 36,
                "bases": [
                  "RegionBaseModel"
                ],
                "methods": []
              },
              {
                "name": "RegionEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateRegionRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateRegionRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RegionResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RegionListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.region.schemas",
                "names": [
                  "RegionSchema",
                  "RegionCreationSchema",
                  "RegionUpdateSchema",
                  "CoordinateSchema",
                  "HexCoordinateSchema"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.region.repository",
                "names": [
                  "RegionRepository",
                  "region_repository"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.region.service",
                "names": [
                  "RegionService",
                  "region_service"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.region.router",
                "names": [
                  "router"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.region.utils",
                "names": [
                  "WorldGenerator",
                  "TensionManager",
                  "simulate_revolt_in_poi",
                  "map_region_to_latlon",
                  "fetch_weather_for_latlon"
                ],
                "line": 19
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "worldgen.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Tuple",
                  "Any"
                ],
                "line": 7
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.error",
                "names": [
                  "GenerationError"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.data.loaders.game_data_registry",
                "names": [
                  "GameDataRegistry"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 238
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 239
              }
            ],
            "functions": [
              {
                "name": "attempt_rest",
                "line": 227,
                "args": [
                  "region",
                  "poi"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 28,
                "args": [
                  "self",
                  "seed",
                  "data_dir"
                ],
                "is_async": false
              },
              {
                "name": "_load_biome_configs",
                "line": 35,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "generate_region",
                "line": 39,
                "args": [
                  "self",
                  "x",
                  "y",
                  "size"
                ],
                "is_async": false
              },
              {
                "name": "_generate_elevation",
                "line": 73,
                "args": [
                  "self",
                  "x",
                  "y",
                  "size"
                ],
                "is_async": false
              },
              {
                "name": "_generate_temperature",
                "line": 87,
                "args": [
                  "self",
                  "x",
                  "y",
                  "elevation"
                ],
                "is_async": false
              },
              {
                "name": "_generate_humidity",
                "line": 104,
                "args": [
                  "self",
                  "x",
                  "y",
                  "elevation"
                ],
                "is_async": false
              },
              {
                "name": "_determine_biome",
                "line": 121,
                "args": [
                  "self",
                  "elevation",
                  "temperature",
                  "humidity"
                ],
                "is_async": false
              },
              {
                "name": "_calculate_factor_score",
                "line": 142,
                "args": [
                  "self",
                  "value",
                  "range_tuple"
                ],
                "is_async": false
              },
              {
                "name": "_generate_features",
                "line": 152,
                "args": [
                  "self",
                  "biome_config"
                ],
                "is_async": false
              },
              {
                "name": "_generate_resources",
                "line": 163,
                "args": [
                  "self",
                  "biome_config"
                ],
                "is_async": false
              },
              {
                "name": "_generate_pois",
                "line": 174,
                "args": [
                  "self",
                  "biome",
                  "elevation",
                  "size"
                ],
                "is_async": false
              },
              {
                "name": "_select_poi_type",
                "line": 195,
                "args": [
                  "self",
                  "biome",
                  "elevation"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "BiomeConfig",
                "line": 16,
                "bases": [],
                "methods": []
              },
              {
                "name": "WorldGenerator",
                "line": 25,
                "bases": [],
                "methods": [
                  "__init__",
                  "_load_biome_configs",
                  "generate_region",
                  "_generate_elevation",
                  "_generate_temperature",
                  "_generate_humidity",
                  "_determine_biome",
                  "_calculate_factor_score",
                  "_generate_features",
                  "_generate_resources",
                  "_generate_pois",
                  "_select_poi_type"
                ]
              }
            ]
          },
          {
            "file": "mapping.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Tuple",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "random",
                "names": [
                  "uniform"
                ],
                "line": 9
              }
            ],
            "functions": [
              {
                "name": "map_region_to_latlon",
                "line": 16,
                "args": [
                  "coordinates"
                ],
                "is_async": false
              },
              {
                "name": "fetch_weather_for_latlon",
                "line": 36,
                "args": [
                  "lat",
                  "lon"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "tension.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.error",
                "names": [
                  "TensionError"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.utils.events",
                "names": [
                  "log_world_event"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "decay_region_tension",
                "line": 272,
                "args": [
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "check_faction_war_triggers",
                "line": 276,
                "args": [
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "get_regions_by_tension",
                "line": 281,
                "args": [
                  "session",
                  "min_tension"
                ],
                "is_async": false
              },
              {
                "name": "get_region_factions_at_war",
                "line": 286,
                "args": [
                  "session",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "simulate_revolt_in_poi",
                "line": 291,
                "args": [
                  "region_id",
                  "poi_id",
                  "factions_present",
                  "npc_list",
                  "tension_level"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 39,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_load_tension_configs",
                "line": 45,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "calculate_tension",
                "line": 92,
                "args": [
                  "self",
                  "region_id",
                  "poi_id",
                  "current_time"
                ],
                "is_async": false
              },
              {
                "name": "_get_location_type",
                "line": 145,
                "args": [
                  "self",
                  "region_id",
                  "poi_id"
                ],
                "is_async": false
              },
              {
                "name": "update_tension",
                "line": 159,
                "args": [
                  "self",
                  "region_id",
                  "poi_id",
                  "player_action",
                  "npc_change",
                  "environmental_change"
                ],
                "is_async": false
              },
              {
                "name": "_calculate_time_decay",
                "line": 205,
                "args": [
                  "self",
                  "region_id",
                  "poi_id",
                  "decay_rate",
                  "current_time"
                ],
                "is_async": false
              },
              {
                "name": "_get_player_impact",
                "line": 230,
                "args": [
                  "self",
                  "region_id",
                  "poi_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_npc_impact",
                "line": 235,
                "args": [
                  "self",
                  "region_id",
                  "poi_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_environmental_impact",
                "line": 240,
                "args": [
                  "self",
                  "region_id",
                  "poi_id"
                ],
                "is_async": false
              },
              {
                "name": "_update_player_impact",
                "line": 245,
                "args": [
                  "self",
                  "region_id",
                  "poi_id",
                  "action"
                ],
                "is_async": false
              },
              {
                "name": "_update_npc_impact",
                "line": 254,
                "args": [
                  "self",
                  "region_id",
                  "poi_id",
                  "change"
                ],
                "is_async": false
              },
              {
                "name": "_update_environmental_impact",
                "line": 263,
                "args": [
                  "self",
                  "region_id",
                  "poi_id",
                  "change"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "TensionConfig",
                "line": 16,
                "bases": [],
                "methods": []
              },
              {
                "name": "TensionManager",
                "line": 36,
                "bases": [],
                "methods": [
                  "__init__",
                  "_load_tension_configs",
                  "calculate_tension",
                  "_get_location_type",
                  "update_tension",
                  "_calculate_time_decay",
                  "_get_player_impact",
                  "_get_npc_impact",
                  "_get_environmental_impact",
                  "_update_player_impact",
                  "_update_npc_impact",
                  "_update_environmental_impact"
                ]
              }
            ]
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.region.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.region.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.region.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": false,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/region/worldgen.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/region/tension.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "religion": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/religion",
        "files": [
          "services.py",
          "narrative_service.py",
          "models.py",
          "__init__.py",
          "routers/__init__.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.religion.models",
                "names": [
                  "ReligionEntity",
                  "ReligionModel",
                  "CreateReligionRequest",
                  "UpdateReligionRequest",
                  "ReligionResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "ReligionNotFoundError",
                  "ReligionValidationError",
                  "ReligionConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_religion_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ReligionService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104f6e350>"
                ],
                "methods": [
                  "__init__",
                  "create_religion",
                  "get_religion_by_id",
                  "update_religion",
                  "delete_religion",
                  "list_religions",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_religion_statistics"
                ]
              }
            ]
          },
          {
            "file": "narrative_service.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.religion.models",
                "names": [
                  "Religion",
                  "ReligionMembership",
                  "ReligionType"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.religion.utils",
                "names": [
                  "generate_conversion_narrative",
                  "generate_religion_event"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.events.dispatcher",
                "names": [
                  "EventDispatcher",
                  "EventBase"
                ],
                "line": 20
              }
            ],
            "functions": [
              {
                "name": "get_narrative_service",
                "line": 175,
                "args": [],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 44,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "trigger_narrative_hook",
                "line": 50,
                "args": [
                  "self",
                  "entity_id",
                  "religion",
                  "event_type",
                  "event_data"
                ],
                "is_async": false
              },
              {
                "name": "generate_conversion_narrative",
                "line": 92,
                "args": [
                  "self",
                  "entity_name",
                  "from_religion",
                  "to_religion"
                ],
                "is_async": false
              },
              {
                "name": "get_religion_summary",
                "line": 111,
                "args": [
                  "self",
                  "religion"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ReligionEventBase",
                "line": 26,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "ReligionNarrativeEvent",
                "line": 29,
                "bases": [
                  "ReligionEventBase"
                ],
                "methods": []
              },
              {
                "name": "ReligionNarrativeService",
                "line": 36,
                "bases": [],
                "methods": [
                  "__init__",
                  "trigger_narrative_hook",
                  "generate_conversion_narrative",
                  "get_religion_summary"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ReligionBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "ReligionModel",
                "line": 36,
                "bases": [
                  "ReligionBaseModel"
                ],
                "methods": []
              },
              {
                "name": "ReligionEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateReligionRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateReligionRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "ReligionResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "ReligionListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.religion.models",
                "names": [
                  "Religion",
                  "ReligionType",
                  "ReligionMembership",
                  "religiontype_to_string",
                  "string_to_religiontype"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.religion.schemas",
                "names": [
                  "ReligionSchema",
                  "ReligionMembershipSchema",
                  "ReligionCreateSchema",
                  "ReligionUpdateSchema",
                  "ReligionMembershipCreateSchema"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.religion.services",
                "names": [
                  "ReligionService",
                  "get_religion_service"
                ],
                "line": 25
              },
              {
                "type": "from_import",
                "module": "backend.systems.religion.repository",
                "names": [
                  "ReligionRepository"
                ],
                "line": 30
              },
              {
                "type": "from_import",
                "module": "backend.systems.religion.membership_service",
                "names": [
                  "ReligionMembershipService"
                ],
                "line": 31
              },
              {
                "type": "from_import",
                "module": "backend.systems.religion.narrative_service",
                "names": [
                  "ReligionNarrativeService",
                  "get_narrative_service"
                ],
                "line": 32
              },
              {
                "type": "from_import",
                "module": "backend.systems.religion.faction_service",
                "names": [
                  "ReligionFactionService",
                  "get_faction_service"
                ],
                "line": 33
              },
              {
                "type": "from_import",
                "module": "backend.systems.religion.utils",
                "names": [
                  "calculate_devotion_change",
                  "generate_conversion_narrative",
                  "generate_religion_event",
                  "calculate_religion_compatibility",
                  "calculate_schism_probability"
                ],
                "line": 35
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.religion.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.religion.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.religion.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": false,
        "has_schemas": false,
        "import_issues": [],
        "syntax_errors": [],
        "missing_components": []
      },
      "quest": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/quest",
        "files": [
          "services.py",
          "models.py",
          "arc_manager.py",
          "__init__.py",
          "journal_routes.py",
          "integration.py",
          "generator.py",
          "quest_routes.py",
          "manager.py",
          "npc_quests.py",
          "routers/__init__.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.models",
                "names": [
                  "QuestEntity",
                  "QuestModel",
                  "CreateQuestRequest",
                  "UpdateQuestRequest",
                  "QuestResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "QuestNotFoundError",
                  "QuestValidationError",
                  "QuestConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_quest_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "QuestService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104f6dc90>"
                ],
                "methods": [
                  "__init__",
                  "create_quest",
                  "get_quest_by_id",
                  "update_quest",
                  "delete_quest",
                  "list_quests",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_quest_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "QuestBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "QuestModel",
                "line": 36,
                "bases": [
                  "QuestBaseModel"
                ],
                "methods": []
              },
              {
                "name": "QuestEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateQuestRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateQuestRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "QuestResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "QuestListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "arc_manager.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 6
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.firebase",
                "names": [
                  "get_firestore_client",
                  "get_document",
                  "set_document",
                  "update_document",
                  "get_collection"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.error",
                "names": [
                  "ValidationError",
                  "NotFoundError",
                  "DatabaseError"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.utils",
                "names": [
                  "QuestValidator"
                ],
                "line": 19
              }
            ],
            "functions": [
              {
                "name": "load_player_arc",
                "line": 27,
                "args": [
                  "player_id"
                ],
                "is_async": false
              },
              {
                "name": "save_player_arc",
                "line": 53,
                "args": [
                  "player_id",
                  "arc_data"
                ],
                "is_async": false
              },
              {
                "name": "create_player_arc",
                "line": 87,
                "args": [
                  "player_id"
                ],
                "is_async": false
              },
              {
                "name": "trigger_war_arc",
                "line": 128,
                "args": [
                  "player_id",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "generate_character_arc",
                "line": 177,
                "args": [
                  "player_id",
                  "background"
                ],
                "is_async": false
              },
              {
                "name": "update_arc_progress",
                "line": 244,
                "args": [
                  "player_id",
                  "chapter_index",
                  "progress"
                ],
                "is_async": false
              },
              {
                "name": "record_arc_choice",
                "line": 315,
                "args": [
                  "player_id",
                  "choice"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ArcManager",
                "line": 23,
                "bases": [],
                "methods": [
                  "load_player_arc",
                  "save_player_arc",
                  "create_player_arc",
                  "trigger_war_arc",
                  "generate_character_arc",
                  "update_arc_progress",
                  "record_arc_choice"
                ]
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.quest.models",
                "names": [
                  "Quest",
                  "QuestStep"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.utils",
                "names": [
                  "QuestValidator",
                  "QuestUtils"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.generator",
                "names": [
                  "QuestGenerator"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.arc_manager",
                "names": [
                  "ArcManager"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.npc_quests",
                "names": [
                  "NPCQuestManager"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.integration",
                "names": [
                  "QuestIntegration"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.database",
                "names": [
                  "QuestRepository"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.manager",
                "names": [
                  "QuestStateManager"
                ],
                "line": 13
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "journal_routes.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "request",
                  "jsonify"
                ],
                "line": 1
              }
            ],
            "functions": [
              {
                "name": "get_character_quests",
                "line": 7,
                "args": [
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "get_rumors",
                "line": 15,
                "args": [
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "character_notes",
                "line": 23,
                "args": [
                  "character_id"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "integration.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 6
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.events.bus",
                "names": [
                  "EventBus"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc",
                "names": [
                  "NPCManager"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.world",
                "names": [
                  "WorldStateManager"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.player",
                "names": [
                  "PlayerManager"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.item",
                "names": [
                  "ItemManager"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.models",
                "names": [
                  "Quest",
                  "QuestStep"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.utils",
                "names": [
                  "QuestUtils",
                  "QuestValidator"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.generator",
                "names": [
                  "QuestGenerator"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.arc_manager",
                "names": [
                  "ArcManager"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.npc_quests",
                "names": [
                  "NPCQuestManager"
                ],
                "line": 20
              }
            ],
            "functions": [
              {
                "name": "register_event_handlers",
                "line": 29,
                "args": [],
                "is_async": false
              },
              {
                "name": "generate_quests_for_player",
                "line": 433,
                "args": [
                  "player_id",
                  "location_id",
                  "count"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "QuestIntegration",
                "line": 25,
                "bases": [],
                "methods": [
                  "register_event_handlers",
                  "handle_dialogue_completed",
                  "handle_item_acquired",
                  "handle_location_changed",
                  "handle_time_changed",
                  "handle_enemy_defeated",
                  "generate_quests_for_player"
                ]
              }
            ]
          },
          {
            "file": "generator.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 6
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc",
                "names": [
                  "NPCManager"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.world",
                "names": [
                  "WorldStateManager"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.item",
                "names": [
                  "ItemManager"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.models",
                "names": [
                  "Quest",
                  "QuestStep"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "generate_quest_title",
                "line": 22,
                "args": [
                  "theme",
                  "difficulty"
                ],
                "is_async": false
              },
              {
                "name": "generate_quest_steps",
                "line": 56,
                "args": [
                  "theme",
                  "difficulty",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "calculate_quest_reward",
                "line": 143,
                "args": [
                  "difficulty",
                  "level"
                ],
                "is_async": false
              },
              {
                "name": "generate_quest",
                "line": 191,
                "args": [
                  "player_id",
                  "theme",
                  "difficulty",
                  "location_id",
                  "npc_id",
                  "level"
                ],
                "is_async": false
              },
              {
                "name": "generate_journal_entry",
                "line": 270,
                "args": [
                  "quest_data",
                  "event_type",
                  "details"
                ],
                "is_async": false
              },
              {
                "name": "generate_arc_for_character",
                "line": 322,
                "args": [
                  "character_data"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "QuestGenerator",
                "line": 18,
                "bases": [],
                "methods": [
                  "generate_quest_title",
                  "generate_quest_steps",
                  "calculate_quest_reward",
                  "generate_quest",
                  "generate_journal_entry",
                  "generate_arc_for_character"
                ]
              }
            ]
          },
          {
            "file": "quest_routes.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "request",
                  "jsonify"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.player_arc_utils",
                "names": [
                  "load_player_arc",
                  "save_player_arc",
                  "update_arc_with_event"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.quests_class",
                "names": [
                  "QuestManager"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "get_player_arc",
                "line": 20,
                "args": [
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "post_arc_update",
                "line": 30,
                "args": [
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "list_quests",
                "line": 45,
                "args": [
                  "player_id"
                ],
                "is_async": false
              },
              {
                "name": "get_quest",
                "line": 53,
                "args": [
                  "player_id",
                  "entry_id"
                ],
                "is_async": false
              },
              {
                "name": "post_quest",
                "line": 63,
                "args": [
                  "player_id"
                ],
                "is_async": false
              },
              {
                "name": "complete_quest_route",
                "line": 84,
                "args": [
                  "character_id",
                  "quest_id"
                ],
                "is_async": false
              },
              {
                "name": "get_player_questlog",
                "line": 92,
                "args": [
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "accept_quest_from_board",
                "line": 101,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "manager.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 6
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.database",
                "names": [
                  "QuestRepository"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.models",
                "names": [
                  "Quest",
                  "QuestStep"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.error",
                "names": [
                  "ValidationError",
                  "NotFoundError"
                ],
                "line": 11
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 21,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "update_step_status",
                "line": 24,
                "args": [
                  "self",
                  "quest_id",
                  "step_id",
                  "completed"
                ],
                "is_async": false
              },
              {
                "name": "accept_quest",
                "line": 72,
                "args": [
                  "self",
                  "quest_id",
                  "player_id"
                ],
                "is_async": false
              },
              {
                "name": "abandon_quest",
                "line": 120,
                "args": [
                  "self",
                  "quest_id",
                  "player_id"
                ],
                "is_async": false
              },
              {
                "name": "complete_quest",
                "line": 174,
                "args": [
                  "self",
                  "quest_id",
                  "player_id"
                ],
                "is_async": false
              },
              {
                "name": "fail_quest",
                "line": 234,
                "args": [
                  "self",
                  "quest_id",
                  "player_id",
                  "reason"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "QuestStateManager",
                "line": 15,
                "bases": [],
                "methods": [
                  "__init__",
                  "update_step_status",
                  "accept_quest",
                  "abandon_quest",
                  "complete_quest",
                  "fail_quest"
                ]
              }
            ]
          },
          {
            "file": "npc_quests.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 6
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 7
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.firebase",
                "names": [
                  "get_firestore_client",
                  "get_document",
                  "set_document",
                  "update_document",
                  "get_collection"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.error",
                "names": [
                  "ValidationError",
                  "NotFoundError",
                  "DatabaseError"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc",
                "names": [
                  "NPCManager"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.utils",
                "names": [
                  "QuestValidator",
                  "QuestUtils"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.generator",
                "names": [
                  "QuestGenerator"
                ],
                "line": 22
              }
            ],
            "functions": [
              {
                "name": "generate_journal_entry",
                "line": 30,
                "args": [
                  "quest_data",
                  "player_id"
                ],
                "is_async": false
              },
              {
                "name": "npc_personal_quest_tick",
                "line": 71,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "get_npc_quests",
                "line": 182,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "assign_quest_to_player",
                "line": 216,
                "args": [
                  "quest_id",
                  "player_id"
                ],
                "is_async": false
              },
              {
                "name": "generate_npc_quests_for_region",
                "line": 266,
                "args": [
                  "region_id",
                  "count"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "NPCQuestManager",
                "line": 26,
                "bases": [],
                "methods": [
                  "generate_journal_entry",
                  "npc_personal_quest_tick",
                  "get_npc_quests",
                  "assign_quest_to_player",
                  "generate_npc_quests_for_region"
                ]
              }
            ]
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "backend.systems.world",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/quest/integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.player",
            "line": 14,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/quest/integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.item",
            "line": 15,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/quest/integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.world",
            "line": 12,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/quest/generator.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.item",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/quest/generator.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "inventory": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/inventory",
        "files": [
          "validator.py",
          "services.py",
          "models.py",
          "notification.py",
          "__init__.py",
          "export.py",
          "factory.py",
          "operations.py",
          "migrations.py",
          "routers/__init__.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "validator.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any",
                  "Optional",
                  "Tuple",
                  "Union"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.models",
                "names": [
                  "Item",
                  "Inventory",
                  "InventoryItem"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.repository",
                "names": [
                  "ItemRepository",
                  "InventoryRepository"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "is_error",
                "line": 26,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "success",
                "line": 31,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "error",
                "line": 36,
                "args": [
                  "cls",
                  "message",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "validate_inventory_exists",
                "line": 49,
                "args": [
                  "inventory_id"
                ],
                "is_async": false
              },
              {
                "name": "validate_item_exists",
                "line": 66,
                "args": [
                  "item_id"
                ],
                "is_async": false
              },
              {
                "name": "validate_add_item",
                "line": 83,
                "args": [
                  "inventory_id",
                  "item_id",
                  "quantity"
                ],
                "is_async": false
              },
              {
                "name": "validate_remove_item",
                "line": 134,
                "args": [
                  "inventory_id",
                  "inventory_item_id",
                  "quantity"
                ],
                "is_async": false
              },
              {
                "name": "validate_transfer_item",
                "line": 180,
                "args": [
                  "from_inventory_id",
                  "to_inventory_id",
                  "inventory_item_id",
                  "quantity"
                ],
                "is_async": false
              },
              {
                "name": "validate_equip_item",
                "line": 224,
                "args": [
                  "inventory_id",
                  "inventory_item_id"
                ],
                "is_async": false
              },
              {
                "name": "validate_unequip_item",
                "line": 265,
                "args": [
                  "inventory_id",
                  "inventory_item_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ValidationResult",
                "line": 19,
                "bases": [],
                "methods": [
                  "is_error",
                  "success",
                  "error"
                ]
              },
              {
                "name": "InventoryValidator",
                "line": 40,
                "bases": [],
                "methods": [
                  "validate_inventory_exists",
                  "validate_item_exists",
                  "validate_add_item",
                  "validate_remove_item",
                  "validate_transfer_item",
                  "validate_equip_item",
                  "validate_unequip_item"
                ]
              }
            ]
          },
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.models",
                "names": [
                  "InventoryEntity",
                  "InventoryModel",
                  "CreateInventoryRequest",
                  "UpdateInventoryRequest",
                  "InventoryResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "InventoryNotFoundError",
                  "InventoryValidationError",
                  "InventoryConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_inventory_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "InventoryService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x104fa0820>"
                ],
                "methods": [
                  "__init__",
                  "create_inventory",
                  "get_inventory_by_id",
                  "update_inventory",
                  "delete_inventory",
                  "list_inventorys",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_inventory_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "InventoryBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "InventoryModel",
                "line": 36,
                "bases": [
                  "InventoryBaseModel"
                ],
                "methods": []
              },
              {
                "name": "InventoryEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateInventoryRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateInventoryRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "InventoryResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "InventoryListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "notification.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "Optional"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.models",
                "names": [
                  "Inventory",
                  "Item",
                  "InventoryItem"
                ],
                "line": 12
              }
            ],
            "functions": [
              {
                "name": "subscribe",
                "line": 37,
                "args": [
                  "cls",
                  "event_type",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "unsubscribe",
                "line": 53,
                "args": [
                  "cls",
                  "event_type",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "notify_item_added",
                "line": 71,
                "args": [
                  "cls",
                  "inventory_id",
                  "item_id",
                  "quantity",
                  "inventory_item_id"
                ],
                "is_async": false
              },
              {
                "name": "notify_item_removed",
                "line": 92,
                "args": [
                  "cls",
                  "inventory_id",
                  "item_id",
                  "quantity",
                  "inventory_item_id"
                ],
                "is_async": false
              },
              {
                "name": "notify_item_transferred",
                "line": 113,
                "args": [
                  "cls",
                  "from_inventory_id",
                  "to_inventory_id",
                  "item_id",
                  "quantity",
                  "from_inventory_item_id",
                  "to_inventory_item_id"
                ],
                "is_async": false
              },
              {
                "name": "notify_item_equipped",
                "line": 140,
                "args": [
                  "cls",
                  "inventory_id",
                  "inventory_item_id",
                  "item_id"
                ],
                "is_async": false
              },
              {
                "name": "notify_item_unequipped",
                "line": 159,
                "args": [
                  "cls",
                  "inventory_id",
                  "inventory_item_id",
                  "item_id"
                ],
                "is_async": false
              },
              {
                "name": "notify_inventory_created",
                "line": 178,
                "args": [
                  "cls",
                  "inventory_id",
                  "inventory_type",
                  "owner_id"
                ],
                "is_async": false
              },
              {
                "name": "notify_inventory_deleted",
                "line": 197,
                "args": [
                  "cls",
                  "inventory_id",
                  "inventory_type",
                  "owner_id"
                ],
                "is_async": false
              },
              {
                "name": "_notify",
                "line": 216,
                "args": [
                  "cls",
                  "event_type",
                  "event_data"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "InventoryNotifier",
                "line": 17,
                "bases": [],
                "methods": [
                  "subscribe",
                  "unsubscribe",
                  "notify_item_added",
                  "notify_item_removed",
                  "notify_item_transferred",
                  "notify_item_equipped",
                  "notify_item_unequipped",
                  "notify_inventory_created",
                  "notify_inventory_deleted",
                  "_notify"
                ]
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.inventory.models",
                "names": [
                  "Item",
                  "Inventory",
                  "InventoryItem",
                  "ItemCategory"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.schemas",
                "names": [
                  "ItemBase",
                  "ItemCreate",
                  "Item",
                  "InventoryBase",
                  "InventoryCreate",
                  "Inventory",
                  "InventoryItemBase",
                  "InventoryItemCreate",
                  "InventoryItem",
                  "InventoryTransferRequest",
                  "ValidationResponse",
                  "InventoryFilterParams",
                  "PaginatedInventoryResponse",
                  "ItemCategoryEnum"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.validator",
                "names": [
                  "ValidationResult",
                  "InventoryValidator"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.repository",
                "names": [
                  "ItemRepository",
                  "InventoryRepository",
                  "InventoryItemRepository"
                ],
                "line": 25
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.service",
                "names": [
                  "InventoryService"
                ],
                "line": 30
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.utils",
                "names": [
                  "calculate_total_weight",
                  "get_equipped_items",
                  "group_equipment_by_type",
                  "InventoryContainer",
                  "InventoryTransaction",
                  "transfer_item_between_inventories",
                  "RecoveryManager"
                ],
                "line": 33
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.router",
                "names": [
                  "router"
                ],
                "line": 40
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "export.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Tuple"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "db"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.models",
                "names": [
                  "Item",
                  "Inventory",
                  "InventoryItem"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.repository",
                "names": [
                  "ItemRepository",
                  "InventoryRepository",
                  "InventoryItemRepository"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.service",
                "names": [
                  "InventoryService"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "export_to_json",
                "line": 28,
                "args": [
                  "inventory_id"
                ],
                "is_async": false
              },
              {
                "name": "import_from_json",
                "line": 87,
                "args": [
                  "data",
                  "owner_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "InventoryExporter",
                "line": 22,
                "bases": [],
                "methods": [
                  "export_to_json",
                  "import_from_json"
                ]
              }
            ]
          },
          {
            "file": "factory.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "operations.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any",
                  "Optional",
                  "Tuple",
                  "Union"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "db"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.models",
                "names": [
                  "Item",
                  "Inventory",
                  "InventoryItem"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.repository",
                "names": [
                  "ItemRepository",
                  "InventoryRepository",
                  "InventoryItemRepository"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.validator",
                "names": [
                  "InventoryValidator",
                  "ValidationResult"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.utils",
                "names": [
                  "transfer_item_between_inventories",
                  "validate_grid_position"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.utils",
                "names": [
                  "validate_grid_position"
                ],
                "line": 139
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.events",
                "names": [
                  "emit_event",
                  "InventoryEventType"
                ],
                "line": 167
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.events",
                "names": [
                  "emit_bulk_transfer_started"
                ],
                "line": 718
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.events",
                "names": [
                  "emit_bulk_transfer_completed"
                ],
                "line": 782
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.events",
                "names": [
                  "InventoryEventType",
                  "emit_event"
                ],
                "line": 485
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.events",
                "names": [
                  "emit_bulk_transfer_failed"
                ],
                "line": 792
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.events",
                "names": [
                  "emit_weight_limit_exceeded"
                ],
                "line": 677
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.events",
                "names": [
                  "emit_bulk_transfer_failed"
                ],
                "line": 753
              }
            ],
            "functions": [
              {
                "name": "equip_item",
                "line": 29,
                "args": [
                  "inventory_id",
                  "item_id"
                ],
                "is_async": false
              },
              {
                "name": "unequip_item",
                "line": 76,
                "args": [
                  "inventory_id",
                  "item_id"
                ],
                "is_async": false
              },
              {
                "name": "move_item_to_position",
                "line": 116,
                "args": [
                  "inventory_id",
                  "item_id",
                  "position"
                ],
                "is_async": false
              },
              {
                "name": "calculate_inventory_stats",
                "line": 181,
                "args": [
                  "inventory_id"
                ],
                "is_async": false
              },
              {
                "name": "bulk_add_items",
                "line": 236,
                "args": [
                  "inventory_id",
                  "items_data"
                ],
                "is_async": false
              },
              {
                "name": "split_item_stack",
                "line": 322,
                "args": [
                  "inventory_id",
                  "item_id",
                  "quantity"
                ],
                "is_async": false
              },
              {
                "name": "merge_item_stacks",
                "line": 379,
                "args": [
                  "inventory_id",
                  "source_item_id",
                  "target_item_id"
                ],
                "is_async": false
              },
              {
                "name": "swap_items",
                "line": 439,
                "args": [
                  "inventory_id",
                  "item_id1",
                  "item_id2"
                ],
                "is_async": false
              },
              {
                "name": "transfer_items",
                "line": 512,
                "args": [
                  "from_inventory_id",
                  "to_inventory_id",
                  "inventory_item_id",
                  "quantity"
                ],
                "is_async": false
              },
              {
                "name": "transfer_item_between_inventories",
                "line": 539,
                "args": [
                  "from_inventory_id",
                  "to_inventory_id",
                  "inventory_item_id",
                  "quantity",
                  "session"
                ],
                "is_async": false
              },
              {
                "name": "bulk_transfer_items",
                "line": 615,
                "args": [
                  "from_inventory_id",
                  "to_inventory_id",
                  "items_data"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EquipmentOperations",
                "line": 23,
                "bases": [],
                "methods": [
                  "equip_item",
                  "unequip_item"
                ]
              },
              {
                "name": "ItemOperations",
                "line": 110,
                "bases": [],
                "methods": [
                  "move_item_to_position",
                  "calculate_inventory_stats",
                  "bulk_add_items",
                  "split_item_stack",
                  "merge_item_stacks",
                  "swap_items"
                ]
              },
              {
                "name": "TransferOperations",
                "line": 506,
                "bases": [],
                "methods": [
                  "transfer_items",
                  "transfer_item_between_inventories",
                  "bulk_transfer_items"
                ]
              }
            ]
          },
          {
            "file": "migrations.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.inventory.models",
                "names": [
                  "Item",
                  "Inventory",
                  "InventoryItem",
                  "ItemCategory"
                ],
                "line": 8
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": false,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/inventory/validator.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "world_state": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/world_state",
        "files": [
          "world_routes.py",
          "services.py",
          "models.py",
          "__init__.py",
          "cleanup.py",
          "optimized_worldgen.py",
          "world_models.py",
          "world_utils.py",
          "worldgen_api.py",
          "routers/__init__.py",
          "core/__init__.py",
          "core/loader.py",
          "utils/newspaper_system.py",
          "utils/world_event_utils.py",
          "utils/__init__.py",
          "utils/tick_utils.py",
          "utils/terrain_generator.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "mods/mod_synchronizer.py",
          "mods/__init__.py",
          "api/__init__.py",
          "events/handlers.py",
          "events/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "world_routes.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.region.region_generation_utils",
                "names": [
                  "generate_region"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "jsonify",
                  "request"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.core.manager",
                "names": [
                  "WorldStateManager"
                ],
                "line": 3
              }
            ],
            "functions": [
              {
                "name": "generate_initial_world",
                "line": 8,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_world_summary",
                "line": 32,
                "args": [],
                "is_async": false
              },
              {
                "name": "tick_world",
                "line": 53,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_global_state",
                "line": 73,
                "args": [],
                "is_async": false
              },
              {
                "name": "update_global_state",
                "line": 87,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.models",
                "names": [
                  "World_StateEntity",
                  "World_StateModel",
                  "CreateWorld_StateRequest",
                  "UpdateWorld_StateRequest",
                  "World_StateResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "World_StateNotFoundError",
                  "World_StateValidationError",
                  "World_StateConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_world_state_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "World_StateService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x1050db7f0>"
                ],
                "methods": [
                  "__init__",
                  "create_world_state",
                  "get_world_state_by_id",
                  "update_world_state",
                  "delete_world_state",
                  "list_world_states",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_world_state_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "World_StateBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "World_StateModel",
                "line": 36,
                "bases": [
                  "World_StateBaseModel"
                ],
                "methods": []
              },
              {
                "name": "World_StateEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateWorld_StateRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateWorld_StateRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "World_StateResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "World_StateListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.world_state.core.manager",
                "names": [
                  "WorldStateManager"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.core.loader",
                "names": [
                  "WorldStateLoader"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.core.types",
                "names": [
                  "WorldState",
                  "StateChangeType",
                  "WorldRegion",
                  "StateCategory",
                  "StateVariable",
                  "StateChangeRecord",
                  "ActiveEffect",
                  "WorldStateChange",
                  "WorldStateChangeCustomData"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.core.events",
                "names": [
                  "WorldStateEvent",
                  "WorldStateCreatedEvent",
                  "WorldStateUpdatedEvent",
                  "WorldStateDeletedEvent",
                  "WorldStateCalculatedEvent"
                ],
                "line": 23
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.mods.mod_synchronizer",
                "names": [
                  "ModSynchronizer"
                ],
                "line": 29
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.events.handlers",
                "names": [
                  "WorldStateEventHandler"
                ],
                "line": 32
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.api.router",
                "names": [
                  "router"
                ],
                "line": 35
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.utils.world_event_utils",
                "names": [
                  "create_world_event",
                  "inject_chaos_event",
                  "get_related_events",
                  "filter_events_by_category",
                  "filter_events_by_location"
                ],
                "line": 38
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.utils.tick_utils",
                "names": [
                  "validate_world_state",
                  "process_world_tick",
                  "handle_tick_events"
                ],
                "line": 42
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "cleanup.py",
            "imports": [
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "shutil",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "sys",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 11
              }
            ],
            "functions": [
              {
                "name": "run_cleanup",
                "line": 23,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "optimized_worldgen.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "world_models.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "world_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any",
                  "Tuple"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 7
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.core.world_models",
                "names": [
                  "TerrainType",
                  "Region",
                  "PointOfInterest",
                  "WorldMap"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.firebase",
                "names": [
                  "get_firestore_client"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.error",
                "names": [
                  "NotFoundError",
                  "ValidationError"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.integration.event_bus",
                "names": [
                  "integration_event_bus"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.integration.state_sync",
                "names": [
                  "state_sync_manager"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.integration.validation",
                "names": [
                  "validation_manager"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.integration.monitoring",
                "names": [
                  "integration_logger",
                  "integration_metrics",
                  "integration_alerting"
                ],
                "line": 20
              },
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.data.loaders.game_data_registry",
                "names": [
                  "GameDataRegistry"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.core.manager",
                "names": [
                  "WorldStateManager"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "generate_terrain_type",
                "line": 29,
                "args": [
                  "name"
                ],
                "is_async": false
              },
              {
                "name": "generate_region",
                "line": 45,
                "args": [
                  "name",
                  "climate",
                  "min_level",
                  "max_level"
                ],
                "is_async": false
              },
              {
                "name": "generate_point_of_interest",
                "line": 66,
                "args": [
                  "name",
                  "poi_type",
                  "region_id",
                  "coordinates",
                  "level"
                ],
                "is_async": false
              },
              {
                "name": "create_world_map",
                "line": 86,
                "args": [
                  "name",
                  "width",
                  "height",
                  "scale"
                ],
                "is_async": false
              },
              {
                "name": "get_world_map",
                "line": 110,
                "args": [
                  "map_id"
                ],
                "is_async": false
              },
              {
                "name": "update_world_map",
                "line": 120,
                "args": [
                  "map_id",
                  "updates"
                ],
                "is_async": false
              },
              {
                "name": "get_region_at_coordinates",
                "line": 143,
                "args": [
                  "map_id",
                  "x",
                  "y"
                ],
                "is_async": false
              },
              {
                "name": "get_pois_in_region",
                "line": 148,
                "args": [
                  "map_id",
                  "region_id"
                ],
                "is_async": false
              },
              {
                "name": "calculate_travel_time",
                "line": 153,
                "args": [
                  "map_id",
                  "start_x",
                  "start_y",
                  "end_x",
                  "end_y",
                  "speed"
                ],
                "is_async": false
              },
              {
                "name": "validate_world_data",
                "line": 166,
                "args": [
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "process_world_tick",
                "line": 186,
                "args": [
                  "world_state_id"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "worldgen_api.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "HTTPException",
                  "Query",
                  "Depends",
                  "Body"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "time",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 13
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.optimized_worldgen",
                "names": [
                  "OptimizedWorldGenerator",
                  "create_world_generator"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.utils.terrain_generator",
                "names": [
                  "RegionParams",
                  "BiomeInfo"
                ],
                "line": 20
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 407
              }
            ],
            "functions": [
              {
                "name": "get_world_generator",
                "line": 197,
                "args": [],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "BiomeData",
                "line": 36,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "PointOfInterestData",
                "line": 62,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RegionRequest",
                "line": 91,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RegionResponse",
                "line": 114,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "ContinentResponse",
                "line": 160,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "WorldResponse",
                "line": 178,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 47,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 72,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 102,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 127,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 167,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 185,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "core/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.world_state.manager",
                "names": [
                  "WorldStateManager"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.loader",
                "names": [
                  "WorldStateLoader"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.events",
                "names": [
                  "WorldStateEvent"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.types",
                "names": [
                  "StateChangeType",
                  "WorldRegion",
                  "StateCategory",
                  "WorldState",
                  "WorldStateChange",
                  "WorldStateChangeCustomData",
                  "ActiveEffect",
                  "LocationType",
                  "ResourceType"
                ],
                "line": 11
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "core/loader.py",
            "imports": [
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "Optional",
                  "Tuple",
                  "List"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 12
              },
              {
                "type": "import",
                "module": "shutil",
                "alias": null,
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.core.types",
                "names": [
                  "WorldState",
                  "StateCategory",
                  "WorldRegion"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.file",
                "names": [
                  "ensure_directory",
                  "safe_write_json"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 23,
                "args": [
                  "self",
                  "data_dir"
                ],
                "is_async": false
              },
              {
                "name": "load_state",
                "line": 36,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "load_event",
                "line": 87,
                "args": [
                  "self",
                  "event_id"
                ],
                "is_async": false
              },
              {
                "name": "load_events",
                "line": 113,
                "args": [
                  "self",
                  "event_type",
                  "category",
                  "region",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "load_history",
                "line": 171,
                "args": [
                  "self",
                  "key",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "load_all_history",
                "line": 204,
                "args": [
                  "self",
                  "keys",
                  "since",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "save_state",
                "line": 274,
                "args": [
                  "self",
                  "state"
                ],
                "is_async": false
              },
              {
                "name": "save_event",
                "line": 301,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "save_history_entry",
                "line": 331,
                "args": [
                  "self",
                  "key",
                  "value",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "_create_empty_state",
                "line": 373,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_validate_state",
                "line": 394,
                "args": [
                  "self",
                  "state"
                ],
                "is_async": false
              },
              {
                "name": "_migrate_state_if_needed",
                "line": 422,
                "args": [
                  "self",
                  "state"
                ],
                "is_async": false
              },
              {
                "name": "_migrate_0_0_1_to_0_0_2",
                "line": 450,
                "args": [
                  "self",
                  "state"
                ],
                "is_async": false
              },
              {
                "name": "_migrate_0_0_2_to_1_0_0",
                "line": 466,
                "args": [
                  "self",
                  "state"
                ],
                "is_async": false
              },
              {
                "name": "_backup_state",
                "line": 482,
                "args": [
                  "self",
                  "state"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "WorldStateLoader",
                "line": 20,
                "bases": [],
                "methods": [
                  "__init__",
                  "load_state",
                  "load_event",
                  "load_events",
                  "load_history",
                  "load_all_history",
                  "save_state",
                  "save_event",
                  "save_history_entry",
                  "_create_empty_state",
                  "_validate_state",
                  "_migrate_state_if_needed",
                  "_migrate_0_0_1_to_0_0_2",
                  "_migrate_0_0_2_to_1_0_0",
                  "_backup_state"
                ]
              }
            ]
          },
          {
            "file": "utils/newspaper_system.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 12
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 19,
                "args": [
                  "self",
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "fetch_recent_events",
                "line": 23,
                "args": [
                  "self",
                  "days",
                  "severity_min",
                  "event_type"
                ],
                "is_async": false
              },
              {
                "name": "format_article",
                "line": 44,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "publish_latest_edition",
                "line": 59,
                "args": [
                  "self",
                  "days",
                  "severity_min",
                  "event_type"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Newspaper",
                "line": 15,
                "bases": [],
                "methods": [
                  "__init__",
                  "fetch_recent_events",
                  "format_article",
                  "publish_latest_edition"
                ]
              }
            ]
          },
          {
            "file": "utils/world_event_utils.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.world_state.tick_utils",
                "names": [
                  "process_world_tick",
                  "process_npc_actions",
                  "process_faction_activities",
                  "validate_world_state"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.world_event_utils",
                "names": [
                  "create_world_event",
                  "link_events",
                  "get_related_events",
                  "filter_events_by_category",
                  "filter_events_by_location",
                  "format_event_description"
                ],
                "line": 13
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/tick_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Union"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.world",
                "names": [
                  "WorldState",
                  "Region",
                  "Faction"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc",
                "names": [
                  "NPC"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_event",
                "names": [
                  "WorldEvent"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.core.enums",
                "names": [
                  "RelationshipType"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.logging",
                "names": [
                  "logger"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "db"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.error_utils",
                "names": [
                  "ValidationError"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.validation.world_event_validation",
                "names": [
                  "validate_event_data",
                  "validate_event_timing",
                  "validate_event_status",
                  "validate_affected_entities"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "timedelta"
                ],
                "line": 509
              }
            ],
            "functions": [
              {
                "name": "validate_world_state",
                "line": 35,
                "args": [
                  "world_state"
                ],
                "is_async": false
              },
              {
                "name": "validate_region_state",
                "line": 68,
                "args": [
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "validate_faction_state",
                "line": 93,
                "args": [
                  "faction"
                ],
                "is_async": false
              },
              {
                "name": "process_world_tick",
                "line": 117,
                "args": [
                  "world_state"
                ],
                "is_async": false
              },
              {
                "name": "process_npc_actions",
                "line": 142,
                "args": [
                  "npc"
                ],
                "is_async": false
              },
              {
                "name": "process_faction_activities",
                "line": 146,
                "args": [
                  "faction"
                ],
                "is_async": false
              },
              {
                "name": "process_faction_state",
                "line": 178,
                "args": [
                  "faction"
                ],
                "is_async": false
              },
              {
                "name": "process_war_state",
                "line": 195,
                "args": [
                  "faction",
                  "war"
                ],
                "is_async": false
              },
              {
                "name": "process_project_state",
                "line": 209,
                "args": [
                  "faction",
                  "project"
                ],
                "is_async": false
              },
              {
                "name": "check_faction_conflicts",
                "line": 230,
                "args": [
                  "faction"
                ],
                "is_async": false
              },
              {
                "name": "get_shared_borders",
                "line": 255,
                "args": [
                  "faction1",
                  "faction2"
                ],
                "is_async": false
              },
              {
                "name": "calculate_quest_success_rate",
                "line": 276,
                "args": [
                  "faction"
                ],
                "is_async": false
              },
              {
                "name": "log_faction_event",
                "line": 291,
                "args": [
                  "faction",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "process_region_changes",
                "line": 301,
                "args": [
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "process_world_events",
                "line": 317,
                "args": [
                  "world_state"
                ],
                "is_async": false
              },
              {
                "name": "handle_event_completion",
                "line": 328,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_event_effects",
                "line": 350,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_war_effects",
                "line": 372,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_trade_effects",
                "line": 376,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_diplomatic_effects",
                "line": 380,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_festival_effects",
                "line": 384,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_calamity_effects",
                "line": 388,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_discovery_effects",
                "line": 392,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_religious_effects",
                "line": 396,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_war_completion",
                "line": 400,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_trade_completion",
                "line": 404,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_diplomatic_completion",
                "line": 408,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_festival_completion",
                "line": 412,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_calamity_completion",
                "line": 416,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_discovery_completion",
                "line": 420,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_religious_completion",
                "line": 424,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "generate_random_event",
                "line": 430,
                "args": [
                  "world_state"
                ],
                "is_async": false
              },
              {
                "name": "calculate_event_weights",
                "line": 455,
                "args": [
                  "world_state"
                ],
                "is_async": false
              },
              {
                "name": "generate_event_data",
                "line": 474,
                "args": [
                  "event_type",
                  "world_state"
                ],
                "is_async": false
              },
              {
                "name": "generate_trade_event_data",
                "line": 489,
                "args": [
                  "world_state"
                ],
                "is_async": false
              },
              {
                "name": "generate_diplomatic_event_data",
                "line": 498,
                "args": [
                  "world_state"
                ],
                "is_async": false
              },
              {
                "name": "calculate_event_duration",
                "line": 507,
                "args": [
                  "event_type"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/terrain_generator.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Tuple",
                  "Optional",
                  "Any",
                  "Set"
                ],
                "line": 14
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 15
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 16
              },
              {
                "type": "import",
                "module": "time",
                "alias": null,
                "line": 17
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 18
              },
              {
                "type": "import",
                "module": "numpy",
                "alias": "np",
                "line": 19
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 20
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 21
              }
            ],
            "functions": [
              {
                "name": "default",
                "line": 45,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 84,
                "args": [
                  "self",
                  "seed",
                  "config"
                ],
                "is_async": false
              },
              {
                "name": "load_biome_data",
                "line": 100,
                "args": [
                  "self",
                  "data_dir"
                ],
                "is_async": false
              },
              {
                "name": "generate_transition_biomes",
                "line": 226,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "generate_terrain",
                "line": 285,
                "args": [
                  "self",
                  "region_x",
                  "region_y",
                  "size",
                  "region_seed",
                  "biome_influence"
                ],
                "is_async": false
              },
              {
                "name": "_generate_noise",
                "line": 395,
                "args": [
                  "self",
                  "x",
                  "y",
                  "noise_layers",
                  "region_seed"
                ],
                "is_async": false
              },
              {
                "name": "_perlin_noise",
                "line": 448,
                "args": [
                  "self",
                  "x",
                  "y",
                  "seed"
                ],
                "is_async": false
              },
              {
                "name": "_fractal_noise",
                "line": 495,
                "args": [
                  "self",
                  "x",
                  "y",
                  "scale",
                  "octaves",
                  "persistence",
                  "lacunarity",
                  "seed"
                ],
                "is_async": false
              },
              {
                "name": "_ranges_overlap",
                "line": 536,
                "args": [
                  "self",
                  "range1",
                  "range2"
                ],
                "is_async": false
              },
              {
                "name": "_merge_ranges",
                "line": 540,
                "args": [
                  "self",
                  "range1",
                  "range2"
                ],
                "is_async": false
              },
              {
                "name": "_merge_resources",
                "line": 544,
                "args": [
                  "self",
                  "res1",
                  "res2"
                ],
                "is_async": false
              },
              {
                "name": "_blend_colors",
                "line": 558,
                "args": [
                  "self",
                  "color1",
                  "color2"
                ],
                "is_async": false
              },
              {
                "name": "_generate_improved_rivers",
                "line": 582,
                "args": [
                  "self",
                  "elevation_map",
                  "region_seed",
                  "size"
                ],
                "is_async": false
              },
              {
                "name": "_determine_biome",
                "line": 662,
                "args": [
                  "self",
                  "elevation",
                  "temperature",
                  "moisture",
                  "is_river"
                ],
                "is_async": false
              },
              {
                "name": "_calculate_factor_score",
                "line": 722,
                "args": [
                  "self",
                  "value",
                  "range_tuple"
                ],
                "is_async": false
              },
              {
                "name": "get_biome_info",
                "line": 748,
                "args": [
                  "self",
                  "biome_id"
                ],
                "is_async": false
              },
              {
                "name": "get_all_biomes",
                "line": 760,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "pseudo_random",
                "line": 462,
                "args": [
                  "ix",
                  "iy"
                ],
                "is_async": false
              },
              {
                "name": "smoothstep",
                "line": 476,
                "args": [
                  "t"
                ],
                "is_async": false
              },
              {
                "name": "hex_to_rgb",
                "line": 561,
                "args": [
                  "hex_color"
                ],
                "is_async": false
              },
              {
                "name": "rgb_to_hex",
                "line": 566,
                "args": [
                  "rgb_tuple"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "NoiseLayer",
                "line": 24,
                "bases": [],
                "methods": []
              },
              {
                "name": "TerrainConfig",
                "line": 34,
                "bases": [],
                "methods": [
                  "default"
                ]
              },
              {
                "name": "BiomeInfo",
                "line": 64,
                "bases": [],
                "methods": []
              },
              {
                "name": "TerrainGenerator",
                "line": 78,
                "bases": [],
                "methods": [
                  "__init__",
                  "load_biome_data",
                  "generate_transition_biomes",
                  "generate_terrain",
                  "_generate_noise",
                  "_perlin_noise",
                  "_fractal_noise",
                  "_ranges_overlap",
                  "_merge_ranges",
                  "_merge_resources",
                  "_blend_colors",
                  "_generate_improved_rivers",
                  "_determine_biome",
                  "_calculate_factor_score",
                  "get_biome_info",
                  "get_all_biomes"
                ]
              }
            ]
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "mods/mod_synchronizer.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "mods/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.world_state.mod_synchronizer",
                "names": [
                  "router",
                  "ModInfo",
                  "ModDependency",
                  "ModIncompatibility",
                  "ConflictType",
                  "ConflictResolutionStrategy",
                  "ModConflict",
                  "SyncStatus"
                ],
                "line": 4
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "api/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.world_state.router",
                "names": [
                  "router"
                ],
                "line": 8
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "events/handlers.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "Optional",
                  "List"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.models.event_dispatcher",
                "names": [
                  "EventHandler"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.core.events",
                "names": [
                  "WorldStateEvent",
                  "WorldStateCreatedEvent",
                  "WorldStateUpdatedEvent",
                  "WorldStateDeletedEvent",
                  "WorldStateCalculatedEvent"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.utils.world_event_utils",
                "names": [
                  "create_world_event"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_state.core.types",
                "names": [
                  "StateCategory",
                  "WorldRegion"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 23,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_log_to_analytics",
                "line": 303,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "_is_significant_state",
                "line": 318,
                "args": [
                  "self",
                  "state_key",
                  "category"
                ],
                "is_async": false
              },
              {
                "name": "_get_significance_threshold",
                "line": 388,
                "args": [
                  "self",
                  "state_key",
                  "category"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "WorldStateEventHandler",
                "line": 20,
                "bases": [
                  "EventHandler"
                ],
                "methods": [
                  "__init__",
                  "handle_event",
                  "_handle_created_event",
                  "_handle_updated_event",
                  "_handle_deleted_event",
                  "_handle_calculated_event",
                  "_handle_category_specific",
                  "_handle_faction_event",
                  "_handle_population_event",
                  "_handle_diplomacy_event",
                  "_handle_economy_event",
                  "_handle_military_event",
                  "_handle_religion_event",
                  "_log_to_analytics",
                  "_is_significant_state",
                  "_is_significant_change",
                  "_get_significance_threshold",
                  "_create_world_event"
                ]
              }
            ]
          },
          {
            "file": "events/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.world_state.handlers",
                "names": [
                  "WorldEventHandler",
                  "RegionEventHandler",
                  "FactionEventHandler",
                  "NPCEventHandler"
                ],
                "line": 8
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "shutil",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/world_state/cleanup.py"
          },
          {
            "type": "non_canonical_import",
            "import": "shutil",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/world_state/core/loader.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.world",
            "line": 15,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/tick_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.world_event",
            "line": 17,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/tick_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.core.enums",
            "line": 18,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/tick_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.validation.world_event_validation",
            "line": 22,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/tick_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 20,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/terrain_generator.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "crafting": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/crafting",
        "files": [
          "services.py",
          "models.py",
          "__init__.py",
          "routers/station_router.py",
          "routers/recipe_router.py",
          "routers/__init__.py",
          "routers/crafting_router.py",
          "migrations/001_create_crafting_tables.py",
          "repositories/crafting_repository.py",
          "repositories/base_repository.py",
          "repositories/recipe_repository.py",
          "repositories/__init__.py",
          "repositories/station_repository.py",
          "models/ingredient.py",
          "models/__init__.py",
          "models/result.py",
          "models/station.py",
          "models/recipe.py",
          "schemas/__init__.py",
          "schemas/recipe_schemas.py",
          "schemas/station_schemas.py",
          "schemas/crafting_schemas.py",
          "data/progression_manager.py",
          "data/recipe_loader.py",
          "data/station_loader.py",
          "data/config_manager.py",
          "data/cache_manager.py",
          "data/__init__.py",
          "services/crafting_service.py",
          "services/__init__.py",
          "services/station_service.py",
          "services/crafting_experience_service.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models",
                "names": [
                  "CraftingEntity",
                  "CraftingModel",
                  "CreateCraftingRequest",
                  "UpdateCraftingRequest",
                  "CraftingResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "CraftingNotFoundError",
                  "CraftingValidationError",
                  "CraftingConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_crafting_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CraftingService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x10510b7f0>"
                ],
                "methods": [
                  "__init__",
                  "create_crafting",
                  "get_crafting_by_id",
                  "update_crafting",
                  "delete_crafting",
                  "list_craftings",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_crafting_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CraftingBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingModel",
                "line": 36,
                "bases": [
                  "CraftingBaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateCraftingRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateCraftingRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.recipe",
                "names": [
                  "CraftingRecipe"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.ingredient",
                "names": [
                  "CraftingIngredient"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.result",
                "names": [
                  "CraftingResult"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.station",
                "names": [
                  "CraftingStation"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.services.crafting_service",
                "names": [
                  "CraftingService"
                ],
                "line": 10
              }
            ],
            "functions": [
              {
                "name": "get_crafting_service",
                "line": 15,
                "args": [],
                "is_async": false
              },
              {
                "name": "craft",
                "line": 29,
                "args": [
                  "character_id",
                  "recipe_id",
                  "inventory_id",
                  "station_id",
                  "skills"
                ],
                "is_async": false
              },
              {
                "name": "get_available_recipes",
                "line": 46,
                "args": [
                  "character_id",
                  "skills"
                ],
                "is_async": false
              },
              {
                "name": "can_craft",
                "line": 60,
                "args": [
                  "character_id",
                  "recipe_id",
                  "inventory_id",
                  "station_id",
                  "skills"
                ],
                "is_async": false
              },
              {
                "name": "learn_recipe",
                "line": 77,
                "args": [
                  "character_id",
                  "recipe_id"
                ],
                "is_async": false
              },
              {
                "name": "discover_recipe",
                "line": 91,
                "args": [
                  "character_id",
                  "discovery_method",
                  "context_data"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/station_router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "HTTPException",
                  "Depends",
                  "Query",
                  "status"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "fastapi.responses",
                "names": [
                  "JSONResponse"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.schemas",
                "names": [
                  "StationResponseSchema",
                  "StationListResponseSchema",
                  "StationSearchSchema",
                  "StationUseSchema",
                  "StationUseResponseSchema",
                  "StationStatusSchema",
                  "StationUpgradeSchema",
                  "StationUpgradeResponseSchema",
                  "StationCreateSchema",
                  "StationUpdateSchema",
                  "StationMaintenanceSchema",
                  "StationMaintenanceResponseSchema"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.repositories",
                "names": [
                  "StationRepository"
                ],
                "line": 27
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.services",
                "names": [
                  "StationService"
                ],
                "line": 28
              }
            ],
            "functions": [
              {
                "name": "get_station_repository",
                "line": 33,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_station_service",
                "line": 38,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/recipe_router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "HTTPException",
                  "Depends",
                  "Query",
                  "status"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "fastapi.responses",
                "names": [
                  "JSONResponse"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.schemas",
                "names": [
                  "RecipeResponseSchema",
                  "RecipeListResponseSchema",
                  "RecipeSearchSchema",
                  "RecipeDiscoverySchema",
                  "RecipeDiscoveryResponseSchema",
                  "CraftabilityCheckSchema",
                  "CraftabilityResponseSchema",
                  "RecipeCreateSchema",
                  "RecipeUpdateSchema"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.repositories",
                "names": [
                  "RecipeRepository"
                ],
                "line": 23
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.services",
                "names": [
                  "CraftingService"
                ],
                "line": 24
              }
            ],
            "functions": [
              {
                "name": "get_recipe_repository",
                "line": 29,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_crafting_service",
                "line": 34,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.routers.recipe_router",
                "names": [
                  "router"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.routers.station_router",
                "names": [
                  "router"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.routers.crafting_router",
                "names": [
                  "router"
                ],
                "line": 14
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/crafting_router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "HTTPException",
                  "Depends",
                  "Query",
                  "status"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "fastapi.responses",
                "names": [
                  "JSONResponse"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.schemas",
                "names": [
                  "CraftingStartSchema",
                  "CraftingStartResponseSchema",
                  "CraftingStatusResponseSchema",
                  "CraftingCompleteSchema",
                  "CraftingCompleteResponseSchema",
                  "CraftingCancelSchema",
                  "CraftingCancelResponseSchema",
                  "CraftingQueueSchema",
                  "CraftingQueueResponseSchema",
                  "CraftingBatchSchema",
                  "CraftingBatchResponseSchema",
                  "RecipeListResponseSchema"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.services",
                "names": [
                  "CraftingService"
                ],
                "line": 26
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.repositories",
                "names": [
                  "RecipeRepository"
                ],
                "line": 27
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 70
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 113
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.schemas",
                "names": [
                  "CraftingProgressSchema"
                ],
                "line": 114
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 171
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.schemas",
                "names": [
                  "CraftingResultItemSchema"
                ],
                "line": 172
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 233
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 303
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.schemas",
                "names": [
                  "RecipeResponseSchema"
                ],
                "line": 386
              }
            ],
            "functions": [
              {
                "name": "get_crafting_service",
                "line": 32,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_recipe_repository",
                "line": 37,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "migrations/001_create_crafting_tables.py",
            "imports": [
              {
                "type": "from_import",
                "module": "alembic",
                "names": [
                  "op"
                ],
                "line": 7
              },
              {
                "type": "import",
                "module": "sqlalchemy",
                "alias": "sa",
                "line": 8
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects",
                "names": [
                  "postgresql"
                ],
                "line": 9
              }
            ],
            "functions": [
              {
                "name": "upgrade",
                "line": 17,
                "args": [],
                "is_async": false
              },
              {
                "name": "downgrade",
                "line": 117,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "repositories/crafting_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models.base",
                "names": [
                  "BaseModel"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 13,
                "args": [
                  "self",
                  "db"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CraftingRepository",
                "line": 10,
                "bases": [],
                "methods": [
                  "__init__",
                  "create",
                  "get_by_id",
                  "get_all",
                  "update",
                  "delete"
                ]
              }
            ]
          },
          {
            "file": "repositories/base_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Type",
                  "TypeVar",
                  "Generic",
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.exc",
                "names": [
                  "SQLAlchemyError"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "BaseModel",
                  "SessionManager"
                ],
                "line": 12
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 21,
                "args": [
                  "self",
                  "model"
                ],
                "is_async": false
              },
              {
                "name": "_get_session",
                "line": 31,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "create",
                "line": 35,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_by_id",
                "line": 61,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "find_by",
                "line": 77,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "update",
                "line": 97,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "delete",
                "line": 127,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "BaseRepository",
                "line": 16,
                "bases": [
                  "<ast.Subscript object at 0x104f6c730>"
                ],
                "methods": [
                  "__init__",
                  "_get_session",
                  "create",
                  "get_by_id",
                  "find_by",
                  "update",
                  "delete"
                ]
              }
            ]
          },
          {
            "file": "repositories/recipe_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session",
                  "joinedload"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.recipe",
                "names": [
                  "CraftingRecipe"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.repositories.base_repository",
                "names": [
                  "BaseRepository"
                ],
                "line": 12
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 19,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_with_ingredients_and_results",
                "line": 23,
                "args": [
                  "self",
                  "recipe_id"
                ],
                "is_async": false
              },
              {
                "name": "get_recipes_by_skill",
                "line": 43,
                "args": [
                  "self",
                  "skill_type",
                  "max_level"
                ],
                "is_async": false
              },
              {
                "name": "get_recipes_by_station",
                "line": 67,
                "args": [
                  "self",
                  "station_type"
                ],
                "is_async": false
              },
              {
                "name": "get_craftable_recipes",
                "line": 90,
                "args": [
                  "self",
                  "character_skills",
                  "available_stations"
                ],
                "is_async": false
              },
              {
                "name": "search_recipes",
                "line": 131,
                "args": [
                  "self",
                  "search_term",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "get_hidden_recipes",
                "line": 156,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_recipes_by_experience_range",
                "line": 165,
                "args": [
                  "self",
                  "min_exp",
                  "max_exp"
                ],
                "is_async": false
              },
              {
                "name": "get_recipes_requiring_ingredient",
                "line": 189,
                "args": [
                  "self",
                  "item_id"
                ],
                "is_async": false
              },
              {
                "name": "get_recipes_producing_item",
                "line": 209,
                "args": [
                  "self",
                  "item_id"
                ],
                "is_async": false
              },
              {
                "name": "enable_recipe",
                "line": 229,
                "args": [
                  "self",
                  "recipe_id"
                ],
                "is_async": false
              },
              {
                "name": "disable_recipe",
                "line": 241,
                "args": [
                  "self",
                  "recipe_id"
                ],
                "is_async": false
              },
              {
                "name": "hide_recipe",
                "line": 253,
                "args": [
                  "self",
                  "recipe_id"
                ],
                "is_async": false
              },
              {
                "name": "reveal_recipe",
                "line": 265,
                "args": [
                  "self",
                  "recipe_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "RecipeRepository",
                "line": 14,
                "bases": [
                  "<ast.Subscript object at 0x1050d3c40>"
                ],
                "methods": [
                  "__init__",
                  "get_with_ingredients_and_results",
                  "get_recipes_by_skill",
                  "get_recipes_by_station",
                  "get_craftable_recipes",
                  "search_recipes",
                  "get_hidden_recipes",
                  "get_recipes_by_experience_range",
                  "get_recipes_requiring_ingredient",
                  "get_recipes_producing_item",
                  "enable_recipe",
                  "disable_recipe",
                  "hide_recipe",
                  "reveal_recipe"
                ]
              }
            ]
          },
          {
            "file": "repositories/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.crafting.repositories.base_repository",
                "names": [
                  "BaseRepository"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.repositories.recipe_repository",
                "names": [
                  "RecipeRepository"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.repositories.station_repository",
                "names": [
                  "StationRepository"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/station_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.station",
                "names": [
                  "CraftingStation"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.repositories.base_repository",
                "names": [
                  "BaseRepository"
                ],
                "line": 12
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 19,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_by_type",
                "line": 23,
                "args": [
                  "self",
                  "station_type"
                ],
                "is_async": false
              },
              {
                "name": "get_by_location",
                "line": 35,
                "args": [
                  "self",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "get_by_owner",
                "line": 47,
                "args": [
                  "self",
                  "owner_id"
                ],
                "is_async": false
              },
              {
                "name": "get_public_stations",
                "line": 59,
                "args": [
                  "self",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "get_available_stations",
                "line": 74,
                "args": [
                  "self",
                  "character_id",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "get_stations_by_level_range",
                "line": 101,
                "args": [
                  "self",
                  "min_level",
                  "max_level"
                ],
                "is_async": false
              },
              {
                "name": "get_high_efficiency_stations",
                "line": 125,
                "args": [
                  "self",
                  "min_efficiency"
                ],
                "is_async": false
              },
              {
                "name": "get_stations_with_capacity",
                "line": 145,
                "args": [
                  "self",
                  "min_capacity"
                ],
                "is_async": false
              },
              {
                "name": "search_stations",
                "line": 165,
                "args": [
                  "self",
                  "search_term",
                  "limit"
                ],
                "is_async": false
              },
              {
                "name": "activate_station",
                "line": 190,
                "args": [
                  "self",
                  "station_id"
                ],
                "is_async": false
              },
              {
                "name": "deactivate_station",
                "line": 202,
                "args": [
                  "self",
                  "station_id"
                ],
                "is_async": false
              },
              {
                "name": "make_public",
                "line": 214,
                "args": [
                  "self",
                  "station_id"
                ],
                "is_async": false
              },
              {
                "name": "make_private",
                "line": 226,
                "args": [
                  "self",
                  "station_id"
                ],
                "is_async": false
              },
              {
                "name": "upgrade_station_level",
                "line": 238,
                "args": [
                  "self",
                  "station_id"
                ],
                "is_async": false
              },
              {
                "name": "upgrade_station_upgrade_level",
                "line": 253,
                "args": [
                  "self",
                  "station_id"
                ],
                "is_async": false
              },
              {
                "name": "set_capacity",
                "line": 268,
                "args": [
                  "self",
                  "station_id",
                  "capacity"
                ],
                "is_async": false
              },
              {
                "name": "set_efficiency_bonus",
                "line": 281,
                "args": [
                  "self",
                  "station_id",
                  "efficiency_bonus"
                ],
                "is_async": false
              },
              {
                "name": "set_quality_bonus",
                "line": 294,
                "args": [
                  "self",
                  "station_id",
                  "quality_bonus"
                ],
                "is_async": false
              },
              {
                "name": "transfer_ownership",
                "line": 307,
                "args": [
                  "self",
                  "station_id",
                  "new_owner_id"
                ],
                "is_async": false
              },
              {
                "name": "relocate_station",
                "line": 320,
                "args": [
                  "self",
                  "station_id",
                  "new_location_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "StationRepository",
                "line": 14,
                "bases": [
                  "<ast.Subscript object at 0x10507fc70>"
                ],
                "methods": [
                  "__init__",
                  "get_by_type",
                  "get_by_location",
                  "get_by_owner",
                  "get_public_stations",
                  "get_available_stations",
                  "get_stations_by_level_range",
                  "get_high_efficiency_stations",
                  "get_stations_with_capacity",
                  "search_stations",
                  "activate_station",
                  "deactivate_station",
                  "make_public",
                  "make_private",
                  "upgrade_station_level",
                  "upgrade_station_upgrade_level",
                  "set_capacity",
                  "set_efficiency_bonus",
                  "set_quality_bonus",
                  "transfer_ownership",
                  "relocate_station"
                ]
              }
            ]
          },
          {
            "file": "models/ingredient.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "Integer",
                  "String",
                  "ForeignKey",
                  "Boolean",
                  "JSON"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "BaseModel",
                  "GUID"
                ],
                "line": 10
              }
            ],
            "functions": [
              {
                "name": "check_availability",
                "line": 39,
                "args": [
                  "self",
                  "inventory"
                ],
                "is_async": false
              },
              {
                "name": "get_substitution_options",
                "line": 54,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "can_substitute",
                "line": 63,
                "args": [
                  "self",
                  "available_item_id",
                  "available_quantity"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CraftingIngredient",
                "line": 12,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "check_availability",
                  "get_substitution_options",
                  "can_substitute"
                ]
              }
            ]
          },
          {
            "file": "models/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.recipe",
                "names": [
                  "CraftingRecipe"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.ingredient",
                "names": [
                  "CraftingIngredient"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.station",
                "names": [
                  "CraftingStation"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.result",
                "names": [
                  "CraftingResult"
                ],
                "line": 10
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/result.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "Integer",
                  "String",
                  "ForeignKey",
                  "Float",
                  "JSON"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "BaseModel",
                  "GUID"
                ],
                "line": 10
              }
            ],
            "functions": [
              {
                "name": "calculate_actual_quantity",
                "line": 39,
                "args": [
                  "self",
                  "base_quantity",
                  "skill_level",
                  "station_bonus"
                ],
                "is_async": false
              },
              {
                "name": "determine_quality",
                "line": 63,
                "args": [
                  "self",
                  "skill_level",
                  "station_quality_bonus"
                ],
                "is_async": false
              },
              {
                "name": "meets_probability_check",
                "line": 102,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_quality_range",
                "line": 112,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_item_details",
                "line": 125,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CraftingResult",
                "line": 12,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "calculate_actual_quantity",
                  "determine_quality",
                  "meets_probability_check",
                  "get_quality_range",
                  "get_item_details"
                ]
              }
            ]
          },
          {
            "file": "models/station.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "Integer",
                  "String",
                  "Boolean",
                  "JSON",
                  "Float"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "BaseModel"
                ],
                "line": 10
              }
            ],
            "functions": [
              {
                "name": "can_craft_recipe",
                "line": 55,
                "args": [
                  "self",
                  "recipe"
                ],
                "is_async": false
              },
              {
                "name": "get_efficiency_multiplier",
                "line": 80,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_quality_bonus",
                "line": 93,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "is_available",
                "line": 106,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "upgrade",
                "line": 126,
                "args": [
                  "self",
                  "upgrade_type"
                ],
                "is_async": false
              },
              {
                "name": "get_allowed_categories",
                "line": 160,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_build_requirements",
                "line": 183,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "calculate_maintenance_cost",
                "line": 192,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CraftingStation",
                "line": 12,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "can_craft_recipe",
                  "get_efficiency_multiplier",
                  "get_quality_bonus",
                  "is_available",
                  "upgrade",
                  "get_allowed_categories",
                  "get_build_requirements",
                  "calculate_maintenance_cost"
                ]
              }
            ]
          },
          {
            "file": "models/recipe.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "Integer",
                  "String",
                  "ForeignKey",
                  "Boolean",
                  "JSON",
                  "Float"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "BaseModel"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.ingredient",
                "names": [
                  "CraftingIngredient"
                ],
                "line": 55
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.result",
                "names": [
                  "CraftingResult"
                ],
                "line": 67
              }
            ],
            "functions": [
              {
                "name": "add_ingredient",
                "line": 53,
                "args": [
                  "self",
                  "item_id",
                  "quantity",
                  "is_consumed",
                  "substitution_groups"
                ],
                "is_async": false
              },
              {
                "name": "add_result",
                "line": 65,
                "args": [
                  "self",
                  "item_id",
                  "quantity",
                  "probability"
                ],
                "is_async": false
              },
              {
                "name": "can_craft",
                "line": 76,
                "args": [
                  "self",
                  "inventory",
                  "character_skills"
                ],
                "is_async": false
              },
              {
                "name": "get_required_ingredients",
                "line": 102,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_possible_results",
                "line": 114,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CraftingRecipe",
                "line": 12,
                "bases": [
                  "BaseModel"
                ],
                "methods": [
                  "add_ingredient",
                  "add_result",
                  "can_craft",
                  "get_required_ingredients",
                  "get_possible_results"
                ]
              }
            ]
          },
          {
            "file": "schemas/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.crafting.schemas.recipe_schemas",
                "names": [
                  "IngredientSchema",
                  "ResultSchema",
                  "RecipeBaseSchema",
                  "RecipeCreateSchema",
                  "RecipeUpdateSchema",
                  "RecipeResponseSchema",
                  "RecipeListResponseSchema",
                  "RecipeSearchSchema",
                  "RecipeDiscoverySchema",
                  "RecipeDiscoveryResponseSchema",
                  "CraftabilityCheckSchema",
                  "CraftabilityResponseSchema"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.schemas.station_schemas",
                "names": [
                  "StationBaseSchema",
                  "StationCreateSchema",
                  "StationUpdateSchema",
                  "StationResponseSchema",
                  "StationListResponseSchema",
                  "StationSearchSchema",
                  "StationUseSchema",
                  "StationUseResponseSchema",
                  "StationStatusSchema",
                  "StationUpgradeSchema",
                  "StationUpgradeResponseSchema",
                  "StationMaintenanceSchema",
                  "StationMaintenanceResponseSchema"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.schemas.crafting_schemas",
                "names": [
                  "CraftingStatus",
                  "QualityLevel",
                  "CraftingStartSchema",
                  "CraftingStartResponseSchema",
                  "CraftingProgressSchema",
                  "CraftingStatusResponseSchema",
                  "CraftingCompleteSchema",
                  "CraftingResultItemSchema",
                  "CraftingCompleteResponseSchema",
                  "CraftingCancelSchema",
                  "CraftingCancelResponseSchema",
                  "CraftingQueueSchema",
                  "CraftingQueueResponseSchema",
                  "CraftingBatchSchema",
                  "CraftingBatchResponseSchema"
                ],
                "line": 38
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/recipe_schemas.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 10
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "IngredientSchema",
                "line": 12,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "ResultSchema",
                "line": 21,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RecipeBaseSchema",
                "line": 29,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RecipeCreateSchema",
                "line": 42,
                "bases": [
                  "RecipeBaseSchema"
                ],
                "methods": []
              },
              {
                "name": "RecipeUpdateSchema",
                "line": 49,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RecipeResponseSchema",
                "line": 62,
                "bases": [
                  "RecipeBaseSchema"
                ],
                "methods": []
              },
              {
                "name": "RecipeListResponseSchema",
                "line": 75,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RecipeSearchSchema",
                "line": 82,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RecipeDiscoverySchema",
                "line": 95,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "RecipeDiscoveryResponseSchema",
                "line": 101,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftabilityCheckSchema",
                "line": 107,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftabilityResponseSchema",
                "line": 113,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 72,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "schemas/station_schemas.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 10
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "StationBaseSchema",
                "line": 12,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "StationCreateSchema",
                "line": 26,
                "bases": [
                  "StationBaseSchema"
                ],
                "methods": []
              },
              {
                "name": "StationUpdateSchema",
                "line": 35,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "StationResponseSchema",
                "line": 49,
                "bases": [
                  "StationBaseSchema"
                ],
                "methods": []
              },
              {
                "name": "StationListResponseSchema",
                "line": 70,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "StationSearchSchema",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "StationUseSchema",
                "line": 93,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "StationUseResponseSchema",
                "line": 100,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "StationStatusSchema",
                "line": 111,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "StationUpgradeSchema",
                "line": 122,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "StationUpgradeResponseSchema",
                "line": 129,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "StationMaintenanceSchema",
                "line": 140,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "StationMaintenanceResponseSchema",
                "line": 146,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 67,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "schemas/crafting_schemas.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 11
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "CraftingStatus",
                "line": 13,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "QualityLevel",
                "line": 22,
                "bases": [
                  "str",
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "CraftingStartSchema",
                "line": 32,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingStartResponseSchema",
                "line": 44,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingProgressSchema",
                "line": 61,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingStatusResponseSchema",
                "line": 73,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingCompleteSchema",
                "line": 87,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingResultItemSchema",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingCompleteResponseSchema",
                "line": 107,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingCancelSchema",
                "line": 122,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingCancelResponseSchema",
                "line": 129,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingQueueSchema",
                "line": 139,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingQueueResponseSchema",
                "line": 146,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingBatchSchema",
                "line": 156,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "CraftingBatchResponseSchema",
                "line": 164,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "data/progression_manager.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Tuple"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "asdict"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_db_session"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.data.cache_manager",
                "names": [
                  "get_progression_cache"
                ],
                "line": 15
              }
            ],
            "functions": [
              {
                "name": "get_progression_manager",
                "line": 552,
                "args": [],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 61,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_load_achievements",
                "line": 67,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_character_skills",
                "line": 132,
                "args": [
                  "self",
                  "character_id",
                  "session"
                ],
                "is_async": false
              },
              {
                "name": "gain_experience",
                "line": 189,
                "args": [
                  "self",
                  "character_id",
                  "skill_name",
                  "experience",
                  "session"
                ],
                "is_async": false
              },
              {
                "name": "_calculate_experience_requirement",
                "line": 278,
                "args": [
                  "self",
                  "level"
                ],
                "is_async": false
              },
              {
                "name": "unlock_recipe",
                "line": 285,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id",
                  "session"
                ],
                "is_async": false
              },
              {
                "name": "get_unlocked_recipes",
                "line": 312,
                "args": [
                  "self",
                  "character_id",
                  "session"
                ],
                "is_async": false
              },
              {
                "name": "start_crafting_session",
                "line": 337,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "end_crafting_session",
                "line": 365,
                "args": [
                  "self",
                  "session_id"
                ],
                "is_async": false
              },
              {
                "name": "record_craft",
                "line": 390,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id",
                  "quantity",
                  "quality",
                  "session"
                ],
                "is_async": false
              },
              {
                "name": "_check_achievements",
                "line": 420,
                "args": [
                  "self",
                  "character_id",
                  "skills",
                  "session"
                ],
                "is_async": false
              },
              {
                "name": "_check_achievement_requirements",
                "line": 449,
                "args": [
                  "self",
                  "achievement",
                  "skills",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "get_character_achievements",
                "line": 479,
                "args": [
                  "self",
                  "character_id",
                  "session"
                ],
                "is_async": false
              },
              {
                "name": "get_crafting_history",
                "line": 494,
                "args": [
                  "self",
                  "character_id",
                  "days",
                  "session"
                ],
                "is_async": false
              },
              {
                "name": "get_progression_stats",
                "line": 511,
                "args": [
                  "self",
                  "character_id",
                  "session"
                ],
                "is_async": false
              },
              {
                "name": "invalidate_character_cache",
                "line": 539,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "SkillProgress",
                "line": 20,
                "bases": [],
                "methods": []
              },
              {
                "name": "CraftingSession",
                "line": 32,
                "bases": [],
                "methods": []
              },
              {
                "name": "Achievement",
                "line": 44,
                "bases": [],
                "methods": []
              },
              {
                "name": "ProgressionManager",
                "line": 56,
                "bases": [],
                "methods": [
                  "__init__",
                  "_load_achievements",
                  "get_character_skills",
                  "gain_experience",
                  "_calculate_experience_requirement",
                  "unlock_recipe",
                  "get_unlocked_recipes",
                  "start_crafting_session",
                  "end_crafting_session",
                  "record_craft",
                  "_check_achievements",
                  "_check_achievement_requirements",
                  "get_character_achievements",
                  "get_crafting_history",
                  "get_progression_stats",
                  "invalidate_character_cache"
                ]
              }
            ]
          },
          {
            "file": "data/recipe_loader.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 7
              },
              {
                "type": "import",
                "module": "yaml",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any",
                  "Optional",
                  "Union"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 11
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.recipe",
                "names": [
                  "CraftingRecipe"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.ingredient",
                "names": [
                  "CraftingIngredient"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.result",
                "names": [
                  "CraftingResult"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.repositories.recipe_repository",
                "names": [
                  "RecipeRepository"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_db_session"
                ],
                "line": 19
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 28,
                "args": [
                  "self",
                  "repository"
                ],
                "is_async": false
              },
              {
                "name": "load_from_file",
                "line": 39,
                "args": [
                  "self",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "load_from_directory",
                "line": 85,
                "args": [
                  "self",
                  "directory_path",
                  "recursive"
                ],
                "is_async": false
              },
              {
                "name": "validate_recipes",
                "line": 114,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_validate_recipe",
                "line": 136,
                "args": [
                  "self",
                  "recipe_data",
                  "index"
                ],
                "is_async": false
              },
              {
                "name": "import_to_database",
                "line": 207,
                "args": [
                  "self",
                  "session",
                  "batch_size"
                ],
                "is_async": false
              },
              {
                "name": "_import_batch",
                "line": 256,
                "args": [
                  "self",
                  "session",
                  "batch"
                ],
                "is_async": false
              },
              {
                "name": "clear_loaded_data",
                "line": 324,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_recipe_count",
                "line": 330,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_validation_errors",
                "line": 334,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "RecipeLoader",
                "line": 23,
                "bases": [],
                "methods": [
                  "__init__",
                  "load_from_file",
                  "load_from_directory",
                  "validate_recipes",
                  "_validate_recipe",
                  "import_to_database",
                  "_import_batch",
                  "clear_loaded_data",
                  "get_recipe_count",
                  "get_validation_errors"
                ]
              }
            ]
          },
          {
            "file": "data/station_loader.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 7
              },
              {
                "type": "import",
                "module": "yaml",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any",
                  "Optional",
                  "Union"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.station",
                "names": [
                  "CraftingStation"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.repositories.station_repository",
                "names": [
                  "StationRepository"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_db_session"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 25,
                "args": [
                  "self",
                  "repository"
                ],
                "is_async": false
              },
              {
                "name": "load_from_file",
                "line": 36,
                "args": [
                  "self",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "load_from_directory",
                "line": 82,
                "args": [
                  "self",
                  "directory_path",
                  "recursive"
                ],
                "is_async": false
              },
              {
                "name": "validate_stations",
                "line": 111,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_validate_station",
                "line": 133,
                "args": [
                  "self",
                  "station_data",
                  "index"
                ],
                "is_async": false
              },
              {
                "name": "import_to_database",
                "line": 196,
                "args": [
                  "self",
                  "session",
                  "batch_size"
                ],
                "is_async": false
              },
              {
                "name": "_import_batch",
                "line": 245,
                "args": [
                  "self",
                  "session",
                  "batch"
                ],
                "is_async": false
              },
              {
                "name": "load_station_templates",
                "line": 292,
                "args": [
                  "self",
                  "templates_path"
                ],
                "is_async": false
              },
              {
                "name": "create_station_from_template",
                "line": 325,
                "args": [
                  "self",
                  "template_name",
                  "templates",
                  "overrides"
                ],
                "is_async": false
              },
              {
                "name": "clear_loaded_data",
                "line": 349,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_station_count",
                "line": 355,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_validation_errors",
                "line": 359,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "StationLoader",
                "line": 20,
                "bases": [],
                "methods": [
                  "__init__",
                  "load_from_file",
                  "load_from_directory",
                  "validate_stations",
                  "_validate_station",
                  "import_to_database",
                  "_import_batch",
                  "load_station_templates",
                  "create_station_from_template",
                  "clear_loaded_data",
                  "get_station_count",
                  "get_validation_errors"
                ]
              }
            ]
          },
          {
            "file": "data/config_manager.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 7
              },
              {
                "type": "import",
                "module": "yaml",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Dict",
                  "Optional",
                  "Union",
                  "List"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "asdict"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "threading",
                "names": [
                  "Lock"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "get_config_manager",
                "line": 462,
                "args": [],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 51,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 92,
                "args": [
                  "self",
                  "config_dir"
                ],
                "is_async": false
              },
              {
                "name": "load_all_configs",
                "line": 111,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "load_config",
                "line": 132,
                "args": [
                  "self",
                  "name",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "_update_crafting_config",
                "line": 176,
                "args": [
                  "self",
                  "config_data"
                ],
                "is_async": false
              },
              {
                "name": "_update_balance_config",
                "line": 182,
                "args": [
                  "self",
                  "config_data"
                ],
                "is_async": false
              },
              {
                "name": "get_config",
                "line": 188,
                "args": [
                  "self",
                  "name",
                  "default"
                ],
                "is_async": false
              },
              {
                "name": "set_config",
                "line": 202,
                "args": [
                  "self",
                  "name",
                  "config_data"
                ],
                "is_async": false
              },
              {
                "name": "get_setting",
                "line": 221,
                "args": [
                  "self",
                  "path",
                  "default"
                ],
                "is_async": false
              },
              {
                "name": "set_setting",
                "line": 252,
                "args": [
                  "self",
                  "path",
                  "value"
                ],
                "is_async": false
              },
              {
                "name": "save_config",
                "line": 291,
                "args": [
                  "self",
                  "name",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "save_all_configs",
                "line": 326,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "add_config_watcher",
                "line": 356,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "remove_config_watcher",
                "line": 365,
                "args": [
                  "self",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "_notify_watchers",
                "line": 375,
                "args": [
                  "self",
                  "config_name",
                  "config_data"
                ],
                "is_async": false
              },
              {
                "name": "reload_configs",
                "line": 383,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_crafting_config",
                "line": 388,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_balance_config",
                "line": 392,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "validate_config",
                "line": 396,
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false
              },
              {
                "name": "_validate_crafting_config",
                "line": 419,
                "args": [
                  "self",
                  "config"
                ],
                "is_async": false
              },
              {
                "name": "_validate_balance_config",
                "line": 441,
                "args": [
                  "self",
                  "config"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CraftingConfig",
                "line": 18,
                "bases": [],
                "methods": [
                  "__post_init__"
                ]
              },
              {
                "name": "BalanceConfig",
                "line": 65,
                "bases": [],
                "methods": []
              },
              {
                "name": "ConfigManager",
                "line": 87,
                "bases": [],
                "methods": [
                  "__init__",
                  "load_all_configs",
                  "load_config",
                  "_update_crafting_config",
                  "_update_balance_config",
                  "get_config",
                  "set_config",
                  "get_setting",
                  "set_setting",
                  "save_config",
                  "save_all_configs",
                  "add_config_watcher",
                  "remove_config_watcher",
                  "_notify_watchers",
                  "reload_configs",
                  "get_crafting_config",
                  "get_balance_config",
                  "validate_config",
                  "_validate_crafting_config",
                  "_validate_balance_config"
                ]
              }
            ]
          },
          {
            "file": "data/cache_manager.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 7
              },
              {
                "type": "import",
                "module": "time",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Dict",
                  "List",
                  "Optional",
                  "Union",
                  "Callable"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "threading",
                "names": [
                  "Lock"
                ],
                "line": 11
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "hashlib",
                "alias": null,
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "get_cache_manager",
                "line": 351,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_recipe_cache",
                "line": 358,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_station_cache",
                "line": 362,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_progression_cache",
                "line": 366,
                "args": [],
                "is_async": false
              },
              {
                "name": "is_expired",
                "line": 26,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "touch",
                "line": 32,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 42,
                "args": [
                  "self",
                  "max_size",
                  "default_ttl"
                ],
                "is_async": false
              },
              {
                "name": "get",
                "line": 61,
                "args": [
                  "self",
                  "key"
                ],
                "is_async": false
              },
              {
                "name": "set",
                "line": 87,
                "args": [
                  "self",
                  "key",
                  "value",
                  "ttl"
                ],
                "is_async": false
              },
              {
                "name": "delete",
                "line": 114,
                "args": [
                  "self",
                  "key"
                ],
                "is_async": false
              },
              {
                "name": "clear",
                "line": 130,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_evict_lru",
                "line": 136,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "cleanup_expired",
                "line": 149,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_stats",
                "line": 170,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_or_set",
                "line": 191,
                "args": [
                  "self",
                  "key",
                  "factory",
                  "ttl"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 215,
                "args": [
                  "self",
                  "cache_manager"
                ],
                "is_async": false
              },
              {
                "name": "get_recipe",
                "line": 225,
                "args": [
                  "self",
                  "recipe_id"
                ],
                "is_async": false
              },
              {
                "name": "set_recipe",
                "line": 229,
                "args": [
                  "self",
                  "recipe_id",
                  "recipe_data",
                  "ttl"
                ],
                "is_async": false
              },
              {
                "name": "get_recipes_by_skill",
                "line": 233,
                "args": [
                  "self",
                  "skill",
                  "max_level"
                ],
                "is_async": false
              },
              {
                "name": "set_recipes_by_skill",
                "line": 238,
                "args": [
                  "self",
                  "skill",
                  "max_level",
                  "recipes",
                  "ttl"
                ],
                "is_async": false
              },
              {
                "name": "get_search_results",
                "line": 244,
                "args": [
                  "self",
                  "query"
                ],
                "is_async": false
              },
              {
                "name": "set_search_results",
                "line": 251,
                "args": [
                  "self",
                  "query",
                  "results",
                  "ttl"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 261,
                "args": [
                  "self",
                  "cache_manager"
                ],
                "is_async": false
              },
              {
                "name": "get_station",
                "line": 271,
                "args": [
                  "self",
                  "station_id"
                ],
                "is_async": false
              },
              {
                "name": "set_station",
                "line": 275,
                "args": [
                  "self",
                  "station_id",
                  "station_data",
                  "ttl"
                ],
                "is_async": false
              },
              {
                "name": "get_stations_by_location",
                "line": 279,
                "args": [
                  "self",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "set_stations_by_location",
                "line": 284,
                "args": [
                  "self",
                  "location_id",
                  "stations",
                  "ttl"
                ],
                "is_async": false
              },
              {
                "name": "get_available_stations",
                "line": 290,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "set_available_stations",
                "line": 295,
                "args": [
                  "self",
                  "character_id",
                  "stations",
                  "ttl"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 304,
                "args": [
                  "self",
                  "cache_manager"
                ],
                "is_async": false
              },
              {
                "name": "get_character_skills",
                "line": 314,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "set_character_skills",
                "line": 319,
                "args": [
                  "self",
                  "character_id",
                  "skills",
                  "ttl"
                ],
                "is_async": false
              },
              {
                "name": "get_unlocked_recipes",
                "line": 325,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "set_unlocked_recipes",
                "line": 330,
                "args": [
                  "self",
                  "character_id",
                  "recipe_ids",
                  "ttl"
                ],
                "is_async": false
              },
              {
                "name": "invalidate_character_data",
                "line": 336,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CacheEntry",
                "line": 18,
                "bases": [],
                "methods": [
                  "is_expired",
                  "touch"
                ]
              },
              {
                "name": "CacheManager",
                "line": 37,
                "bases": [],
                "methods": [
                  "__init__",
                  "get",
                  "set",
                  "delete",
                  "clear",
                  "_evict_lru",
                  "cleanup_expired",
                  "get_stats",
                  "get_or_set"
                ]
              },
              {
                "name": "RecipeCache",
                "line": 212,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_recipe",
                  "set_recipe",
                  "get_recipes_by_skill",
                  "set_recipes_by_skill",
                  "get_search_results",
                  "set_search_results"
                ]
              },
              {
                "name": "StationCache",
                "line": 258,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_station",
                  "set_station",
                  "get_stations_by_location",
                  "set_stations_by_location",
                  "get_available_stations",
                  "set_available_stations"
                ]
              },
              {
                "name": "ProgressionCache",
                "line": 301,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_character_skills",
                  "set_character_skills",
                  "get_unlocked_recipes",
                  "set_unlocked_recipes",
                  "invalidate_character_data"
                ]
              }
            ]
          },
          {
            "file": "data/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.crafting.data.recipe_loader",
                "names": [
                  "RecipeLoader"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.data.station_loader",
                "names": [
                  "StationLoader"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.data.config_manager",
                "names": [
                  "ConfigManager"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.data.cache_manager",
                "names": [
                  "CacheManager"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.data.progression_manager",
                "names": [
                  "ProgressionManager"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.data.validators",
                "names": [
                  "RecipeValidator",
                  "StationValidator",
                  "DataValidator"
                ],
                "line": 13
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/crafting_service.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any",
                  "Tuple",
                  "Union"
                ],
                "line": 7
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 12
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 13
              },
              {
                "type": "import",
                "module": "time",
                "alias": null,
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.recipe",
                "names": [
                  "CraftingRecipe"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.ingredient",
                "names": [
                  "CraftingIngredient"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.result",
                "names": [
                  "CraftingResult"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.station",
                "names": [
                  "CraftingStation"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.models",
                "names": [
                  "Inventory",
                  "InventoryItem"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.repository",
                "names": [
                  "InventoryItemRepository"
                ],
                "line": 23
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "db"
                ],
                "line": 29
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.event_dispatcher",
                "names": [
                  "EventDispatcher"
                ],
                "line": 35
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 48,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_load_recipes",
                "line": 74,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_load_stations",
                "line": 99,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_construct_recipe",
                "line": 124,
                "args": [
                  "self",
                  "recipe_id",
                  "recipe_info"
                ],
                "is_async": false
              },
              {
                "name": "_construct_station",
                "line": 203,
                "args": [
                  "self",
                  "station_id",
                  "station_info"
                ],
                "is_async": false
              },
              {
                "name": "add_recipe",
                "line": 241,
                "args": [
                  "self",
                  "recipe"
                ],
                "is_async": false
              },
              {
                "name": "remove_recipe",
                "line": 251,
                "args": [
                  "self",
                  "recipe_id"
                ],
                "is_async": false
              },
              {
                "name": "get_recipe",
                "line": 267,
                "args": [
                  "self",
                  "recipe_id"
                ],
                "is_async": false
              },
              {
                "name": "get_all_recipes",
                "line": 279,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_available_recipes",
                "line": 288,
                "args": [
                  "self",
                  "character_id",
                  "skills"
                ],
                "is_async": false
              },
              {
                "name": "_is_recipe_known",
                "line": 317,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id"
                ],
                "is_async": false
              },
              {
                "name": "_discover_recipe",
                "line": 333,
                "args": [
                  "self",
                  "character_id",
                  "discovery_method",
                  "context"
                ],
                "is_async": false
              },
              {
                "name": "get_known_recipes",
                "line": 379,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "save_recipe_knowledge",
                "line": 394,
                "args": [
                  "self",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "load_recipe_knowledge",
                "line": 427,
                "args": [
                  "self",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "_emit_recipe_discovered_event",
                "line": 463,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id",
                  "discovery_method"
                ],
                "is_async": false
              },
              {
                "name": "get_recipes_for_character",
                "line": 487,
                "args": [
                  "self",
                  "character_id",
                  "skills"
                ],
                "is_async": false
              },
              {
                "name": "_is_recipe_available_to_character",
                "line": 511,
                "args": [
                  "self",
                  "recipe",
                  "skills"
                ],
                "is_async": false
              },
              {
                "name": "can_craft",
                "line": 542,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id",
                  "inventory_id",
                  "station_id",
                  "skills"
                ],
                "is_async": false
              },
              {
                "name": "_check_station_requirements",
                "line": 590,
                "args": [
                  "self",
                  "recipe",
                  "station_id"
                ],
                "is_async": false
              },
              {
                "name": "_validate_inventory",
                "line": 629,
                "args": [
                  "self",
                  "recipe",
                  "inventory_id",
                  "allow_substitutions"
                ],
                "is_async": false
              },
              {
                "name": "_check_substitutions",
                "line": 678,
                "args": [
                  "self",
                  "ingredient",
                  "inventory_dict"
                ],
                "is_async": false
              },
              {
                "name": "_process_ingredients",
                "line": 717,
                "args": [
                  "self",
                  "recipe",
                  "inventory_id",
                  "allow_substitutions"
                ],
                "is_async": false
              },
              {
                "name": "_determine_craft_results",
                "line": 772,
                "args": [
                  "self",
                  "recipe",
                  "skills"
                ],
                "is_async": false
              },
              {
                "name": "_calculate_quality_factors",
                "line": 845,
                "args": [
                  "self",
                  "recipe",
                  "skills"
                ],
                "is_async": false
              },
              {
                "name": "_quality_level_to_string",
                "line": 916,
                "args": [
                  "self",
                  "quality_level"
                ],
                "is_async": false
              },
              {
                "name": "_process_results",
                "line": 935,
                "args": [
                  "self",
                  "results",
                  "inventory_id"
                ],
                "is_async": false
              },
              {
                "name": "_emit_crafting_started_event",
                "line": 956,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id",
                  "inventory_id"
                ],
                "is_async": false
              },
              {
                "name": "_emit_crafting_completed_event",
                "line": 975,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id",
                  "results"
                ],
                "is_async": false
              },
              {
                "name": "_emit_crafting_failed_event",
                "line": 994,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id",
                  "reason"
                ],
                "is_async": false
              },
              {
                "name": "_create_failed_craft_result",
                "line": 1013,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id",
                  "reason"
                ],
                "is_async": false
              },
              {
                "name": "_create_successful_craft_result",
                "line": 1032,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id",
                  "results"
                ],
                "is_async": false
              },
              {
                "name": "_calculate_crafting_experience",
                "line": 1052,
                "args": [
                  "self",
                  "recipe",
                  "results",
                  "skills"
                ],
                "is_async": false
              },
              {
                "name": "_apply_crafting_experience",
                "line": 1115,
                "args": [
                  "self",
                  "character_id",
                  "skill_name",
                  "experience"
                ],
                "is_async": false
              },
              {
                "name": "learn_recipe",
                "line": 1138,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id"
                ],
                "is_async": false
              },
              {
                "name": "discover_recipe",
                "line": 1178,
                "args": [
                  "self",
                  "character_id",
                  "discovery_method",
                  "context_data"
                ],
                "is_async": false
              },
              {
                "name": "_find_discoverable_recipes",
                "line": 1221,
                "args": [
                  "self",
                  "discovery_method",
                  "context_data"
                ],
                "is_async": false
              },
              {
                "name": "get_known_recipes",
                "line": 1256,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "craft",
                "line": 1276,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id",
                  "inventory_id",
                  "station_id",
                  "skills"
                ],
                "is_async": false
              },
              {
                "name": "_check_skill_requirements",
                "line": 1348,
                "args": [
                  "self",
                  "recipe",
                  "skills"
                ],
                "is_async": false
              },
              {
                "name": "_track_crafting_achievement",
                "line": 1370,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id",
                  "results"
                ],
                "is_async": false
              },
              {
                "name": "_get_quality_rank",
                "line": 1425,
                "args": [
                  "self",
                  "quality"
                ],
                "is_async": false
              },
              {
                "name": "_track_crafting_milestones",
                "line": 1445,
                "args": [
                  "self",
                  "character_id",
                  "recipe"
                ],
                "is_async": false
              },
              {
                "name": "update_craft_method",
                "line": 1474,
                "args": [
                  "self",
                  "craft_method"
                ],
                "is_async": false
              },
              {
                "name": "enhanced_craft",
                "line": 1482,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id",
                  "inventory_id",
                  "station_id",
                  "skills"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CraftingService",
                "line": 40,
                "bases": [],
                "methods": [
                  "__init__",
                  "_load_recipes",
                  "_load_stations",
                  "_construct_recipe",
                  "_construct_station",
                  "add_recipe",
                  "remove_recipe",
                  "get_recipe",
                  "get_all_recipes",
                  "get_available_recipes",
                  "_is_recipe_known",
                  "_discover_recipe",
                  "get_known_recipes",
                  "save_recipe_knowledge",
                  "load_recipe_knowledge",
                  "_emit_recipe_discovered_event",
                  "get_recipes_for_character",
                  "_is_recipe_available_to_character",
                  "can_craft",
                  "_check_station_requirements",
                  "_validate_inventory",
                  "_check_substitutions",
                  "_process_ingredients",
                  "_determine_craft_results",
                  "_calculate_quality_factors",
                  "_quality_level_to_string",
                  "_process_results",
                  "_emit_crafting_started_event",
                  "_emit_crafting_completed_event",
                  "_emit_crafting_failed_event",
                  "_create_failed_craft_result",
                  "_create_successful_craft_result",
                  "_calculate_crafting_experience",
                  "_apply_crafting_experience",
                  "learn_recipe",
                  "discover_recipe",
                  "_find_discoverable_recipes",
                  "get_known_recipes",
                  "craft",
                  "_check_skill_requirements",
                  "_track_crafting_achievement",
                  "_get_quality_rank",
                  "_track_crafting_milestones",
                  "update_craft_method"
                ]
              }
            ]
          },
          {
            "file": "services/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.crafting.services.crafting_service",
                "names": [
                  "CraftingService"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.services.crafting_experience_service",
                "names": [
                  "CraftingExperienceService"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.services.station_service",
                "names": [
                  "StationService"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/station_service.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.crafting.models.station",
                "names": [
                  "CraftingStation"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 24,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_load_stations_from_files",
                "line": 32,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_construct_station",
                "line": 63,
                "args": [
                  "self",
                  "station_id",
                  "station_info"
                ],
                "is_async": false
              },
              {
                "name": "add_station",
                "line": 89,
                "args": [
                  "self",
                  "station"
                ],
                "is_async": false
              },
              {
                "name": "remove_station",
                "line": 99,
                "args": [
                  "self",
                  "station_id"
                ],
                "is_async": false
              },
              {
                "name": "get_station",
                "line": 117,
                "args": [
                  "self",
                  "station_id"
                ],
                "is_async": false
              },
              {
                "name": "get_all_stations",
                "line": 129,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_available_stations",
                "line": 138,
                "args": [
                  "self",
                  "location_id"
                ],
                "is_async": false
              },
              {
                "name": "use_station",
                "line": 151,
                "args": [
                  "self",
                  "character_id",
                  "station_id"
                ],
                "is_async": false
              },
              {
                "name": "upgrade_station",
                "line": 177,
                "args": [
                  "self",
                  "station_id",
                  "upgrade_type"
                ],
                "is_async": false
              },
              {
                "name": "get_station_capacity",
                "line": 203,
                "args": [
                  "self",
                  "station_id"
                ],
                "is_async": false
              },
              {
                "name": "reserve_station",
                "line": 218,
                "args": [
                  "self",
                  "character_id",
                  "station_id",
                  "duration"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "StationService",
                "line": 19,
                "bases": [],
                "methods": [
                  "__init__",
                  "_load_stations_from_files",
                  "_construct_station",
                  "add_station",
                  "remove_station",
                  "get_station",
                  "get_all_stations",
                  "get_available_stations",
                  "use_station",
                  "upgrade_station",
                  "get_station_capacity",
                  "reserve_station"
                ]
              }
            ]
          },
          {
            "file": "services/crafting_experience_service.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Tuple"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 19,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "calculate_crafting_experience",
                "line": 33,
                "args": [
                  "self",
                  "recipe",
                  "result_items",
                  "skills"
                ],
                "is_async": false
              },
              {
                "name": "apply_crafting_experience",
                "line": 87,
                "args": [
                  "self",
                  "character_id",
                  "skill",
                  "experience"
                ],
                "is_async": false
              },
              {
                "name": "get_skill_level",
                "line": 117,
                "args": [
                  "self",
                  "character_id",
                  "skill_type"
                ],
                "is_async": false
              },
              {
                "name": "gain_experience",
                "line": 131,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id",
                  "amount"
                ],
                "is_async": false
              },
              {
                "name": "unlock_recipe",
                "line": 151,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id"
                ],
                "is_async": false
              },
              {
                "name": "get_unlocked_recipes",
                "line": 166,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "calculate_success_chance",
                "line": 179,
                "args": [
                  "self",
                  "character_id",
                  "recipe_id"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "CraftingExperienceService",
                "line": 14,
                "bases": [],
                "methods": [
                  "__init__",
                  "calculate_crafting_experience",
                  "apply_crafting_experience",
                  "get_skill_level",
                  "gain_experience",
                  "unlock_recipe",
                  "get_unlocked_recipes",
                  "calculate_success_chance"
                ]
              }
            ]
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": true,
        "has_routers": true,
        "has_schemas": true,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "alembic",
            "line": 7,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/migrations/001_create_crafting_tables.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 11,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/schemas/crafting_schemas.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/progression_manager.py"
          },
          {
            "type": "non_canonical_import",
            "import": "yaml",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/recipe_loader.py"
          },
          {
            "type": "non_canonical_import",
            "import": "yaml",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/station_loader.py"
          },
          {
            "type": "non_canonical_import",
            "import": "yaml",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/config_manager.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 12,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/config_manager.py"
          },
          {
            "type": "non_canonical_import",
            "import": "threading",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/config_manager.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
          },
          {
            "type": "non_canonical_import",
            "import": "threading",
            "line": 11,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
          },
          {
            "type": "non_canonical_import",
            "import": "hashlib",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "events": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/events",
        "files": [
          "services.py",
          "models.py",
          "event_dispatcher.py",
          "__init__.py",
          "canonical_events.py",
          "event_types.py",
          "routers/__init__.py",
          "routers/events_router.py",
          "middleware/logging_middleware.py",
          "middleware/debugging_middleware.py",
          "middleware/__init__.py",
          "middleware/debugging.py",
          "middleware/error_middleware.py",
          "middleware/error_handler.py",
          "middleware/analytics.py",
          "middleware/analytics_middleware.py",
          "core/__init__.py",
          "core/event_base.py",
          "core/events/__init__.py",
          "utils/tile_loader.py",
          "utils/floating_origin.py",
          "utils/plugins.py",
          "utils/item_utils.py",
          "utils/export_utils.py",
          "utils/batching.py",
          "utils/event_utils.py",
          "utils/start_game_routes.py",
          "utils/screen_utils.py",
          "utils/world_tick_utils.py",
          "utils/error_utils.py",
          "utils/layout.py",
          "utils/coordinate_validation.py",
          "utils/coordinate_utils.py",
          "utils/constants.py",
          "utils/game_utils.py",
          "utils/__init__.py",
          "utils/floating_origin_ecs.py",
          "utils/database_utils.py",
          "utils/base_manager.py",
          "utils/data_loaders.py",
          "utils/terrain_manager.py",
          "utils/seed.py",
          "utils/input_utils.py",
          "utils/firebase_utils.py",
          "utils/npc_utils.py",
          "utils/render_utils.py",
          "utils/file_utils.py",
          "utils/shared_utils.py",
          "utils/__init__ .py",
          "utils/accessibility.py",
          "utils/password.py",
          "utils/json_utils.py",
          "utils/quest_utils.py",
          "utils/asset_utils.py",
          "utils/coordinates.py",
          "utils/rules_loader.py",
          "utils/gpt.py",
          "utils/gpt/intents.py",
          "utils/gpt/client.py",
          "utils/gpt/__init__.py",
          "utils/gpt/dialogue.py",
          "utils/gpt/flavor.py",
          "utils/game/json_io.py",
          "utils/game/__init__.py",
          "utils/game/world_tick.py",
          "repositories/events_repository.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "api/__init__.py",
          "api/plugin_api.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.models",
                "names": [
                  "EventsEntity",
                  "EventsModel",
                  "CreateEventsRequest",
                  "UpdateEventsRequest",
                  "EventsResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "EventsNotFoundError",
                  "EventsValidationError",
                  "EventsConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_events_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventsService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x1050d37f0>"
                ],
                "methods": [
                  "__init__",
                  "create_events",
                  "get_events_by_id",
                  "update_events",
                  "delete_events",
                  "list_eventss",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_events_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventsBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "EventsModel",
                "line": 36,
                "bases": [
                  "EventsBaseModel"
                ],
                "methods": []
              },
              {
                "name": "EventsEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateEventsRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateEventsRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "EventsResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "EventsListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "event_dispatcher.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "inspect",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional",
                  "Type",
                  "Callable"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.analytics.services.analytics_service",
                "names": [
                  "get_analytics_service"
                ],
                "line": 123
              }
            ],
            "functions": [
              {
                "name": "get_dispatcher",
                "line": 362,
                "args": [],
                "is_async": false
              },
              {
                "name": "subscribe",
                "line": 366,
                "args": [
                  "event_type",
                  "handler",
                  "priority"
                ],
                "is_async": false
              },
              {
                "name": "publish",
                "line": 370,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "process_sync",
                "line": 42,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 79,
                "args": [
                  "self",
                  "logger"
                ],
                "is_async": false
              },
              {
                "name": "process_sync",
                "line": 93,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 111,
                "args": [
                  "self",
                  "analytics_service"
                ],
                "is_async": false
              },
              {
                "name": "process_sync",
                "line": 185,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "get_instance",
                "line": 259,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 265,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "add_middleware",
                "line": 289,
                "args": [
                  "self",
                  "middleware"
                ],
                "is_async": false
              },
              {
                "name": "subscribe",
                "line": 294,
                "args": [
                  "self",
                  "event_type",
                  "handler",
                  "priority"
                ],
                "is_async": false
              },
              {
                "name": "publish_sync",
                "line": 325,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventMiddleware",
                "line": 21,
                "bases": [],
                "methods": [
                  "process_async",
                  "process_sync",
                  "pre_dispatch",
                  "post_dispatch"
                ]
              },
              {
                "name": "LoggingMiddleware",
                "line": 76,
                "bases": [
                  "EventMiddleware"
                ],
                "methods": [
                  "__init__",
                  "process_async",
                  "process_sync",
                  "pre_dispatch",
                  "post_dispatch"
                ]
              },
              {
                "name": "AnalyticsMiddleware",
                "line": 108,
                "bases": [
                  "EventMiddleware"
                ],
                "methods": [
                  "__init__",
                  "process_async",
                  "process_sync"
                ]
              },
              {
                "name": "EventDispatcher",
                "line": 238,
                "bases": [],
                "methods": [
                  "get_instance",
                  "__init__",
                  "add_middleware",
                  "subscribe",
                  "publish_sync"
                ]
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase",
                  "T"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.event_dispatcher",
                "names": [
                  "EventDispatcher",
                  "EventMiddleware",
                  "LoggingMiddleware",
                  "AnalyticsMiddleware",
                  "get_dispatcher"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.canonical_events",
                "names": [
                  "MemoryCreated",
                  "MemoryReinforced",
                  "MemoryDecayed",
                  "MemoryDeleted",
                  "MemoryRecalled",
                  "RumorCreated",
                  "RumorSpread",
                  "RumorMutated",
                  "MotifChanged",
                  "WorldStateChanged",
                  "RelationshipChanged",
                  "RelationshipCreated",
                  "RelationshipUpdated",
                  "RelationshipRemoved",
                  "CharacterCreated",
                  "CharacterUpdated",
                  "CharacterDeleted",
                  "CharacterLeveledUp",
                  "MoodChanged",
                  "GoalCreated",
                  "GoalCompleted",
                  "GoalFailed",
                  "GoalAbandoned",
                  "GoalProgressUpdated",
                  "PopulationChanged",
                  "POIStateChanged",
                  "FactionChanged",
                  "QuestUpdated",
                  "CombatEvent",
                  "CombatStarted",
                  "CombatEnded",
                  "TimeAdvanced",
                  "StorageEvent",
                  "GameSaved",
                  "GameLoaded",
                  "EventLogged"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.event_types",
                "names": [
                  "SystemEvent",
                  "SystemEventType",
                  "MemoryEvent",
                  "MemoryEventType",
                  "RumorEvent",
                  "RumorEventType",
                  "MotifEvent",
                  "MotifEventType",
                  "PopulationEvent",
                  "PopulationEventType",
                  "POIEvent",
                  "POIEventType",
                  "FactionEvent",
                  "FactionEventType",
                  "QuestEvent",
                  "QuestEventType",
                  "CombatEventType",
                  "TimeEvent",
                  "TimeEventType",
                  "RelationshipEvent",
                  "RelationshipEventType",
                  "StorageEventType",
                  "WorldStateEvent",
                  "WorldStateEventType"
                ],
                "line": 57
              },
              {
                "type": "import",
                "module": "sys",
                "alias": null,
                "line": 177
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.middleware.logging",
                "names": [
                  "logging_middleware"
                ],
                "line": 75
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.middleware.error_handler",
                "names": [
                  "error_handling_middleware"
                ],
                "line": 76
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.middleware.analytics",
                "names": [
                  "analytics_middleware"
                ],
                "line": 77
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.middleware.debugging",
                "names": [
                  "debug_middleware"
                ],
                "line": 78
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.utils.manager",
                "names": [
                  "EventManager"
                ],
                "line": 88
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "canonical_events.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Any",
                  "Dict",
                  "Union"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 27,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 38,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 49,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 69,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 82,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 94,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 107,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 120,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 133,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 146,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 158,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 171,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 183,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 193,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 203,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 212,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 220,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 234,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 247,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 258,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 270,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 282,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 293,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 305,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 317,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 329,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 343,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 352,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 362,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 371,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 382,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 392,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 400,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 408,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 419,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "MemoryCreated",
                "line": 19,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "MemoryReinforced",
                "line": 31,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "MemoryDecayed",
                "line": 42,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "MemoryDeleted",
                "line": 53,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "MemoryRecalled",
                "line": 63,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "RumorSpread",
                "line": 74,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "RumorCreated",
                "line": 86,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "RumorMutated",
                "line": 98,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "MotifChanged",
                "line": 112,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "WorldStateChanged",
                "line": 125,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "RelationshipChanged",
                "line": 138,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "RelationshipCreated",
                "line": 150,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "RelationshipUpdated",
                "line": 162,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "RelationshipRemoved",
                "line": 175,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "CharacterCreated",
                "line": 188,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "CharacterLeveledUp",
                "line": 197,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "CharacterUpdated",
                "line": 207,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "CharacterDeleted",
                "line": 216,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "MoodChanged",
                "line": 225,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "GoalCreated",
                "line": 239,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "GoalCompleted",
                "line": 251,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "GoalFailed",
                "line": 262,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "GoalAbandoned",
                "line": 274,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "GoalProgressUpdated",
                "line": 286,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "PopulationChanged",
                "line": 298,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "POIStateChanged",
                "line": 310,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "FactionChanged",
                "line": 322,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "QuestUpdated",
                "line": 334,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "CombatEvent",
                "line": 348,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "CombatStarted",
                "line": 357,
                "bases": [
                  "CombatEvent"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "CombatEnded",
                "line": 366,
                "bases": [
                  "CombatEvent"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "TimeAdvanced",
                "line": 376,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "StorageEvent",
                "line": 387,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "GameSaved",
                "line": 397,
                "bases": [
                  "StorageEvent"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "GameLoaded",
                "line": 405,
                "bases": [
                  "StorageEvent"
                ],
                "methods": [
                  "__init__"
                ]
              },
              {
                "name": "EventLogged",
                "line": 414,
                "bases": [
                  "EventBase"
                ],
                "methods": [
                  "__init__"
                ]
              }
            ]
          },
          {
            "file": "event_types.py",
            "imports": [
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum",
                  "auto"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "Optional",
                  "List",
                  "Union"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.canonical_events",
                "names": [
                  "MemoryCreated",
                  "MemoryReinforced",
                  "MemoryDecayed",
                  "MemoryDeleted",
                  "MemoryRecalled",
                  "RumorCreated",
                  "RumorSpread",
                  "RumorMutated",
                  "MotifChanged",
                  "WorldStateChanged",
                  "RelationshipChanged",
                  "RelationshipCreated",
                  "RelationshipUpdated",
                  "RelationshipRemoved",
                  "CharacterCreated",
                  "CharacterUpdated",
                  "CharacterDeleted",
                  "CharacterLeveledUp",
                  "MoodChanged",
                  "GoalCreated",
                  "GoalCompleted",
                  "GoalFailed",
                  "GoalAbandoned",
                  "GoalProgressUpdated",
                  "PopulationChanged",
                  "POIStateChanged",
                  "FactionChanged",
                  "QuestUpdated",
                  "CombatEvent",
                  "CombatStarted",
                  "CombatEnded",
                  "TimeAdvanced",
                  "StorageEvent",
                  "GameSaved",
                  "GameLoaded",
                  "EventLogged"
                ],
                "line": 15
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "EventType",
                "line": 35,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "SystemEventType",
                "line": 88,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "SystemEvent",
                "line": 96,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "MemoryEventType",
                "line": 103,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "MemoryEvent",
                "line": 111,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "RumorEventType",
                "line": 120,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "RumorEvent",
                "line": 126,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "MotifEventType",
                "line": 136,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "MotifEvent",
                "line": 140,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "PopulationEventType",
                "line": 149,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "PopulationEvent",
                "line": 153,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "POIEventType",
                "line": 162,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "POIEvent",
                "line": 166,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "FactionEventType",
                "line": 174,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "FactionEvent",
                "line": 178,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "QuestEventType",
                "line": 185,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "QuestEvent",
                "line": 189,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "CombatEventType",
                "line": 197,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "TimeEventType",
                "line": 207,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "TimeEvent",
                "line": 211,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "RelationshipEventType",
                "line": 219,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "RelationshipEvent",
                "line": 225,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              },
              {
                "name": "StorageEventType",
                "line": 235,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "WorldStateEventType",
                "line": 241,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "WorldStateEvent",
                "line": 245,
                "bases": [
                  "EventBase"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/events_router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.session",
                "names": [
                  "get_db"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 8
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "middleware/logging_middleware.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Callable",
                  "Dict"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase"
                ],
                "line": 10
              }
            ],
            "functions": [
              {
                "name": "logging_middleware",
                "line": 14,
                "args": [
                  "event",
                  "next_middleware"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "middleware/debugging_middleware.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "time",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Callable",
                  "Dict",
                  "List",
                  "Optional"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "get_event_stats",
                "line": 78,
                "args": [],
                "is_async": false
              },
              {
                "name": "clear_event_stats",
                "line": 96,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_recent_events",
                "line": 106,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "middleware/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.events.logging",
                "names": [
                  "LoggingMiddleware",
                  "logging_middleware"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.error_handler",
                "names": [
                  "ErrorHandlingMiddleware",
                  "error_handling_middleware"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.analytics",
                "names": [
                  "AnalyticsMiddleware",
                  "analytics_middleware"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.debugging",
                "names": [
                  "DebugMiddleware",
                  "debug_middleware"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.logging_middleware",
                "names": [
                  "LoggingMiddleware"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.error_middleware",
                "names": [
                  "ErrorHandlingMiddleware"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.analytics_middleware",
                "names": [
                  "AnalyticsMiddleware"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.debugging_middleware",
                "names": [
                  "DebugMiddleware"
                ],
                "line": 18
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "middleware/debugging.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "time",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "inspect",
                "alias": null,
                "line": 10
              },
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Callable",
                  "Dict",
                  "List",
                  "Optional",
                  "Set",
                  "Type"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "configure_debug",
                "line": 103,
                "args": [
                  "config"
                ],
                "is_async": false
              },
              {
                "name": "get_handler_timing_stats",
                "line": 120,
                "args": [],
                "is_async": false
              },
              {
                "name": "reset_timing_stats",
                "line": 129,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "middleware/error_middleware.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "import",
                "module": "traceback",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Callable"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase"
                ],
                "line": 11
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "middleware/error_handler.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "import",
                "module": "traceback",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Callable",
                  "Dict",
                  "Optional"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase"
                ],
                "line": 11
              }
            ],
            "functions": [
              {
                "name": "_report_error",
                "line": 43,
                "args": [
                  "event",
                  "error"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "middleware/analytics.py",
            "imports": [
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 10
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 13
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Callable",
                  "Dict",
                  "List",
                  "Optional",
                  "Union"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.analytics.services.analytics_service",
                "names": [
                  "AnalyticsService",
                  "get_analytics_service"
                ],
                "line": 24
              }
            ],
            "functions": [
              {
                "name": "get_instance",
                "line": 41,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 47,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "log_event",
                "line": 79,
                "args": [
                  "self",
                  "event_data"
                ],
                "is_async": false
              },
              {
                "name": "_get_category",
                "line": 124,
                "args": [
                  "self",
                  "event_type"
                ],
                "is_async": false
              },
              {
                "name": "_get_file_path",
                "line": 139,
                "args": [
                  "self",
                  "category"
                ],
                "is_async": false
              },
              {
                "name": "_append_to_file",
                "line": 159,
                "args": [
                  "self",
                  "file_path",
                  "event_data"
                ],
                "is_async": false
              },
              {
                "name": "generate_dataset",
                "line": 183,
                "args": [
                  "self",
                  "filter_criteria",
                  "date_range",
                  "max_entries"
                ],
                "is_async": false
              },
              {
                "name": "_get_files_for_dataset",
                "line": 233,
                "args": [
                  "self",
                  "category",
                  "date_range"
                ],
                "is_async": false
              },
              {
                "name": "_matches_criteria",
                "line": 284,
                "args": [
                  "self",
                  "event",
                  "criteria"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "AnalyticsService",
                "line": 30,
                "bases": [],
                "methods": [
                  "get_instance",
                  "__init__",
                  "log_event",
                  "log_event_async",
                  "_get_category",
                  "_get_file_path",
                  "_append_to_file",
                  "generate_dataset",
                  "_get_files_for_dataset",
                  "_matches_criteria"
                ]
              }
            ]
          },
          {
            "file": "middleware/analytics_middleware.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Callable",
                  "Dict",
                  "Optional"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "time",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 10
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "__new__",
                "line": 33,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "_initialize",
                "line": 40,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "collect",
                "line": 47,
                "args": [
                  "self",
                  "event",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "flush",
                "line": 75,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "AnalyticsConfig",
                "line": 18,
                "bases": [],
                "methods": []
              },
              {
                "name": "_AnalyticsCollector",
                "line": 25,
                "bases": [],
                "methods": [
                  "__new__",
                  "_initialize",
                  "collect",
                  "flush"
                ]
              }
            ]
          },
          {
            "file": "core/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.event_dispatcher",
                "names": [
                  "EventDispatcher"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.event_types",
                "names": [
                  "MemoryEvent",
                  "MemoryEventType",
                  "RumorEvent",
                  "RumorEventType",
                  "MotifEvent",
                  "MotifEventType",
                  "PopulationEvent",
                  "PopulationEventType",
                  "POIEvent",
                  "POIEventType",
                  "FactionEvent",
                  "FactionEventType",
                  "QuestEvent",
                  "QuestEventType",
                  "CombatEvent",
                  "CombatEventType",
                  "TimeEvent",
                  "TimeEventType",
                  "RelationshipEvent",
                  "RelationshipEventType",
                  "StorageEvent",
                  "StorageEventType",
                  "WorldStateEvent",
                  "WorldStateEventType"
                ],
                "line": 12
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "core/event_base.py",
            "imports": [
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "time",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "TypeVar"
                ],
                "line": 10
              }
            ],
            "functions": [],
            "classes": [
              {
                "name": "EventBase",
                "line": 14,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 29,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "core/events/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/tile_loader.py",
            "imports": [
              {
                "type": "import",
                "module": "pygame",
                "alias": null,
                "line": 1
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 2
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 3
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 4
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "load_land_types",
                "line": 19,
                "args": [],
                "is_async": false
              },
              {
                "name": "validate_surface",
                "line": 50,
                "args": [
                  "surface"
                ],
                "is_async": false
              },
              {
                "name": "load_tileset",
                "line": 58,
                "args": [
                  "tileset_path"
                ],
                "is_async": false
              },
              {
                "name": "slice_tile",
                "line": 70,
                "args": [
                  "tileset",
                  "x",
                  "y"
                ],
                "is_async": false
              },
              {
                "name": "build_terrain_tile_map",
                "line": 93,
                "args": [],
                "is_async": false
              },
              {
                "name": "random_color_for_terrain",
                "line": 120,
                "args": [
                  "terrain"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 141,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_load_tileset",
                "line": 146,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_tile",
                "line": 164,
                "args": [
                  "self",
                  "terrain_type"
                ],
                "is_async": false
              },
              {
                "name": "get_random_color",
                "line": 168,
                "args": [
                  "self",
                  "terrain_type"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "TileLoader",
                "line": 140,
                "bases": [],
                "methods": [
                  "__init__",
                  "_load_tileset",
                  "get_tile",
                  "get_random_color"
                ]
              }
            ]
          },
          {
            "file": "utils/floating_origin.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Tuple",
                  "Dict",
                  "Optional",
                  "List",
                  "Set",
                  "Any",
                  "Callable",
                  "Iterable"
                ],
                "line": 19
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 20
              },
              {
                "type": "import",
                "module": "time",
                "alias": null,
                "line": 21
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 22
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 23
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "line": 24
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.utils.coordinates",
                "names": [
                  "GlobalCoord",
                  "LocalCoord",
                  "CoordinateSystem",
                  "coordinate_system"
                ],
                "line": 25
              }
            ],
            "functions": [
              {
                "name": "record_shift",
                "line": 40,
                "args": [
                  "self",
                  "duration",
                  "entity_count"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 51,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 68,
                "args": [
                  "self",
                  "coord_system"
                ],
                "is_async": false
              },
              {
                "name": "register_entity",
                "line": 77,
                "args": [
                  "self",
                  "entity_id",
                  "position_getter",
                  "position_setter",
                  "group"
                ],
                "is_async": false
              },
              {
                "name": "unregister_entity",
                "line": 100,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "update_player_position",
                "line": 114,
                "args": [
                  "self",
                  "player_pos"
                ],
                "is_async": false
              },
              {
                "name": "_perform_origin_shift",
                "line": 125,
                "args": [
                  "self",
                  "reference_pos"
                ],
                "is_async": false
              },
              {
                "name": "get_global_position",
                "line": 159,
                "args": [
                  "self",
                  "local_pos"
                ],
                "is_async": false
              },
              {
                "name": "get_local_position",
                "line": 163,
                "args": [
                  "self",
                  "global_pos"
                ],
                "is_async": false
              },
              {
                "name": "enable_debug",
                "line": 167,
                "args": [
                  "self",
                  "enabled"
                ],
                "is_async": false
              },
              {
                "name": "get_metrics",
                "line": 171,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "batch_register_entities",
                "line": 175,
                "args": [
                  "self",
                  "entities",
                  "group"
                ],
                "is_async": false
              },
              {
                "name": "unregister_group",
                "line": 187,
                "args": [
                  "self",
                  "group"
                ],
                "is_async": false
              },
              {
                "name": "get_entity_groups",
                "line": 211,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "serialize_state",
                "line": 215,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "OriginShiftMetrics",
                "line": 31,
                "bases": [],
                "methods": [
                  "record_shift",
                  "to_dict"
                ]
              },
              {
                "name": "FloatingOrigin",
                "line": 62,
                "bases": [],
                "methods": [
                  "__init__",
                  "register_entity",
                  "unregister_entity",
                  "update_player_position",
                  "_perform_origin_shift",
                  "get_global_position",
                  "get_local_position",
                  "enable_debug",
                  "get_metrics",
                  "batch_register_entities",
                  "unregister_group",
                  "get_entity_groups",
                  "serialize_state"
                ]
              }
            ]
          },
          {
            "file": "utils/plugins.py",
            "imports": [
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "importlib",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "inspect",
                "alias": null,
                "line": 13
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 14
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 15
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 16
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Callable",
                  "Dict",
                  "List",
                  "Optional",
                  "Set",
                  "Type",
                  "Union"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.dispatcher",
                "names": [
                  "EventDispatcher"
                ],
                "line": 21
              },
              {
                "type": "from_import",
                "module": "backend.systems.event_types",
                "names": [
                  "UserLoggedInEvent"
                ],
                "line": 496
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 34,
                "args": [
                  "self",
                  "name",
                  "description"
                ],
                "is_async": false
              },
              {
                "name": "register_handler",
                "line": 130,
                "args": [
                  "self",
                  "event_type",
                  "handler",
                  "priority"
                ],
                "is_async": false
              },
              {
                "name": "register_middleware",
                "line": 148,
                "args": [
                  "self",
                  "middleware"
                ],
                "is_async": false
              },
              {
                "name": "get_metadata",
                "line": 161,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_instance",
                "line": 196,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 202,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_plugin",
                "line": 405,
                "args": [
                  "self",
                  "plugin_name"
                ],
                "is_async": false
              },
              {
                "name": "get_all_plugins",
                "line": 417,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_enabled_plugins",
                "line": 426,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_load_plugin_config",
                "line": 435,
                "args": [
                  "self",
                  "plugin_name"
                ],
                "is_async": false
              },
              {
                "name": "_save_plugin_config",
                "line": 459,
                "args": [
                  "self",
                  "plugin_name",
                  "config"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 483,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventPlugin",
                "line": 25,
                "bases": [],
                "methods": [
                  "__init__",
                  "initialize",
                  "enable",
                  "disable",
                  "register_handler",
                  "register_middleware",
                  "get_metadata"
                ]
              },
              {
                "name": "PluginManager",
                "line": 185,
                "bases": [],
                "methods": [
                  "get_instance",
                  "__init__",
                  "register_plugin",
                  "unregister_plugin",
                  "enable_plugin",
                  "disable_plugin",
                  "load_plugins_from_directory",
                  "get_plugin",
                  "get_all_plugins",
                  "get_enabled_plugins",
                  "_load_plugin_config",
                  "_save_plugin_config"
                ]
              },
              {
                "name": "ExamplePlugin",
                "line": 480,
                "bases": [
                  "EventPlugin"
                ],
                "methods": [
                  "__init__",
                  "initialize",
                  "handle_user_login"
                ]
              }
            ]
          },
          {
            "file": "utils/item_utils.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/export_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "csv",
                "alias": null,
                "line": 1
              },
              {
                "type": "import",
                "module": "io",
                "alias": null,
                "line": 2
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "reportlab.lib.pagesizes",
                "names": [
                  "letter"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "reportlab.pdfgen",
                "names": [
                  "canvas"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "export_to_csv",
                "line": 12,
                "args": [
                  "data",
                  "fieldnames"
                ],
                "is_async": false
              },
              {
                "name": "export_to_pdf",
                "line": 23,
                "args": [
                  "data",
                  "fieldnames",
                  "title"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/batching.py",
            "imports": [
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 10
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "time",
                "alias": null,
                "line": 12
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Dict",
                  "List",
                  "Optional",
                  "Set",
                  "Type",
                  "TypeVar",
                  "Callable",
                  "Generic"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.dispatcher",
                "names": [
                  "EventDispatcher"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 30,
                "args": [
                  "self",
                  "event_type",
                  "max_size",
                  "max_wait_time",
                  "processor"
                ],
                "is_async": false
              },
              {
                "name": "get_instance",
                "line": 126,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 132,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "register_batch",
                "line": 173,
                "args": [
                  "self",
                  "event_type",
                  "max_size",
                  "max_wait_time",
                  "processor"
                ],
                "is_async": false
              },
              {
                "name": "unregister_batch",
                "line": 190,
                "args": [
                  "self",
                  "event_type"
                ],
                "is_async": false
              },
              {
                "name": "get_batch_sizes",
                "line": 248,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventBatch",
                "line": 22,
                "bases": [
                  "<ast.Subscript object at 0x105144b80>"
                ],
                "methods": [
                  "__init__",
                  "add",
                  "process"
                ]
              },
              {
                "name": "EventBatcher",
                "line": 115,
                "bases": [],
                "methods": [
                  "get_instance",
                  "__init__",
                  "start",
                  "stop",
                  "_processing_loop",
                  "register_batch",
                  "unregister_batch",
                  "add_event",
                  "process_batch",
                  "process_ready_batches",
                  "process_all",
                  "get_batch_sizes"
                ]
              }
            ]
          },
          {
            "file": "utils/event_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Callable",
                  "Dict",
                  "List",
                  "Optional",
                  "Type",
                  "TypeVar",
                  "Union"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "time",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_base",
                "names": [
                  "EventBase"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.core.event_dispatcher",
                "names": [
                  "EventDispatcher"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 38,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "subscribe",
                "line": 43,
                "args": [
                  "self",
                  "event_type",
                  "handler",
                  "priority"
                ],
                "is_async": false
              },
              {
                "name": "unsubscribe",
                "line": 64,
                "args": [
                  "self",
                  "event_type",
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "publish",
                "line": 90,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "cleanup",
                "line": 117,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__del__",
                "line": 131,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventManager",
                "line": 20,
                "bases": [],
                "methods": [
                  "__init__",
                  "subscribe",
                  "unsubscribe",
                  "publish",
                  "publish_async",
                  "cleanup",
                  "__del__"
                ]
              }
            ]
          },
          {
            "file": "utils/start_game_routes.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/screen_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "pygame",
                "alias": null,
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Optional",
                  "Any"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.utils.error_utils",
                "names": [
                  "ScreenError",
                  "handle_error"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 12,
                "args": [
                  "self",
                  "width",
                  "height",
                  "title"
                ],
                "is_async": false
              },
              {
                "name": "add_screen",
                "line": 31,
                "args": [
                  "self",
                  "name",
                  "screen"
                ],
                "is_async": false
              },
              {
                "name": "set_screen",
                "line": 43,
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false
              },
              {
                "name": "get_screen_rect",
                "line": 57,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "toggle_fullscreen",
                "line": 65,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "update",
                "line": 76,
                "args": [
                  "self",
                  "dt"
                ],
                "is_async": false
              },
              {
                "name": "draw",
                "line": 88,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "handle_event",
                "line": 97,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "quit",
                "line": 114,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ScreenManager",
                "line": 9,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_screen",
                  "set_screen",
                  "get_screen_rect",
                  "toggle_fullscreen",
                  "update",
                  "draw",
                  "handle_event",
                  "quit"
                ]
              }
            ]
          },
          {
            "file": "utils/world_tick_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 7
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.world",
                "names": [
                  "Region"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest",
                "names": [
                  "Quest"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.event_utils",
                "names": [
                  "EventUtils"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.base_manager",
                "names": [
                  "BaseManager"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc",
                "names": [
                  "NPC"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.world",
                "names": [
                  "Faction"
                ],
                "line": 20
              },
              {
                "type": "from_import",
                "module": "backend.systems.world",
                "names": [
                  "World"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.world",
                "names": [
                  "Region"
                ],
                "line": 419
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 160
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 185
              }
            ],
            "functions": [
              {
                "name": "process_npc_day",
                "line": 278,
                "args": [
                  "npc"
                ],
                "is_async": false
              },
              {
                "name": "process_quest_day",
                "line": 317,
                "args": [
                  "quest"
                ],
                "is_async": false
              },
              {
                "name": "process_faction_day",
                "line": 345,
                "args": [
                  "faction"
                ],
                "is_async": false
              },
              {
                "name": "process_region_day",
                "line": 381,
                "args": [
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "get_world_state",
                "line": 417,
                "args": [
                  "session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 27,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "process_tick",
                "line": 34,
                "args": [
                  "self",
                  "regions"
                ],
                "is_async": false
              },
              {
                "name": "_update_region_state",
                "line": 63,
                "args": [
                  "self",
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "_generate_events",
                "line": 88,
                "args": [
                  "self",
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "_update_quests",
                "line": 114,
                "args": [
                  "self",
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "_should_generate_event",
                "line": 137,
                "args": [
                  "self",
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "_get_event_type",
                "line": 163,
                "args": [
                  "self",
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "_update_weather",
                "line": 188,
                "args": [
                  "self",
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "_update_population",
                "line": 196,
                "args": [
                  "self",
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "_update_resources",
                "line": 204,
                "args": [
                  "self",
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "_complete_quest",
                "line": 212,
                "args": [
                  "self",
                  "quest"
                ],
                "is_async": false
              },
              {
                "name": "_update_quest_progress",
                "line": 220,
                "args": [
                  "self",
                  "quest"
                ],
                "is_async": false
              },
              {
                "name": "_generate_new_quests",
                "line": 228,
                "args": [
                  "self",
                  "region"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "WorldTickUtils",
                "line": 24,
                "bases": [
                  "BaseManager"
                ],
                "methods": [
                  "__init__",
                  "process_tick",
                  "_update_region_state",
                  "_generate_events",
                  "_update_quests",
                  "_should_generate_event",
                  "_get_event_type",
                  "_update_weather",
                  "_update_population",
                  "_update_resources",
                  "_complete_quest",
                  "_update_quest_progress",
                  "_generate_new_quests"
                ]
              },
              {
                "name": "World",
                "line": 17,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "utils/error_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 6
              }
            ],
            "functions": [
              {
                "name": "handle_error",
                "line": 20,
                "args": [
                  "error",
                  "context"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ScreenError",
                "line": 12,
                "bases": [
                  "Exception"
                ],
                "methods": []
              }
            ]
          },
          {
            "file": "utils/layout.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/coordinate_validation.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "inspect",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "functools",
                "alias": null,
                "line": 10
              },
              {
                "type": "import",
                "module": "traceback",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Callable",
                  "Dict",
                  "List",
                  "Optional",
                  "Tuple",
                  "Type",
                  "TypeVar",
                  "Union",
                  "cast"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.utils.coordinates",
                "names": [
                  "GlobalCoord",
                  "LocalCoord",
                  "CoordinateSystem",
                  "coordinate_system"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.utils.floating_origin",
                "names": [
                  "FloatingOrigin",
                  "floating_origin"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.utils",
                "names": [
                  "coordinate_utils"
                ],
                "line": 15
              }
            ],
            "functions": [
              {
                "name": "configure_validation",
                "line": 50,
                "args": [
                  "config_updates"
                ],
                "is_async": false
              },
              {
                "name": "register_validator",
                "line": 61,
                "args": [
                  "target_type",
                  "validator_func"
                ],
                "is_async": false
              },
              {
                "name": "validate_value",
                "line": 75,
                "args": [
                  "value"
                ],
                "is_async": false
              },
              {
                "name": "validate_function_call",
                "line": 127,
                "args": [
                  "func"
                ],
                "is_async": false
              },
              {
                "name": "validate_coord_type",
                "line": 174,
                "args": [
                  "coord_type"
                ],
                "is_async": false
              },
              {
                "name": "handle_validation_errors",
                "line": 203,
                "args": [
                  "context",
                  "errors"
                ],
                "is_async": false
              },
              {
                "name": "handle_validation_error",
                "line": 216,
                "args": [
                  "message",
                  "value"
                ],
                "is_async": false
              },
              {
                "name": "get_validation_stats",
                "line": 237,
                "args": [],
                "is_async": false
              },
              {
                "name": "reset_validation_stats",
                "line": 246,
                "args": [],
                "is_async": false
              },
              {
                "name": "_is_valid_global_coord",
                "line": 256,
                "args": [
                  "coord"
                ],
                "is_async": false
              },
              {
                "name": "_is_valid_local_coord",
                "line": 266,
                "args": [
                  "coord"
                ],
                "is_async": false
              },
              {
                "name": "wrapper",
                "line": 138,
                "args": [],
                "is_async": false
              },
              {
                "name": "decorator",
                "line": 184,
                "args": [
                  "func"
                ],
                "is_async": false
              },
              {
                "name": "wrapper",
                "line": 186,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/coordinate_utils.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/constants.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/game_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 1
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 2
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Tuple"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.config_utils",
                "names": [
                  "get_config"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.constants",
                "names": [
                  "DIFFICULTY_MULTIPLIERS",
                  "LEVEL_SCALING",
                  "BASE_XP",
                  "BASE_GOLD",
                  "BASE_DAMAGE",
                  "BASE_HEALTH",
                  "ATTRIBUTE_LIMITS",
                  "VALID_RACES",
                  "VALID_CLASSES",
                  "VALID_DIFFICULTIES",
                  "VALID_BACKGROUNDS",
                  "VALID_ATTRIBUTES"
                ],
                "line": 5
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 25,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "calculate_xp_gain",
                "line": 28,
                "args": [
                  "self",
                  "base_xp",
                  "level_difference",
                  "difficulty_multiplier"
                ],
                "is_async": false
              },
              {
                "name": "calculate_level_up_xp",
                "line": 55,
                "args": [
                  "self",
                  "current_level"
                ],
                "is_async": false
              },
              {
                "name": "calculate_combat_damage",
                "line": 68,
                "args": [
                  "self",
                  "attacker_level",
                  "defender_level",
                  "base_damage",
                  "attack_bonus",
                  "defense_bonus"
                ],
                "is_async": false
              },
              {
                "name": "calculate_loot_drop",
                "line": 95,
                "args": [
                  "self",
                  "monster_level",
                  "player_level",
                  "base_chance",
                  "luck_bonus"
                ],
                "is_async": false
              },
              {
                "name": "calculate_quest_reward",
                "line": 124,
                "args": [
                  "self",
                  "quest_level",
                  "quest_difficulty",
                  "player_level"
                ],
                "is_async": false
              },
              {
                "name": "validate_character_creation",
                "line": 166,
                "args": [
                  "self",
                  "attributes",
                  "race",
                  "character_class"
                ],
                "is_async": false
              },
              {
                "name": "validate_quest_parameters",
                "line": 200,
                "args": [
                  "self",
                  "level",
                  "difficulty",
                  "rewards"
                ],
                "is_async": false
              },
              {
                "name": "validate_character_data",
                "line": 230,
                "args": [
                  "self",
                  "name",
                  "race",
                  "background",
                  "attributes"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "GameCalculator",
                "line": 22,
                "bases": [],
                "methods": [
                  "__init__",
                  "calculate_xp_gain",
                  "calculate_level_up_xp",
                  "calculate_combat_damage",
                  "calculate_loot_drop",
                  "calculate_quest_reward"
                ]
              },
              {
                "name": "GameValidator",
                "line": 163,
                "bases": [],
                "methods": [
                  "validate_character_creation",
                  "validate_quest_parameters",
                  "validate_character_data"
                ]
              }
            ]
          },
          {
            "file": "utils/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.events.utils.coordinates",
                "names": [
                  "GlobalCoord",
                  "LocalCoord",
                  "CoordinateSystem",
                  "coordinate_system"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.utils.floating_origin",
                "names": [
                  "FloatingOrigin",
                  "floating_origin"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.utils",
                "names": [
                  "coordinate_utils"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.utils",
                "names": [
                  "coordinate_validation"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.utils.batching",
                "names": [
                  "EventBatch",
                  "EventBatcher",
                  "register_batch",
                  "add_event",
                  "start_batching",
                  "stop_batching"
                ],
                "line": 16
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/floating_origin_ecs.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Set",
                  "Any",
                  "Optional",
                  "Callable"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 7
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.coordinates",
                "names": [
                  "GlobalCoord",
                  "LocalCoord"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.floating_origin",
                "names": [
                  "FloatingOrigin",
                  "floating_origin"
                ],
                "line": 11
              }
            ],
            "functions": [
              {
                "name": "example_usage",
                "line": 203,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_global_position",
                "line": 31,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "set_global_position",
                "line": 35,
                "args": [
                  "self",
                  "x",
                  "y",
                  "z"
                ],
                "is_async": false
              },
              {
                "name": "get_local_position",
                "line": 41,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "set_local_position",
                "line": 45,
                "args": [
                  "self",
                  "x",
                  "y",
                  "z"
                ],
                "is_async": false
              },
              {
                "name": "shift_position",
                "line": 51,
                "args": [
                  "self",
                  "dx",
                  "dy",
                  "dz"
                ],
                "is_async": false
              },
              {
                "name": "create_entity",
                "line": 76,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "add_component",
                "line": 84,
                "args": [
                  "self",
                  "entity_id",
                  "component_name",
                  "component"
                ],
                "is_async": false
              },
              {
                "name": "get_component",
                "line": 95,
                "args": [
                  "self",
                  "entity_id",
                  "component_name"
                ],
                "is_async": false
              },
              {
                "name": "has_component",
                "line": 102,
                "args": [
                  "self",
                  "entity_id",
                  "component_name"
                ],
                "is_async": false
              },
              {
                "name": "get_entities_with_components",
                "line": 109,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "remove_entity",
                "line": 117,
                "args": [
                  "self",
                  "entity_id"
                ],
                "is_async": false
              },
              {
                "name": "add_system",
                "line": 130,
                "args": [
                  "self",
                  "system"
                ],
                "is_async": false
              },
              {
                "name": "update",
                "line": 134,
                "args": [
                  "self",
                  "dt"
                ],
                "is_async": false
              },
              {
                "name": "_register_with_floating_origin",
                "line": 139,
                "args": [
                  "self",
                  "entity_id",
                  "fo_component"
                ],
                "is_async": false
              },
              {
                "name": "update",
                "line": 172,
                "args": [
                  "ecs",
                  "dt"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "TransformComponent",
                "line": 17,
                "bases": [],
                "methods": [
                  "get_global_position",
                  "set_global_position",
                  "get_local_position",
                  "set_local_position",
                  "shift_position"
                ]
              },
              {
                "name": "FloatingOriginComponent",
                "line": 58,
                "bases": [],
                "methods": []
              },
              {
                "name": "EntityComponentSystem",
                "line": 67,
                "bases": [],
                "methods": [
                  "create_entity",
                  "add_component",
                  "get_component",
                  "has_component",
                  "get_entities_with_components",
                  "remove_entity",
                  "add_system",
                  "update",
                  "_register_with_floating_origin"
                ]
              },
              {
                "name": "FloatingOriginSystem",
                "line": 165,
                "bases": [],
                "methods": [
                  "update"
                ]
              }
            ]
          },
          {
            "file": "utils/database_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Dict",
                  "List",
                  "Optional",
                  "Tuple",
                  "Union"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "text",
                  "create_engine"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.exc",
                "names": [
                  "SQLAlchemyError"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "contextlib",
                "names": [
                  "contextmanager"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "functools",
                "names": [
                  "wraps"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "db"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.cache",
                "names": [
                  "RedisCache"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.monitoring",
                "names": [
                  "monitor"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.db_pool",
                "names": [
                  "pool_manager"
                ],
                "line": 17
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 18
              },
              {
                "type": "import",
                "module": "threading",
                "alias": null,
                "line": 19
              },
              {
                "type": "from_import",
                "module": "collections",
                "names": [
                  "defaultdict"
                ],
                "line": 20
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 27,
                "args": [
                  "self",
                  "app"
                ],
                "is_async": false
              },
              {
                "name": "init_app",
                "line": 39,
                "args": [
                  "self",
                  "app"
                ],
                "is_async": false
              },
              {
                "name": "cached_query",
                "line": 46,
                "args": [
                  "self",
                  "timeout"
                ],
                "is_async": false
              },
              {
                "name": "bulk_insert",
                "line": 74,
                "args": [
                  "self",
                  "model",
                  "items"
                ],
                "is_async": false
              },
              {
                "name": "bulk_update",
                "line": 88,
                "args": [
                  "self",
                  "model",
                  "items",
                  "key_field"
                ],
                "is_async": false
              },
              {
                "name": "execute_with_retry",
                "line": 102,
                "args": [
                  "self",
                  "query",
                  "params",
                  "max_retries",
                  "initial_delay"
                ],
                "is_async": false
              },
              {
                "name": "analyze_table",
                "line": 129,
                "args": [
                  "self",
                  "table_name"
                ],
                "is_async": false
              },
              {
                "name": "optimize_query",
                "line": 188,
                "args": [
                  "self",
                  "query",
                  "params"
                ],
                "is_async": false
              },
              {
                "name": "get_optimization_stats",
                "line": 234,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_query_cache_stats",
                "line": 260,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_slow_queries",
                "line": 275,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_table_stats",
                "line": 283,
                "args": [
                  "self",
                  "table_name"
                ],
                "is_async": false
              },
              {
                "name": "get_index_usage",
                "line": 290,
                "args": [
                  "self",
                  "table_name"
                ],
                "is_async": false
              },
              {
                "name": "get_query_optimization_suggestions",
                "line": 298,
                "args": [
                  "self",
                  "query",
                  "params"
                ],
                "is_async": false
              },
              {
                "name": "decorator",
                "line": 48,
                "args": [
                  "f"
                ],
                "is_async": false
              },
              {
                "name": "wrapper",
                "line": 50,
                "args": [],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DatabaseOptimizer",
                "line": 24,
                "bases": [],
                "methods": [
                  "__init__",
                  "init_app",
                  "cached_query",
                  "bulk_insert",
                  "bulk_update",
                  "execute_with_retry",
                  "analyze_table",
                  "optimize_query",
                  "get_optimization_stats",
                  "get_query_cache_stats",
                  "get_slow_queries",
                  "get_table_stats",
                  "get_index_usage",
                  "get_query_optimization_suggestions"
                ]
              }
            ]
          },
          {
            "file": "utils/base_manager.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Dict",
                  "List",
                  "Optional"
                ],
                "line": 6
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 13,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "log_error",
                "line": 17,
                "args": [
                  "self",
                  "message",
                  "error"
                ],
                "is_async": false
              },
              {
                "name": "log_info",
                "line": 24,
                "args": [
                  "self",
                  "message"
                ],
                "is_async": false
              },
              {
                "name": "log_warning",
                "line": 28,
                "args": [
                  "self",
                  "message"
                ],
                "is_async": false
              },
              {
                "name": "handle_error",
                "line": 32,
                "args": [
                  "self",
                  "error",
                  "message"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "BaseManager",
                "line": 10,
                "bases": [],
                "methods": [
                  "__init__",
                  "log_error",
                  "log_info",
                  "log_warning",
                  "handle_error"
                ]
              }
            ]
          },
          {
            "file": "utils/data_loaders.py",
            "imports": [
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 5
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 6
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Any",
                  "Optional"
                ],
                "line": 7
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "load_json_file",
                "line": 16,
                "args": [
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "load_damage_types",
                "line": 31,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "get_damage_types",
                "line": 95,
                "args": [
                  "cls"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DataLoader",
                "line": 12,
                "bases": [],
                "methods": [
                  "load_json_file"
                ]
              },
              {
                "name": "DamageTypeLoader",
                "line": 25,
                "bases": [],
                "methods": [
                  "load_damage_types",
                  "get_damage_types"
                ]
              }
            ]
          },
          {
            "file": "utils/terrain_manager.py",
            "imports": [],
            "functions": [],
            "classes": [
              {
                "name": "TerrainManager",
                "line": 1,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "utils/seed.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "db"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.user",
                "names": [
                  "User"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.role",
                "names": [
                  "Role"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.permission",
                "names": [
                  "Permission",
                  "role_permissions"
                ],
                "line": 10
              }
            ],
            "functions": [
              {
                "name": "seed_roles",
                "line": 14,
                "args": [],
                "is_async": false
              },
              {
                "name": "seed_users",
                "line": 34,
                "args": [],
                "is_async": false
              },
              {
                "name": "seed_permissions",
                "line": 76,
                "args": [],
                "is_async": false
              },
              {
                "name": "seed_roles_and_permissions",
                "line": 95,
                "args": [],
                "is_async": false
              },
              {
                "name": "seed_database",
                "line": 111,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/input_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "pygame",
                "alias": null,
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Optional",
                  "Any",
                  "Callable"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.error_utils",
                "names": [
                  "handle_error"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 12,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "bind_key",
                "line": 18,
                "args": [
                  "self",
                  "key",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "bind_mouse_button",
                "line": 30,
                "args": [
                  "self",
                  "button",
                  "callback"
                ],
                "is_async": false
              },
              {
                "name": "handle_event",
                "line": 42,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "get_mouse_pos",
                "line": 70,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "InputHandler",
                "line": 9,
                "bases": [],
                "methods": [
                  "__init__",
                  "bind_key",
                  "bind_mouse_button",
                  "handle_event",
                  "get_mouse_pos"
                ]
              }
            ]
          },
          {
            "file": "utils/firebase_utils.py",
            "imports": [],
            "functions": [
              {
                "name": "initialize_firebase",
                "line": 7,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_firebase_config",
                "line": 12,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/npc_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "TYPE_CHECKING"
                ],
                "line": 5
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 6
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.time_utils",
                "names": [
                  "get_current_time"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.location_utils",
                "names": [
                  "get_distance"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc",
                "names": [
                  "NPC",
                  "NPCType",
                  "NPCDisposition"
                ],
                "line": 12
              }
            ],
            "functions": [
              {
                "name": "calculate_disposition",
                "line": 18,
                "args": [
                  "npc",
                  "player_reputation"
                ],
                "is_async": false
              },
              {
                "name": "update_schedule",
                "line": 25,
                "args": [
                  "npc",
                  "current_time"
                ],
                "is_async": false
              },
              {
                "name": "generate_dialogue",
                "line": 37,
                "args": [
                  "npc",
                  "context"
                ],
                "is_async": false
              },
              {
                "name": "check_interaction_availability",
                "line": 54,
                "args": [
                  "npc",
                  "player_level"
                ],
                "is_async": false
              },
              {
                "name": "process_interaction",
                "line": 81,
                "args": [
                  "npc",
                  "interaction_type",
                  "context"
                ],
                "is_async": false
              },
              {
                "name": "_handle_trade",
                "line": 111,
                "args": [
                  "npc",
                  "context"
                ],
                "is_async": false
              },
              {
                "name": "_handle_quest",
                "line": 127,
                "args": [
                  "npc",
                  "context"
                ],
                "is_async": false
              },
              {
                "name": "_handle_dialogue",
                "line": 143,
                "args": [
                  "npc",
                  "context"
                ],
                "is_async": false
              },
              {
                "name": "_handle_training",
                "line": 153,
                "args": [
                  "npc",
                  "context"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "NPCUtils",
                "line": 14,
                "bases": [],
                "methods": [
                  "calculate_disposition",
                  "update_schedule",
                  "generate_dialogue",
                  "check_interaction_availability",
                  "process_interaction",
                  "_handle_trade",
                  "_handle_quest",
                  "_handle_dialogue",
                  "_handle_training"
                ]
              }
            ]
          },
          {
            "file": "utils/render_utils.py",
            "imports": [],
            "functions": [],
            "classes": [
              {
                "name": "Renderer",
                "line": 1,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "utils/file_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 6
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 7
              },
              {
                "type": "import",
                "module": "shutil",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.security",
                "names": [
                  "secure_filename"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.base_manager",
                "names": [
                  "BaseManager"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.config",
                "names": [
                  "settings"
                ],
                "line": 13
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 14
              },
              {
                "type": "import",
                "module": "yaml",
                "alias": null,
                "line": 15
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 23,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "ensure_directories",
                "line": 35,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "save_file",
                "line": 42,
                "args": [
                  "self",
                  "file",
                  "filename"
                ],
                "is_async": false
              },
              {
                "name": "move_to_assets",
                "line": 64,
                "args": [
                  "self",
                  "source_path"
                ],
                "is_async": false
              },
              {
                "name": "delete_file",
                "line": 84,
                "args": [
                  "self",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "_is_allowed_file",
                "line": 97,
                "args": [
                  "self",
                  "filename"
                ],
                "is_async": false
              },
              {
                "name": "get_file_info",
                "line": 102,
                "args": [
                  "self",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "read_file",
                "line": 120,
                "args": [
                  "self",
                  "file_path",
                  "file_type"
                ],
                "is_async": false
              },
              {
                "name": "write_file",
                "line": 134,
                "args": [
                  "self",
                  "file_path",
                  "data",
                  "file_type"
                ],
                "is_async": false
              },
              {
                "name": "list_files",
                "line": 147,
                "args": [
                  "self",
                  "directory",
                  "pattern"
                ],
                "is_async": false
              },
              {
                "name": "file_exists",
                "line": 154,
                "args": [
                  "self",
                  "file_path"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "FileManager",
                "line": 20,
                "bases": [
                  "BaseManager"
                ],
                "methods": [
                  "__init__",
                  "ensure_directories",
                  "save_file",
                  "move_to_assets",
                  "delete_file",
                  "_is_allowed_file",
                  "get_file_info",
                  "read_file",
                  "write_file",
                  "list_files",
                  "file_exists"
                ]
              }
            ]
          },
          {
            "file": "utils/shared_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 6
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "get_current_game_day",
                "line": 9,
                "args": [],
                "is_async": false
              },
              {
                "name": "process_poi_raid",
                "line": 14,
                "args": [
                  "poi_id",
                  "poi_type",
                  "danger",
                  "npc_count",
                  "region_name"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/__init__ .py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/accessibility.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Tuple"
                ],
                "line": 5
              },
              {
                "type": "import",
                "module": "pygame",
                "alias": null,
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.error_handler",
                "names": [
                  "handle_component_error",
                  "ErrorSeverity"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 12,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "add_to_focus_order",
                "line": 24,
                "args": [
                  "self",
                  "component_id"
                ],
                "is_async": false
              },
              {
                "name": "remove_from_focus_order",
                "line": 38,
                "args": [
                  "self",
                  "component_id"
                ],
                "is_async": false
              },
              {
                "name": "move_focus",
                "line": 54,
                "args": [
                  "self",
                  "direction"
                ],
                "is_async": false
              },
              {
                "name": "get_current_focus",
                "line": 72,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "draw_focus_indicator",
                "line": 87,
                "args": [
                  "self",
                  "surface",
                  "rect"
                ],
                "is_async": false
              },
              {
                "name": "calculate_contrast_ratio",
                "line": 113,
                "args": [
                  "self",
                  "color1",
                  "color2"
                ],
                "is_async": false
              },
              {
                "name": "ensure_contrast_compliance",
                "line": 140,
                "args": [
                  "self",
                  "foreground",
                  "background",
                  "enhanced"
                ],
                "is_async": false
              },
              {
                "name": "handle_keyboard_event",
                "line": 178,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "get_relative_luminance",
                "line": 116,
                "args": [
                  "color"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "AccessibilityManager",
                "line": 9,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_to_focus_order",
                  "remove_from_focus_order",
                  "move_focus",
                  "get_current_focus",
                  "draw_focus_indicator",
                  "calculate_contrast_ratio",
                  "ensure_contrast_compliance",
                  "handle_keyboard_event"
                ]
              }
            ]
          },
          {
            "file": "utils/password.py",
            "imports": [],
            "functions": [
              {
                "name": "verify_password",
                "line": 1,
                "args": [
                  "password",
                  "hashed"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/json_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 1
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 2
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 3
              }
            ],
            "functions": [
              {
                "name": "save_json",
                "line": 11,
                "args": [
                  "data",
                  "filename_or_path",
                  "use_rules_path"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/quest_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Tuple"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 6
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "functools",
                "names": [
                  "lru_cache"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 10
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.quest",
                "names": [
                  "Quest",
                  "QuestStatus",
                  "QuestType"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.character",
                "names": [
                  "Character"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc",
                "names": [
                  "NPC"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.error_utils",
                "names": [
                  "ValidationError"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_init_quest_templates",
                "line": 39,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "generate_quest",
                "line": 73,
                "args": [
                  "self",
                  "quest_type",
                  "level",
                  "region",
                  "giver"
                ],
                "is_async": false
              },
              {
                "name": "update_quest_progress",
                "line": 112,
                "args": [
                  "self",
                  "quest",
                  "character",
                  "progress_data"
                ],
                "is_async": false
              },
              {
                "name": "_apply_quest_rewards",
                "line": 152,
                "args": [
                  "self",
                  "character",
                  "rewards"
                ],
                "is_async": false
              },
              {
                "name": "validate_quest_requirements",
                "line": 167,
                "args": [
                  "self",
                  "quest",
                  "character"
                ],
                "is_async": false
              },
              {
                "name": "get_available_quests",
                "line": 196,
                "args": [
                  "self",
                  "character",
                  "region"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 220,
                "args": [
                  "self",
                  "template_dir"
                ],
                "is_async": false
              },
              {
                "name": "_load_templates",
                "line": 224,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_template",
                "line": 235,
                "args": [
                  "self",
                  "quest_type"
                ],
                "is_async": false
              },
              {
                "name": "all_templates",
                "line": 238,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 243,
                "args": [
                  "self",
                  "template_manager"
                ],
                "is_async": false
              },
              {
                "name": "generate_quest",
                "line": 246,
                "args": [
                  "self",
                  "quest_type",
                  "player_level",
                  "world_state",
                  "faction_relations"
                ],
                "is_async": false
              },
              {
                "name": "generate_for_player",
                "line": 259,
                "args": [
                  "self",
                  "player",
                  "world_state"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "QuestTemplate",
                "line": 21,
                "bases": [],
                "methods": []
              },
              {
                "name": "QuestUtils",
                "line": 32,
                "bases": [],
                "methods": [
                  "__init__",
                  "_init_quest_templates",
                  "generate_quest",
                  "update_quest_progress",
                  "_apply_quest_rewards",
                  "validate_quest_requirements",
                  "get_available_quests"
                ]
              },
              {
                "name": "QuestTemplateManager",
                "line": 218,
                "bases": [],
                "methods": [
                  "__init__",
                  "_load_templates",
                  "get_template",
                  "all_templates"
                ]
              },
              {
                "name": "QuestGenerator",
                "line": 241,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_quest",
                  "generate_for_player"
                ]
              }
            ]
          },
          {
            "file": "utils/asset_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "pygame",
                "alias": null,
                "line": 5
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 6
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Optional",
                  "Tuple"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.error_utils",
                "names": [
                  "handle_error"
                ],
                "line": 9
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 14,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "load_image",
                "line": 21,
                "args": [
                  "self",
                  "path"
                ],
                "is_async": false
              },
              {
                "name": "load_sound",
                "line": 46,
                "args": [
                  "self",
                  "path"
                ],
                "is_async": false
              },
              {
                "name": "load_music",
                "line": 71,
                "args": [
                  "self",
                  "path"
                ],
                "is_async": false
              },
              {
                "name": "play_sound",
                "line": 95,
                "args": [
                  "self",
                  "path"
                ],
                "is_async": false
              },
              {
                "name": "play_music",
                "line": 108,
                "args": [
                  "self",
                  "path",
                  "loop"
                ],
                "is_async": false
              },
              {
                "name": "stop_music",
                "line": 122,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "set_music_volume",
                "line": 129,
                "args": [
                  "self",
                  "volume"
                ],
                "is_async": false
              },
              {
                "name": "set_sound_volume",
                "line": 140,
                "args": [
                  "self",
                  "volume"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "AssetManager",
                "line": 11,
                "bases": [],
                "methods": [
                  "__init__",
                  "load_image",
                  "load_sound",
                  "load_music",
                  "play_sound",
                  "play_music",
                  "stop_music",
                  "set_music_volume",
                  "set_sound_volume"
                ]
              }
            ]
          },
          {
            "file": "utils/coordinates.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Tuple",
                  "Dict",
                  "Optional",
                  "List",
                  "Set",
                  "Any",
                  "NamedTuple"
                ],
                "line": 19
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 20
              },
              {
                "type": "import",
                "module": "numpy",
                "alias": "np",
                "line": 21
              }
            ],
            "functions": [
              {
                "name": "__str__",
                "line": 34,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "distance_to",
                "line": 37,
                "args": [
                  "self",
                  "other"
                ],
                "is_async": false
              },
              {
                "name": "__str__",
                "line": 49,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "distance_to",
                "line": 52,
                "args": [
                  "self",
                  "other"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 61,
                "args": [
                  "self",
                  "x",
                  "y",
                  "z"
                ],
                "is_async": false
              },
              {
                "name": "get_origin",
                "line": 69,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "shift_origin",
                "line": 73,
                "args": [
                  "self",
                  "reference_point"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 106,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "add_shift_listener",
                "line": 111,
                "args": [
                  "self",
                  "listener"
                ],
                "is_async": false
              },
              {
                "name": "remove_shift_listener",
                "line": 115,
                "args": [
                  "self",
                  "listener"
                ],
                "is_async": false
              },
              {
                "name": "global_to_local",
                "line": 120,
                "args": [
                  "self",
                  "global_coord"
                ],
                "is_async": false
              },
              {
                "name": "local_to_global",
                "line": 129,
                "args": [
                  "self",
                  "local_coord"
                ],
                "is_async": false
              },
              {
                "name": "check_shift_needed",
                "line": 138,
                "args": [
                  "self",
                  "player_global_pos"
                ],
                "is_async": false
              },
              {
                "name": "shift_origin",
                "line": 144,
                "args": [
                  "self",
                  "reference_pos"
                ],
                "is_async": false
              },
              {
                "name": "get_shift_history",
                "line": 160,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_total_shift",
                "line": 164,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "GlobalCoord",
                "line": 28,
                "bases": [
                  "NamedTuple"
                ],
                "methods": [
                  "__str__",
                  "distance_to"
                ]
              },
              {
                "name": "LocalCoord",
                "line": 43,
                "bases": [
                  "NamedTuple"
                ],
                "methods": [
                  "__str__",
                  "distance_to"
                ]
              },
              {
                "name": "CoordinateSystemOrigin",
                "line": 58,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_origin",
                  "shift_origin"
                ]
              },
              {
                "name": "CoordinateSystem",
                "line": 100,
                "bases": [],
                "methods": [
                  "__init__",
                  "add_shift_listener",
                  "remove_shift_listener",
                  "global_to_local",
                  "local_to_global",
                  "check_shift_needed",
                  "shift_origin",
                  "get_shift_history",
                  "get_total_shift"
                ]
              }
            ]
          },
          {
            "file": "utils/rules_loader.py",
            "imports": [
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 1
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 2
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 3
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 4
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 11,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_load_json_file",
                "line": 23,
                "args": [
                  "self",
                  "filename",
                  "use_game_rules"
                ],
                "is_async": false
              },
              {
                "name": "_extract_named_pairs",
                "line": 37,
                "args": [
                  "self",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "get_races",
                "line": 46,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_race_data",
                "line": 53,
                "args": [
                  "self",
                  "race_name"
                ],
                "is_async": false
              },
              {
                "name": "get_feats",
                "line": 57,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_skills",
                "line": 67,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_backgrounds",
                "line": 73,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_kits",
                "line": 79,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_skill_data",
                "line": 85,
                "args": [
                  "self",
                  "skill_name"
                ],
                "is_async": false
              },
              {
                "name": "get_feat_data",
                "line": 91,
                "args": [
                  "self",
                  "feat_name"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "RulesLoader",
                "line": 10,
                "bases": [],
                "methods": [
                  "__init__",
                  "_load_json_file",
                  "_extract_named_pairs",
                  "get_races",
                  "get_race_data",
                  "get_feats",
                  "get_skills",
                  "get_backgrounds",
                  "get_kits",
                  "get_skill_data",
                  "get_feat_data"
                ]
              }
            ]
          },
          {
            "file": "utils/gpt.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/gpt/intents.py",
            "imports": [],
            "functions": [],
            "classes": [
              {
                "name": "IntentAnalyzer",
                "line": 1,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "utils/gpt/client.py",
            "imports": [],
            "functions": [],
            "classes": [
              {
                "name": "GPTClient",
                "line": 1,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "utils/gpt/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.events.client",
                "names": [
                  "GPTClient"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.flavor",
                "names": [
                  "gpt_flavor_identify_effect",
                  "gpt_flavor_reveal_full_item"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.utils",
                "names": [
                  "get_goodwill_label",
                  "log_usage"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.dialogue",
                "names": [
                  "DialogueGPTClient"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.intents",
                "names": [
                  "IntentAnalyzer"
                ],
                "line": 5
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/gpt/dialogue.py",
            "imports": [],
            "functions": [],
            "classes": [
              {
                "name": "DialogueGPTClient",
                "line": 1,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "utils/gpt/flavor.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.utils.gpt.client",
                "names": [
                  "GPTClient"
                ],
                "line": 6
              }
            ],
            "functions": [
              {
                "name": "gpt_flavor_identify_effect",
                "line": 8,
                "args": [
                  "item_name",
                  "effect"
                ],
                "is_async": false
              },
              {
                "name": "gpt_flavor_reveal_full_item",
                "line": 33,
                "args": [
                  "item"
                ],
                "is_async": false
              },
              {
                "name": "get_goodwill_label",
                "line": 61,
                "args": [
                  "score"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/game/json_io.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 5
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 6
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Dict",
                  "Optional"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "load_json",
                "line": 9,
                "args": [
                  "filepath"
                ],
                "is_async": false
              },
              {
                "name": "save_json",
                "line": 33,
                "args": [
                  "filepath",
                  "data"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/game/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.utils.game.world_tick",
                "names": [
                  "tick_world_day"
                ],
                "line": 1
              },
              {
                "type": "from_import",
                "module": "backend.systems.utils.game.json_io",
                "names": [
                  "load_json",
                  "save_json"
                ],
                "line": 2
              },
              {
                "type": "from_import",
                "module": "backend.systems.utils.game.start_game",
                "names": [
                  "start_game_bp"
                ],
                "line": 3
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/game/world_tick.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any"
                ],
                "line": 6
              }
            ],
            "functions": [
              {
                "name": "tick_world_day",
                "line": 9,
                "args": [],
                "is_async": false
              },
              {
                "name": "_process_scheduled_events",
                "line": 33,
                "args": [
                  "day"
                ],
                "is_async": false
              },
              {
                "name": "_process_quest_event",
                "line": 64,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "_process_npc_event",
                "line": 68,
                "args": [
                  "event"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "repositories/events_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models.base",
                "names": [
                  "BaseModel"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 13,
                "args": [
                  "self",
                  "db"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventsRepository",
                "line": 10,
                "bases": [],
                "methods": [
                  "__init__",
                  "create",
                  "get_by_id",
                  "get_all",
                  "update",
                  "delete"
                ]
              }
            ]
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "api/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.events.plugin_api",
                "names": [
                  "router"
                ],
                "line": 7
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "api/plugin_api.py",
            "imports": [
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Dict",
                  "List",
                  "Optional"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "HTTPException",
                  "Depends",
                  "BackgroundTasks"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.events.utils.plugins",
                "names": [
                  "PluginManager",
                  "EventPlugin"
                ],
                "line": 14
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": true,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "inspect",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/event_types.py"
          },
          {
            "type": "non_canonical_import",
            "import": "inspect",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/middleware/debugging.py"
          },
          {
            "type": "non_canonical_import",
            "import": "traceback",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/middleware/error_middleware.py"
          },
          {
            "type": "non_canonical_import",
            "import": "traceback",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/middleware/error_handler.py"
          },
          {
            "type": "non_canonical_import",
            "import": "pygame",
            "line": 1,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/tile_loader.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 24,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/floating_origin.py"
          },
          {
            "type": "non_canonical_import",
            "import": "importlib",
            "line": 12,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/plugins.py"
          },
          {
            "type": "non_canonical_import",
            "import": "inspect",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/plugins.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.dispatcher",
            "line": 21,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/plugins.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.event_types",
            "line": 496,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/plugins.py"
          },
          {
            "type": "non_canonical_import",
            "import": "csv",
            "line": 1,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/export_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "io",
            "line": 2,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/export_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "reportlab.lib.pagesizes",
            "line": 6,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/export_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "reportlab.pdfgen",
            "line": 7,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/export_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.dispatcher",
            "line": 16,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/batching.py"
          },
          {
            "type": "non_canonical_import",
            "import": "pygame",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/screen_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.world",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/world_tick_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.world",
            "line": 20,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/world_tick_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.world",
            "line": 15,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/world_tick_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.world",
            "line": 419,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/world_tick_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "inspect",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinate_validation.py"
          },
          {
            "type": "non_canonical_import",
            "import": "traceback",
            "line": 11,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinate_validation.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 7,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/floating_origin_ecs.py"
          },
          {
            "type": "non_canonical_import",
            "import": "contextlib",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/database_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "threading",
            "line": 19,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/database_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.user",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/seed.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.role",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/seed.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.permission",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/seed.py"
          },
          {
            "type": "non_canonical_import",
            "import": "pygame",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/input_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "shutil",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/file_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.config",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/file_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "yaml",
            "line": 15,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/file_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "pygame",
            "line": 6,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/accessibility.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/quest_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "pygame",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/asset_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.utils.game.world_tick",
            "line": 1,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/game/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.utils.game.json_io",
            "line": 2,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/game/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.utils.game.start_game",
            "line": 3,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/game/__init__.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "arc": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/arc",
        "files": [
          "services.py",
          "models.py",
          "__init__.py",
          "arc.py",
          "routers/__init__.py",
          "routers/arc_router.py",
          "utils/arc_validators.py",
          "utils/arc_helpers.py",
          "utils/__init__.py",
          "utils/arc_formatters.py",
          "repositories/arc_completion_record_repository.py",
          "repositories/__init__.py",
          "repositories/arc_repository.py",
          "repositories/arc_step_repository.py",
          "repositories/arc_progression_repository.py",
          "models/arc_completion_record.py",
          "models/__init__.py",
          "models/arc_step.py",
          "models/arc_progression.py",
          "schemas/arc_schemas.py",
          "schemas/__init__.py",
          "services/arc_generator.py",
          "services/progression_tracker.py",
          "services/__init__.py",
          "services/quest_integration_service.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models",
                "names": [
                  "ArcEntity",
                  "ArcModel",
                  "CreateArcRequest",
                  "UpdateArcRequest",
                  "ArcResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "ArcNotFoundError",
                  "ArcValidationError",
                  "ArcConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_arc_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ArcService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x10507f7f0>"
                ],
                "methods": [
                  "__init__",
                  "create_arc",
                  "get_arc_by_id",
                  "update_arc",
                  "delete_arc",
                  "list_arcs",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_arc_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ArcBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "ArcModel",
                "line": 36,
                "bases": [
                  "ArcBaseModel"
                ],
                "methods": []
              },
              {
                "name": "ArcEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateArcRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateArcRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "ArcResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "ArcListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.arc.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.schemas",
                "names": [
                  "*"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.services",
                "names": [
                  "*"
                ],
                "line": 17
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "arc.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass"
                ],
                "line": 4
              }
            ],
            "functions": [
              {
                "name": "__post_init__",
                "line": 15,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 19,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 32,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "create_arc",
                "line": 35,
                "args": [
                  "self",
                  "arc"
                ],
                "is_async": false
              },
              {
                "name": "get_arc",
                "line": 39,
                "args": [
                  "self",
                  "arc_id"
                ],
                "is_async": false
              },
              {
                "name": "list_arcs",
                "line": 43,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "Arc",
                "line": 7,
                "bases": [],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "ArcManager",
                "line": 29,
                "bases": [],
                "methods": [
                  "__init__",
                  "create_arc",
                  "get_arc",
                  "list_arcs"
                ]
              }
            ]
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/arc_router.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_db"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "Query",
                  "status"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "fastapi.responses",
                "names": [
                  "JSONResponse"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.asyncio",
                "names": [
                  "AsyncSession"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models.arc",
                "names": [
                  "ArcType",
                  "ArcStatus",
                  "ArcPriority"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models.arc_step",
                "names": [
                  "ArcStepStatus",
                  "ArcStepType"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models.arc_completion_record",
                "names": [
                  "ArcCompletionResult"
                ],
                "line": 18
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.schemas.arc_schemas",
                "names": [
                  "ArcCreate",
                  "ArcUpdate",
                  "ArcResponse",
                  "ArcListResponse",
                  "ArcStepCreate",
                  "ArcStepUpdate",
                  "ArcStepResponse",
                  "ArcProgressionResponse",
                  "ArcCompletionRecordResponse",
                  "ArcStatistics",
                  "ArcStepStatistics",
                  "ProgressionStatistics",
                  "CompletionStatistics",
                  "ArcActivationRequest",
                  "ArcStepAdvanceRequest",
                  "ArcCompletionRequest",
                  "ArcSearchRequest",
                  "ErrorResponse",
                  "SuccessResponse",
                  "ArcOperationResponse",
                  "BatchArcStatusUpdate",
                  "BatchArcStepUpdate"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.services.arc_manager",
                "names": [
                  "ArcManager"
                ],
                "line": 28
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.repositories.arc_repository",
                "names": [
                  "ArcRepository"
                ],
                "line": 29
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.repositories.arc_step_repository",
                "names": [
                  "ArcStepRepository"
                ],
                "line": 30
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.repositories.arc_progression_repository",
                "names": [
                  "ArcProgressionRepository"
                ],
                "line": 31
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.repositories.arc_completion_record_repository",
                "names": [
                  "ArcCompletionRecordRepository"
                ],
                "line": 32
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.shared.database.base",
                "names": [
                  "get_async_session"
                ],
                "line": 33
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/arc_validators.py",
            "imports": [
              {
                "type": "import",
                "module": "re",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models.arc",
                "names": [
                  "ArcType",
                  "ArcStatus",
                  "ArcPriority"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models.arc_step",
                "names": [
                  "ArcStepType",
                  "ArcStepStatus"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models.arc_progression",
                "names": [
                  "ProgressionMethod"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models.arc_completion_record",
                "names": [
                  "ArcCompletionResult"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "validate_arc_data",
                "line": 27,
                "args": [
                  "arc_data"
                ],
                "is_async": false
              },
              {
                "name": "validate_step_data",
                "line": 204,
                "args": [
                  "step_data"
                ],
                "is_async": false
              },
              {
                "name": "validate_progression_data",
                "line": 327,
                "args": [
                  "progression_data"
                ],
                "is_async": false
              },
              {
                "name": "validate_narrative_text",
                "line": 421,
                "args": [
                  "text"
                ],
                "is_async": false
              },
              {
                "name": "validate_arc_business_rules",
                "line": 472,
                "args": [
                  "arc_data"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 20,
                "args": [
                  "self",
                  "message",
                  "field",
                  "code"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ArcValidationError",
                "line": 17,
                "bases": [
                  "Exception"
                ],
                "methods": [
                  "__init__"
                ]
              }
            ]
          },
          {
            "file": "utils/arc_helpers.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "utils/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.systems.arc_validators",
                "names": [
                  "validate_arc_data",
                  "validate_step_data",
                  "validate_progression_data",
                  "ArcValidationError"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.systems.arc_formatters",
                "names": [
                  "format_arc_for_display",
                  "format_step_for_display",
                  "format_progression_summary",
                  "format_completion_record"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.systems.arc_helpers",
                "names": [
                  "calculate_arc_complexity",
                  "estimate_completion_time",
                  "generate_arc_summary",
                  "extract_arc_metadata",
                  "normalize_arc_tags"
                ],
                "line": 21
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/arc_formatters.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models.arc",
                "names": [
                  "Arc",
                  "ArcType",
                  "ArcStatus",
                  "ArcPriority"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models.arc_step",
                "names": [
                  "ArcStep",
                  "ArcStepType",
                  "ArcStepStatus"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models.arc_progression",
                "names": [
                  "ArcProgression"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models.arc_completion_record",
                "names": [
                  "ArcCompletionRecord"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "format_arc_for_display",
                "line": 15,
                "args": [
                  "arc",
                  "include_steps"
                ],
                "is_async": false
              },
              {
                "name": "format_step_for_display",
                "line": 56,
                "args": [
                  "step"
                ],
                "is_async": false
              },
              {
                "name": "format_progression_summary",
                "line": 85,
                "args": [
                  "progression"
                ],
                "is_async": false
              },
              {
                "name": "format_completion_record",
                "line": 119,
                "args": [
                  "record"
                ],
                "is_async": false
              },
              {
                "name": "format_arc_list_table",
                "line": 158,
                "args": [
                  "arcs"
                ],
                "is_async": false
              },
              {
                "name": "format_step_list_table",
                "line": 185,
                "args": [
                  "steps"
                ],
                "is_async": false
              },
              {
                "name": "format_analytics_summary",
                "line": 211,
                "args": [
                  "analytics"
                ],
                "is_async": false
              },
              {
                "name": "format_status_badge",
                "line": 233,
                "args": [
                  "status"
                ],
                "is_async": false
              },
              {
                "name": "format_priority_indicator",
                "line": 259,
                "args": [
                  "priority"
                ],
                "is_async": false
              },
              {
                "name": "format_progress_bar",
                "line": 279,
                "args": [
                  "percentage",
                  "width"
                ],
                "is_async": false
              },
              {
                "name": "_format_datetime",
                "line": 300,
                "args": [
                  "dt"
                ],
                "is_async": false
              },
              {
                "name": "_format_datetime_short",
                "line": 321,
                "args": [
                  "dt"
                ],
                "is_async": false
              },
              {
                "name": "_format_duration",
                "line": 328,
                "args": [
                  "hours"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "repositories/arc_completion_record_repository.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "desc",
                  "asc",
                  "func"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.asyncio",
                "names": [
                  "AsyncSession"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.future",
                "names": [
                  "select"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "selectinload"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models.arc_completion_record",
                "names": [
                  "ArcCompletionRecord",
                  "ArcCompletionResult"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.shared.database.base",
                "names": [
                  "BaseRepository"
                ],
                "line": 18
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 25,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ArcCompletionRecordRepository",
                "line": 22,
                "bases": [
                  "<ast.Subscript object at 0x105237850>"
                ],
                "methods": [
                  "__init__",
                  "get_by_arc",
                  "get_by_result",
                  "get_successful_completions",
                  "get_failed_completions",
                  "get_recent_completions",
                  "create_completion_record",
                  "add_outcome",
                  "add_reward",
                  "add_consequence",
                  "record_world_state_change",
                  "record_character_change",
                  "record_faction_change",
                  "add_step_to_history",
                  "add_decision_to_history",
                  "get_completion_statistics",
                  "get_completion_trends",
                  "search_completion_records"
                ]
              }
            ]
          },
          {
            "file": "repositories/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.arc.arc_repository",
                "names": [
                  "ArcRepository"
                ],
                "line": 3
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.arc_step_repository",
                "names": [
                  "ArcStepRepository"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.arc_progression_repository",
                "names": [
                  "ArcProgressionRepository"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.arc_completion_record_repository",
                "names": [
                  "ArcCompletionRecordRepository"
                ],
                "line": 6
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/arc_repository.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "desc",
                  "asc"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.asyncio",
                "names": [
                  "AsyncSession"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.future",
                "names": [
                  "select"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "selectinload"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models.arc",
                "names": [
                  "Arc",
                  "ArcType",
                  "ArcStatus",
                  "ArcPriority"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.shared.database.base",
                "names": [
                  "BaseRepository"
                ],
                "line": 18
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 25,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ArcRepository",
                "line": 22,
                "bases": [
                  "<ast.Subscript object at 0x1051d0730>"
                ],
                "methods": [
                  "__init__",
                  "get_by_type",
                  "get_by_status",
                  "get_active_arcs",
                  "get_by_region",
                  "get_by_character",
                  "get_by_npc",
                  "get_by_faction",
                  "get_stalled_arcs",
                  "count_by_type",
                  "count_by_status",
                  "get_statistics",
                  "search_arcs",
                  "update_last_activity"
                ]
              }
            ]
          },
          {
            "file": "repositories/arc_step_repository.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "desc",
                  "asc"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.asyncio",
                "names": [
                  "AsyncSession"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.future",
                "names": [
                  "select"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "selectinload"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models.arc_step",
                "names": [
                  "ArcStep",
                  "ArcStepStatus",
                  "ArcStepType"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.shared.database.base",
                "names": [
                  "BaseRepository"
                ],
                "line": 18
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 25,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ArcStepRepository",
                "line": 22,
                "bases": [
                  "<ast.Subscript object at 0x1052378b0>"
                ],
                "methods": [
                  "__init__",
                  "get_by_arc",
                  "get_by_arc_and_index",
                  "get_by_status",
                  "get_by_type",
                  "get_completed_steps",
                  "get_failed_steps",
                  "get_pending_steps",
                  "get_active_steps",
                  "get_next_step",
                  "get_current_step",
                  "count_steps_by_arc",
                  "count_steps_by_status",
                  "get_step_statistics",
                  "create_step",
                  "mark_step_completed",
                  "mark_step_failed",
                  "increment_step_attempts",
                  "set_step_active",
                  "search_steps"
                ]
              }
            ]
          },
          {
            "file": "repositories/arc_progression_repository.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "desc",
                  "asc"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.asyncio",
                "names": [
                  "AsyncSession"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.future",
                "names": [
                  "select"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "selectinload"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.models.arc_progression",
                "names": [
                  "ArcProgression",
                  "ProgressionMethod"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.shared.database.base",
                "names": [
                  "BaseRepository"
                ],
                "line": 18
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 25,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ArcProgressionRepository",
                "line": 22,
                "bases": [
                  "<ast.Subscript object at 0x1051b38e0>"
                ],
                "methods": [
                  "__init__",
                  "get_by_arc",
                  "get_active_progressions",
                  "get_completed_progressions",
                  "get_by_method",
                  "create_progression",
                  "add_event",
                  "complete_step",
                  "fail_step",
                  "skip_step",
                  "start_progression",
                  "complete_progression",
                  "update_completion_percentage",
                  "get_progression_statistics",
                  "get_events_by_type"
                ]
              }
            ]
          },
          {
            "file": "models/arc_completion_record.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.arc.arc",
                "names": [
                  "Arc",
                  "ArcType",
                  "ArcStatus",
                  "ArcPriority"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.arc_step",
                "names": [
                  "ArcStep",
                  "ArcStepStatus",
                  "ArcStepType"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.arc_progression",
                "names": [
                  "ArcProgression",
                  "ProgressionMethod"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.arc_completion_record",
                "names": [
                  "ArcCompletionRecord",
                  "ArcCompletionResult"
                ],
                "line": 15
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/arc_step.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models/arc_progression.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "schemas/arc_schemas.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/arc_generator.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "services/progression_tracker.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.arc.arc_manager",
                "names": [
                  "ArcManager"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.arc_generator",
                "names": [
                  "ArcGenerator"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.progression_tracker",
                "names": [
                  "ProgressionTracker"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.arc.quest_integration_service",
                "names": [
                  "QuestIntegrationService"
                ],
                "line": 14
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/quest_integration_service.py",
            "imports": [],
            "functions": [
              {
                "name": "placeholder_function",
                "line": 8,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": true,
        "has_routers": true,
        "has_schemas": true,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 4,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/arc/arc.py"
          },
          {
            "type": "non_canonical_import",
            "import": "re",
            "line": 7,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/arc/utils/arc_validators.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.systems.arc_validators",
            "line": 7,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/arc/utils/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.systems.arc_formatters",
            "line": 14,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/arc/utils/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.systems.arc_helpers",
            "line": 21,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/arc/utils/__init__.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "data": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/data",
        "files": [
          "services.py",
          "schema_validator.py",
          "models.py",
          "__init__.py",
          "routers/data_router.py",
          "routers/__init__.py",
          "utils/data_file_loader.py",
          "utils/__init__.py",
          "repositories/__init__.py",
          "repositories/data_repository.py",
          "models/__init__.py",
          "models/config_models.py",
          "models/biome_models.py",
          "schemas/__init__.py",
          "events/event_handlers.py",
          "events/__init__.py",
          "events/event_publisher.py",
          "events/data_events.py",
          "loaders/game_data_registry.py",
          "loaders/__init__.py",
          "services/data_service.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.data.models",
                "names": [
                  "DataEntity",
                  "DataModel",
                  "CreateDataRequest",
                  "UpdateDataRequest",
                  "DataResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "DataNotFoundError",
                  "DataValidationError",
                  "DataConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_data_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DataService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x10510aa10>"
                ],
                "methods": [
                  "__init__",
                  "create_data",
                  "get_data_by_id",
                  "update_data",
                  "delete_data",
                  "list_datas",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_data_statistics"
                ]
              }
            ]
          },
          {
            "file": "schema_validator.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "jsonschema",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "jsonschema",
                "names": [
                  "Draft7Validator",
                  "ValidationError"
                ],
                "line": 11
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 12
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Union"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.utils.data_file_loader",
                "names": [
                  "get_loader"
                ],
                "line": 16
              }
            ],
            "functions": [
              {
                "name": "get_validator",
                "line": 420,
                "args": [],
                "is_async": false
              },
              {
                "name": "validate_data",
                "line": 429,
                "args": [
                  "data",
                  "schema_name"
                ],
                "is_async": false
              },
              {
                "name": "validate_against_schema",
                "line": 442,
                "args": [
                  "data",
                  "schema"
                ],
                "is_async": false
              },
              {
                "name": "load_schema_from_file",
                "line": 455,
                "args": [
                  "name",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "load_schema",
                "line": 465,
                "args": [
                  "name",
                  "schema"
                ],
                "is_async": false
              },
              {
                "name": "validate_json_schema",
                "line": 475,
                "args": [
                  "schema"
                ],
                "is_async": false
              },
              {
                "name": "get_schema_path",
                "line": 487,
                "args": [
                  "schema_name"
                ],
                "is_async": false
              },
              {
                "name": "validate_world_seed",
                "line": 499,
                "args": [
                  "seed_data"
                ],
                "is_async": false
              },
              {
                "name": "validate_adjacency_rules",
                "line": 511,
                "args": [
                  "rules_data"
                ],
                "is_async": false
              },
              {
                "name": "validate_biome_data",
                "line": 523,
                "args": [
                  "biome_data"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 24,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_load_default_schemas",
                "line": 32,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_add_builtin_schemas",
                "line": 63,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_schemas",
                "line": 174,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_schemas",
                "line": 179,
                "args": [
                  "self",
                  "value"
                ],
                "is_async": false
              },
              {
                "name": "load_schema_from_file",
                "line": 183,
                "args": [
                  "self",
                  "name",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "load_schema",
                "line": 212,
                "args": [
                  "self",
                  "name",
                  "schema_dict"
                ],
                "is_async": false
              },
              {
                "name": "validate",
                "line": 234,
                "args": [
                  "self",
                  "data",
                  "schema_name"
                ],
                "is_async": false
              },
              {
                "name": "validate_against_schema",
                "line": 261,
                "args": [
                  "self",
                  "data",
                  "schema_dict"
                ],
                "is_async": false
              },
              {
                "name": "validate_json_schema",
                "line": 281,
                "args": [
                  "self",
                  "schema"
                ],
                "is_async": false
              },
              {
                "name": "get_schema_path",
                "line": 298,
                "args": [
                  "self",
                  "schema_name"
                ],
                "is_async": false
              },
              {
                "name": "validate_data",
                "line": 322,
                "args": [
                  "self",
                  "data",
                  "schema_name"
                ],
                "is_async": false
              },
              {
                "name": "validate_world_seed",
                "line": 334,
                "args": [
                  "self",
                  "seed_data"
                ],
                "is_async": false
              },
              {
                "name": "validate_adjacency_rules",
                "line": 345,
                "args": [
                  "self",
                  "rules_data"
                ],
                "is_async": false
              },
              {
                "name": "validate_biome_data",
                "line": 356,
                "args": [
                  "self",
                  "biome_data"
                ],
                "is_async": false
              },
              {
                "name": "get_validation_errors",
                "line": 372,
                "args": [
                  "self",
                  "data",
                  "schema_name"
                ],
                "is_async": false
              },
              {
                "name": "list_schemas",
                "line": 396,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "has_schema",
                "line": 404,
                "args": [
                  "self",
                  "schema_name"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "SchemaValidator",
                "line": 21,
                "bases": [],
                "methods": [
                  "__init__",
                  "_load_default_schemas",
                  "_add_builtin_schemas",
                  "_schemas",
                  "_schemas",
                  "load_schema_from_file",
                  "load_schema",
                  "validate",
                  "validate_against_schema",
                  "validate_json_schema",
                  "get_schema_path",
                  "validate_data",
                  "validate_world_seed",
                  "validate_adjacency_rules",
                  "validate_biome_data",
                  "get_validation_errors",
                  "list_schemas",
                  "has_schema"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DataBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "DataModel",
                "line": 36,
                "bases": [
                  "DataBaseModel"
                ],
                "methods": []
              },
              {
                "name": "DataEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateDataRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateDataRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "DataResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "DataListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.services.data_service",
                "names": [
                  "DataService",
                  "get_data_service"
                ],
                "line": 43
              },
              {
                "type": "from_import",
                "module": "backend.systems.loaders.game_data_registry",
                "names": [
                  "GameDataRegistry",
                  "get_registry"
                ],
                "line": 46
              },
              {
                "type": "from_import",
                "module": "backend.systems.utils.data_file_loader",
                "names": [
                  "DataFileLoader",
                  "get_loader"
                ],
                "line": 47
              },
              {
                "type": "from_import",
                "module": "backend.systems.schema_validator",
                "names": [
                  "SchemaValidator",
                  "get_validator"
                ],
                "line": 50
              },
              {
                "type": "from_import",
                "module": "backend.systems.models",
                "names": [
                  "BiomeType",
                  "EnvironmentalRange",
                  "EnvironmentalConditions",
                  "BiomeDefinition",
                  "BiomeCompatibility",
                  "BiomeTransition",
                  "TerrainType",
                  "RegionType",
                  "Coordinates",
                  "WorldSeed",
                  "TileData",
                  "RegionData",
                  "TerrainFeature",
                  "ConfigurationType",
                  "LogLevel",
                  "ValidationSeverity",
                  "DataVersion",
                  "MetadataModel",
                  "ValidationError",
                  "ValidationModel",
                  "GameConfiguration"
                ],
                "line": 53
              },
              {
                "type": "from_import",
                "module": "backend.systems.schemas",
                "names": [
                  "load_schema",
                  "get_available_schemas",
                  "get_schema_path",
                  "BIOME_SCHEMA",
                  "WORLD_SEED_SCHEMA",
                  "ADJACENCY_RULES_SCHEMA"
                ],
                "line": 69
              },
              {
                "type": "from_import",
                "module": "backend.systems.events",
                "names": [
                  "publish_data_event",
                  "subscribe_to_data_events",
                  "DataLoadedEvent",
                  "DataSavedEvent",
                  "DataValidationEvent",
                  "DataErrorEvent",
                  "RegistryInitializedEvent"
                ],
                "line": 75
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/data_router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.session",
                "names": [
                  "get_db"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 8
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.data.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.data.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.data.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/data_file_loader.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 13
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 14
              },
              {
                "type": "import",
                "module": "yaml",
                "alias": null,
                "line": 15
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "Optional",
                  "List",
                  "Union"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 18
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 19
              },
              {
                "type": "import",
                "module": "shutil",
                "alias": null,
                "line": 446
              },
              {
                "type": "import",
                "module": "shutil",
                "alias": null,
                "line": 168
              }
            ],
            "functions": [
              {
                "name": "get_loader",
                "line": 330,
                "args": [],
                "is_async": false
              },
              {
                "name": "load_data_file",
                "line": 339,
                "args": [
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "load_json_file",
                "line": 358,
                "args": [
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "load_data_directory",
                "line": 370,
                "args": [
                  "dir_path",
                  "extension"
                ],
                "is_async": false
              },
              {
                "name": "save_data_file",
                "line": 383,
                "args": [
                  "file_path",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "get_file_metadata",
                "line": 393,
                "args": [
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "find_data_dir",
                "line": 405,
                "args": [],
                "is_async": false
              },
              {
                "name": "ensure_directory",
                "line": 413,
                "args": [
                  "dir_path"
                ],
                "is_async": false
              },
              {
                "name": "safe_write_json",
                "line": 422,
                "args": [
                  "file_path",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "backup_file",
                "line": 432,
                "args": [
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 36,
                "args": [
                  "self",
                  "enable_cache"
                ],
                "is_async": false
              },
              {
                "name": "enable_cache",
                "line": 47,
                "args": [
                  "self",
                  "enabled"
                ],
                "is_async": false
              },
              {
                "name": "clear_cache",
                "line": 57,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "file_exists",
                "line": 62,
                "args": [
                  "self",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "load_text",
                "line": 74,
                "args": [
                  "self",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "load_json",
                "line": 109,
                "args": [
                  "self",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "save_data_file",
                "line": 148,
                "args": [
                  "self",
                  "file_path",
                  "data",
                  "create_backup"
                ],
                "is_async": false
              },
              {
                "name": "load_data_directory",
                "line": 198,
                "args": [
                  "self",
                  "dir_path",
                  "extension"
                ],
                "is_async": false
              },
              {
                "name": "get_file_metadata",
                "line": 250,
                "args": [
                  "self",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "_resolve_path",
                "line": 287,
                "args": [
                  "self",
                  "path"
                ],
                "is_async": false
              },
              {
                "name": "_find_project_root",
                "line": 304,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "FileMetadata",
                "line": 25,
                "bases": [],
                "methods": []
              },
              {
                "name": "DataFileLoader",
                "line": 33,
                "bases": [],
                "methods": [
                  "__init__",
                  "enable_cache",
                  "clear_cache",
                  "file_exists",
                  "load_text",
                  "load_json",
                  "save_data_file",
                  "load_data_directory",
                  "get_file_metadata",
                  "_resolve_path",
                  "_find_project_root"
                ]
              }
            ]
          },
          {
            "file": "utils/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.data_file_loader",
                "names": [
                  "DataFileLoader",
                  "FileMetadata",
                  "load_data_file",
                  "load_json_file",
                  "load_data_directory",
                  "save_data_file",
                  "get_file_metadata",
                  "find_data_dir",
                  "ensure_directory",
                  "safe_write_json",
                  "backup_file",
                  "get_loader"
                ],
                "line": 11
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/data_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models.base",
                "names": [
                  "BaseModel"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 13,
                "args": [
                  "self",
                  "db"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DataRepository",
                "line": 10,
                "bases": [],
                "methods": [
                  "__init__",
                  "create",
                  "get_by_id",
                  "get_all",
                  "update",
                  "delete"
                ]
              }
            ]
          },
          {
            "file": "models/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.biome_models",
                "names": [
                  "BiomeType",
                  "EnvironmentalRange",
                  "EnvironmentalConditions",
                  "BiomeDefinition",
                  "BiomeCompatibility",
                  "BiomeTransition"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.world_models",
                "names": [
                  "TerrainType",
                  "RegionType",
                  "Coordinates",
                  "WorldSeed",
                  "TileData",
                  "RegionData",
                  "TerrainFeature"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.config_models",
                "names": [
                  "ConfigurationType",
                  "LogLevel",
                  "ValidationSeverity",
                  "DataVersion",
                  "MetadataModel",
                  "ValidationError",
                  "ValidationModel",
                  "GameConfiguration"
                ],
                "line": 33
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/config_models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any",
                  "Union"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 9
              }
            ],
            "functions": [
              {
                "name": "__post_init__",
                "line": 49,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "version_string",
                "line": 55,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "is_compatible_with",
                "line": 64,
                "args": [
                  "self",
                  "other"
                ],
                "is_async": false
              },
              {
                "name": "is_newer_than",
                "line": 72,
                "args": [
                  "self",
                  "other"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 80,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 94,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "from_string",
                "line": 111,
                "args": [
                  "cls",
                  "version_string"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 155,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "update_timestamp",
                "line": 162,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "add_tag",
                "line": 166,
                "args": [
                  "self",
                  "tag"
                ],
                "is_async": false
              },
              {
                "name": "remove_tag",
                "line": 171,
                "args": [
                  "self",
                  "tag"
                ],
                "is_async": false
              },
              {
                "name": "has_tag",
                "line": 176,
                "args": [
                  "self",
                  "tag"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 180,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 200,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 237,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 249,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "add_error",
                "line": 272,
                "args": [
                  "self",
                  "field_path",
                  "message",
                  "severity",
                  "error_code",
                  "expected",
                  "actual"
                ],
                "is_async": false
              },
              {
                "name": "get_error_count",
                "line": 282,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_warning_count",
                "line": 286,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_critical_errors",
                "line": 290,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "has_critical_errors",
                "line": 294,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 298,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 313,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 378,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "update_timestamp",
                "line": 391,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "set_custom_setting",
                "line": 395,
                "args": [
                  "self",
                  "key",
                  "value"
                ],
                "is_async": false
              },
              {
                "name": "get_custom_setting",
                "line": 400,
                "args": [
                  "self",
                  "key",
                  "default"
                ],
                "is_async": false
              },
              {
                "name": "remove_custom_setting",
                "line": 404,
                "args": [
                  "self",
                  "key"
                ],
                "is_async": false
              },
              {
                "name": "enable_debug_mode",
                "line": 410,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "disable_debug_mode",
                "line": 418,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 426,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 457,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "ConfigurationType",
                "line": 12,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "LogLevel",
                "line": 21,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "ValidationSeverity",
                "line": 30,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "DataVersion",
                "line": 39,
                "bases": [],
                "methods": [
                  "__post_init__",
                  "version_string",
                  "is_compatible_with",
                  "is_newer_than",
                  "to_dict",
                  "from_dict",
                  "from_string"
                ]
              },
              {
                "name": "MetadataModel",
                "line": 138,
                "bases": [],
                "methods": [
                  "__post_init__",
                  "update_timestamp",
                  "add_tag",
                  "remove_tag",
                  "has_tag",
                  "to_dict",
                  "from_dict"
                ]
              },
              {
                "name": "ValidationError",
                "line": 228,
                "bases": [],
                "methods": [
                  "to_dict",
                  "from_dict"
                ]
              },
              {
                "name": "ValidationModel",
                "line": 262,
                "bases": [],
                "methods": [
                  "add_error",
                  "get_error_count",
                  "get_warning_count",
                  "get_critical_errors",
                  "has_critical_errors",
                  "to_dict",
                  "from_dict"
                ]
              },
              {
                "name": "GameConfiguration",
                "line": 336,
                "bases": [],
                "methods": [
                  "__post_init__",
                  "update_timestamp",
                  "set_custom_setting",
                  "get_custom_setting",
                  "remove_custom_setting",
                  "enable_debug_mode",
                  "disable_debug_mode",
                  "to_dict",
                  "from_dict"
                ]
              }
            ]
          },
          {
            "file": "models/biome_models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Union"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 10
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 11
              }
            ],
            "functions": [
              {
                "name": "__post_init__",
                "line": 29,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "contains",
                "line": 38,
                "args": [
                  "self",
                  "value"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 42,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 47,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "matches",
                "line": 61,
                "args": [
                  "self",
                  "elevation",
                  "temperature",
                  "humidity",
                  "precipitation",
                  "wind"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 77,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 93,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 121,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "matches_conditions",
                "line": 132,
                "args": [
                  "self",
                  "elevation",
                  "temperature",
                  "humidity",
                  "precipitation",
                  "wind"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 140,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 161,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 195,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "is_compatible_with",
                "line": 206,
                "args": [
                  "self",
                  "biome_id"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 210,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 222,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 244,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "can_transition",
                "line": 255,
                "args": [
                  "self",
                  "available_biomes",
                  "environmental_conditions"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 275,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "from_dict",
                "line": 289,
                "args": [
                  "cls",
                  "data"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "BiomeType",
                "line": 14,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "EnvironmentalRange",
                "line": 24,
                "bases": [],
                "methods": [
                  "__post_init__",
                  "contains",
                  "to_dict",
                  "from_dict"
                ]
              },
              {
                "name": "EnvironmentalConditions",
                "line": 53,
                "bases": [],
                "methods": [
                  "matches",
                  "to_dict",
                  "from_dict"
                ]
              },
              {
                "name": "BiomeDefinition",
                "line": 105,
                "bases": [],
                "methods": [
                  "__post_init__",
                  "matches_conditions",
                  "to_dict",
                  "from_dict"
                ]
              },
              {
                "name": "BiomeCompatibility",
                "line": 186,
                "bases": [],
                "methods": [
                  "__post_init__",
                  "is_compatible_with",
                  "to_dict",
                  "from_dict"
                ]
              },
              {
                "name": "BiomeTransition",
                "line": 235,
                "bases": [],
                "methods": [
                  "__post_init__",
                  "can_transition",
                  "to_dict",
                  "from_dict"
                ]
              }
            ]
          },
          {
            "file": "schemas/__init__.py",
            "imports": [
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 12
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "Optional"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "load_schema",
                "line": 20,
                "args": [
                  "schema_name"
                ],
                "is_async": false
              },
              {
                "name": "get_available_schemas",
                "line": 29,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_schema_path",
                "line": 37,
                "args": [
                  "schema_name"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "events/event_handlers.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "Optional",
                  "List"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.data_events",
                "names": [
                  "BaseDataEvent",
                  "DataLoadedEvent",
                  "DataSavedEvent",
                  "DataValidationEvent",
                  "DataErrorEvent",
                  "CacheInvalidatedEvent",
                  "FileWatcherEvent",
                  "DirectoryScannedEvent",
                  "BackupCreatedEvent",
                  "EventSeverity"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 26,
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false
              },
              {
                "name": "enable",
                "line": 33,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "disable",
                "line": 38,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "handle_event",
                "line": 43,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_data_loaded",
                "line": 75,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_data_saved",
                "line": 79,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_data_validation",
                "line": 83,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_data_error",
                "line": 90,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_cache_invalidated",
                "line": 94,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_file_watcher",
                "line": 98,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_directory_scanned",
                "line": 102,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_backup_created",
                "line": 106,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_generic",
                "line": 110,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "get_stats",
                "line": 114,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 126,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "handle_data_validation",
                "line": 136,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "get_validation_stats",
                "line": 158,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 166,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "handle_cache_invalidated",
                "line": 174,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "get_cache_stats",
                "line": 191,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 199,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "handle_file_watcher",
                "line": 208,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_directory_scanned",
                "line": 223,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_backup_created",
                "line": 233,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "get_filesystem_stats",
                "line": 240,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 248,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "handle_data_loaded",
                "line": 257,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_data_validation",
                "line": 266,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "handle_directory_scanned",
                "line": 273,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "get_performance_stats",
                "line": 280,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DataEventHandler",
                "line": 23,
                "bases": [],
                "methods": [
                  "__init__",
                  "enable",
                  "disable",
                  "handle_event",
                  "handle_data_loaded",
                  "handle_data_saved",
                  "handle_data_validation",
                  "handle_data_error",
                  "handle_cache_invalidated",
                  "handle_file_watcher",
                  "handle_directory_scanned",
                  "handle_backup_created",
                  "handle_generic",
                  "get_stats"
                ]
              },
              {
                "name": "ValidationEventHandler",
                "line": 123,
                "bases": [
                  "DataEventHandler"
                ],
                "methods": [
                  "__init__",
                  "handle_data_validation",
                  "get_validation_stats"
                ]
              },
              {
                "name": "CacheEventHandler",
                "line": 163,
                "bases": [
                  "DataEventHandler"
                ],
                "methods": [
                  "__init__",
                  "handle_cache_invalidated",
                  "get_cache_stats"
                ]
              },
              {
                "name": "FileSystemEventHandler",
                "line": 196,
                "bases": [
                  "DataEventHandler"
                ],
                "methods": [
                  "__init__",
                  "handle_file_watcher",
                  "handle_directory_scanned",
                  "handle_backup_created",
                  "get_filesystem_stats"
                ]
              },
              {
                "name": "PerformanceEventHandler",
                "line": 245,
                "bases": [
                  "DataEventHandler"
                ],
                "methods": [
                  "__init__",
                  "handle_data_loaded",
                  "handle_data_validation",
                  "handle_directory_scanned",
                  "get_performance_stats"
                ]
              }
            ]
          },
          {
            "file": "events/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.data_events",
                "names": [
                  "DataLoadedEvent",
                  "DataSavedEvent",
                  "DataValidationEvent",
                  "DataErrorEvent",
                  "SchemaUpdatedEvent",
                  "RegistryInitializedEvent",
                  "BiomeDataUpdatedEvent",
                  "AdjacencyRulesUpdatedEvent",
                  "CacheInvalidatedEvent",
                  "FileWatcherEvent",
                  "DirectoryScannedEvent",
                  "BackupCreatedEvent"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.event_handlers",
                "names": [
                  "DataEventHandler",
                  "ValidationEventHandler",
                  "CacheEventHandler",
                  "FileSystemEventHandler"
                ],
                "line": 26
              },
              {
                "type": "from_import",
                "module": "backend.systems.event_publisher",
                "names": [
                  "DataEventPublisher",
                  "publish_data_event",
                  "subscribe_to_data_events"
                ],
                "line": 33
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "events/event_publisher.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Callable",
                  "Any",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "threading",
                "names": [
                  "Lock"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.data_events",
                "names": [
                  "BaseDataEvent",
                  "DataEventType",
                  "EventSeverity"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "get_publisher",
                "line": 118,
                "args": [],
                "is_async": false
              },
              {
                "name": "publish_data_event",
                "line": 123,
                "args": [
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "subscribe_to_data_events",
                "line": 128,
                "args": [
                  "event_type",
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "subscribe_to_all_data_events",
                "line": 133,
                "args": [
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "unsubscribe_from_data_events",
                "line": 138,
                "args": [
                  "event_type",
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "unsubscribe_from_all_data_events",
                "line": 143,
                "args": [
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "enable_event_publishing",
                "line": 148,
                "args": [],
                "is_async": false
              },
              {
                "name": "disable_event_publishing",
                "line": 153,
                "args": [],
                "is_async": false
              },
              {
                "name": "is_event_publishing_enabled",
                "line": 158,
                "args": [],
                "is_async": false
              },
              {
                "name": "clear_all_subscriptions",
                "line": 163,
                "args": [],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 16,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "enable",
                "line": 23,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "disable",
                "line": 27,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "is_enabled",
                "line": 31,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "subscribe",
                "line": 35,
                "args": [
                  "self",
                  "event_type",
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "subscribe_global",
                "line": 43,
                "args": [
                  "self",
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "unsubscribe",
                "line": 49,
                "args": [
                  "self",
                  "event_type",
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "unsubscribe_global",
                "line": 59,
                "args": [
                  "self",
                  "handler"
                ],
                "is_async": false
              },
              {
                "name": "publish",
                "line": 68,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "get_subscriber_count",
                "line": 89,
                "args": [
                  "self",
                  "event_type"
                ],
                "is_async": false
              },
              {
                "name": "clear_subscribers",
                "line": 101,
                "args": [
                  "self",
                  "event_type"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DataEventPublisher",
                "line": 13,
                "bases": [],
                "methods": [
                  "__init__",
                  "enable",
                  "disable",
                  "is_enabled",
                  "subscribe",
                  "subscribe_global",
                  "unsubscribe",
                  "unsubscribe_global",
                  "publish",
                  "get_subscriber_count",
                  "clear_subscribers"
                ]
              }
            ]
          },
          {
            "file": "events/data_events.py",
            "imports": [
              {
                "type": "from_import",
                "module": "dataclasses",
                "names": [
                  "dataclass",
                  "field"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any",
                  "Union"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "to_dict",
                "line": 39,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 65,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 86,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 92,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 116,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 125,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 150,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 157,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 178,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 184,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 203,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 209,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 228,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 234,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 252,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 258,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 276,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 282,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 300,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 306,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 326,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 332,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__post_init__",
                "line": 353,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 359,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventSeverity",
                "line": 11,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "DataEventType",
                "line": 19,
                "bases": [
                  "Enum"
                ],
                "methods": []
              },
              {
                "name": "BaseDataEvent",
                "line": 30,
                "bases": [],
                "methods": [
                  "to_dict"
                ]
              },
              {
                "name": "DataLoadedEvent",
                "line": 52,
                "bases": [
                  "BaseDataEvent"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "DataSavedEvent",
                "line": 78,
                "bases": [
                  "BaseDataEvent"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "DataValidationEvent",
                "line": 106,
                "bases": [
                  "BaseDataEvent"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "DataErrorEvent",
                "line": 141,
                "bases": [
                  "BaseDataEvent"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "SchemaUpdatedEvent",
                "line": 172,
                "bases": [
                  "BaseDataEvent"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "RegistryInitializedEvent",
                "line": 196,
                "bases": [
                  "BaseDataEvent"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "BiomeDataUpdatedEvent",
                "line": 222,
                "bases": [
                  "BaseDataEvent"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "AdjacencyRulesUpdatedEvent",
                "line": 246,
                "bases": [
                  "BaseDataEvent"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "CacheInvalidatedEvent",
                "line": 270,
                "bases": [
                  "BaseDataEvent"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "FileWatcherEvent",
                "line": 294,
                "bases": [
                  "BaseDataEvent"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "DirectoryScannedEvent",
                "line": 318,
                "bases": [
                  "BaseDataEvent"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              },
              {
                "name": "BackupCreatedEvent",
                "line": 346,
                "bases": [
                  "BaseDataEvent"
                ],
                "methods": [
                  "__post_init__",
                  "to_dict"
                ]
              }
            ]
          },
          {
            "file": "loaders/game_data_registry.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Tuple"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.datautils.data_file_loader",
                "names": [
                  "get_loader"
                ],
                "line": 13
              }
            ],
            "functions": [
              {
                "name": "get_registry",
                "line": 461,
                "args": [],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 21,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "load_all",
                "line": 38,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_load_biomes",
                "line": 61,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_load_adjacency_rules",
                "line": 116,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_load_river_rules",
                "line": 156,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_load_elevation_rules",
                "line": 192,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_load_water_land_rules",
                "line": 223,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "all_biomes",
                "line": 256,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "biome_by_id",
                "line": 263,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "adjacency_rules",
                "line": 270,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "adjacency_defaults",
                "line": 277,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "water_land_rules",
                "line": 284,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "elevation_rules",
                "line": 291,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "river_rules",
                "line": 298,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_biome",
                "line": 305,
                "args": [
                  "self",
                  "biome_id"
                ],
                "is_async": false
              },
              {
                "name": "get_biome_by_conditions",
                "line": 318,
                "args": [
                  "self",
                  "elevation",
                  "temperature",
                  "humidity"
                ],
                "is_async": false
              },
              {
                "name": "are_biomes_compatible",
                "line": 375,
                "args": [
                  "self",
                  "biome1",
                  "biome2"
                ],
                "is_async": false
              },
              {
                "name": "get_transition_biomes",
                "line": 404,
                "args": [
                  "self",
                  "biome1",
                  "biome2"
                ],
                "is_async": false
              },
              {
                "name": "get_cached_data",
                "line": 428,
                "args": [
                  "self",
                  "category",
                  "subcategory"
                ],
                "is_async": false
              },
              {
                "name": "get_river_rules",
                "line": 446,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "GameDataRegistry",
                "line": 18,
                "bases": [],
                "methods": [
                  "__init__",
                  "load_all",
                  "_load_biomes",
                  "_load_adjacency_rules",
                  "_load_river_rules",
                  "_load_elevation_rules",
                  "_load_water_land_rules",
                  "all_biomes",
                  "biome_by_id",
                  "adjacency_rules",
                  "adjacency_defaults",
                  "water_land_rules",
                  "elevation_rules",
                  "river_rules",
                  "get_biome",
                  "get_biome_by_conditions",
                  "are_biomes_compatible",
                  "get_transition_biomes",
                  "get_cached_data",
                  "get_river_rules"
                ]
              }
            ]
          },
          {
            "file": "loaders/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.game_data_registry",
                "names": [
                  "GameDataRegistry",
                  "get_registry"
                ],
                "line": 10
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/data_service.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "List",
                  "Optional",
                  "Union"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.datautils.data_file_loader",
                "names": [
                  "get_loader"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.dataloaders.game_data_registry",
                "names": [
                  "get_registry"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.datautils.data_file_loader",
                "names": [
                  "load_data_file"
                ],
                "line": 190
              }
            ],
            "functions": [
              {
                "name": "get_data_service",
                "line": 331,
                "args": [
                  "test_mode"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 23,
                "args": [
                  "self",
                  "test_mode"
                ],
                "is_async": false
              },
              {
                "name": "get_instance",
                "line": 40,
                "args": [
                  "cls",
                  "test_mode"
                ],
                "is_async": false
              },
              {
                "name": "reset_instance",
                "line": 54,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "initialize",
                "line": 58,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "registry",
                "line": 78,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "get_biome",
                "line": 89,
                "args": [
                  "self",
                  "biome_id"
                ],
                "is_async": false
              },
              {
                "name": "get_all_biomes",
                "line": 107,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "are_biomes_compatible",
                "line": 122,
                "args": [
                  "self",
                  "biome1",
                  "biome2"
                ],
                "is_async": false
              },
              {
                "name": "get_transition_biomes",
                "line": 141,
                "args": [
                  "self",
                  "biome1",
                  "biome2"
                ],
                "is_async": false
              },
              {
                "name": "get_river_rules",
                "line": 160,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "load_data_file",
                "line": 176,
                "args": [
                  "self",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "load_data_directory",
                "line": 196,
                "args": [
                  "self",
                  "dir_path",
                  "extension"
                ],
                "is_async": false
              },
              {
                "name": "save_data_file",
                "line": 215,
                "args": [
                  "self",
                  "file_path",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "get_file_metadata",
                "line": 232,
                "args": [
                  "self",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "clear_cache",
                "line": 247,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "file_exists",
                "line": 255,
                "args": [
                  "self",
                  "file_path"
                ],
                "is_async": false
              },
              {
                "name": "get_cached_data",
                "line": 271,
                "args": [
                  "self",
                  "category",
                  "subcategory"
                ],
                "is_async": false
              },
              {
                "name": "get_biome_by_conditions",
                "line": 291,
                "args": [
                  "self",
                  "elevation",
                  "temperature",
                  "humidity"
                ],
                "is_async": false
              },
              {
                "name": "is_initialized",
                "line": 313,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "is_test_mode",
                "line": 321,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "DataService",
                "line": 18,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_instance",
                  "reset_instance",
                  "initialize",
                  "registry",
                  "get_biome",
                  "get_all_biomes",
                  "are_biomes_compatible",
                  "get_transition_biomes",
                  "get_river_rules",
                  "load_data_file",
                  "load_data_directory",
                  "save_data_file",
                  "get_file_metadata",
                  "clear_cache",
                  "file_exists",
                  "get_cached_data",
                  "get_biome_by_conditions",
                  "is_initialized",
                  "is_test_mode"
                ]
              }
            ]
          },
          {
            "file": "services/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.data_service",
                "names": [
                  "DataService",
                  "get_data_service"
                ],
                "line": 10
              }
            ],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": true,
        "has_routers": true,
        "has_schemas": true,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "jsonschema",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
          },
          {
            "type": "non_canonical_import",
            "import": "jsonschema",
            "line": 11,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.utils.data_file_loader",
            "line": 16,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.services.data_service",
            "line": 43,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.loaders.game_data_registry",
            "line": 46,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.utils.data_file_loader",
            "line": 47,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.schema_validator",
            "line": 50,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.models",
            "line": 53,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.schemas",
            "line": 69,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "yaml",
            "line": 15,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 18,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
          },
          {
            "type": "non_canonical_import",
            "import": "shutil",
            "line": 446,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
          },
          {
            "type": "non_canonical_import",
            "import": "shutil",
            "line": 168,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.data_file_loader",
            "line": 11,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/utils/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.biome_models",
            "line": 12,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/models/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.world_models",
            "line": 22,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/models/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.config_models",
            "line": 33,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/models/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 6,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.data_events",
            "line": 7,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.data_events",
            "line": 11,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.event_handlers",
            "line": 26,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.event_publisher",
            "line": 33,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "threading",
            "line": 7,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_publisher.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.data_events",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_publisher.py"
          },
          {
            "type": "non_canonical_import",
            "import": "dataclasses",
            "line": 5,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.datautils.data_file_loader",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/loaders/game_data_registry.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.game_data_registry",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/loaders/__init__.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.datautils.data_file_loader",
            "line": 12,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.dataloaders.game_data_registry",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.datautils.data_file_loader",
            "line": 190,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "backend.systems.data_service",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/data/services/__init__.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "equipment": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/equipment",
        "files": [
          "set_bonus_utils.py",
          "identify_item_utils.py",
          "services.py",
          "durability_utils.py",
          "models.py",
          "__init__.py",
          "inventory_utils.py",
          "routers/__init__.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "set_bonus_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 7
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.equipment.models",
                "names": [
                  "Equipment",
                  "EquipmentSet"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "db"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.models",
                "names": [
                  "Item"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "get_equipment_sets",
                "line": 23,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_equipment_set",
                "line": 40,
                "args": [
                  "set_id"
                ],
                "is_async": false
              },
              {
                "name": "get_item_set_membership",
                "line": 62,
                "args": [
                  "item_id"
                ],
                "is_async": false
              },
              {
                "name": "calculate_set_bonuses",
                "line": 84,
                "args": [
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "apply_set_bonuses",
                "line": 145,
                "args": [
                  "character_stats",
                  "set_bonuses"
                ],
                "is_async": false
              },
              {
                "name": "create_equipment_set",
                "line": 201,
                "args": [
                  "name",
                  "description",
                  "item_ids",
                  "set_bonuses"
                ],
                "is_async": false
              },
              {
                "name": "update_equipment_set",
                "line": 252,
                "args": [
                  "set_id",
                  "name",
                  "description",
                  "item_ids",
                  "set_bonuses"
                ],
                "is_async": false
              },
              {
                "name": "delete_equipment_set",
                "line": 311,
                "args": [
                  "set_id"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "identify_item_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any"
                ],
                "line": 7
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "db"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "backend.systems.economy.models",
                "names": [
                  "Economy"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.faction.models",
                "names": [
                  "Faction"
                ],
                "line": 14
              }
            ],
            "functions": [
              {
                "name": "calculate_identification_cost",
                "line": 30,
                "args": [
                  "item_data",
                  "region_name",
                  "faction_id"
                ],
                "is_async": false
              },
              {
                "name": "identify_item",
                "line": 69,
                "args": [
                  "item",
                  "player_level"
                ],
                "is_async": false
              },
              {
                "name": "fully_identify_item",
                "line": 96,
                "args": [
                  "item"
                ],
                "is_async": false
              },
              {
                "name": "is_fully_identified",
                "line": 112,
                "args": [
                  "item"
                ],
                "is_async": false
              },
              {
                "name": "get_next_identifiable_level",
                "line": 131,
                "args": [
                  "item",
                  "player_level"
                ],
                "is_async": false
              },
              {
                "name": "reveal_item_name_and_flavor",
                "line": 151,
                "args": [
                  "item"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.equipment.models",
                "names": [
                  "EquipmentEntity",
                  "EquipmentModel",
                  "CreateEquipmentRequest",
                  "UpdateEquipmentRequest",
                  "EquipmentResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "EquipmentNotFoundError",
                  "EquipmentValidationError",
                  "EquipmentConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_equipment_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EquipmentService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x105108f10>"
                ],
                "methods": [
                  "__init__",
                  "create_equipment",
                  "get_equipment_by_id",
                  "update_equipment",
                  "delete_equipment",
                  "list_equipments",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_equipment_statistics"
                ]
              }
            ]
          },
          {
            "file": "durability_utils.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional",
                  "Any",
                  "Tuple"
                ],
                "line": 7
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 9
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.equipment.models",
                "names": [
                  "Equipment",
                  "EquipmentDurabilityLog"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "db"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.models",
                "names": [
                  "Item",
                  "InventoryItem"
                ],
                "line": 18
              }
            ],
            "functions": [
              {
                "name": "get_durability_status",
                "line": 50,
                "args": [
                  "current_durability",
                  "max_durability"
                ],
                "is_async": false
              },
              {
                "name": "calculate_combat_damage",
                "line": 72,
                "args": [
                  "equipment_type",
                  "combat_intensity",
                  "is_critical"
                ],
                "is_async": false
              },
              {
                "name": "calculate_wear_damage",
                "line": 102,
                "args": [
                  "equipment_type",
                  "time_worn",
                  "environmental_factor"
                ],
                "is_async": false
              },
              {
                "name": "apply_durability_damage",
                "line": 130,
                "args": [
                  "equipment_id",
                  "damage_amount",
                  "reason",
                  "details"
                ],
                "is_async": false
              },
              {
                "name": "calculate_repair_cost",
                "line": 192,
                "args": [
                  "current_durability",
                  "max_durability",
                  "item_value",
                  "repair_amount"
                ],
                "is_async": false
              },
              {
                "name": "repair_equipment",
                "line": 240,
                "args": [
                  "equipment_id",
                  "repair_amount",
                  "full_repair"
                ],
                "is_async": false
              },
              {
                "name": "adjust_stats_for_durability",
                "line": 306,
                "args": [
                  "equipment",
                  "item_stats"
                ],
                "is_async": false
              },
              {
                "name": "get_durability_history",
                "line": 349,
                "args": [
                  "equipment_id",
                  "limit"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EquipmentBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "EquipmentModel",
                "line": 36,
                "bases": [
                  "EquipmentBaseModel"
                ],
                "methods": []
              },
              {
                "name": "EquipmentEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateEquipmentRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateEquipmentRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "EquipmentResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "EquipmentListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.equipment.models",
                "names": [
                  "Equipment"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.equipment.inventory_utils",
                "names": [
                  "load_equipment_rules",
                  "calculate_carry_capacity",
                  "can_equip_item",
                  "get_equipment_stats",
                  "get_item_details"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.equipment.shop_utils",
                "names": [
                  "restock_shop_inventory",
                  "get_shop_inventory"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.equipment.service",
                "names": [
                  "EquipmentService"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.equipment.router",
                "names": [
                  "router"
                ],
                "line": 20
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "inventory_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "List",
                  "Optional"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 9
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.equipment.durability_utils",
                "names": [
                  "adjust_stats_for_durability",
                  "get_durability_status"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.models.inventory_utils",
                "names": [
                  "calculate_total_weight",
                  "group_equipment_by_type",
                  "get_equipped_items"
                ],
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.inventory.models.inventory_validator",
                "names": [
                  "InventoryValidator"
                ],
                "line": 24
              }
            ],
            "functions": [
              {
                "name": "get_equipped_items",
                "line": 54,
                "args": [
                  "items"
                ],
                "is_async": false
              },
              {
                "name": "load_equipment_rules",
                "line": 71,
                "args": [],
                "is_async": false
              },
              {
                "name": "_get_default_equipment_rules",
                "line": 90,
                "args": [],
                "is_async": false
              },
              {
                "name": "calculate_carry_capacity",
                "line": 119,
                "args": [
                  "strength"
                ],
                "is_async": false
              },
              {
                "name": "check_durability_requirements",
                "line": 134,
                "args": [
                  "equipment"
                ],
                "is_async": false
              },
              {
                "name": "can_equip_item",
                "line": 165,
                "args": [
                  "character",
                  "item"
                ],
                "is_async": false
              },
              {
                "name": "get_equipment_stats",
                "line": 201,
                "args": [
                  "equipped_items"
                ],
                "is_async": false
              },
              {
                "name": "get_item_details",
                "line": 262,
                "args": [
                  "item_id"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.equipment.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.equipment.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.equipment.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": false,
        "has_schemas": false,
        "import_issues": [],
        "syntax_errors": [],
        "missing_components": []
      },
      "npc": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/npc",
        "files": [
          "npc_loyalty_class.py",
          "services.py",
          "npc_builder_class.py",
          "models.py",
          "npc_location_service.py",
          "npc_routes.py",
          "__init__.py",
          "npc_travel_utils.py",
          "npc_character_routes.py",
          "routers/__init__.py",
          "routers/npc_location_router.py",
          "repositories/__init__.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py"
        ],
        "modules": [
          {
            "file": "npc_loyalty_class.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 4
              },
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 5
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 16,
                "args": [
                  "self",
                  "npc_id",
                  "loyalty_data"
                ],
                "is_async": false
              },
              {
                "name": "tick",
                "line": 26,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "apply_event",
                "line": 58,
                "args": [
                  "self",
                  "impact"
                ],
                "is_async": false
              },
              {
                "name": "apply_qualifying_event",
                "line": 64,
                "args": [
                  "self",
                  "chance"
                ],
                "is_async": false
              },
              {
                "name": "apply_alignment_event",
                "line": 72,
                "args": [
                  "self",
                  "alignment_score",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "_ripple_faction_opinion",
                "line": 108,
                "args": [
                  "self",
                  "character_id",
                  "alignment_score"
                ],
                "is_async": false
              },
              {
                "name": "should_abandon",
                "line": 120,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "save_to_firebase",
                "line": 124,
                "args": [
                  "self",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "load_from_firebase",
                "line": 133,
                "args": [
                  "cls",
                  "npc_id",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 142,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "LoyaltyManager",
                "line": 8,
                "bases": [],
                "methods": [
                  "__init__",
                  "tick",
                  "apply_event",
                  "apply_qualifying_event",
                  "apply_alignment_event",
                  "_ripple_faction_opinion",
                  "should_abandon",
                  "save_to_firebase",
                  "load_from_firebase",
                  "to_dict"
                ]
              }
            ]
          },
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.models",
                "names": [
                  "NpcEntity",
                  "NpcModel",
                  "CreateNpcRequest",
                  "UpdateNpcRequest",
                  "NpcResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "NpcNotFoundError",
                  "NpcValidationError",
                  "NpcConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_npc_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "NpcService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x10511c820>"
                ],
                "methods": [
                  "__init__",
                  "create_npc",
                  "get_npc_by_id",
                  "update_npc",
                  "delete_npc",
                  "list_npcs",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_npc_statistics"
                ]
              }
            ]
          },
          {
            "file": "npc_builder_class.py",
            "imports": [
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 4
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.rules.rules_utils",
                "names": [
                  "calculate_dr"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "uuid4"
                ],
                "line": 7
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 8
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 12,
                "args": [
                  "self",
                  "race_data",
                  "skill_list"
                ],
                "is_async": false
              },
              {
                "name": "generate_hidden_traits",
                "line": 39,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "init_loyalty_from_pc",
                "line": 49,
                "args": [
                  "self",
                  "pc_id"
                ],
                "is_async": false
              },
              {
                "name": "set_id",
                "line": 86,
                "args": [
                  "self",
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "set_name",
                "line": 92,
                "args": [
                  "self",
                  "name"
                ],
                "is_async": false
              },
              {
                "name": "set_race",
                "line": 95,
                "args": [
                  "self",
                  "race_name"
                ],
                "is_async": false
              },
              {
                "name": "apply_racial_modifiers",
                "line": 101,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "assign_stat",
                "line": 106,
                "args": [
                  "self",
                  "stat",
                  "value"
                ],
                "is_async": false
              },
              {
                "name": "add_skill",
                "line": 111,
                "args": [
                  "self",
                  "skill_name"
                ],
                "is_async": false
              },
              {
                "name": "add_tag",
                "line": 116,
                "args": [
                  "self",
                  "tag"
                ],
                "is_async": false
              },
              {
                "name": "set_location",
                "line": 119,
                "args": [
                  "self",
                  "region_id",
                  "loc_str"
                ],
                "is_async": false
              },
              {
                "name": "generate_motifs",
                "line": 123,
                "args": [
                  "self",
                  "count"
                ],
                "is_async": false
              },
              {
                "name": "generate_backstory",
                "line": 131,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "finalize",
                "line": 135,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "NPCBuilder",
                "line": 11,
                "bases": [],
                "methods": [
                  "__init__",
                  "generate_hidden_traits",
                  "init_loyalty_from_pc",
                  "set_id",
                  "set_name",
                  "set_race",
                  "apply_racial_modifiers",
                  "assign_stat",
                  "add_skill",
                  "add_tag",
                  "set_location",
                  "generate_motifs",
                  "generate_backstory",
                  "finalize"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "NpcBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "NpcModel",
                "line": 36,
                "bases": [
                  "NpcBaseModel"
                ],
                "methods": []
              },
              {
                "name": "NpcEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateNpcRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateNpcRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "NpcResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "NpcListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "npc_location_service.py",
            "imports": [
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 6
              },
              {
                "type": "import",
                "module": "math",
                "alias": null,
                "line": 7
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any",
                  "Optional",
                  "List"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 10
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 15,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "update_npc_location",
                "line": 24,
                "args": [
                  "self",
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "_get_npc",
                "line": 85,
                "args": [
                  "self",
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "_update_npc",
                "line": 112,
                "args": [
                  "self",
                  "npc_id",
                  "npc_data"
                ],
                "is_async": false
              },
              {
                "name": "_get_valid_pois_in_radius",
                "line": 125,
                "args": [
                  "self",
                  "current_poi",
                  "radius"
                ],
                "is_async": false
              },
              {
                "name": "_log_movement_to_memory",
                "line": 157,
                "args": [
                  "self",
                  "npc_id",
                  "new_location",
                  "motive"
                ],
                "is_async": false
              },
              {
                "name": "_create_quest_hook",
                "line": 175,
                "args": [
                  "self",
                  "npc_id",
                  "motive",
                  "location"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "NpcLocationService",
                "line": 12,
                "bases": [],
                "methods": [
                  "__init__",
                  "update_npc_location",
                  "_get_npc",
                  "_update_npc",
                  "_get_valid_pois_in_radius",
                  "_log_movement_to_memory",
                  "_create_quest_hook"
                ]
              }
            ]
          },
          {
            "file": "npc_routes.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.npc_rumor_routes",
                "names": [
                  "rumor_bp"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.npc_relationships_routes",
                "names": [
                  "npc_relationship_bp"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.npc_character_routes",
                "names": [
                  "npc_bp"
                ],
                "line": 10
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.npc.npc_location_service",
                "names": [
                  "NpcLocationService"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.routers.npc_location_router",
                "names": [
                  "router"
                ],
                "line": 8
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "npc_travel_utils.py",
            "imports": [
              {
                "type": "import",
                "module": "random",
                "alias": null,
                "line": 2
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.npc_loyalty_class",
                "names": [
                  "LoyaltyManager"
                ],
                "line": 3
              }
            ],
            "functions": [
              {
                "name": "simulate_npc_travel",
                "line": 5,
                "args": [
                  "region_name"
                ],
                "is_async": false
              },
              {
                "name": "remove_from_poi",
                "line": 51,
                "args": [
                  "npc_id",
                  "region",
                  "poi_id"
                ],
                "is_async": false
              },
              {
                "name": "add_to_poi",
                "line": 58,
                "args": [
                  "npc_id",
                  "region",
                  "poi_id"
                ],
                "is_async": false
              },
              {
                "name": "get_current_game_day",
                "line": 65,
                "args": [],
                "is_async": false
              },
              {
                "name": "apply_war_pressure_modifiers",
                "line": 68,
                "args": [],
                "is_async": false
              },
              {
                "name": "migrate_npc_to_safe_poi",
                "line": 108,
                "args": [
                  "npc_id",
                  "region",
                  "current_poi_id"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "npc_character_routes.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "request",
                  "jsonify"
                ],
                "line": 4
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.npc_builder_class",
                "names": [
                  "NPCBuilder"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.npc_loyalty_class",
                "names": [
                  "LoyaltyManager"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.rules.character_gen_rules_utils",
                "names": [
                  "load_feat_data",
                  "load_starter_kits",
                  "load_race_data",
                  "load_skill_list"
                ],
                "line": 8
              },
              {
                "type": "import",
                "module": "openai",
                "alias": null,
                "line": 11
              }
            ],
            "functions": [
              {
                "name": "create_npc",
                "line": 16,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_npc",
                "line": 69,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "update_npc",
                "line": 79,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "delete_npc",
                "line": 105,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "get_npc_info",
                "line": 136,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "refresh_npc_goals",
                "line": 153,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              },
              {
                "name": "update_loyalty",
                "line": 191,
                "args": [
                  "npc_id",
                  "character_id"
                ],
                "is_async": false
              },
              {
                "name": "abandon_party",
                "line": 220,
                "args": [
                  "npc_id"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/npc_location_router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Dict",
                  "Any"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.npc.npc_location_service",
                "names": [
                  "NpcLocationService"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.base",
                "names": [
                  "get_db_session"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              }
            ],
            "functions": [
              {
                "name": "get_location_service",
                "line": 16,
                "args": [
                  "db"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "schemas/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": false,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "openai",
            "line": 11,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/npc/npc_character_routes.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      },
      "analytics": {
        "path": "/Users/Sharrone/Visual_DM/backend/systems/analytics",
        "files": [
          "services.py",
          "models.py",
          "__init__.py",
          "routers/__init__.py",
          "routers/analytics_router.py",
          "utils/__init__.py",
          "repositories/__init__.py",
          "repositories/analytics_repository.py",
          "models/__init__.py",
          "schemas/__init__.py",
          "services/__init__.py",
          "services/analytics_service.py"
        ],
        "modules": [
          {
            "file": "services.py",
            "imports": [
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any",
                  "Tuple"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "and_",
                  "or_",
                  "func"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "backend.systems.analytics.models",
                "names": [
                  "AnalyticsEntity",
                  "AnalyticsModel",
                  "CreateAnalyticsRequest",
                  "UpdateAnalyticsRequest",
                  "AnalyticsResponse"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.services",
                "names": [
                  "BaseService"
                ],
                "line": 22
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.exceptions",
                "names": [
                  "AnalyticsNotFoundError",
                  "AnalyticsValidationError",
                  "AnalyticsConflictError"
                ],
                "line": 23
              }
            ],
            "functions": [
              {
                "name": "create_analytics_service",
                "line": 220,
                "args": [
                  "db_session"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 35,
                "args": [
                  "self",
                  "db_session"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "AnalyticsService",
                "line": 32,
                "bases": [
                  "<ast.Subscript object at 0x1050d8820>"
                ],
                "methods": [
                  "__init__",
                  "create_analytics",
                  "get_analytics_by_id",
                  "update_analytics",
                  "delete_analytics",
                  "list_analyticss",
                  "_get_by_name",
                  "_get_entity_by_id",
                  "get_analytics_statistics"
                ]
              }
            ]
          },
          {
            "file": "models.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Optional",
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "uuid",
                "names": [
                  "UUID",
                  "uuid4"
                ],
                "line": 10
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "sqlalchemy",
                "names": [
                  "Column",
                  "String",
                  "Integer",
                  "DateTime",
                  "Boolean",
                  "Text",
                  "ForeignKey"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.dialects.postgresql",
                "names": [
                  "UUID",
                  "JSONB"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.ext.declarative",
                "names": [
                  "declarative_base"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "relationship"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models",
                "names": [
                  "BaseModel"
                ],
                "line": 17
              }
            ],
            "functions": [
              {
                "name": "__repr__",
                "line": 59,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 62,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "AnalyticsBaseModel",
                "line": 22,
                "bases": [
                  "SharedBaseModel"
                ],
                "methods": []
              },
              {
                "name": "AnalyticsModel",
                "line": 36,
                "bases": [
                  "AnalyticsBaseModel"
                ],
                "methods": []
              },
              {
                "name": "AnalyticsEntity",
                "line": 45,
                "bases": [
                  "Base"
                ],
                "methods": [
                  "__repr__",
                  "to_dict"
                ]
              },
              {
                "name": "CreateAnalyticsRequest",
                "line": 77,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "UpdateAnalyticsRequest",
                "line": 85,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "AnalyticsResponse",
                "line": 94,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "AnalyticsListResponse",
                "line": 110,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 31,
                "bases": [],
                "methods": []
              },
              {
                "name": "Config",
                "line": 106,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.analytics.services.analytics_service",
                "names": [
                  "AnalyticsService",
                  "AnalyticsEventType",
                  "get_analytics_service"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.analytics.schemas",
                "names": [
                  "AnalyticsEventBase",
                  "GameStartEvent",
                  "GameEndEvent",
                  "MemoryEvent",
                  "RumorEvent",
                  "MotifEvent",
                  "PopulationEvent",
                  "POIStateEvent",
                  "FactionEvent",
                  "QuestEvent",
                  "CombatEvent",
                  "TimeEvent",
                  "StorageEvent",
                  "RelationshipEvent",
                  "WorldStateEvent",
                  "CustomEvent",
                  "EVENT_TYPE_MAPPING",
                  "get_event_model"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.analytics.utils",
                "names": [
                  "get_analytics_data_path",
                  "format_bytes",
                  "aggregate_events_by_time",
                  "filter_events_by_metadata",
                  "generate_llm_training_dataset",
                  "generate_llm_training_dataset_async",
                  "summarize_analytics_storage"
                ],
                "line": 35
              },
              {
                "type": "from_import",
                "module": "backend.systems.events",
                "names": [
                  "get_dispatcher"
                ],
                "line": 49
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 63
              }
            ],
            "functions": [
              {
                "name": "initialize_analytics_integration",
                "line": 46,
                "args": [],
                "is_async": false
              },
              {
                "name": "get_analytics_middleware",
                "line": 69,
                "args": [],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "routers/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.analytics.models",
                "names": [
                  "*"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "backend.systems.analytics.services",
                "names": [
                  "*"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "backend.systems.analytics.schemas",
                "names": [
                  "*"
                ],
                "line": 9
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "routers/analytics_router.py",
            "imports": [
              {
                "type": "from_import",
                "module": "fastapi",
                "names": [
                  "APIRouter",
                  "Depends",
                  "HTTPException",
                  "status"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Dict",
                  "Any"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.database.session",
                "names": [
                  "get_db"
                ],
                "line": 7
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 8
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "utils/__init__.py",
            "imports": [
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 10
              },
              {
                "type": "from_import",
                "module": "collections",
                "names": [
                  "defaultdict"
                ],
                "line": 11
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime",
                  "timedelta"
                ],
                "line": 12
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 13
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Callable",
                  "Dict",
                  "List",
                  "Optional",
                  "Union",
                  "Tuple",
                  "Set"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "backend.systems.analytics.services.analytics_service",
                "names": [
                  "AnalyticsService"
                ],
                "line": 171
              },
              {
                "type": "from_import",
                "module": "backend.systems.analytics.services.analytics_service",
                "names": [
                  "AnalyticsService"
                ],
                "line": 226
              }
            ],
            "functions": [
              {
                "name": "get_analytics_data_path",
                "line": 19,
                "args": [],
                "is_async": false
              },
              {
                "name": "format_bytes",
                "line": 24,
                "args": [
                  "size"
                ],
                "is_async": false
              },
              {
                "name": "aggregate_events_by_time",
                "line": 33,
                "args": [
                  "events",
                  "interval",
                  "value_field",
                  "aggregation"
                ],
                "is_async": false
              },
              {
                "name": "filter_events_by_metadata",
                "line": 109,
                "args": [
                  "events",
                  "filter_criteria"
                ],
                "is_async": false
              },
              {
                "name": "generate_llm_training_dataset",
                "line": 150,
                "args": [
                  "event_types",
                  "output_format",
                  "filter_expression",
                  "max_events",
                  "output_file"
                ],
                "is_async": false
              },
              {
                "name": "summarize_analytics_storage",
                "line": 260,
                "args": [],
                "is_async": false
              },
              {
                "name": "_get_nested_value",
                "line": 333,
                "args": [
                  "data",
                  "field_path"
                ],
                "is_async": false
              },
              {
                "name": "_write_dataset_to_file",
                "line": 347,
                "args": [
                  "dataset",
                  "output_file",
                  "output_format"
                ],
                "is_async": false
              }
            ],
            "classes": []
          },
          {
            "file": "repositories/__init__.py",
            "imports": [],
            "functions": [],
            "classes": []
          },
          {
            "file": "repositories/analytics_repository.py",
            "imports": [
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "List",
                  "Optional",
                  "Dict",
                  "Any"
                ],
                "line": 5
              },
              {
                "type": "from_import",
                "module": "sqlalchemy.orm",
                "names": [
                  "Session"
                ],
                "line": 6
              },
              {
                "type": "from_import",
                "module": "backend.systems.shared.models.base",
                "names": [
                  "BaseModel"
                ],
                "line": 7
              }
            ],
            "functions": [
              {
                "name": "__init__",
                "line": 13,
                "args": [
                  "self",
                  "db"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "AnalyticsRepository",
                "line": 10,
                "bases": [],
                "methods": [
                  "__init__",
                  "create",
                  "get_by_id",
                  "get_all",
                  "update",
                  "delete"
                ]
              }
            ]
          },
          {
            "file": "models/__init__.py",
            "imports": [],
            "functions": [
              {
                "name": "__init__",
                "line": 6,
                "args": [
                  "self",
                  "event_type",
                  "data"
                ],
                "is_async": false
              },
              {
                "name": "to_dict",
                "line": 11,
                "args": [
                  "self"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "EventBase",
                "line": 3,
                "bases": [],
                "methods": [
                  "__init__",
                  "to_dict"
                ]
              }
            ]
          },
          {
            "file": "schemas/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 8
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Dict",
                  "Optional",
                  "Type",
                  "Union",
                  "Literal"
                ],
                "line": 9
              },
              {
                "type": "from_import",
                "module": "pydantic",
                "names": [
                  "BaseModel",
                  "Field"
                ],
                "line": 10
              }
            ],
            "functions": [
              {
                "name": "get_event_model",
                "line": 192,
                "args": [
                  "event_type"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "AnalyticsEventBase",
                "line": 13,
                "bases": [
                  "BaseModel"
                ],
                "methods": []
              },
              {
                "name": "GameStartEvent",
                "line": 27,
                "bases": [
                  "AnalyticsEventBase"
                ],
                "methods": []
              },
              {
                "name": "GameEndEvent",
                "line": 36,
                "bases": [
                  "AnalyticsEventBase"
                ],
                "methods": []
              },
              {
                "name": "MemoryEvent",
                "line": 46,
                "bases": [
                  "AnalyticsEventBase"
                ],
                "methods": []
              },
              {
                "name": "RumorEvent",
                "line": 56,
                "bases": [
                  "AnalyticsEventBase"
                ],
                "methods": []
              },
              {
                "name": "MotifEvent",
                "line": 66,
                "bases": [
                  "AnalyticsEventBase"
                ],
                "methods": []
              },
              {
                "name": "PopulationEvent",
                "line": 76,
                "bases": [
                  "AnalyticsEventBase"
                ],
                "methods": []
              },
              {
                "name": "POIStateEvent",
                "line": 86,
                "bases": [
                  "AnalyticsEventBase"
                ],
                "methods": []
              },
              {
                "name": "FactionEvent",
                "line": 96,
                "bases": [
                  "AnalyticsEventBase"
                ],
                "methods": []
              },
              {
                "name": "QuestEvent",
                "line": 106,
                "bases": [
                  "AnalyticsEventBase"
                ],
                "methods": []
              },
              {
                "name": "CombatEvent",
                "line": 116,
                "bases": [
                  "AnalyticsEventBase"
                ],
                "methods": []
              },
              {
                "name": "TimeEvent",
                "line": 126,
                "bases": [
                  "AnalyticsEventBase"
                ],
                "methods": []
              },
              {
                "name": "StorageEvent",
                "line": 135,
                "bases": [
                  "AnalyticsEventBase"
                ],
                "methods": []
              },
              {
                "name": "RelationshipEvent",
                "line": 144,
                "bases": [
                  "AnalyticsEventBase"
                ],
                "methods": []
              },
              {
                "name": "WorldStateEvent",
                "line": 154,
                "bases": [
                  "AnalyticsEventBase"
                ],
                "methods": []
              },
              {
                "name": "CustomEvent",
                "line": 164,
                "bases": [
                  "AnalyticsEventBase"
                ],
                "methods": []
              },
              {
                "name": "Config",
                "line": 20,
                "bases": [],
                "methods": []
              }
            ]
          },
          {
            "file": "services/__init__.py",
            "imports": [
              {
                "type": "from_import",
                "module": "backend.systems.analytics.services.analytics_service",
                "names": [
                  "AnalyticsService",
                  "AnalyticsEventType",
                  "get_analytics_service"
                ],
                "line": 7
              }
            ],
            "functions": [],
            "classes": []
          },
          {
            "file": "services/analytics_service.py",
            "imports": [
              {
                "type": "import",
                "module": "asyncio",
                "alias": null,
                "line": 8
              },
              {
                "type": "import",
                "module": "json",
                "alias": null,
                "line": 9
              },
              {
                "type": "import",
                "module": "logging",
                "alias": null,
                "line": 10
              },
              {
                "type": "import",
                "module": "os",
                "alias": null,
                "line": 11
              },
              {
                "type": "import",
                "module": "threading",
                "alias": null,
                "line": 12
              },
              {
                "type": "import",
                "module": "warnings",
                "alias": null,
                "line": 13
              },
              {
                "type": "from_import",
                "module": "datetime",
                "names": [
                  "datetime"
                ],
                "line": 14
              },
              {
                "type": "from_import",
                "module": "enum",
                "names": [
                  "Enum"
                ],
                "line": 15
              },
              {
                "type": "from_import",
                "module": "pathlib",
                "names": [
                  "Path"
                ],
                "line": 16
              },
              {
                "type": "from_import",
                "module": "typing",
                "names": [
                  "Any",
                  "Dict",
                  "List",
                  "Optional",
                  "Union"
                ],
                "line": 17
              },
              {
                "type": "from_import",
                "module": "queue",
                "names": [
                  "Queue"
                ],
                "line": 18
              },
              {
                "type": "import",
                "module": "uuid",
                "alias": null,
                "line": 19
              },
              {
                "type": "from_import",
                "module": "backend.systems.events",
                "names": [
                  "EventMiddleware"
                ],
                "line": 173
              },
              {
                "type": "from_import",
                "module": "backend.systems.events",
                "names": [
                  "MemoryEvent",
                  "RumorEvent",
                  "FactionEvent",
                  "CharacterEvent",
                  "NarrativeEvent",
                  "GameEvent",
                  "SystemEvent"
                ],
                "line": 253
              }
            ],
            "functions": [
              {
                "name": "get_analytics_service",
                "line": 383,
                "args": [
                  "storage_path",
                  "test_mode"
                ],
                "is_async": false
              },
              {
                "name": "get_all",
                "line": 47,
                "args": [
                  "cls"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 65,
                "args": [
                  "self",
                  "storage_path",
                  "test_mode"
                ],
                "is_async": false
              },
              {
                "name": "get_instance",
                "line": 80,
                "args": [
                  "cls",
                  "storage_path",
                  "test_mode"
                ],
                "is_async": false
              },
              {
                "name": "storage_path",
                "line": 99,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "storage_path",
                "line": 104,
                "args": [
                  "self",
                  "path"
                ],
                "is_async": false
              },
              {
                "name": "log_event",
                "line": 122,
                "args": [
                  "self",
                  "event_type",
                  "entity_id",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "queue_track_event",
                "line": 147,
                "args": [
                  "self",
                  "event_type",
                  "entity_id",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "register_with_dispatcher",
                "line": 161,
                "args": [
                  "self",
                  "dispatcher"
                ],
                "is_async": false
              },
              {
                "name": "get_analytics_middleware",
                "line": 170,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_map_event_to_analytics_type",
                "line": 224,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              },
              {
                "name": "_process_event_queue",
                "line": 283,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_store_event_sync",
                "line": 306,
                "args": [
                  "self",
                  "event_type",
                  "entity_id",
                  "metadata"
                ],
                "is_async": false
              },
              {
                "name": "_get_event_file_path",
                "line": 335,
                "args": [
                  "self",
                  "event_type"
                ],
                "is_async": false
              },
              {
                "name": "generate_dataset",
                "line": 344,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "_generate_dataset_sync",
                "line": 352,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "stop_worker",
                "line": 376,
                "args": [
                  "self"
                ],
                "is_async": false
              },
              {
                "name": "__init__",
                "line": 181,
                "args": [
                  "self",
                  "analytics_service"
                ],
                "is_async": false
              },
              {
                "name": "process_sync",
                "line": 201,
                "args": [
                  "self",
                  "event"
                ],
                "is_async": false
              }
            ],
            "classes": [
              {
                "name": "AnalyticsEventType",
                "line": 22,
                "bases": [
                  "Enum"
                ],
                "methods": [
                  "get_all"
                ]
              },
              {
                "name": "AnalyticsService",
                "line": 52,
                "bases": [],
                "methods": [
                  "__init__",
                  "get_instance",
                  "get_instance_async",
                  "storage_path",
                  "storage_path",
                  "_ensure_async_components",
                  "log_event",
                  "log_event_async",
                  "queue_track_event",
                  "register_with_dispatcher",
                  "get_analytics_middleware",
                  "_map_event_to_analytics_type",
                  "_process_event_queue",
                  "_store_event",
                  "_store_event_sync",
                  "_get_event_file_path",
                  "generate_dataset",
                  "generate_dataset_async",
                  "_generate_dataset_sync",
                  "stop_worker"
                ]
              },
              {
                "name": "AnalyticsEventMiddleware",
                "line": 180,
                "bases": [
                  "EventMiddleware"
                ],
                "methods": [
                  "__init__",
                  "process_async",
                  "process_sync",
                  "process"
                ]
              },
              {
                "name": "EventMiddleware",
                "line": 176,
                "bases": [],
                "methods": [
                  "process"
                ]
              }
            ]
          }
        ],
        "has_init": true,
        "has_models": true,
        "has_services": true,
        "has_repositories": true,
        "has_routers": true,
        "has_schemas": false,
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "threading",
            "line": 12,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "warnings",
            "line": 13,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "enum",
            "line": 15,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "queue",
            "line": 18,
            "file": "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
          }
        ],
        "syntax_errors": [],
        "missing_components": []
      }
    },
    "tests": {
      "economy": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy",
        "test_files": [
          "test_economy_manager.py",
          "test_resource.py",
          "test_shop_utils.py",
          "test_shop_routes.py",
          "test_market_service.py",
          "test_basic_functionality.py",
          "test_resource_service.py",
          "test_services.py",
          "test_websocket_routes.py",
          "test_database_service.py",
          "test_routes.py",
          "test_api_routes.py",
          "test_models.py",
          "test_integration.py",
          "test_events.py",
          "test_deployment.py",
          "test_websocket_events.py"
        ],
        "test_functions": [
          {
            "name": "test_singleton_pattern",
            "line": 36,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_initialization",
            "line": 44,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_get_economy_status",
            "line": 58,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_resource_operations",
            "line": 76,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_market_operations",
            "line": 99,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_price_calculation",
            "line": 112,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_economic_analytics",
            "line": 129,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_economic_forecasting",
            "line": 147,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_tick_processing",
            "line": 168,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_error_handling",
            "line": 190,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_service_integration",
            "line": 205,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_concurrent_access",
            "line": 217,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_resource_amount_adjustments",
            "line": 229,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_population_impact_calculation",
            "line": 240,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_data_consistency",
            "line": 255,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_system_health_check",
            "line": 266,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_logging_functionality",
            "line": 281,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_performance_benchmarks",
            "line": 292,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_database_session_handling",
            "line": 326,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_service_dependency_injection",
            "line": 335,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_cross_service_operations",
            "line": 345,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_event_system_integration_readiness",
            "line": 354,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_api_layer_readiness",
            "line": 364,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_initialization",
            "line": 28,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_get_market",
            "line": 45,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_get_market_mock_fallback",
            "line": 60,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_get_markets_by_region",
            "line": 72,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_get_markets_by_region_mock_fallback",
            "line": 86,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_create_market_with_dict",
            "line": 98,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_create_market_with_market_data",
            "line": 114,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_update_market",
            "line": 129,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_update_market_invalid_attributes",
            "line": 144,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_delete_market",
            "line": 157,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_calculate_price_basic",
            "line": 163,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_calculate_price_with_quantity",
            "line": 181,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_calculate_price_with_resource_service",
            "line": 195,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_calculate_price_with_market_modifiers",
            "line": 209,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_update_market_conditions",
            "line": 227,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_get_resource_price_trends",
            "line": 242,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_get_resource_price_trends_structure",
            "line": 256,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_error_handling",
            "line": 272,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_logging_functionality",
            "line": 287,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_database_session_interaction",
            "line": 293,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_market_data_serialization",
            "line": 307,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_concurrent_market_access",
            "line": 327,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_market_types_handling",
            "line": 338,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_price_modifier_operations",
            "line": 354,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_supply_demand_operations",
            "line": 371,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_trade_volume_tracking",
            "line": 385,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_performance_market_operations",
            "line": 401,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_resource_service_integration",
            "line": 430,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_cross_service_data_flow",
            "line": 446,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_event_readiness",
            "line": 462,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_economy_manager_basic",
            "line": 15,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_economy_manager_status",
            "line": 35,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_resource_operations",
            "line": 55,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_market_operations",
            "line": 74,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_economic_analytics",
            "line": 89,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_economic_forecasting",
            "line": 102,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_tick_processing",
            "line": 121,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_resource_service_standalone",
            "line": 146,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_market_service_standalone",
            "line": 170,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_population_impact",
            "line": 189,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_json_serialization",
            "line": 203,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_initialization",
            "line": 24,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_get_resource",
            "line": 35,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_get_resource_various_ids",
            "line": 48,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_get_resources_by_region",
            "line": 62,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_get_resources_by_region_different_regions",
            "line": 76,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_create_resource",
            "line": 88,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_update_resource",
            "line": 119,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_update_resource_invalid_attributes",
            "line": 135,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_delete_resource",
            "line": 149,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_adjust_resource_amount",
            "line": 155,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_get_available_resources",
            "line": 173,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_transfer_resource",
            "line": 196,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_population_impact_no_change",
            "line": 205,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_population_impact_increase",
            "line": 214,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_population_impact_decrease",
            "line": 230,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_population_impact_from_zero",
            "line": 241,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_population_impact_resource_types",
            "line": 248,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_population_impact_events_generation",
            "line": 268,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_error_handling",
            "line": 284,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_logging_functionality",
            "line": 297,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_database_session_usage",
            "line": 303,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_data_validation",
            "line": 318,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_resource_type_consistency",
            "line": 333,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_concurrent_resource_access",
            "line": 348,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_performance_resource_operations",
            "line": 362,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_economy_manager_initialization",
            "line": 53,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_resource_service_integration",
            "line": 61,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_market_service_integration",
            "line": 92,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_price_calculation_integration",
            "line": 124,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_event_system_integration",
            "line": 159,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_database_service_integration",
            "line": 225,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_economic_analytics_integration",
            "line": 277,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_economic_forecasting_integration",
            "line": 299,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_population_impact_integration",
            "line": 325,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_tick_processing_integration",
            "line": 350,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_economy_status_integration",
            "line": 379,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_bulk_resource_operations_performance",
            "line": 528,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_price_calculation_performance",
            "line": 558,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 10,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_economy_manager.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_resource.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_shop_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_shop_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_market_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 8,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_basic_functionality.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_resource_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_websocket_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_database_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_api_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 11,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_events.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_deployment.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_websocket_events.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "motif": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/motif",
        "test_files": [
          "test_motif_engine_class.py",
          "test_repository.py",
          "test_utils.py",
          "test_service.py",
          "test_router.py",
          "test_services.py",
          "test_chaos_utils.py",
          "test_motif_routes.py",
          "test_models.py",
          "test_manager_core.py",
          "test_motif_utils.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/motif/test_motif_engine_class.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/motif/test_repository.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/motif/test_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/motif/test_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/motif/test_router.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/motif/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/motif/test_chaos_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/motif/test_motif_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/motif/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/motif/test_manager_core.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/motif/test_motif_utils.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "llm": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/llm",
        "test_files": [
          "test_middleware.py",
          "test_services.py",
          "test_core.py",
          "test_repositories.py",
          "test_models.py",
          "test_api.py"
        ],
        "test_functions": [
          {
            "name": "test_client_initialization",
            "line": 34,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_health_endpoint",
            "line": 10,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_generate_endpoint",
            "line": 15,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/llm/test_models.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "tension_war": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/tension_war",
        "test_files": [
          "test_war_routes.py",
          "test_services.py",
          "test_tension_routes.py",
          "test_models.py",
          "test_schemas.py",
          "test_examples.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/tension_war/test_war_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/tension_war/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/tension_war/test_tension_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/tension_war/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/tension_war/test_schemas.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/tension_war/test_examples.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "world_generation": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_generation",
        "test_files": [
          "test_world_generation_utils.py",
          "test_services.py",
          "test_continent_repository.py",
          "test_models.py",
          "test_worldgen_routes.py",
          "test_continent_service.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_generation/test_world_generation_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_generation/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_generation/test_continent_repository.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_generation/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_generation/test_worldgen_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_generation/test_continent_service.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "memory": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/memory",
        "test_files": [
          "test_memory_utils.py",
          "test_services.py",
          "test_memory_categories.py",
          "test_summarization_styles.py",
          "test_saliency_scoring.py",
          "test_memory_manager_core.py",
          "test_models.py",
          "test_memory.py",
          "test_memory_associations.py",
          "test_cognitive_frames.py",
          "test_memory_routes.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/memory/test_memory_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/memory/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/memory/test_memory_categories.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/memory/test_summarization_styles.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/memory/test_saliency_scoring.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/memory/test_memory_manager_core.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/memory/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/memory/test_memory.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/memory/test_memory_associations.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/memory/test_cognitive_frames.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/memory/test_memory_routes.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "diplomacy": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/diplomacy",
        "test_files": [
          "test_repository.py",
          "test_db_models.py",
          "test_core_models.py",
          "test_diplomacy_models.py",
          "test_router.py",
          "test_services.py",
          "test_core_services.py",
          "test_integration_services.py",
          "test_models.py",
          "test_schemas.py",
          "test_db_repository.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_diplomatic_status_enum",
            "line": 56,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_treaty_type_enum",
            "line": 70,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_diplomatic_event_type_enum",
            "line": 85,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_incident_severity_enum",
            "line": 98,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_treaty_creation_valid",
            "line": 114,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_treaty_parties_validation",
            "line": 143,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_treaty_date_validation",
            "line": 159,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_treaty_terms_serialization",
            "line": 179,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_negotiation_creation_valid",
            "line": 211,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_negotiation_offers_list",
            "line": 237,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_negotiation_status_transitions",
            "line": 265,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_negotiation_offer_creation",
            "line": 289,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_negotiation_offer_acceptance",
            "line": 306,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_counter_offer_relationship",
            "line": 323,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_diplomatic_event_creation",
            "line": 347,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_diplomatic_event_tension_change",
            "line": 371,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_diplomatic_event_metadata",
            "line": 394,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_treaty_violation_creation",
            "line": 421,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_treaty_violation_evidence",
            "line": 450,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_diplomatic_incident_creation",
            "line": 481,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_diplomatic_incident_witnesses",
            "line": 511,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_ultimatum_creation",
            "line": 539,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_ultimatum_demands_consequences",
            "line": 571,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_sanction_creation",
            "line": 610,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_sanction_conditions_and_measures",
            "line": 646,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_faction_relationship_db_model",
            "line": 696,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_treaty_db_model_constraints",
            "line": 721,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_model_relationships",
            "line": 746,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_uuid_field_validation",
            "line": 785,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_date_field_validation",
            "line": 796,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_json_field_validation",
            "line": 812,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_enum_field_validation",
            "line": 835,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_list_field_validation",
            "line": 847,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/diplomacy/test_repository.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/diplomacy/test_db_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/diplomacy/test_core_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/diplomacy/test_router.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/diplomacy/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/diplomacy/test_core_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/diplomacy/test_integration_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/diplomacy/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/diplomacy/test_schemas.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/diplomacy/test_db_repository.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "combat": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat",
        "test_files": [
          "test_turn_queue.py",
          "test_combat_state_class.py",
          "test_object_pool.py",
          "test_combat_handler_class.py",
          "test_combat_narrative_utils.py",
          "test_services.py",
          "test_combat_class.py",
          "test_combat_area.py",
          "test_action_system.py",
          "test_combat_state_firebase_utils.py",
          "test_models.py",
          "test_effect_pipeline.py",
          "test_fog_of_war.py",
          "test_combat_ram.py",
          "test_combat_animation_system.py",
          "test_effect_visualizer.py",
          "test_status_effects_utils.py",
          "test_combat_debug_interface.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_turn_queue.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_combat_state_class.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_object_pool.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_combat_handler_class.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_combat_narrative_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_combat_class.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_combat_area.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_action_system.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_combat_state_firebase_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_effect_pipeline.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_fog_of_war.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_combat_ram.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_combat_animation_system.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_effect_visualizer.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_status_effects_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/combat/test_combat_debug_interface.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "magic": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/magic",
        "test_files": [
          "test_router.py",
          "test_services.py",
          "test_repositories.py",
          "test_models.py"
        ],
        "test_functions": [
          {
            "name": "test_get_spells_endpoint",
            "line": 16,
            "args": [
              "mock_db"
            ],
            "is_async": false
          },
          {
            "name": "test_cast_spell_endpoint",
            "line": 24,
            "args": [
              "mock_db"
            ],
            "is_async": false
          },
          {
            "name": "test_get_spellbook_endpoint",
            "line": 29,
            "args": [
              "mock_db"
            ],
            "is_async": false
          },
          {
            "name": "test_prepare_spells_endpoint",
            "line": 34,
            "args": [
              "mock_db"
            ],
            "is_async": false
          },
          {
            "name": "test_spell_slots_endpoints",
            "line": 39,
            "args": [
              "mock_db"
            ],
            "is_async": false
          },
          {
            "name": "test_effects_endpoints",
            "line": 45,
            "args": [
              "mock_db"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_magic_school_enum",
            "line": 15,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_spell_level_enum",
            "line": 27,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_spell_component_enum",
            "line": 33,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_spell_duration_enum",
            "line": 39,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_spell_model",
            "line": 46,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_character_model",
            "line": 66,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_spellbook_model",
            "line": 79,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_spell_slots_model",
            "line": 90,
            "args": [],
            "is_async": false
          },
          {
            "name": "test_active_spell_effect_model",
            "line": 104,
            "args": [],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 7,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/magic/test_router.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/magic/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/magic/test_repositories.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "character": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/character",
        "test_files": [
          "test_services.py",
          "test_player_routes.py",
          "test_prompt_manager.py",
          "test_character_schemas.py",
          "test_gpt_client.py",
          "test_models.py",
          "test_history.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/character/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/character/test_player_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/character/test_prompt_manager.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/character/test_character_schemas.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/character/test_gpt_client.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/character/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/character/test_history.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "auth_user": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/auth_user",
        "test_files": [
          "test_services.py",
          "test_models.py",
          "test_base.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/auth_user/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/auth_user/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/auth_user/test_base.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "integration": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/integration",
        "test_files": [
          "test_validation.py",
          "test_event_bus.py",
          "test_state_sync.py",
          "test_services.py",
          "test_monitoring.py",
          "test_models.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/integration/test_validation.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/integration/test_event_bus.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/integration/test_state_sync.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/integration/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/integration/test_monitoring.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/integration/test_models.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "faction": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/faction",
        "test_files": [
          "test_services.py",
          "test_faction_manager.py",
          "test_models.py",
          "test_faction_tick_utils.py",
          "test_faction_routes.py",
          "test_faction_utils.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/faction/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/faction/test_faction_manager.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/faction/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/faction/test_faction_tick_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/faction/test_faction_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/faction/test_faction_utils.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "event_base": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/event_base",
        "test_files": [
          "test_router.py",
          "test_models.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_create_valid_event_base_model",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_event_base_model_defaults",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_entity_creation",
            "line": 42,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_entity_to_dict",
            "line": 51,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_valid_creation_request",
            "line": 71,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_creation_request_validation",
            "line": 80,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_valid_update_request",
            "line": 89,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_partial_update_request",
            "line": 98,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/event_base/test_router.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "rumor": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/rumor",
        "test_files": [
          "test_decay_and_propagation.py",
          "test_npc_rumor_routes.py",
          "test_services.py",
          "test_npc_rumor_utils.py",
          "test_models.py",
          "test_transformer.py",
          "test_truth_tracker.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/rumor/test_decay_and_propagation.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/rumor/test_npc_rumor_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/rumor/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/rumor/test_npc_rumor_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/rumor/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/rumor/test_transformer.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/rumor/test_truth_tracker.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "shared": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/shared",
        "test_files": [
          "test_services.py",
          "test_config.py",
          "test_models.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/shared/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/shared/test_config.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/shared/test_models.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "loot": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/loot",
        "test_files": [
          "test_loot_routes.py",
          "test_database.py",
          "test_loot_manager.py",
          "test_loot_shop.py",
          "test_services.py",
          "test_core.py",
          "test_initialization.py",
          "test_loot_utils_core.py",
          "test_models.py",
          "test_loot_core.py",
          "test_events.py",
          "test_generation.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/loot/test_loot_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/loot/test_database.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/loot/test_loot_manager.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/loot/test_loot_shop.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/loot/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/loot/test_core.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/loot/test_initialization.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/loot/test_loot_utils_core.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/loot/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/loot/test_loot_core.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/loot/test_events.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/loot/test_generation.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "storage": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/storage",
        "test_files": [
          "test_services.py",
          "test_models.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/storage/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/storage/test_models.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "time": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/time",
        "test_files": [
          "test_services.py",
          "test_models.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/time/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/time/test_models.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "population": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/population",
        "test_files": [
          "test_services.py",
          "test_models.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/population/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/population/test_models.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "dialogue": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue",
        "test_files": [
          "test_dialogue_manager.py",
          "test_rumor_integration.py",
          "test_faction_integration.py",
          "test_dialogue_system_new.py",
          "test_relationship_integration.py",
          "test_services.py",
          "test_memory_integration.py",
          "test_motif_integration.py",
          "test_war_integration.py",
          "test_population_integration.py",
          "test_region_integration.py",
          "test_conversation.py",
          "test_quest_integration.py",
          "test_models.py",
          "test_analytics_integration.py",
          "test_time_integration.py",
          "test_dialogue_system.py",
          "test_poi_integration.py",
          "test_world_state_integration.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_dialogue_manager.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_rumor_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_faction_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_dialogue_system_new.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_relationship_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_memory_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_motif_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_war_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_population_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_region_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_conversation.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_quest_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_analytics_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_time_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_dialogue_system.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_poi_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/dialogue/test_world_state_integration.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "poi": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/poi",
        "test_files": [
          "test_services.py",
          "test_models.py",
          "test_tilemap_service.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/poi/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/poi/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/poi/test_tilemap_service.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "region": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/region",
        "test_files": [
          "test_services.py",
          "test_models.py",
          "test_worldgen.py",
          "test_tension.py",
          "test_mapping.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/region/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/region/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/region/test_worldgen.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/region/test_tension.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/region/test_mapping.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "religion": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/religion",
        "test_files": [
          "test_services.py",
          "test_narrative_service.py",
          "test_models.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/religion/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/religion/test_narrative_service.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/religion/test_models.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "quest": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/quest",
        "test_files": [
          "test_arc_manager.py",
          "test_quest_routes.py",
          "test_generator.py",
          "test_npc_quests.py",
          "test_services.py",
          "test_journal_routes.py",
          "test_models.py",
          "test_integration.py",
          "test_manager.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/quest/test_arc_manager.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/quest/test_quest_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/quest/test_generator.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/quest/test_npc_quests.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/quest/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/quest/test_journal_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/quest/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/quest/test_integration.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/quest/test_manager.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "inventory": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/inventory",
        "test_files": [
          "test_operations.py",
          "test_services.py",
          "test_factory.py",
          "test_migrations.py",
          "test_notification.py",
          "test_validator.py",
          "test_models.py",
          "test_export.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/inventory/test_operations.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/inventory/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/inventory/test_factory.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/inventory/test_migrations.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/inventory/test_notification.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/inventory/test_validator.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/inventory/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/inventory/test_export.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "world_state": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_state",
        "test_files": [
          "test_world_models.py",
          "test_worldgen_api.py",
          "test_optimized_worldgen.py",
          "test_services.py",
          "test_cleanup.py",
          "test_world_utils.py",
          "test_models.py",
          "test_world_routes.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_state/test_world_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_state/test_worldgen_api.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_state/test_optimized_worldgen.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_state/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_state/test_cleanup.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_state/test_world_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_state/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/world_state/test_world_routes.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "crafting": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/crafting",
        "test_files": [
          "test_services.py",
          "test_models.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/crafting/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/crafting/test_models.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "events": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/events",
        "test_files": [
          "test_services.py",
          "test_event_dispatcher.py",
          "test_canonical_events.py",
          "test_event_types.py",
          "test_models.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/events/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/events/test_event_dispatcher.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/events/test_canonical_events.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/events/test_event_types.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/events/test_models.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "arc": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/arc",
        "test_files": [
          "test_services.py",
          "test_arc.py",
          "test_models.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/arc/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/arc/test_arc.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/arc/test_models.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "data": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/data",
        "test_files": [
          "test_services.py",
          "test_models.py",
          "test_schema_validator.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/data/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/data/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/data/test_schema_validator.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "equipment": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/equipment",
        "test_files": [
          "test_inventory_utils.py",
          "test_services.py",
          "test_identify_item_utils.py",
          "test_set_bonus_utils.py",
          "test_models.py",
          "test_durability_utils.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/equipment/test_inventory_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/equipment/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/equipment/test_identify_item_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/equipment/test_set_bonus_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/equipment/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/equipment/test_durability_utils.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "npc": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/npc",
        "test_files": [
          "test_npc_travel_utils.py",
          "test_npc_character_routes.py",
          "test_services.py",
          "test_npc_loyalty_class.py",
          "test_npc_routes.py",
          "test_npc_builder_class.py",
          "test_models.py",
          "test_npc_location_service.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/npc/test_npc_travel_utils.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/npc/test_npc_character_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/npc/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/npc/test_npc_loyalty_class.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/npc/test_npc_routes.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/npc/test_npc_builder_class.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/npc/test_models.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/npc/test_npc_location_service.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      },
      "analytics": {
        "path": "/Users/Sharrone/Visual_DM/backend/tests/systems/analytics",
        "test_files": [
          "test_services.py",
          "test_models.py"
        ],
        "test_functions": [
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_imports",
            "line": 21,
            "args": [
              "self"
            ],
            "is_async": false
          },
          {
            "name": "test_module_structure",
            "line": 31,
            "args": [
              "self"
            ],
            "is_async": false
          }
        ],
        "import_issues": [
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/analytics/test_services.py"
          },
          {
            "type": "non_canonical_import",
            "import": "unittest.mock",
            "line": 9,
            "file": "/Users/Sharrone/Visual_DM/backend/tests/systems/analytics/test_models.py"
          }
        ],
        "syntax_errors": [],
        "coverage_info": {}
      }
    },
    "imports": {
      "total_imports": 3873,
      "non_canonical_imports": [
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 25,
          "file": "/Users/Sharrone/Visual_DM/backend/task_34_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 26,
          "file": "/Users/Sharrone/Visual_DM/backend/task_34_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 27,
          "file": "/Users/Sharrone/Visual_DM/backend/task_34_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 28,
          "file": "/Users/Sharrone/Visual_DM/backend/task_34_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 31,
          "file": "/Users/Sharrone/Visual_DM/backend/task_34_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 696,
          "file": "/Users/Sharrone/Visual_DM/backend/task_34_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/comprehensive_import_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/comprehensive_import_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/task_32_final_cleanup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/task_27_comprehensive_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/task_27_comprehensive_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 22,
          "file": "/Users/Sharrone/Visual_DM/backend/fix_syntax_errors.py"
        },
        {
          "type": "non_canonical_import",
          "import": "importlib.util",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/comprehensive_system_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/fix_import_issues.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/fix_import_issues.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/fix_imports_script.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/task_36_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/task_36_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 19,
          "file": "/Users/Sharrone/Visual_DM/backend/task_36_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/get_coverage_status.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 255,
          "file": "/Users/Sharrone/Visual_DM/backend/get_coverage_status.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 41,
          "file": "/Users/Sharrone/Visual_DM/backend/get_coverage_status.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/task_38_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/task_38_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/task_38_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/task_38_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 19,
          "file": "/Users/Sharrone/Visual_DM/backend/task_40_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 20,
          "file": "/Users/Sharrone/Visual_DM/backend/task_40_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 21,
          "file": "/Users/Sharrone/Visual_DM/backend/task_40_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "importlib.util",
          "line": 25,
          "file": "/Users/Sharrone/Visual_DM/backend/task_40_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 19,
          "file": "/Users/Sharrone/Visual_DM/backend/task_35_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 20,
          "file": "/Users/Sharrone/Visual_DM/backend/task_35_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 21,
          "file": "/Users/Sharrone/Visual_DM/backend/task_35_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 22,
          "file": "/Users/Sharrone/Visual_DM/backend/task_35_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/task_28_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/task_28_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/task_28_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/task_28_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/task_28_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/task_28_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 366,
          "file": "/Users/Sharrone/Visual_DM/backend/task_28_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/task_32_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/task_32_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "importlib.util",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/task_32_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/debug_startup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "main",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/debug_startup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "importlib.util",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/create_tables.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.character_service.models",
          "line": 39,
          "file": "/Users/Sharrone/Visual_DM/backend/create_tables.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/task_28_system_fixes_complete.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/assessment_script.py"
        },
        {
          "type": "non_canonical_import",
          "import": "glob",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/assessment_script.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/comprehensive_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/get_final_collection_stats.py"
        },
        {
          "type": "non_canonical_import",
          "import": "signal",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/get_final_collection_stats.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/fix_event_dispatcher_complete.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/fix_event_dispatcher_syntax.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/task_36_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/task_36_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/task_36_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/task_28_final_completion.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 16,
          "file": "/Users/Sharrone/Visual_DM/backend/task_40_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/task_36_comprehensive_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/task_36_comprehensive_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 22,
          "file": "/Users/Sharrone/Visual_DM/backend/task_36_comprehensive_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "importlib.util",
          "line": 23,
          "file": "/Users/Sharrone/Visual_DM/backend/task_36_comprehensive_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/create_missing_modules.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 30,
          "file": "/Users/Sharrone/Visual_DM/backend/task_35_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 31,
          "file": "/Users/Sharrone/Visual_DM/backend/task_35_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 32,
          "file": "/Users/Sharrone/Visual_DM/backend/task_35_comprehensive_assessment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.character_service.router",
          "line": 20,
          "file": "/Users/Sharrone/Visual_DM/backend/main.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.error_reporting.router",
          "line": 24,
          "file": "/Users/Sharrone/Visual_DM/backend/main.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.performance.router",
          "line": 36,
          "file": "/Users/Sharrone/Visual_DM/backend/main.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.performance.monitoring_middleware",
          "line": 37,
          "file": "/Users/Sharrone/Visual_DM/backend/main.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.character_service.models",
          "line": 188,
          "file": "/Users/Sharrone/Visual_DM/backend/main.py"
        },
        {
          "type": "non_canonical_import",
          "import": "importlib.util",
          "line": 191,
          "file": "/Users/Sharrone/Visual_DM/backend/main.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 214,
          "file": "/Users/Sharrone/Visual_DM/backend/main.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.error_reporting.service",
          "line": 224,
          "file": "/Users/Sharrone/Visual_DM/backend/main.py"
        },
        {
          "type": "non_canonical_import",
          "import": "main",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/simple_start.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/task_41_critical_fixes.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 16,
          "file": "/Users/Sharrone/Visual_DM/backend/task_41_comprehensive_assessment_and_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/task_41_comprehensive_assessment_and_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/task_41_comprehensive_assessment_and_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 19,
          "file": "/Users/Sharrone/Visual_DM/backend/task_41_comprehensive_assessment_and_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "importlib.util",
          "line": 23,
          "file": "/Users/Sharrone/Visual_DM/backend/task_41_comprehensive_assessment_and_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/task_38_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/task_38_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/task_38_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 24,
          "file": "/Users/Sharrone/Visual_DM/backend/task_34_comprehensive_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 25,
          "file": "/Users/Sharrone/Visual_DM/backend/task_34_comprehensive_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 26,
          "file": "/Users/Sharrone/Visual_DM/backend/task_34_comprehensive_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 29,
          "file": "/Users/Sharrone/Visual_DM/backend/task_34_comprehensive_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "importlib.util",
          "line": 30,
          "file": "/Users/Sharrone/Visual_DM/backend/task_34_comprehensive_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 740,
          "file": "/Users/Sharrone/Visual_DM/backend/task_34_comprehensive_analysis.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/task_32_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/task_32_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/task_32_comprehensive_fix.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/fix_canonical_imports.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.session",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/core/database/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.json_utils",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/core/utils/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.middleware.logging",
          "line": 1,
          "file": "/Users/Sharrone/Visual_DM/backend/app/middleware/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.middleware.error_handler",
          "line": 2,
          "file": "/Users/Sharrone/Visual_DM/backend/app/middleware/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.middleware.rate_limit",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/middleware/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.middleware.validation",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/app/middleware/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "alembic",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/app/migrations/env.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.config",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/app/core/logging.py"
        },
        {
          "type": "non_canonical_import",
          "import": "pydantic_settings",
          "line": 1,
          "file": "/Users/Sharrone/Visual_DM/backend/app/core/config.py"
        },
        {
          "type": "non_canonical_import",
          "import": "secrets",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/core/config.py"
        },
        {
          "type": "non_canonical_import",
          "import": "jose",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/core/security.py"
        },
        {
          "type": "non_canonical_import",
          "import": "passlib.context",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/app/core/security.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.config",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/app/core/security.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.database",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/app/core/security.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.errors",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/app/core/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.security",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/app/core/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.dependencies",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/app/core/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "jose",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/app/core/dependencies.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.config",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/core/dependencies.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.security",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/app/core/dependencies.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.database",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/app/core/dependencies.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 2,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models_batch/src/core/interfaces/types/entities.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 2,
          "file": "/Users/Sharrone/Visual_DM/backend/app/world/world.py"
        },
        {
          "type": "non_canonical_import",
          "import": "PIL",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/app/world/renderer.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.viewport",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/app/world/renderer.py"
        },
        {
          "type": "non_canonical_import",
          "import": "io",
          "line": 114,
          "file": "/Users/Sharrone/Visual_DM/backend/app/world/renderer.py"
        },
        {
          "type": "non_canonical_import",
          "import": "io",
          "line": 184,
          "file": "/Users/Sharrone/Visual_DM/backend/app/world/renderer.py"
        },
        {
          "type": "non_canonical_import",
          "import": "pygame",
          "line": 1,
          "file": "/Users/Sharrone/Visual_DM/backend/app/world/pygame_main.py"
        },
        {
          "type": "non_canonical_import",
          "import": "psutil",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/app/world/pygame_main.py"
        },
        {
          "type": "non_canonical_import",
          "import": "viewport_manager",
          "line": 36,
          "file": "/Users/Sharrone/Visual_DM/backend/app/world/pygame_main.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/world/region.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shapely.geometry",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/app/world/region.py"
        },
        {
          "type": "non_canonical_import",
          "import": "rtree",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/app/world/region.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.world",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/world/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.routes",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/world/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/backup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/backup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "hashlib",
          "line": 16,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/backup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "gzip",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/backup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "argparse",
          "line": 19,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/backup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "cryptography.fernet",
          "line": 22,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/backup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.repositories.market_repository",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/market_migration.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.market",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/market_migration.py"
        },
        {
          "type": "non_canonical_import",
          "import": "sqlite3",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/db_health.py"
        },
        {
          "type": "non_canonical_import",
          "import": "gzip",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/db_health.py"
        },
        {
          "type": "non_canonical_import",
          "import": "hashlib",
          "line": 16,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/db_health.py"
        },
        {
          "type": "non_canonical_import",
          "import": "argparse",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/db_health.py"
        },
        {
          "type": "non_canonical_import",
          "import": "cryptography.fernet",
          "line": 21,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/db_health.py"
        },
        {
          "type": "non_canonical_import",
          "import": "passlib.context",
          "line": 1,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/password.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/restore.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/restore.py"
        },
        {
          "type": "non_canonical_import",
          "import": "gzip",
          "line": 16,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/restore.py"
        },
        {
          "type": "non_canonical_import",
          "import": "hashlib",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/restore.py"
        },
        {
          "type": "non_canonical_import",
          "import": "argparse",
          "line": 19,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/restore.py"
        },
        {
          "type": "non_canonical_import",
          "import": "cryptography.fernet",
          "line": 23,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/restore.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.db",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/audit_log.py"
        },
        {
          "type": "non_canonical_import",
          "import": "jwt",
          "line": 1,
          "file": "/Users/Sharrone/Visual_DM/backend/app/utils/jwt.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models.base",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/repositories/base_repository.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.market",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/repositories/market_repository.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.database",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/app/repositories/market_repository.py"
        },
        {
          "type": "non_canonical_import",
          "import": "contextlib",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/app/repositories/market_repository.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models.base",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/app/repositories/repository_factory.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.base_repository",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/repositories/repository_factory.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.market_repository",
          "line": 1,
          "file": "/Users/Sharrone/Visual_DM/backend/app/repositories/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/world.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.base",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/world.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.base",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/user.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/npc.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.base",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/npc.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.base",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/market.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.db.session",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.base",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.cleanup",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.cloud_provider",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.market",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.world",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.location",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.item",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.user",
          "line": 19,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.api_key",
          "line": 20,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.base",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/cleanup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.base",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/map.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.base",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/api_key.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.base",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/campaign.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/quest.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.base",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/quest.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/location.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.base",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/location.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.world",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/location.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/faction.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.base",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/faction.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.base",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/character.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.db.session",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/base.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/item.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.base",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/models/item.py"
        },
        {
          "type": "non_canonical_import",
          "import": "marshmallow",
          "line": 1,
          "file": "/Users/Sharrone/Visual_DM/backend/app/schemas/user.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.base",
          "line": 1,
          "file": "/Users/Sharrone/Visual_DM/backend/app/schemas/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.auth",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/app/schemas/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.api.v1.api",
          "line": 1,
          "file": "/Users/Sharrone/Visual_DM/backend/app/api/v1/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.api.v1.endpoints",
          "line": 2,
          "file": "/Users/Sharrone/Visual_DM/backend/app/api/v1/api.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.auth",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/api/v1/endpoints/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.user",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/api/v1/endpoints/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.collectors",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.services",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "azure.identity",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/collectors/azure.py"
        },
        {
          "type": "non_canonical_import",
          "import": "azure.mgmt.costmanagement",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/collectors/azure.py"
        },
        {
          "type": "non_canonical_import",
          "import": "azure.mgmt.resource",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/collectors/azure.py"
        },
        {
          "type": "non_canonical_import",
          "import": "azure.mgmt.monitor",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/collectors/azure.py"
        },
        {
          "type": "non_canonical_import",
          "import": "azure.core.exceptions",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/collectors/azure.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.base",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/collectors/azure.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.aws",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/collectors/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.gcp",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/collectors/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.azure",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/collectors/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "abc",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/collectors/base.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/services/budget_monitor.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.app.models.cleanup",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/services/cleanup_monitor.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/services/cleanup_monitor.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.collectors",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/services/cleanup_monitor.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.cost_monitor",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.budget_monitor",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.cleanup_monitor",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/services/cost_monitor.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.collectors",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/services/cost_monitor.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/services/resource_cleanup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.collectors",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/cloud_cost/services/resource_cleanup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.base_service",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.service_factory",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.character_service",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.world_service",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.campaign_service",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.map_service",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.npc_service",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models.character",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models.world",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models.campaign",
          "line": 16,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models.map",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models.npc",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models.campaign",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/campaign_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.base_service",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/campaign_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.database",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/campaign_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "abc",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/base_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models.base",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/base_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.repositories.base_repository",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/base_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.repositories.repository_factory",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/base_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.core.cache",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/base_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.database",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/base_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models.character",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/character_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.base_service",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/character_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.database",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/character_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/character.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.api.schemas_pkg.character",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/character.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models.base",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/service_factory.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.base_service",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/service_factory.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.database",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/service_factory.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models.world",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/world_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.base_service",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/world_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.database",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/world_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models.map",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/map_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.base_service",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/map_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.database",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/map_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models.npc",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/npc_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.base_service",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/npc_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.database",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/npc_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "pyee",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/dialogue/conversation_context_manager.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.types",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/dialogue/conversation_context_manager.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.gpt_client",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/app/services/dialogue/conversation_context_manager.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/fix_syntax_errors.py"
        },
        {
          "type": "non_canonical_import",
          "import": "glob",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/fix_syntax_errors.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 16,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_monolithic_refactoring_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_monolithic_refactoring_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 19,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_monolithic_refactoring_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 23,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_monolithic_refactoring_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task55_integration.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task59_enhanced_critical_fixes.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task59_enhanced_critical_fixes.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_phase2_continue_refactoring.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_phase2_continue_refactoring.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 16,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_phase2_continue_refactoring.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 20,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_phase2_continue_refactoring.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_phase4_complete_modularization.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_phase4_complete_modularization.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_phase4_complete_modularization.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 21,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_phase4_complete_modularization.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task55_diplomacy_extraction.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task55_diplomacy_extraction.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_phase3_aggressive_refactoring.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_phase3_aggressive_refactoring.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_phase3_aggressive_refactoring.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 21,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task56_phase3_aggressive_refactoring.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task59_import_syntax_fixes.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task59_import_syntax_fixes.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 25,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_comprehensive_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 27,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_comprehensive_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 30,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_comprehensive_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 32,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_comprehensive_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 34,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_comprehensive_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "hashlib",
          "line": 35,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_comprehensive_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 1067,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_comprehensive_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 149,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_comprehensive_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task57_legacy_cleanup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task57_legacy_cleanup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 20,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task57_legacy_cleanup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task42_comprehensive_inventory.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task42_comprehensive_inventory.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task42_comprehensive_inventory.py"
        },
        {
          "type": "non_canonical_import",
          "import": "yaml",
          "line": 447,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task42_comprehensive_inventory.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task59_structural_fixes.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task59_structural_fixes.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 26,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_final_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 28,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_final_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 31,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_final_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 33,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_final_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 35,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_final_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "hashlib",
          "line": 36,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_final_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 1062,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_final_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 142,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_final_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task59_critical_fixes.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 225,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task59_critical_fixes.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task64_systematic_technical_debt_remediation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task64_systematic_technical_debt_remediation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 19,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task64_systematic_technical_debt_remediation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 20,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task64_systematic_technical_debt_remediation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 23,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task64_systematic_technical_debt_remediation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "importlib.util",
          "line": 27,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task64_systematic_technical_debt_remediation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "argparse",
          "line": 883,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task64_systematic_technical_debt_remediation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task47_backend_development_protocol.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task47_backend_development_protocol.py"
        },
        {
          "type": "non_canonical_import",
          "import": "glob",
          "line": 20,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task47_backend_development_protocol.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 21,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task47_backend_development_protocol.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 24,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task47_backend_development_protocol.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task47_backend_development_protocol_comprehensive.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task47_backend_development_protocol_comprehensive.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task47_backend_development_protocol_comprehensive.py"
        },
        {
          "type": "non_canonical_import",
          "import": "glob",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task47_backend_development_protocol_comprehensive.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task47_backend_development_protocol_comprehensive.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 25,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_backend_development_protocol_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 27,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_backend_development_protocol_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 30,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_backend_development_protocol_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 32,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_backend_development_protocol_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 34,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tasks/task53_backend_development_protocol_implementation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/fix_import_issues.py"
        },
        {
          "type": "non_canonical_import",
          "import": "importlib",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/validate_canonical_imports_task58.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/validate_canonical_imports_task58.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 111,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/validate_canonical_imports_task58.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/fix_all_relative_imports_comprehensive.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/fix_all_relative_imports_comprehensive.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/fix_final_imports.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/fix_critical_imports_task58_v2.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/extract_api_contracts.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/extract_api_contracts.py"
        },
        {
          "type": "non_canonical_import",
          "import": "yaml",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/extract_api_contracts.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 19,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/extract_api_contracts.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/fix_type_checking_blocks.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/fix_remaining_imports.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/fix_specific_faction_issues.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/fix_canonical_imports_task58_final.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/fix_canonical_imports_comprehensive.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/fix_critical_imports_task58.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/tools/fix_canonical_imports.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/analysis/analyze_monolithic_files.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/analysis/analyze_monolithic_files.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/analysis/analyze_monolithic_files.py"
        },
        {
          "type": "non_canonical_import",
          "import": "subprocess",
          "line": 16,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/analysis/task59_assessment_and_remediation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "ast",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/analysis/task59_assessment_and_remediation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/analysis/task59_assessment_and_remediation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 22,
          "file": "/Users/Sharrone/Visual_DM/backend/scripts/analysis/task59_assessment_and_remediation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/deployment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/deployment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "psutil",
          "line": 386,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/deployment.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/resource.py"
        },
        {
          "type": "non_canonical_import",
          "import": "contextlib",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py"
        },
        {
          "type": "non_canonical_import",
          "import": "contextlib",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/database_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "alembic",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/migrations/001_create_economy_tables.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/models/market.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/models/commodity_future.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/economy/models/trade_route.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 1,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/motif/utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "services.llm_service",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "services.conversation_service",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "core.llm_core",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "api.llm_router",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "openai",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/core/gpt_client.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.dm.event_integration",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/memory_system.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.dm.event_integration",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.dm.event_integration",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/motif_system.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.dm.event_integration",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/rumor_system.py"
        },
        {
          "type": "non_canonical_import",
          "import": "openai",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/world_generation/worldgen_routes.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 207,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/world_generation/worldgen_routes.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dateutil.parser",
          "line": 311,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_models.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.diplomacydiplomacy_model",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.diplomacymodels.diplomacy_model",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/services/diplomacy_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.diplomacydiplomacy_service",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/combat/action_system.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/combat/action_system.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 191,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/magic/services.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 197,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/magic/services.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/magic/models.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.user",
          "line": 16,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.party",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.world",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.spell",
          "line": 20,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.save",
          "line": 22,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 1,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/character/utils/extractors.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.core.repositories.party_repository",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/character/utils/party_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/utils/validation_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/schemas/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.utils",
          "line": 169,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/auth_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.utils",
          "line": 183,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/auth_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "passlib.context",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/password_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "secrets",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/security_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "string",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/security_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "base64",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/security_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "hashlib",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/security_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "jose",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/token_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "secrets",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/token_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/monitoring.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 20,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/monitoring.py"
        },
        {
          "type": "non_canonical_import",
          "import": "threading",
          "line": 21,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/monitoring.py"
        },
        {
          "type": "non_canonical_import",
          "import": "statistics",
          "line": 22,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/monitoring.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/event_bus.py"
        },
        {
          "type": "non_canonical_import",
          "import": "threading",
          "line": 21,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/event_bus.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 22,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/event_bus.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/state_sync.py"
        },
        {
          "type": "non_canonical_import",
          "import": "hashlib",
          "line": 19,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/state_sync.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 16,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/validation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 20,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/integration/validation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "models",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "services",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "schemas",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "event_base_repository",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/repositories/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/models/event_handler_model.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/models/event_base_model.py"
        },
        {
          "type": "non_canonical_import",
          "import": "event_base_model",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "event_handler_model",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "event_base_schema",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/schemas/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "event_base_service",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/event_base/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/rumor/transformer.py"
        },
        {
          "type": "non_canonical_import",
          "import": "difflib",
          "line": 2,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/rumor/truth_tracker.py"
        },
        {
          "type": "non_canonical_import",
          "import": "openai",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/rumor/npc_rumor_routes.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/config.py"
        },
        {
          "type": "non_canonical_import",
          "import": "contextlib",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/database/session.py"
        },
        {
          "type": "non_canonical_import",
          "import": "contextlib",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/database/base.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/data_loader.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/security.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/coordinates.py"
        },
        {
          "type": "non_canonical_import",
          "import": "abc",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/shared/models/base.py"
        },
        {
          "type": "non_canonical_import",
          "import": "hashlib",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py"
        },
        {
          "type": "non_canonical_import",
          "import": "hashlib",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/loot/events.py"
        },
        {
          "type": "non_canonical_import",
          "import": "hashlib",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
        },
        {
          "type": "non_canonical_import",
          "import": "threading",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_manager.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
        },
        {
          "type": "non_canonical_import",
          "import": "heapq",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.language.language_generator",
          "line": 42,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.rumors.rumor_manager",
          "line": 909,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.motifs.motif_manager",
          "line": 910,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.factions.faction_manager",
          "line": 911,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.locations.poi_manager",
          "line": 915,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.quests.quest_manager",
          "line": 916,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.regions.region_manager",
          "line": 917,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.factions.war_manager",
          "line": 918,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.characters.relationship_manager",
          "line": 919,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.language.language_generator",
          "line": 938,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.calendar.calendar_manager",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/time_integration.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.calendar.time_manager",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/time_integration.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.world.world_state_manager",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/world_state_integration.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.rumors.rumor_manager",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/rumor_integration.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.characters.relationship_manager",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/relationship_integration.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.characters.character_manager",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/relationship_integration.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.motifs.motif_manager",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/dialogue/motif_integration.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/region/worldgen.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/region/tension.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.world",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/quest/integration.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.player",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/quest/integration.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.item",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/quest/integration.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.world",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/quest/generator.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.item",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/quest/generator.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/inventory/validator.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/world_state/cleanup.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/world_state/core/loader.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.world",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/tick_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.world_event",
          "line": 17,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/tick_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.core.enums",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/tick_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.validation.world_event_validation",
          "line": 22,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/tick_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 20,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/terrain_generator.py"
        },
        {
          "type": "non_canonical_import",
          "import": "alembic",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/migrations/001_create_crafting_tables.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/schemas/crafting_schemas.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/progression_manager.py"
        },
        {
          "type": "non_canonical_import",
          "import": "yaml",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/recipe_loader.py"
        },
        {
          "type": "non_canonical_import",
          "import": "yaml",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/station_loader.py"
        },
        {
          "type": "non_canonical_import",
          "import": "yaml",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/config_manager.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/config_manager.py"
        },
        {
          "type": "non_canonical_import",
          "import": "threading",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/config_manager.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
        },
        {
          "type": "non_canonical_import",
          "import": "threading",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
        },
        {
          "type": "non_canonical_import",
          "import": "hashlib",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
        },
        {
          "type": "non_canonical_import",
          "import": "inspect",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/event_types.py"
        },
        {
          "type": "non_canonical_import",
          "import": "inspect",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/middleware/debugging.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/middleware/error_middleware.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/middleware/error_handler.py"
        },
        {
          "type": "non_canonical_import",
          "import": "pygame",
          "line": 1,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/tile_loader.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 24,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/floating_origin.py"
        },
        {
          "type": "non_canonical_import",
          "import": "importlib",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/plugins.py"
        },
        {
          "type": "non_canonical_import",
          "import": "inspect",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/plugins.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.dispatcher",
          "line": 21,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/plugins.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.event_types",
          "line": 496,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/plugins.py"
        },
        {
          "type": "non_canonical_import",
          "import": "csv",
          "line": 1,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/export_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "io",
          "line": 2,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/export_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "reportlab.lib.pagesizes",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/export_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "reportlab.pdfgen",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/export_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.dispatcher",
          "line": 16,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/batching.py"
        },
        {
          "type": "non_canonical_import",
          "import": "pygame",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/screen_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.world",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/world_tick_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.world",
          "line": 20,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/world_tick_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.world",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/world_tick_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.world",
          "line": 419,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/world_tick_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "inspect",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinate_validation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "traceback",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinate_validation.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/floating_origin_ecs.py"
        },
        {
          "type": "non_canonical_import",
          "import": "contextlib",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/database_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "threading",
          "line": 19,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/database_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.user",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/seed.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.role",
          "line": 9,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/seed.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.permission",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/seed.py"
        },
        {
          "type": "non_canonical_import",
          "import": "pygame",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/input_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/file_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.config",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/file_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "yaml",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/file_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "pygame",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/accessibility.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/quest_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "pygame",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/asset_utils.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.utils.game.world_tick",
          "line": 1,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/game/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.utils.game.json_io",
          "line": 2,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/game/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.utils.game.start_game",
          "line": 3,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/events/utils/game/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 4,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/arc/arc.py"
        },
        {
          "type": "non_canonical_import",
          "import": "re",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/arc/utils/arc_validators.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.systems.arc_validators",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/arc/utils/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.systems.arc_formatters",
          "line": 14,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/arc/utils/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.systems.arc_helpers",
          "line": 21,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/arc/utils/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "jsonschema",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
        },
        {
          "type": "non_canonical_import",
          "import": "jsonschema",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.utils.data_file_loader",
          "line": 16,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.services.data_service",
          "line": 43,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.loaders.game_data_registry",
          "line": 46,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.utils.data_file_loader",
          "line": 47,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.schema_validator",
          "line": 50,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.models",
          "line": 53,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.schemas",
          "line": 69,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "yaml",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 446,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
        },
        {
          "type": "non_canonical_import",
          "import": "shutil",
          "line": 168,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.data_file_loader",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/utils/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.biome_models",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.world_models",
          "line": 22,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.config_models",
          "line": 33,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/models/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 6,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.data_events",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.data_events",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.event_handlers",
          "line": 26,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.event_publisher",
          "line": 33,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "threading",
          "line": 7,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_publisher.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.data_events",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_publisher.py"
        },
        {
          "type": "non_canonical_import",
          "import": "dataclasses",
          "line": 5,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 8,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.datautils.data_file_loader",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/loaders/game_data_registry.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.game_data_registry",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/loaders/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.datautils.data_file_loader",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.dataloaders.game_data_registry",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.datautils.data_file_loader",
          "line": 190,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "backend.systems.data_service",
          "line": 10,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/data/services/__init__.py"
        },
        {
          "type": "non_canonical_import",
          "import": "openai",
          "line": 11,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/npc/npc_character_routes.py"
        },
        {
          "type": "non_canonical_import",
          "import": "threading",
          "line": 12,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "warnings",
          "line": 13,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "enum",
          "line": 15,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
        },
        {
          "type": "non_canonical_import",
          "import": "queue",
          "line": 18,
          "file": "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
        }
      ]
    },
    "orphan_dependencies": 0,
    "function_registry": 1981,
    "class_registry": 888,
    "implemented_functions": 1,
    "test_results": {
      "returncode": 2,
      "stdout": "============================= test session starts ==============================\ncollecting ... \n----------------------------- live log collection ------------------------------\n18:24:21 [INFO] backend.systems.combat.combat_animation_system: CombatAnimationSystem initialized\n18:24:21 [INFO] backend.systems.combat.effect_visualizer: EffectVisualizer initialized\ncollected 231 items / 9 errors / 164 skipped\n\n==================================== ERRORS ====================================\n__ ERROR collecting backend/tests/systems/diplomacy/test_diplomacy_models.py ___\nImportError while importing test module '/Users/Sharrone/Visual_DM/backend/tests/systems/diplomacy/test_diplomacy_models.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n../../.pyenv/versions/3.11.5/lib/python3.11/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/systems/diplomacy/test_diplomacy_models.py:41: in <module>\n    from backend.systems.diplomacy.db_models import (\nsystems/diplomacy/__init__.py:60: in <module>\n    from backend.systems.diplomacy.core_services import (\nsystems/diplomacy/core_services.py:15: in <module>\n    from backend.systems.diplomacy.models import (\nsystems/diplomacy/models/__init__.py:5: in <module>\n    from backend.systems.diplomacydiplomacy_model import DiplomacyModel\nE   ModuleNotFoundError: No module named 'backend.systems.diplomacydiplomacy_model'\n______ ERROR collecting backend/tests/systems/economy/test_integration.py ______\nImportError while importing test module '/Users/Sharrone/Visual_DM/backend/tests/systems/economy/test_integration.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n../../.pyenv/versions/3.11.5/lib/python3.11/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/systems/economy/test_integration.py:16: in <module>\n    from backend.systems.economy.market_service import MarketService\nE   ModuleNotFoundError: No module named 'backend.systems.economy.market_service'\n______________ ERROR collecting backend/tests/systems/event_base _______________\n../../.pyenv/versions/3.11.5/lib/python3.11/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1204: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1176: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:690: in _load_unlocked\n    ???\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/_pytest/assertion/rewrite.py:185: in exec_module\n    exec(co, module.__dict__)\ntests/systems/event_base/conftest.py:9: in <module>\n    from backend.systems.event_base.services import Event_BaseService\nE   ImportError: cannot import name 'Event_BaseService' from 'backend.systems.event_base.services' (/Users/Sharrone/Visual_DM/backend/systems/event_base/services/__init__.py)\n_________ ERROR collecting backend/tests/systems/magic/test_models.py __________\ntests/systems/magic/test_models.py:8: in <module>\n    from backend.systems.magic.models import (\nsystems/magic/__init__.py:12: in <module>\n    from backend.systems.magic.models import (\nsystems/magic/models.py:129: in <module>\n    class Character(Base):\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_api.py:196: in __init__\n    _as_declarative(reg, cls, dict_)\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:247: in _as_declarative\n    return _MapperConfig.setup_mapping(registry, cls, dict_, None, {})\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:328: in setup_mapping\n    return _ClassScanMapperConfig(\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:578: in __init__\n    self._setup_table(table)\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:1729: in _setup_table\n    table_cls(\n<string>:2: in __new__\n    ???\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/util/deprecations.py:281: in warned\n    return fn(*args, **kwargs)  # type: ignore[no-any-return]\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:436: in __new__\n    return cls._new(*args, **kw)\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:468: in _new\n    raise exc.InvalidRequestError(\nE   sqlalchemy.exc.InvalidRequestError: Table 'characters' is already defined for this MetaData instance.  Specify 'extend_existing=True' to redefine options and columns on an existing Table object.\n______ ERROR collecting backend/tests/systems/magic/test_repositories.py _______\ntests/systems/magic/test_repositories.py:13: in <module>\n    from backend.systems.magic import repositories\nsystems/magic/__init__.py:12: in <module>\n    from backend.systems.magic.models import (\nsystems/magic/models.py:63: in <module>\n    class Spell(Base):\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_api.py:196: in __init__\n    _as_declarative(reg, cls, dict_)\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:247: in _as_declarative\n    return _MapperConfig.setup_mapping(registry, cls, dict_, None, {})\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:328: in setup_mapping\n    return _ClassScanMapperConfig(\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:578: in __init__\n    self._setup_table(table)\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:1729: in _setup_table\n    table_cls(\n<string>:2: in __new__\n    ???\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/util/deprecations.py:281: in warned\n    return fn(*args, **kwargs)  # type: ignore[no-any-return]\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:436: in __new__\n    return cls._new(*args, **kw)\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:468: in _new\n    raise exc.InvalidRequestError(\nE   sqlalchemy.exc.InvalidRequestError: Table 'spells' is already defined for this MetaData instance.  Specify 'extend_existing=True' to redefine options and columns on an existing Table object.\n_________ ERROR collecting backend/tests/systems/magic/test_router.py __________\ntests/systems/magic/test_router.py:9: in <module>\n    from backend.systems.magic.router import router\nsystems/magic/__init__.py:12: in <module>\n    from backend.systems.magic.models import (\nsystems/magic/models.py:63: in <module>\n    class Spell(Base):\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_api.py:196: in __init__\n    _as_declarative(reg, cls, dict_)\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:247: in _as_declarative\n    return _MapperConfig.setup_mapping(registry, cls, dict_, None, {})\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:328: in setup_mapping\n    return _ClassScanMapperConfig(\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:578: in __init__\n    self._setup_table(table)\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:1729: in _setup_table\n    table_cls(\n<string>:2: in __new__\n    ???\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/util/deprecations.py:281: in warned\n    return fn(*args, **kwargs)  # type: ignore[no-any-return]\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:436: in __new__\n    return cls._new(*args, **kw)\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:468: in _new\n    raise exc.InvalidRequestError(\nE   sqlalchemy.exc.InvalidRequestError: Table 'spells' is already defined for this MetaData instance.  Specify 'extend_existing=True' to redefine options and columns on an existing Table object.\n________ ERROR collecting backend/tests/systems/magic/test_services.py _________\ntests/systems/magic/test_services.py:13: in <module>\n    from backend.systems.magic import services\nsystems/magic/__init__.py:12: in <module>\n    from backend.systems.magic.models import (\nsystems/magic/models.py:63: in <module>\n    class Spell(Base):\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_api.py:196: in __init__\n    _as_declarative(reg, cls, dict_)\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:247: in _as_declarative\n    return _MapperConfig.setup_mapping(registry, cls, dict_, None, {})\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:328: in setup_mapping\n    return _ClassScanMapperConfig(\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:578: in __init__\n    self._setup_table(table)\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/orm/decl_base.py:1729: in _setup_table\n    table_cls(\n<string>:2: in __new__\n    ???\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/util/deprecations.py:281: in warned\n    return fn(*args, **kwargs)  # type: ignore[no-any-return]\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:436: in __new__\n    return cls._new(*args, **kw)\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/sqlalchemy/sql/schema.py:468: in _new\n    raise exc.InvalidRequestError(\nE   sqlalchemy.exc.InvalidRequestError: Table 'spells' is already defined for this MetaData instance.  Specify 'extend_existing=True' to redefine options and columns on an existing Table object.\n__________ ERROR collecting backend/tests/systems/time/test_models.py __________\nImportError while importing test module '/Users/Sharrone/Visual_DM/backend/tests/systems/time/test_models.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n../../.pyenv/versions/3.11.5/lib/python3.11/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nE   ModuleNotFoundError: No module named 'time.test_models'; 'time' is not a package\n_________ ERROR collecting backend/tests/systems/time/test_services.py _________\nImportError while importing test module '/Users/Sharrone/Visual_DM/backend/tests/systems/time/test_services.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n../../.pyenv/versions/3.11.5/lib/python3.11/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\nE   ModuleNotFoundError: No module named 'time.test_services'; 'time' is not a package\n=============================== warnings summary ===============================\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/_pytest/config/__init__.py:1441\n  /Users/Sharrone/.pyenv/versions/3.11.5/lib/python3.11/site-packages/_pytest/config/__init__.py:1441: PytestConfigWarning: Unknown config option: verbose\n  \n    self._warn_or_fail_if_strict(f\"Unknown config option: {key}\\n\")\n\nsystems/motif/models/__init__.py:158\n  /Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py:158: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.9/migration/\n    @validator('effects', pre=True, each_item=False)\n\nsystems/motif/models/__init__.py:164\n  /Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py:164: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.9/migration/\n    @validator('descriptors', pre=True, each_item=False)\n\nsystems/motif/models/__init__.py:170\n  /Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py:170: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.9/migration/\n    @validator('tags', pre=True, each_item=False)\n\nsystems/motif/models/__init__.py:176\n  /Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py:176: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.9/migration/\n    @validator('intensity')\n\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/starlette/formparsers.py:12\n  /Users/Sharrone/.pyenv/versions/3.11.5/lib/python3.11/site-packages/starlette/formparsers.py:12: PendingDeprecationWarning: Please use `import python_multipart` instead.\n    import multipart\n\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/pydantic/_internal/_config.py:291: 16 warnings\n  /Users/Sharrone/.pyenv/versions/3.11.5/lib/python3.11/site-packages/pydantic/_internal/_config.py:291: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.9/migration/\n    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)\n\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/pydantic/_internal/_generate_schema.py:312: 26 warnings\n  /Users/Sharrone/.pyenv/versions/3.11.5/lib/python3.11/site-packages/pydantic/_internal/_generate_schema.py:312: PydanticDeprecatedSince20: `json_encoders` is deprecated. See https://docs.pydantic.dev/2.9/concepts/serialization/#custom-serializers for alternatives. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.9/migration/\n    warnings.warn(\n\nsystems/auth_user/base.py:16\n  /Users/Sharrone/Visual_DM/backend/systems/auth_user/base.py:16: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)\n    Base = declarative_base()\n\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/passlib/utils/__init__.py:854\n  /Users/Sharrone/.pyenv/versions/3.11.5/lib/python3.11/site-packages/passlib/utils/__init__.py:854: DeprecationWarning: 'crypt' is deprecated and slated for removal in Python 3.13\n    from crypt import crypt as _crypt\n\nsystems/shared/database/base.py:61\n  /Users/Sharrone/Visual_DM/backend/systems/shared/database/base.py:61: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)\n    Base = declarative_base()\n\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/pydantic/_internal/_config.py:341\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/pydantic/_internal/_config.py:341\n  /Users/Sharrone/.pyenv/versions/3.11.5/lib/python3.11/site-packages/pydantic/_internal/_config.py:341: UserWarning: Valid config keys have changed in V2:\n  * 'orm_mode' has been renamed to 'from_attributes'\n    warnings.warn(message, UserWarning)\n\nsystems/loot/models.py:17\n  /Users/Sharrone/Visual_DM/backend/systems/loot/models.py:17: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)\n    Base = declarative_base()\n\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/pydantic/fields.py:826\n  /Users/Sharrone/.pyenv/versions/3.11.5/lib/python3.11/site-packages/pydantic/fields.py:826: PydanticDeprecatedSince20: Using extra keyword arguments on `Field` is deprecated and will be removed. Use `json_schema_extra` instead. (Extra keys: 'primary_key'). Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.9/migration/\n    warn(\n\n../../.pyenv/versions/3.11.5/lib/python3.11/site-packages/pydantic/_internal/_config.py:341\n  /Users/Sharrone/.pyenv/versions/3.11.5/lib/python3.11/site-packages/pydantic/_internal/_config.py:341: UserWarning: Valid config keys have changed in V2:\n  * 'allow_population_by_field_name' has been renamed to 'populate_by_name'\n  * 'orm_mode' has been renamed to 'from_attributes'\n    warnings.warn(message, UserWarning)\n\nsystems/magic/models.py:63\nsystems/magic/models.py:63\nsystems/magic/models.py:63\n  /Users/Sharrone/Visual_DM/backend/systems/magic/models.py:63: SAWarning: This declarative base already contains a class with the same class name and module name as backend.systems.magic.models.Spell, and will be replaced in the string-lookup table.\n    class Spell(Base):\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nERROR tests/systems/diplomacy/test_diplomacy_models.py\nERROR tests/systems/economy/test_integration.py\nERROR tests/systems/event_base - ImportError: cannot import name 'Event_BaseS...\nERROR tests/systems/magic/test_models.py - sqlalchemy.exc.InvalidRequestError...\nERROR tests/systems/magic/test_repositories.py - sqlalchemy.exc.InvalidReques...\nERROR tests/systems/magic/test_router.py - sqlalchemy.exc.InvalidRequestError...\nERROR tests/systems/magic/test_services.py - sqlalchemy.exc.InvalidRequestErr...\nERROR tests/systems/time/test_models.py\nERROR tests/systems/time/test_services.py\n!!!!!!!!!!!!!!!!!!! Interrupted: 9 errors during collection !!!!!!!!!!!!!!!!!!!!\n================= 164 skipped, 59 warnings, 9 errors in 2.31s ==================\n",
      "stderr": "",
      "passed": false
    },
    "api_contracts": {
      "file_exists": true,
      "content_length": 822
    }
  },
  "fixes_applied": [
    {
      "type": "canonical_import_fix",
      "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py",
      "original": "backend.systems.models.character",
      "canonical": "backend.systems.character"
    },
    {
      "type": "canonical_import_fix",
      "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py",
      "original": "backend.systems.models.npc",
      "canonical": "backend.systems.npc"
    },
    {
      "type": "canonical_import_fix",
      "file": "/Users/Sharrone/Visual_DM/backend/app/services/character_service.py",
      "original": "backend.systems.models.character",
      "canonical": "backend.systems.character"
    },
    {
      "type": "canonical_import_fix",
      "file": "/Users/Sharrone/Visual_DM/backend/app/services/character.py",
      "original": "backend.systems.api.schemas_pkg.character",
      "canonical": "backend.systems.character"
    },
    {
      "type": "canonical_import_fix",
      "file": "/Users/Sharrone/Visual_DM/backend/app/services/npc_service.py",
      "original": "backend.systems.models.npc",
      "canonical": "backend.systems.npc"
    },
    {
      "type": "fix_memory_manager_import",
      "file": "/Users/Sharrone/Visual_DM/backend/systems/memory/__init__.py"
    }
  ],
  "errors_found": [
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/websocket_events.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/deployment.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "decorator",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/resource.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/resource.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_metrics",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/deployment.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_instance",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_resource",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/resource.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_economy_status",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_shop_inventory",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/shop_routes.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/shop_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "buy_item_from_shop",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/shop_routes.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/shop_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "generate_item_identity",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/shop_routes.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/shop_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/resource_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_resource",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/resource.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/resource_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_resources_by_region",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/resource_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_resource",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/resource_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update_resource",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/resource_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "delete_resource",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/resource_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "adjust_resource_amount",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/resource_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_available_resources",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/resource_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "transfer_resource",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/resource_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_db_session",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/api_routes.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/database_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/database_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_economy_manager",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/api_routes.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/routes.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "EconomyStatusResponse",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/api_routes.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/routes.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/resource.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models/market.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_price_modifier",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models/market.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models/market.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "set_price_modifier",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models/market.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models/market.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update_supply_demand",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models/market.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models/market.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "record_trade",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models/market.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models/market.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models/commodity_future.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/resource.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models/trade_route.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_data_model",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models/market.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models/trade_route.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_data_model",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models/market.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models/trade_route.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/trade_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_trade_route",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/trade_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_trade_routes_by_region",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/trade_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_trade_route",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/trade_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update_trade_route",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/trade_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "delete_trade_route",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/trade_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "process_trade_routes",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/trade_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/market_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_market",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/market_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_markets_by_region",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/market_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_market",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/market_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update_market",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/market_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "delete_market",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/market_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "calculate_price",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/market_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update_market_conditions",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/market_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_resource_price_trends",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/market_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/futures_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_future",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/futures_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_futures_by_resource",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/futures_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_futures_by_market",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/futures_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_open_futures",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/futures_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_future",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/futures_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update_future",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/futures_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "match_buyer",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/futures_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "settle_future",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/futures_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "process_expiring_futures",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/futures_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "forecast_future_prices",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/futures_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "clear_cache",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/trade_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/futures_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_instance",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "roll_chaos_event",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/service.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifService",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/services.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifService",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/services.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "LocationInfo",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifEffect",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Motif",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifCreate",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifUpdate",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifFilter",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "roll_chaos_event",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/chaos_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "generate_motif_name",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "generate_motif_description",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "estimate_motif_compatibility",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "generate_realistic_duration",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "motif_to_narrative_context",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "calculate_motif_spread",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "roll_chaos_event",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "synthesize_motifs",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/motif_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "estimate_motif_compatibility",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/motif_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "calculate_motif_spread",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/motif_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/motif_utils.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Motif",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/motif_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/motif_engine_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "distance_to",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/repository.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Vector2",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/repository.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifRepository",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update_lifecycle",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "as_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "ensure_effects_list",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "ensure_descriptors_list",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "ensure_tags_list",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "validate_intensity",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifScope",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifLifecycle",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifCategory",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "LocationInfo",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifEffectTarget",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifEffect",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifTriggerContext",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Motif",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifCreate",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifUpdate",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifFilter",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifResponse",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/motif/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_middleware.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/core/gpt_client.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/core/llm_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/core/dm_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_instance",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/memory_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/memory_system.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/memory_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_instance",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_instance",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/motif_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/motif_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_motif",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/motif_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_motif",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/motif_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_regional_motifs",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/motif_system.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Motif",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/motif_system.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/motif_system.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/motif_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_instance",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/rumor_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/rumor_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "_apply_decay",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/memory_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/rumor_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "_apply_decay_if_needed",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/memory_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/rumor_system.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/rumor_system.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/rumor_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/api/dm_routes.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/services/conversation_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/services/gpt_client_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/services/llm_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/services/prompt_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/services/integration_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/llm/services/event_processing_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/tension_war/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/tension_war/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/tension_war/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/tension_war/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/tension_war/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Tension_WarResponse",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/tension_war/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/tension_war/schemas.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/tension_war/schemas.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/continent_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "list_all_continents",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/continent_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/continent_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "delete_continent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/continent_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/continent_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/continent_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/cognitive_frames.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Memory",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/memory_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/saliency_scoring.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory_associations.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory_routes.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/summarization_styles.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory_manager_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory_categories.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/integration_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/integration_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "_register_event_handlers",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/integration_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/integration_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/integration_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "_register_event_handlers",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/integration_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/integration_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/integration_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "_register_event_handlers",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/integration_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/integration_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/integration_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_faction_relationships",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_faction_relationship",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_faction_relationships",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update_faction_tension",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "set_diplomatic_status",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "are_at_war",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "are_allied",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "DiplomacyService",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "FactionRelationship",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/schemas.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/schemas.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/schemas.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/schemas.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/schemas.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/schemas.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/schemas.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/schemas.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/schemas.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Treaty",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Negotiation",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "DiplomaticEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "TreatyViolation",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "DiplomaticIncident",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Ultimatum",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Sanction",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_treaty",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_treaty",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "list_treaties",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_negotiation",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_faction_relationship",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_ultimatum",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_ultimatum",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update_ultimatum",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "list_ultimatums",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_sanction",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_sanction",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update_sanction",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "list_sanctions",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "record_sanction_violation",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_faction_relationship",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_faction_relationships",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_treaty",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_treaty",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update_treaty",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "list_treaties",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_negotiation",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_negotiation",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/core_services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update_negotiation",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/models/diplomacy_model.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/models/diplomacy_model.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "DiplomacyModel",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/models/diplomacy_model.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/services/diplomacy_service.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "DiplomacyService",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/services/diplomacy_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/fog_of_war.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/fog_of_war.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "is_expired",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "modify_damage",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "modify_damage",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "modify_damage",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "modify_damage",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_area.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_area.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_area.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_area.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_debug_interface.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_visualizer.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_visualizer.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_visualizer.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/object_pool.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "reset",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/fog_of_war.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/object_pool.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/object_pool.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "release",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/object_pool.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/object_pool.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/object_pool.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_pool",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/motif_engine_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/object_pool.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "acquire",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/object_pool.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/object_pool.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "release",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/object_pool.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/object_pool.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_stats",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/object_pool.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_handler_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_handler_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_handler_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "apply_effect",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/action_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/action_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "reset",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/fog_of_war.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/action_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/action_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "_get_combatant_id",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/effect_pipeline.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/action_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "can_use_action",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/action_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/action_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "use_action",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/action_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/action_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "use_movement",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/action_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/action_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_state_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_state_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_state_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_json",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_state_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_state_class.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Combatant",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_state_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/turn_queue.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "clear",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/object_pool.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/turn_queue.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_state_firebase_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "apply_action",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_handler_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_state_firebase_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "apply_status_effect",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/status_effects_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_state_firebase_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "resolve_status_effects",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/status_effects_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_state_firebase_utils.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "CombatActionHandler",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_handler_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_state_firebase_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/models/stats.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/models/stats.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/models/stats.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/services/combat_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_combat_state",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/services/combat_service.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "CombatService",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/combat/services/combat_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/magic/services.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/magic/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/magic/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/magic/websocket.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/character_schemas.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/gpt_client.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "GPTClient",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/core/gpt_client.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/gpt_client.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/history.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_model.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "apply_racial_modifiers",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/character_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/context_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/context_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/context_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/context_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_json",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/context_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_json",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_state_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/context_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "save",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/motif_engine_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/context_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "extract_key_info",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/context_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/extractors.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/validation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/repositories/character_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_session",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/database_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/repositories/character_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/repositories/character_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/character_builder.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/relationship.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/mood.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/character.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_faction_relationships",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/character.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/character.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Character",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/magic/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/character.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/goal.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/visual_model.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/visual_model.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/visual_model.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/visual_model.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/visual_model.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "play_animation",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/visual_model.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "stop_animation",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/visual_model.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/visual_model.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/visual_model.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "CharacterModel",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/visual_model.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_party",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/party_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/api/party_api.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "add_to_party",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/party_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/api/party_api.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "remove_from_party",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/party_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/api/party_api.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "award_xp_to_party",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/party_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/api/party_api.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "abandon_party",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/party_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/api/party_api.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_character",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_state_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/api/character_api.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/mood_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/relationship_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/character_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "delete_character",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/api/character_api.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/character_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_character_relationships",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/character.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/character_service.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "CharacterService",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/character_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/party_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_party",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/party_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/party_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "add_to_party",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/party_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/party_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "remove_from_party",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/party_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/party_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_total_party_level",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/party_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/party_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "award_xp_to_party",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/party_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/party_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "abandon_party",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/party_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/party_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/goal_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_character_goals",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/character_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/goal_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "add_goal",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/models/character.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/goal_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update_goal_progress",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/character_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/goal_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "complete_goal",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/character_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/goal_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "fail_goal",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/character_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/character/services/goal_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/base.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/base.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/base.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/repositories/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/repositories/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/repositories/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/repositories/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/models/user_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/models/user_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/models/user_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/models/auth_relationship_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "validate_email",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/schemas/__init__.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "validate_email",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/schemas/__init__.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "AuthRelationshipBase",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/routers/auth_relationship_router.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "AuthRelationshipCreate",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/routers/auth_relationship_router.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "AuthRelationshipUpdate",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/routers/auth_relationship_router.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "AuthRelationshipResponse",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/routers/auth_relationship_router.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "decorator",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/auth_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/services.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "IntegrationService",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/services/integration_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/monitoring.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/monitoring.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/monitoring.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/monitoring.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/monitoring.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_metrics",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/deployment.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/monitoring.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/event_bus.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/event_bus.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_stats",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/event_bus.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/state_sync.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/state_sync.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_sync_status",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/integration/state_sync.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/state_sync.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/validation.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "ValidationManager",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/validation.py",
        "/Users/Sharrone/Visual_DM/backend/systems/integration/validation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/faction_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "propagate_faction_influence",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/faction/faction_tick_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/faction_routes.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_faction",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/faction_routes.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_faction",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/faction_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/repositories/faction_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_faction",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/repositories/faction_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/repositories/faction_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "_ensure_files_exist",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/faction/repositories/faction_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/repositories/faction_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_faction_relationships",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/repositories/faction_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/models/faction.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/models/faction_goal.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/models/faction_goal.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "FactionGoal",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/faction_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/models/faction_goal.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/schemas/faction_types.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/services/relationship_service_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/faction/services/faction_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/event_base/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/event_base/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/event_base/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/event_base/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/event_base/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/event_base/repositories/event_base_repository.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/event_base/models/event_handler_model.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/event_base/models/event_base_model.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/event_base/services/event_base_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "add_middleware",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_middleware.py",
        "/Users/Sharrone/Visual_DM/backend/systems/event_base/services/event_base_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/rumor/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/rumor/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/rumor/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/rumor/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/rumor/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/rumor/transformer.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "calculate_truth_value",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/rumor/transformer.py",
        "/Users/Sharrone/Visual_DM/backend/systems/rumor/truth_tracker.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/rumor/repositories/rumor_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/rumor/models/rumor.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Rumor",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/rumor_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/rumor/schemas/rumor_types.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/rumor/services/rumor_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/config.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/database/session.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_session",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/database_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/database/session.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create_session",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/database_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/database/session.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/database/session.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "close",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/database_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/database/session.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/database/base.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/database/base.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/database/base.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "initialize",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/motif_engine_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/database/base.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_session",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/database_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/database/base.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/config/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/config/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/config/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "ValidationError",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/character_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/error.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "NotFoundError",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/character_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/error.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "DatabaseError",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/character_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/error.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "secure_filename",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/data_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_data_file",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/data_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/data_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "transform",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/data_loader.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "CoordinateSystem",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/data_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "secure_filename",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/security.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_data_file",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/security.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/security.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "transform",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/security.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "CoordinateSystem",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/security.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "secure_filename",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/coordinates.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_data_file",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/coordinates.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/coordinates.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "transform",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/coordinates.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "CoordinateSystem",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/coordinates.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/models/base.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/models/base.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/models/base.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/models/base.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "BaseModel",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/database/base.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/models/base.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/shared/events/dispatcher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "sell_item_to_shop",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/shop_routes.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/generation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/database.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "group_equipment_by_type",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "gpt_name_and_flavor",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "merge_loot_sets",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "apply_biome_to_loot_table",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "apply_motif_to_loot_table",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "adjust_price_for_supply_demand",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "apply_motif_to_prices",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "apply_event_to_prices",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "log_loot_acquisition",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "log_shop_transaction",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "sell_item_to_shop",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/shop_routes.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "apply_rarity_to_item",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "apply_magical_effects",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "apply_thematic_elements",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "add_enchantment_to_item",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "select_rarity",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "select_item_type",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "group_equipment_by_type",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "gpt_name_and_flavor",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "generate_item_identity",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/shop_routes.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "merge_loot_sets",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_core.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/initialization.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "initialize",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/motif_engine_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "generate_loot",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_routes.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_shop_inventory",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/shop_routes.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "restock_shop_inventory",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/shop_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_shop.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_shop.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_shop.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "EventBase",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/event_base/models/event_base_model.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "LootGeneratedEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "ItemIdentificationEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "ItemEnhancementEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "ShopInventoryEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "ShopTransactionEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "LootAnalyticsEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_utils_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/models_old/location.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/models_old/shop.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/loot/models_old/item.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/storage/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/storage/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/storage/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/storage/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/storage/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/storage/models/storage_config.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/storage/models/storage_bucket.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/storage/models/file_record.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/storage/models/cache_entry.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/utils/time_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/repositories/time_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/config.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/repositories/time_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/models/time_model.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_event",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__new__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "calendar",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "schedule_event",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "cancel_event",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "register_callback",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "unregister_callback",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_event",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_events",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "configure_calendar",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "add_important_date",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "remove_important_date",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_important_dates_for_date",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_days_in_month",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "is_special_date",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "reset",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/fog_of_war.py",
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/population/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/population/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/population/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/population/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/population/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/analytics_integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/quest_integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "end_conversation",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system_new.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/population_integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/time_integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/war_integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/conversation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/conversation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/conversation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/conversation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "add_entry",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/context_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/conversation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "_enforce_limits",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/context_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/conversation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_context_window",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/context_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/conversation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "extract_key_info",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/context_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/conversation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_json",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/conversation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_json",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_state_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/conversation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "save",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/motif_engine_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/conversation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/context_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/conversation.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "ConversationEntry",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/context_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/conversation.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "ConversationHistory",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/context_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/conversation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/region_integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/poi_integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/faction_integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/memory_integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/world_state_integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/rumor_integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/relationship_integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/dialogue_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/motif_integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_active_motifs",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/motif_engine_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/dialogue/motif_integration.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/poi/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/poi/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/poi/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/poi/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/poi/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/poi/tilemap_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/region/services.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "RegionService",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/continent_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/region/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/region/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/region/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/region/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/region/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "attempt_rest",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/world_generation_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/region/worldgen.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/region/worldgen.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "generate_region",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/world_generation_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/region/worldgen.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "map_region_to_latlon",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/world_generation_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/region/mapping.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "fetch_weather_for_latlon",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/world_generation_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/region/mapping.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/region/tension.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/religion/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/religion/narrative_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/religion/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/religion/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/religion/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/religion/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/quest/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/quest/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/quest/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/quest/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/quest/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/quest/manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "generate_journal_entry",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/quest/generator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/quest/npc_quests.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "error",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/integration/monitoring.py",
        "/Users/Sharrone/Visual_DM/backend/systems/inventory/validator.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "ValidationResult",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/integration/validation.py",
        "/Users/Sharrone/Visual_DM/backend/systems/inventory/validator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/inventory/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/inventory/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/inventory/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/inventory/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/inventory/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "subscribe",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/inventory/notification.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "unsubscribe",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/inventory/notification.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/inventory/factory.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/inventory/migrations.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/optimized_worldgen.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/world_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "generate_region",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/world_generation/world_generation_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/world_utils.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "RegionResponse",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/region/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/worldgen_api.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/worldgen_api.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/worldgen_api.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/worldgen_api.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/worldgen_api.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/worldgen_api.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/worldgen_api.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/core/loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_events",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/repositories/time_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/core/loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "save_state",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/services/time_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/core/loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/newspaper_system.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/world_event_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "process_world_tick",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/world_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/tick_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/terrain_generator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "_determine_biome",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/region/worldgen.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/terrain_generator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "_calculate_factor_score",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/region/worldgen.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/terrain_generator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/mods/mod_synchronizer.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/events/handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_crafting_service",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/__init__.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/routers/recipe_router.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_crafting_service",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/__init__.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/routers/crafting_router.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_recipe_repository",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/routers/recipe_router.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/routers/crafting_router.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "upgrade",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/migrations/001_create_economy_tables.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/migrations/001_create_crafting_tables.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "downgrade",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/migrations/001_create_economy_tables.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/migrations/001_create_crafting_tables.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/repositories/crafting_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/repositories/base_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "_get_session",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/diplomacy/db_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/repositories/base_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "create",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/repositories/character_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/repositories/base_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_by_id",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/repositories/character_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/repositories/base_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/repositories/base_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "delete",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/repositories/character_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/repositories/base_repository.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "BaseRepository",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/models/base.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/repositories/base_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/repositories/recipe_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/repositories/station_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "upgrade",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/migrations/001_create_economy_tables.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/models/station.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "can_craft",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/__init__.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/models/recipe.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/schemas/recipe_schemas.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/schemas/station_schemas.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/progression_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/recipe_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/station_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_from_file",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/recipe_loader.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/station_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_from_directory",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/recipe_loader.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/station_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "import_to_database",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/recipe_loader.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/station_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "_import_batch",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/recipe_loader.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/station_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "clear_loaded_data",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/recipe_loader.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/station_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_validation_errors",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/recipe_loader.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/station_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/config_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/config_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/config.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/config_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "save_config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/repositories/time_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/config_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "is_expired",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/config/__init__.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "delete",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/repositories/character_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "clear",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/object_pool.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_stats",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_recipes_by_skill",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/repositories/recipe_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_available_stations",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/repositories/station_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_character_skills",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/progression_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_unlocked_recipes",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/progression_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/crafting_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_recipe",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/crafting_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_available_recipes",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/__init__.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/crafting_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "can_craft",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/__init__.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/crafting_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "learn_recipe",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/__init__.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/crafting_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "discover_recipe",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/__init__.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/crafting_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_known_recipes",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/crafting_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/crafting_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "craft",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/__init__.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/crafting_service.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "CraftingService",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/crafting_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/station_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "_construct_station",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/crafting_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/station_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_station",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/cache_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/station_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_available_stations",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/repositories/station_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/station_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/crafting_experience_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "gain_experience",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/progression_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/crafting_experience_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "unlock_recipe",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/progression_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/crafting_experience_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_unlocked_recipes",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/progression_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/services/crafting_experience_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "subscribe",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "publish",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "process_sync",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "process_sync",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_instance",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "add_middleware",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_middleware.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "subscribe",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "RumorSpread",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/utils/rumor_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "RumorEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/rumor/schemas/rumor_types.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_types.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_instance",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/middleware/analytics.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/middleware/analytics.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__new__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/middleware/analytics_middleware.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "EventBase",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/event_base/models/event_base_model.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/core/event_base.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/core/event_base.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/tile_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/floating_origin.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/floating_origin.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_metrics",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/deployment.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/floating_origin.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/plugins.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "register_handler",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/event_base/services/event_base_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/plugins.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_instance",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/plugins.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/plugins.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/plugins.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/item_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/batching.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_instance",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/batching.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/batching.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/event_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "subscribe",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/event_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "unsubscribe",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/event_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "publish",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/event_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/screen_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/screen_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/world_tick_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "process_tick",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/economy_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/world_tick_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/layout.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_validation_stats",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/integration/validation.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinate_validation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "decorator",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinate_validation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "wrapper",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinate_validation.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinate_validation.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/game_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "calculate_quest_reward",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/quest/generator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/game_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "validate_character_data",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/character_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/game_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_global_position",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/floating_origin_ecs.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_local_position",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/floating_origin_ecs.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "remove_entity",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_area.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/floating_origin_ecs.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/floating_origin_ecs.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/combat/combat_animation_system.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/floating_origin_ecs.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/database_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "decorator",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/database_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "wrapper",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinate_validation.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/database_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/base_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "handle_error",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/error_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/base_manager.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/input_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "handle_event",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/screen_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/input_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/file_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/accessibility.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "verify_password",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/auth_user/services/password_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/password.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/quest_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "generate_quest",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/quest/generator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/quest_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/quest_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/quest_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "generate_quest",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/quest/generator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/quest_utils.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "QuestGenerator",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/quest/generator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/quest_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/asset_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "distance_to",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinates.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__str__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinates.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinates.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "distance_to",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/manager_core.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinates.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinates.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinates.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "shift_origin",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinates.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinates.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "CoordinateSystem",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/coordinates.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/rules_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_skills",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/repositories/character_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/rules_loader.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "GPTClient",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/core/gpt_client.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/gpt/client.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "save_json",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/json_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/game/json_io.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/events/repositories/events_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/arc.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/arc.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/arc.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "ArcManager",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/quest/arc_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/arc.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/utils/arc_validators.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/utils/arc_helpers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/repositories/arc_completion_record_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/repositories/arc_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/repositories/arc_step_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/repositories/arc_progression_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/models/arc_completion_record.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/models/arc_step.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/models/arc_progression.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/schemas/arc_schemas.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/services/arc_generator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/services/progression_tracker.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "placeholder_function",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/llm/middleware/event_integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/arc/services/quest_integration_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "_schemas",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_schema_from_file",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_schema",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "validate",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/validation.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "validate_against_schema",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "validate_json_schema",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_schema_path",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "validate_data",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "validate_world_seed",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "validate_adjacency_rules",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "validate_biome_data",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_validation_errors",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/data/recipe_loader.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_data_file",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_json_file",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/data_loaders.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "clear_cache",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/trade_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "file_exists",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/file_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_json",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/game/json_io.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "save_data_file",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_data_directory",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_file_metadata",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "_resolve_path",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/motif_engine_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/repositories/data_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "add_error",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/integration/validation.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "update_timestamp",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "ValidationSeverity",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/integration/validation.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "ValidationError",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/character_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "matches",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/integration/event_bus.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "is_compatible_with",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "from_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/memory/memory.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/biome_models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_schema",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_schema_path",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/schema_validator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "handle_event",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/screen_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_stats",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "handle_data_validation",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_validation_stats",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/integration/validation.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "handle_cache_invalidated",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "handle_file_watcher",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "handle_directory_scanned",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "handle_backup_created",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "handle_data_loaded",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "handle_data_validation",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "handle_directory_scanned",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_publisher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "enable",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_publisher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "disable",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_handlers.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_publisher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "subscribe",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_publisher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "unsubscribe",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_publisher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "publish",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_publisher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_subscriber_count",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/event_publisher.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__post_init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/events/data_events.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/loaders/game_data_registry.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_all",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/time/repositories/time_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/loaders/game_data_registry.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_instance",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "initialize",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/motif/motif_engine_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_biome",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/loaders/game_data_registry.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_all_biomes",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/world_state/utils/terrain_generator.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "are_biomes_compatible",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/loaders/game_data_registry.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_transition_biomes",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/loaders/game_data_registry.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_river_rules",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/loaders/game_data_registry.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_data_file",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/shared/utils/floating_origin.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "load_data_directory",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "save_data_file",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_file_metadata",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/utils/data_file_loader.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "clear_cache",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services/trade_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "file_exists",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/file_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_cached_data",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/loaders/game_data_registry.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_biome_by_conditions",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/loaders/game_data_registry.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "DataService",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/data/services/data_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "identify_item",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/loot/loot_manager.py",
        "/Users/Sharrone/Visual_DM/backend/systems/equipment/identify_item_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/equipment/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "calculate_combat_damage",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/game_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/equipment/durability_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/equipment/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/equipment/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/equipment/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/equipment/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_item_details",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/crafting/models/result.py",
        "/Users/Sharrone/Visual_DM/backend/systems/equipment/inventory_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/npc_loyalty_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/npc_loyalty_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/npc_builder_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "generate_hidden_traits",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/npc_builder_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "set_race",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/npc_builder_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "apply_racial_modifiers",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/npc_builder_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "add_tag",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/data/models/config_models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/npc_builder_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "finalize",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/core/character_builder_class.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/npc_builder_class.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/npc_location_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_current_game_day",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/utils/shared_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/npc_travel_utils.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "abandon_party",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/utils/party_utils.py",
        "/Users/Sharrone/Visual_DM/backend/systems/npc/npc_character_routes.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/services.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "AnalyticsService",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/middleware/analytics.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/services.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__repr__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/models.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/models.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/repositories/analytics_repository.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "to_dict",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "EventBase",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/event_base/models/event_base_model.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/models/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MemoryEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_types.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "RumorEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/rumor/schemas/rumor_types.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "MotifEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_types.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "PopulationEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_types.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "FactionEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_types.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "QuestEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_types.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "CombatEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "TimeEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_types.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "StorageEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/canonical_events.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "RelationshipEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_types.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "WorldStateEvent",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_types.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "Config",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/models.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/schemas/__init__.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_all",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/character/repositories/character_repository.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_instance",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/integration.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "storage_path",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "log_event",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/middleware/analytics.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "get_analytics_middleware",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/__init__.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "generate_dataset",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/middleware/analytics.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "__init__",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/economy/services.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
      ]
    },
    {
      "type": "duplicate_function",
      "function": "process_sync",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "AnalyticsService",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/middleware/analytics.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
      ]
    },
    {
      "type": "duplicate_class",
      "class": "EventMiddleware",
      "files": [
        "/Users/Sharrone/Visual_DM/backend/systems/events/event_dispatcher.py",
        "/Users/Sharrone/Visual_DM/backend/systems/analytics/services/analytics_service.py"
      ]
    }
  ],
  "coverage_report": {
    "percent_covered": 4.778317038287496,
    "lines_covered": 2038,
    "total_lines": 42651,
    "meets_target": false
  },
  "canonical_import_fixes": [
    {
      "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py",
      "original": "backend.systems.models.character",
      "canonical": "backend.systems.character"
    },
    {
      "file": "/Users/Sharrone/Visual_DM/backend/app/services/__init__.py",
      "original": "backend.systems.models.npc",
      "canonical": "backend.systems.npc"
    },
    {
      "file": "/Users/Sharrone/Visual_DM/backend/app/services/character_service.py",
      "original": "backend.systems.models.character",
      "canonical": "backend.systems.character"
    },
    {
      "file": "/Users/Sharrone/Visual_DM/backend/app/services/character.py",
      "original": "backend.systems.api.schemas_pkg.character",
      "canonical": "backend.systems.character"
    },
    {
      "file": "/Users/Sharrone/Visual_DM/backend/app/services/npc_service.py",
      "original": "backend.systems.models.npc",
      "canonical": "backend.systems.npc"
    }
  ],
  "test_organization_fixes": [],
  "missing_modules_created": [],
  "duplicate_tests_removed": [],
  "structure_violations_fixed": [],
  "summary": {
    "total_errors_found": 1162,
    "total_fixes_applied": 6,
    "test_organization_fixes": 0,
    "canonical_import_fixes": 5,
    "duplicate_tests_removed": 0,
    "missing_modules_created": 0,
    "structure_violations_fixed": 0,
    "coverage_status": false
  }
}