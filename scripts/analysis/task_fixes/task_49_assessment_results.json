{
  "timestamp": "2025-05-30T22:55:12.913974",
  "task": "Task 49: Comprehensive Backend System Assessment",
  "backend_dir": "backend",
  "systems_analyzed": 35,
  "issues_found": 4,
  "systems": {
    "combat": {
      "name": "combat",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 3,
      "services_count": 3,
      "repositories_count": 2,
      "routers_count": 2,
      "schemas_count": 2,
      "utils_count": 17,
      "files": [
        "backend/systems/combat/__init__.py",
        "backend/systems/combat/routers/combat_router.py",
        "backend/systems/combat/routers/__init__.py",
        "backend/systems/combat/utils/combat_ram.py",
        "backend/systems/combat/utils/fog_of_war.py",
        "backend/systems/combat/utils/effect_pipeline.py",
        "backend/systems/combat/utils/combat_area.py",
        "backend/systems/combat/utils/combat_debug_interface.py",
        "backend/systems/combat/utils/effect_visualizer.py",
        "backend/systems/combat/utils/__init__.py",
        "backend/systems/combat/utils/object_pool.py",
        "backend/systems/combat/utils/status_effects_utils.py",
        "backend/systems/combat/utils/combat_handler_class.py",
        "backend/systems/combat/utils/combat_class.py",
        "backend/systems/combat/utils/combat_narrative_utils.py",
        "backend/systems/combat/utils/action_system.py",
        "backend/systems/combat/utils/combat_animation_system.py",
        "backend/systems/combat/utils/combat_state_class.py",
        "backend/systems/combat/utils/turn_queue.py",
        "backend/systems/combat/utils/combat_state_firebase_utils.py",
        "backend/systems/combat/repositories/__init__.py",
        "backend/systems/combat/repositories/combat_repository.py",
        "backend/systems/combat/models/models.py",
        "backend/systems/combat/models/__init__.py",
        "backend/systems/combat/models/stats.py",
        "backend/systems/combat/schemas/combat.py",
        "backend/systems/combat/schemas/__init__.py",
        "backend/systems/combat/events/__init__.py",
        "backend/systems/combat/services/services.py",
        "backend/systems/combat/services/__init__.py",
        "backend/systems/combat/services/combat_service.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "diplomacy": {
      "name": "diplomacy",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 5,
      "services_count": 5,
      "repositories_count": 3,
      "routers_count": 2,
      "schemas_count": 2,
      "utils_count": 1,
      "files": [
        "backend/systems/diplomacy/__init__.py",
        "backend/systems/diplomacy/routers/__init__.py",
        "backend/systems/diplomacy/routers/router.py",
        "backend/systems/diplomacy/core_models/diplomacy_core_models.py",
        "backend/systems/diplomacy/core_models/__init__.py",
        "backend/systems/diplomacy/utils/__init__.py",
        "backend/systems/diplomacy/repositories/__init__.py",
        "backend/systems/diplomacy/repositories/repository.py",
        "backend/systems/diplomacy/repositories/db_repository.py",
        "backend/systems/diplomacy/models/diplomacy_model.py",
        "backend/systems/diplomacy/models/models.py",
        "backend/systems/diplomacy/models/core_models.py",
        "backend/systems/diplomacy/models/__init__.py",
        "backend/systems/diplomacy/models/db_models.py",
        "backend/systems/diplomacy/schemas/__init__.py",
        "backend/systems/diplomacy/schemas/schemas.py",
        "backend/systems/diplomacy/db_models/diplomacy_db_models.py",
        "backend/systems/diplomacy/db_models/__init__.py",
        "backend/systems/diplomacy/events/__init__.py",
        "backend/systems/diplomacy/services/services.py",
        "backend/systems/diplomacy/services/integration_services.py",
        "backend/systems/diplomacy/services/diplomacy_service.py",
        "backend/systems/diplomacy/services/core_services.py",
        "backend/systems/diplomacy/services/__init__.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "population": {
      "name": "population",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 2,
      "repositories_count": 1,
      "routers_count": 1,
      "schemas_count": 1,
      "utils_count": 4,
      "files": [
        "backend/systems/population/__init__.py",
        "backend/systems/population/routers/__init__.py",
        "backend/systems/population/utils/__init__.py",
        "backend/systems/population/utils/state_utils.py",
        "backend/systems/population/utils/population_utils.py",
        "backend/systems/population/utils/utils.py",
        "backend/systems/population/repositories/__init__.py",
        "backend/systems/population/models/models.py",
        "backend/systems/population/models/__init__.py",
        "backend/systems/population/schemas/__init__.py",
        "backend/systems/population/events/__init__.py",
        "backend/systems/population/services/services.py",
        "backend/systems/population/services/__init__.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "crafting": {
      "name": "crafting",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 6,
      "services_count": 5,
      "repositories_count": 5,
      "routers_count": 4,
      "schemas_count": 4,
      "utils_count": 1,
      "files": [
        "backend/systems/crafting/__init__.py",
        "backend/systems/crafting/routers/station_router.py",
        "backend/systems/crafting/routers/recipe_router.py",
        "backend/systems/crafting/routers/__init__.py",
        "backend/systems/crafting/routers/crafting_router.py",
        "backend/systems/crafting/migrations/001_create_crafting_tables.py",
        "backend/systems/crafting/utils/__init__.py",
        "backend/systems/crafting/repositories/crafting_repository.py",
        "backend/systems/crafting/repositories/base_repository.py",
        "backend/systems/crafting/repositories/recipe_repository.py",
        "backend/systems/crafting/repositories/__init__.py",
        "backend/systems/crafting/repositories/station_repository.py",
        "backend/systems/crafting/models/models.py",
        "backend/systems/crafting/models/ingredient.py",
        "backend/systems/crafting/models/__init__.py",
        "backend/systems/crafting/models/result.py",
        "backend/systems/crafting/models/station.py",
        "backend/systems/crafting/models/recipe.py",
        "backend/systems/crafting/schemas/__init__.py",
        "backend/systems/crafting/schemas/recipe_schemas.py",
        "backend/systems/crafting/schemas/station_schemas.py",
        "backend/systems/crafting/schemas/crafting_schemas.py",
        "backend/systems/crafting/events/__init__.py",
        "backend/systems/crafting/data/progression_manager.py",
        "backend/systems/crafting/data/recipe_loader.py",
        "backend/systems/crafting/data/station_loader.py",
        "backend/systems/crafting/data/config_manager.py",
        "backend/systems/crafting/data/cache_manager.py",
        "backend/systems/crafting/data/__init__.py",
        "backend/systems/crafting/services/services.py",
        "backend/systems/crafting/services/crafting_service.py",
        "backend/systems/crafting/services/__init__.py",
        "backend/systems/crafting/services/station_service.py",
        "backend/systems/crafting/services/crafting_experience_service.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "loot": {
      "name": "loot",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 3,
      "repositories_count": 1,
      "routers_count": 2,
      "schemas_count": 1,
      "utils_count": 8,
      "files": [
        "backend/systems/loot/__init__.py",
        "backend/systems/loot/routers/loot_routes.py",
        "backend/systems/loot/routers/__init__.py",
        "backend/systems/loot/utils/loot_utils_core.py",
        "backend/systems/loot/utils/generation.py",
        "backend/systems/loot/utils/database.py",
        "backend/systems/loot/utils/__init__.py",
        "backend/systems/loot/utils/core.py",
        "backend/systems/loot/utils/loot_core.py",
        "backend/systems/loot/utils/initialization.py",
        "backend/systems/loot/utils/loot_shop.py",
        "backend/systems/loot/repositories/__init__.py",
        "backend/systems/loot/models/models.py",
        "backend/systems/loot/models/__init__.py",
        "backend/systems/loot/schemas/__init__.py",
        "backend/systems/loot/events/events.py",
        "backend/systems/loot/events/__init__.py",
        "backend/systems/loot/events/loot_events.py",
        "backend/systems/loot/services/services.py",
        "backend/systems/loot/services/__init__.py",
        "backend/systems/loot/services/loot_manager.py",
        "backend/systems/loot/models_old/__init__.py",
        "backend/systems/loot/models_old/location.py",
        "backend/systems/loot/models_old/shop.py",
        "backend/systems/loot/models_old/item.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "npc": {
      "name": "npc",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 4,
      "repositories_count": 4,
      "routers_count": 5,
      "schemas_count": 1,
      "utils_count": 4,
      "files": [
        "backend/systems/npc/__init__.py",
        "backend/systems/npc/routers/npc_routes.py",
        "backend/systems/npc/routers/npc_router.py",
        "backend/systems/npc/routers/__init__.py",
        "backend/systems/npc/routers/npc_location_router.py",
        "backend/systems/npc/routers/npc_character_routes.py",
        "backend/systems/npc/utils/npc_loyalty_class.py",
        "backend/systems/npc/utils/npc_builder_class.py",
        "backend/systems/npc/utils/__init__.py",
        "backend/systems/npc/utils/npc_travel_utils.py",
        "backend/systems/npc/repositories/npc_location_repository.py",
        "backend/systems/npc/repositories/__init__.py",
        "backend/systems/npc/repositories/npc_memory_repository.py",
        "backend/systems/npc/repositories/npc_repository.py",
        "backend/systems/npc/models/models.py",
        "backend/systems/npc/models/__init__.py",
        "backend/systems/npc/schemas/__init__.py",
        "backend/systems/npc/events/events.py",
        "backend/systems/npc/events/__init__.py",
        "backend/systems/npc/events/event_publisher.py",
        "backend/systems/npc/services/services.py",
        "backend/systems/npc/services/npc_location_service.py",
        "backend/systems/npc/services/__init__.py",
        "backend/systems/npc/services/npc_service.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "world_state": {
      "name": "world_state",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 3,
      "services_count": 2,
      "repositories_count": 1,
      "routers_count": 3,
      "schemas_count": 1,
      "utils_count": 8,
      "files": [
        "backend/systems/world_state/__init__.py",
        "backend/systems/world_state/routers/world_routes.py",
        "backend/systems/world_state/routers/__init__.py",
        "backend/systems/world_state/routers/worldgen_api.py",
        "backend/systems/world_state/core/__init__.py",
        "backend/systems/world_state/core/loader.py",
        "backend/systems/world_state/utils/newspaper_system.py",
        "backend/systems/world_state/utils/world_event_utils.py",
        "backend/systems/world_state/utils/__init__.py",
        "backend/systems/world_state/utils/tick_utils.py",
        "backend/systems/world_state/utils/cleanup.py",
        "backend/systems/world_state/utils/terrain_generator.py",
        "backend/systems/world_state/utils/optimized_worldgen.py",
        "backend/systems/world_state/utils/world_utils.py",
        "backend/systems/world_state/repositories/__init__.py",
        "backend/systems/world_state/models/models.py",
        "backend/systems/world_state/models/__init__.py",
        "backend/systems/world_state/models/world_models.py",
        "backend/systems/world_state/schemas/__init__.py",
        "backend/systems/world_state/mods/mod_synchronizer.py",
        "backend/systems/world_state/mods/__init__.py",
        "backend/systems/world_state/api/__init__.py",
        "backend/systems/world_state/events/handlers.py",
        "backend/systems/world_state/events/__init__.py",
        "backend/systems/world_state/services/services.py",
        "backend/systems/world_state/services/__init__.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "poi": {
      "name": "poi",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 13,
      "repositories_count": 3,
      "routers_count": 1,
      "schemas_count": 1,
      "utils_count": 1,
      "files": [
        "backend/systems/poi/__init__.py",
        "backend/systems/poi/routers/__init__.py",
        "backend/systems/poi/utils/__init__.py",
        "backend/systems/poi/repositories/base_repository.py",
        "backend/systems/poi/repositories/__init__.py",
        "backend/systems/poi/repositories/poi_repository.py",
        "backend/systems/poi/models/models.py",
        "backend/systems/poi/models/__init__.py",
        "backend/systems/poi/schemas/__init__.py",
        "backend/systems/poi/events/__init__.py",
        "backend/systems/poi/services/migration_service.py",
        "backend/systems/poi/services/poi_state_service.py",
        "backend/systems/poi/services/services.py",
        "backend/systems/poi/services/resource_management_service.py",
        "backend/systems/poi/services/poi_generator.py",
        "backend/systems/poi/services/__init__.py",
        "backend/systems/poi/services/tilemap_service.py",
        "backend/systems/poi/services/event_integration_service.py",
        "backend/systems/poi/services/faction_influence_service.py",
        "backend/systems/poi/services/landmark_service.py",
        "backend/systems/poi/services/unity_frontend_integration.py",
        "backend/systems/poi/services/metropolitan_spread_service.py",
        "backend/systems/poi/services/lifecycle_events_service.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "character": {
      "name": "character",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 8,
      "services_count": 8,
      "repositories_count": 2,
      "routers_count": 4,
      "schemas_count": 2,
      "utils_count": 9,
      "files": [
        "backend/systems/character/__init__.py",
        "backend/systems/character/routers/character_router.py",
        "backend/systems/character/routers/__init__.py",
        "backend/systems/character/routers/relationship_router.py",
        "backend/systems/character/routers/player_routes.py",
        "backend/systems/character/database/__init__.py",
        "backend/systems/character/database/setup.py",
        "backend/systems/character/database/models/__init__.py",
        "backend/systems/character/core/character_model.py",
        "backend/systems/character/core/__init__.py",
        "backend/systems/character/core/character_builder_class.py",
        "backend/systems/character/utils/character_utils.py",
        "backend/systems/character/utils/context_manager.py",
        "backend/systems/character/utils/extractors.py",
        "backend/systems/character/utils/cache.py",
        "backend/systems/character/utils/__init__.py",
        "backend/systems/character/utils/gpt_client.py",
        "backend/systems/character/utils/party_utils.py",
        "backend/systems/character/utils/history.py",
        "backend/systems/character/utils/validation.py",
        "backend/systems/character/repositories/__init__.py",
        "backend/systems/character/repositories/character_repository.py",
        "backend/systems/character/models/models.py",
        "backend/systems/character/models/character_builder.py",
        "backend/systems/character/models/relationship.py",
        "backend/systems/character/models/__init__.py",
        "backend/systems/character/models/mood.py",
        "backend/systems/character/models/character.py",
        "backend/systems/character/models/goal.py",
        "backend/systems/character/models/visual_model.py",
        "backend/systems/character/schemas/character_schemas.py",
        "backend/systems/character/schemas/__init__.py",
        "backend/systems/character/api/party_api.py",
        "backend/systems/character/api/__init__.py",
        "backend/systems/character/api/character_api.py",
        "backend/systems/character/api/api.py",
        "backend/systems/character/events/__init__.py",
        "backend/systems/character/services/services.py",
        "backend/systems/character/services/prompt_manager.py",
        "backend/systems/character/services/__init__.py",
        "backend/systems/character/services/mood_service.py",
        "backend/systems/character/services/relationship_service.py",
        "backend/systems/character/services/character_service.py",
        "backend/systems/character/services/party_service.py",
        "backend/systems/character/services/goal_service.py",
        "backend/systems/character/services/utils/__init__.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "region": {
      "name": "region",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 3,
      "repositories_count": 2,
      "routers_count": 1,
      "schemas_count": 1,
      "utils_count": 4,
      "files": [
        "backend/systems/region/models.py",
        "backend/systems/region/__init__.py",
        "backend/systems/region/routers/__init__.py",
        "backend/systems/region/migrations/001_create_region_tables.py",
        "backend/systems/region/migrations/__init__.py",
        "backend/systems/region/utils/__init__.py",
        "backend/systems/region/utils/worldgen.py",
        "backend/systems/region/utils/mapping.py",
        "backend/systems/region/utils/tension.py",
        "backend/systems/region/repositories/region_repository.py",
        "backend/systems/region/repositories/__init__.py",
        "backend/systems/region/models/models.py",
        "backend/systems/region/models/__init__.py",
        "backend/systems/region/schemas/__init__.py",
        "backend/systems/region/events/__init__.py",
        "backend/systems/region/services/services.py",
        "backend/systems/region/services/__init__.py",
        "backend/systems/region/services/world_generation_service.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "religion": {
      "name": "religion",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 3,
      "repositories_count": 2,
      "routers_count": 3,
      "schemas_count": 2,
      "utils_count": 2,
      "files": [
        "backend/systems/religion/__init__.py",
        "backend/systems/religion/event_publisher.py",
        "backend/systems/religion/exceptions.py",
        "backend/systems/religion/websocket_manager.py",
        "backend/systems/religion/routers/__init__.py",
        "backend/systems/religion/routers/websocket_routes.py",
        "backend/systems/religion/routers/religion_router.py",
        "backend/systems/religion/utils/__init__.py",
        "backend/systems/religion/utils/utils.py",
        "backend/systems/religion/repositories/__init__.py",
        "backend/systems/religion/repositories/repository.py",
        "backend/systems/religion/models/models.py",
        "backend/systems/religion/models/__init__.py",
        "backend/systems/religion/schemas/__init__.py",
        "backend/systems/religion/schemas/schemas.py",
        "backend/systems/religion/events/__init__.py",
        "backend/systems/religion/events/religion_events.py",
        "backend/systems/religion/events/event_publisher.py",
        "backend/systems/religion/services/services.py",
        "backend/systems/religion/services/narrative_service.py",
        "backend/systems/religion/services/__init__.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "shared": {
      "name": "shared",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 3,
      "services_count": 2,
      "repositories_count": 2,
      "routers_count": 1,
      "schemas_count": 1,
      "utils_count": 15,
      "files": [
        "backend/systems/shared/__init__.py",
        "backend/systems/shared/exceptions.py",
        "backend/systems/shared/routers/__init__.py",
        "backend/systems/shared/database/session.py",
        "backend/systems/shared/database/__init__.py",
        "backend/systems/shared/database/base.py",
        "backend/systems/shared/config/__init__.py",
        "backend/systems/shared/utils/floating_origin.py",
        "backend/systems/shared/utils/time.py",
        "backend/systems/shared/utils/logging.py",
        "backend/systems/shared/utils/config.py",
        "backend/systems/shared/utils/exceptions_1.py",
        "backend/systems/shared/utils/error.py",
        "backend/systems/shared/utils/database.py",
        "backend/systems/shared/utils/data_loader.py",
        "backend/systems/shared/utils/security.py",
        "backend/systems/shared/utils/__init__.py",
        "backend/systems/shared/utils/file.py",
        "backend/systems/shared/utils/noise.py",
        "backend/systems/shared/utils/exceptions.py",
        "backend/systems/shared/utils/firebase.py",
        "backend/systems/shared/utils/coordinates.py",
        "backend/systems/shared/repositories/base_repository.py",
        "backend/systems/shared/repositories/__init__.py",
        "backend/systems/shared/models/models.py",
        "backend/systems/shared/models/__init__.py",
        "backend/systems/shared/models/base.py",
        "backend/systems/shared/schemas/__init__.py",
        "backend/systems/shared/rules/rules_utils.py",
        "backend/systems/shared/rules/__init__.py",
        "backend/systems/shared/events/dispatcher.py",
        "backend/systems/shared/events/__init__.py",
        "backend/systems/shared/events/bus.py",
        "backend/systems/shared/events/base.py",
        "backend/systems/shared/services/services.py",
        "backend/systems/shared/services/__init__.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "inventory": {
      "name": "inventory",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 2,
      "repositories_count": 1,
      "routers_count": 1,
      "schemas_count": 1,
      "utils_count": 7,
      "files": [
        "backend/systems/inventory/__init__.py",
        "backend/systems/inventory/routers/__init__.py",
        "backend/systems/inventory/utils/validator.py",
        "backend/systems/inventory/utils/notification.py",
        "backend/systems/inventory/utils/__init__.py",
        "backend/systems/inventory/utils/export.py",
        "backend/systems/inventory/utils/factory.py",
        "backend/systems/inventory/utils/operations.py",
        "backend/systems/inventory/utils/migrations.py",
        "backend/systems/inventory/repositories/__init__.py",
        "backend/systems/inventory/models/models.py",
        "backend/systems/inventory/models/__init__.py",
        "backend/systems/inventory/schemas/__init__.py",
        "backend/systems/inventory/events/__init__.py",
        "backend/systems/inventory/services/services.py",
        "backend/systems/inventory/services/__init__.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "event_base": {
      "name": "event_base",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 4,
      "services_count": 3,
      "repositories_count": 2,
      "routers_count": 2,
      "schemas_count": 2,
      "utils_count": 1,
      "files": [
        "backend/systems/event_base/__init__.py",
        "backend/systems/event_base/routers/__init__.py",
        "backend/systems/event_base/routers/router.py",
        "backend/systems/event_base/utils/__init__.py",
        "backend/systems/event_base/repositories/event_base_repository.py",
        "backend/systems/event_base/repositories/__init__.py",
        "backend/systems/event_base/models/event_handler_model.py",
        "backend/systems/event_base/models/event_base_model.py",
        "backend/systems/event_base/models/models.py",
        "backend/systems/event_base/models/__init__.py",
        "backend/systems/event_base/schemas/event_base_schema.py",
        "backend/systems/event_base/schemas/__init__.py",
        "backend/systems/event_base/events/__init__.py",
        "backend/systems/event_base/services/services.py",
        "backend/systems/event_base/services/__init__.py",
        "backend/systems/event_base/services/event_base_service.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "economy": {
      "name": "economy",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 5,
      "services_count": 9,
      "repositories_count": 1,
      "routers_count": 5,
      "schemas_count": 1,
      "utils_count": 5,
      "files": [
        "backend/systems/economy/__init__.py",
        "backend/systems/economy/routers/shop_routes.py",
        "backend/systems/economy/routers/__init__.py",
        "backend/systems/economy/routers/api_routes.py",
        "backend/systems/economy/routers/websocket_routes.py",
        "backend/systems/economy/routers/routes.py",
        "backend/systems/economy/migrations/001_create_economy_tables.py",
        "backend/systems/economy/database_service/__init__.py",
        "backend/systems/economy/database_service/economy_database_service.py",
        "backend/systems/economy/resource_service/__init__.py",
        "backend/systems/economy/resource_service/economy_resource_service.py",
        "backend/systems/economy/economy_manager/economy_economy_manager.py",
        "backend/systems/economy/economy_manager/__init__.py",
        "backend/systems/economy/utils/websocket_events.py",
        "backend/systems/economy/utils/deployment.py",
        "backend/systems/economy/utils/__init__.py",
        "backend/systems/economy/utils/integration.py",
        "backend/systems/economy/utils/shop_utils.py",
        "backend/systems/economy/repositories/__init__.py",
        "backend/systems/economy/models/models.py",
        "backend/systems/economy/models/market.py",
        "backend/systems/economy/models/__init__.py",
        "backend/systems/economy/models/commodity_future.py",
        "backend/systems/economy/models/trade_route.py",
        "backend/systems/economy/websocket_events/economy_websocket_events.py",
        "backend/systems/economy/websocket_events/__init__.py",
        "backend/systems/economy/schemas/__init__.py",
        "backend/systems/economy/market_service/economy_market_service.py",
        "backend/systems/economy/market_service/__init__.py",
        "backend/systems/economy/deployment/__init__.py",
        "backend/systems/economy/deployment/economy_deployment.py",
        "backend/systems/economy/events/events.py",
        "backend/systems/economy/events/__init__.py",
        "backend/systems/economy/resource/__init__.py",
        "backend/systems/economy/resource/economy_resource.py",
        "backend/systems/economy/services/services.py",
        "backend/systems/economy/services/resource.py",
        "backend/systems/economy/services/__init__.py",
        "backend/systems/economy/services/trade_service.py",
        "backend/systems/economy/services/economy_manager.py",
        "backend/systems/economy/services/resource_service.py",
        "backend/systems/economy/services/market_service.py",
        "backend/systems/economy/services/database_service.py",
        "backend/systems/economy/services/futures_service.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "faction": {
      "name": "faction",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 8,
      "repositories_count": 2,
      "routers_count": 3,
      "schemas_count": 2,
      "utils_count": 4,
      "files": [
        "backend/systems/faction/__init__.py",
        "backend/systems/faction/routers/faction_router.py",
        "backend/systems/faction/routers/__init__.py",
        "backend/systems/faction/routers/faction_routes.py",
        "backend/systems/faction/utils/validators.py",
        "backend/systems/faction/utils/faction_tick_utils.py",
        "backend/systems/faction/utils/__init__.py",
        "backend/systems/faction/utils/faction_utils.py",
        "backend/systems/faction/repositories/__init__.py",
        "backend/systems/faction/repositories/faction_repository.py",
        "backend/systems/faction/models/models.py",
        "backend/systems/faction/models/__init__.py",
        "backend/systems/faction/schemas/faction_types.py",
        "backend/systems/faction/schemas/__init__.py",
        "backend/systems/faction/events/__init__.py",
        "backend/systems/faction/services/reputation_service.py",
        "backend/systems/faction/services/services.py",
        "backend/systems/faction/services/relationship_service_core.py",
        "backend/systems/faction/services/faction_manager.py",
        "backend/systems/faction/services/influence_service.py",
        "backend/systems/faction/services/__init__.py",
        "backend/systems/faction/services/faction_service.py",
        "backend/systems/faction/services/membership_service.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "rumor": {
      "name": "rumor",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 3,
      "services_count": 3,
      "repositories_count": 2,
      "routers_count": 2,
      "schemas_count": 2,
      "utils_count": 5,
      "files": [
        "backend/systems/rumor/__init__.py",
        "backend/systems/rumor/routers/__init__.py",
        "backend/systems/rumor/routers/npc_rumor_routes.py",
        "backend/systems/rumor/utils/__init__.py",
        "backend/systems/rumor/utils/transformer.py",
        "backend/systems/rumor/utils/decay_and_propagation.py",
        "backend/systems/rumor/utils/truth_tracker.py",
        "backend/systems/rumor/utils/npc_rumor_utils.py",
        "backend/systems/rumor/repositories/rumor_repository.py",
        "backend/systems/rumor/repositories/__init__.py",
        "backend/systems/rumor/models/models.py",
        "backend/systems/rumor/models/__init__.py",
        "backend/systems/rumor/models/rumor.py",
        "backend/systems/rumor/schemas/rumor_types.py",
        "backend/systems/rumor/schemas/__init__.py",
        "backend/systems/rumor/events/__init__.py",
        "backend/systems/rumor/services/services.py",
        "backend/systems/rumor/services/__init__.py",
        "backend/systems/rumor/services/rumor_service.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "quest": {
      "name": "quest",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 5,
      "repositories_count": 1,
      "routers_count": 3,
      "schemas_count": 1,
      "utils_count": 3,
      "files": [
        "backend/systems/quest/__init__.py",
        "backend/systems/quest/routers/__init__.py",
        "backend/systems/quest/routers/journal_routes.py",
        "backend/systems/quest/routers/quest_routes.py",
        "backend/systems/quest/utils/__init__.py",
        "backend/systems/quest/utils/integration.py",
        "backend/systems/quest/utils/npc_quests.py",
        "backend/systems/quest/repositories/__init__.py",
        "backend/systems/quest/models/models.py",
        "backend/systems/quest/models/__init__.py",
        "backend/systems/quest/schemas/__init__.py",
        "backend/systems/quest/events/__init__.py",
        "backend/systems/quest/services/services.py",
        "backend/systems/quest/services/arc_manager.py",
        "backend/systems/quest/services/__init__.py",
        "backend/systems/quest/services/generator.py",
        "backend/systems/quest/services/manager.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "arc": {
      "name": "arc",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 5,
      "services_count": 6,
      "repositories_count": 5,
      "routers_count": 2,
      "schemas_count": 2,
      "utils_count": 4,
      "files": [
        "backend/systems/arc/__init__.py",
        "backend/systems/arc/routers/__init__.py",
        "backend/systems/arc/routers/arc_router.py",
        "backend/systems/arc/utils/arc_validators.py",
        "backend/systems/arc/utils/arc_helpers.py",
        "backend/systems/arc/utils/__init__.py",
        "backend/systems/arc/utils/arc_formatters.py",
        "backend/systems/arc/repositories/arc_completion_record_repository.py",
        "backend/systems/arc/repositories/__init__.py",
        "backend/systems/arc/repositories/arc_repository.py",
        "backend/systems/arc/repositories/arc_step_repository.py",
        "backend/systems/arc/repositories/arc_progression_repository.py",
        "backend/systems/arc/models/arc_completion_record.py",
        "backend/systems/arc/models/models.py",
        "backend/systems/arc/models/__init__.py",
        "backend/systems/arc/models/arc_step.py",
        "backend/systems/arc/models/arc_progression.py",
        "backend/systems/arc/schemas/arc_schemas.py",
        "backend/systems/arc/schemas/__init__.py",
        "backend/systems/arc/events/__init__.py",
        "backend/systems/arc/services/arc_generator.py",
        "backend/systems/arc/services/services.py",
        "backend/systems/arc/services/progression_tracker.py",
        "backend/systems/arc/services/__init__.py",
        "backend/systems/arc/services/arc.py",
        "backend/systems/arc/services/quest_integration_service.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "time": {
      "name": "time",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 3,
      "services_count": 3,
      "repositories_count": 2,
      "routers_count": 2,
      "schemas_count": 1,
      "utils_count": 2,
      "files": [
        "backend/systems/time/__init__.py",
        "backend/systems/time/routers/__init__.py",
        "backend/systems/time/routers/time_router.py",
        "backend/systems/time/utils/__init__.py",
        "backend/systems/time/utils/time_utils.py",
        "backend/systems/time/repositories/time_repository.py",
        "backend/systems/time/repositories/__init__.py",
        "backend/systems/time/models/models.py",
        "backend/systems/time/models/__init__.py",
        "backend/systems/time/models/time_model.py",
        "backend/systems/time/schemas/__init__.py",
        "backend/systems/time/events/__init__.py",
        "backend/systems/time/services/services.py",
        "backend/systems/time/services/__init__.py",
        "backend/systems/time/services/time_manager.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "integration": {
      "name": "integration",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 2,
      "repositories_count": 1,
      "routers_count": 1,
      "schemas_count": 1,
      "utils_count": 4,
      "files": [
        "backend/systems/integration/__init__.py",
        "backend/systems/integration/routers/__init__.py",
        "backend/systems/integration/utils/monitoring.py",
        "backend/systems/integration/utils/__init__.py",
        "backend/systems/integration/utils/state_sync.py",
        "backend/systems/integration/utils/validation.py",
        "backend/systems/integration/repositories/__init__.py",
        "backend/systems/integration/models/models.py",
        "backend/systems/integration/models/__init__.py",
        "backend/systems/integration/schemas/__init__.py",
        "backend/systems/integration/events/__init__.py",
        "backend/systems/integration/events/event_bus.py",
        "backend/systems/integration/services/services.py",
        "backend/systems/integration/services/__init__.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "world_generation": {
      "name": "world_generation",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 3,
      "repositories_count": 2,
      "routers_count": 2,
      "schemas_count": 1,
      "utils_count": 2,
      "files": [
        "backend/systems/world_generation/__init__.py",
        "backend/systems/world_generation/routers/__init__.py",
        "backend/systems/world_generation/routers/worldgen_routes.py",
        "backend/systems/world_generation/utils/__init__.py",
        "backend/systems/world_generation/utils/world_generation_utils.py",
        "backend/systems/world_generation/repositories/continent_repository.py",
        "backend/systems/world_generation/repositories/__init__.py",
        "backend/systems/world_generation/models/models.py",
        "backend/systems/world_generation/models/__init__.py",
        "backend/systems/world_generation/schemas/__init__.py",
        "backend/systems/world_generation/events/__init__.py",
        "backend/systems/world_generation/services/services.py",
        "backend/systems/world_generation/services/continent_service.py",
        "backend/systems/world_generation/services/__init__.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "events": {
      "name": "events",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 2,
      "repositories_count": 2,
      "routers_count": 2,
      "schemas_count": 1,
      "utils_count": 38,
      "files": [
        "backend/systems/events/__init__.py",
        "backend/systems/events/routers/__init__.py",
        "backend/systems/events/routers/events_router.py",
        "backend/systems/events/middleware/logging_middleware.py",
        "backend/systems/events/middleware/debugging_middleware.py",
        "backend/systems/events/middleware/__init__.py",
        "backend/systems/events/middleware/debugging.py",
        "backend/systems/events/middleware/error_middleware.py",
        "backend/systems/events/middleware/error_handler.py",
        "backend/systems/events/middleware/analytics.py",
        "backend/systems/events/middleware/analytics_middleware.py",
        "backend/systems/events/core/__init__.py",
        "backend/systems/events/core/event_base.py",
        "backend/systems/events/core/events/__init__.py",
        "backend/systems/events/utils/tile_loader.py",
        "backend/systems/events/utils/floating_origin.py",
        "backend/systems/events/utils/plugins.py",
        "backend/systems/events/utils/item_utils.py",
        "backend/systems/events/utils/export_utils.py",
        "backend/systems/events/utils/batching.py",
        "backend/systems/events/utils/event_utils.py",
        "backend/systems/events/utils/start_game_routes.py",
        "backend/systems/events/utils/screen_utils.py",
        "backend/systems/events/utils/world_tick_utils.py",
        "backend/systems/events/utils/error_utils.py",
        "backend/systems/events/utils/layout.py",
        "backend/systems/events/utils/coordinate_validation.py",
        "backend/systems/events/utils/coordinate_utils.py",
        "backend/systems/events/utils/constants.py",
        "backend/systems/events/utils/game_utils.py",
        "backend/systems/events/utils/__init__.py",
        "backend/systems/events/utils/floating_origin_ecs.py",
        "backend/systems/events/utils/database_utils.py",
        "backend/systems/events/utils/base_manager.py",
        "backend/systems/events/utils/data_loaders.py",
        "backend/systems/events/utils/terrain_manager.py",
        "backend/systems/events/utils/seed.py",
        "backend/systems/events/utils/input_utils.py",
        "backend/systems/events/utils/firebase_utils.py",
        "backend/systems/events/utils/npc_utils.py",
        "backend/systems/events/utils/render_utils.py",
        "backend/systems/events/utils/file_utils.py",
        "backend/systems/events/utils/shared_utils.py",
        "backend/systems/events/utils/__init__ .py",
        "backend/systems/events/utils/accessibility.py",
        "backend/systems/events/utils/password.py",
        "backend/systems/events/utils/json_utils.py",
        "backend/systems/events/utils/quest_utils.py",
        "backend/systems/events/utils/asset_utils.py",
        "backend/systems/events/utils/coordinates.py",
        "backend/systems/events/utils/rules_loader.py",
        "backend/systems/events/utils/gpt.py",
        "backend/systems/events/utils/gpt/intents.py",
        "backend/systems/events/utils/gpt/client.py",
        "backend/systems/events/utils/gpt/__init__.py",
        "backend/systems/events/utils/gpt/dialogue.py",
        "backend/systems/events/utils/gpt/flavor.py",
        "backend/systems/events/utils/game/json_io.py",
        "backend/systems/events/utils/game/__init__.py",
        "backend/systems/events/utils/game/world_tick.py",
        "backend/systems/events/repositories/events_repository.py",
        "backend/systems/events/repositories/__init__.py",
        "backend/systems/events/models/models.py",
        "backend/systems/events/models/__init__.py",
        "backend/systems/events/schemas/__init__.py",
        "backend/systems/events/api/__init__.py",
        "backend/systems/events/api/plugin_api.py",
        "backend/systems/events/events/event_dispatcher.py",
        "backend/systems/events/events/__init__.py",
        "backend/systems/events/events/canonical_events.py",
        "backend/systems/events/events/event_types.py",
        "backend/systems/events/services/services.py",
        "backend/systems/events/services/__init__.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "tension_war": {
      "name": "tension_war",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 2,
      "repositories_count": 1,
      "routers_count": 3,
      "schemas_count": 2,
      "utils_count": 2,
      "files": [
        "backend/systems/tension_war/__init__.py",
        "backend/systems/tension_war/routers/tension_routes.py",
        "backend/systems/tension_war/routers/__init__.py",
        "backend/systems/tension_war/routers/war_routes.py",
        "backend/systems/tension_war/utils/__init__.py",
        "backend/systems/tension_war/utils/examples.py",
        "backend/systems/tension_war/repositories/__init__.py",
        "backend/systems/tension_war/models/models.py",
        "backend/systems/tension_war/models/__init__.py",
        "backend/systems/tension_war/schemas/__init__.py",
        "backend/systems/tension_war/schemas/schemas.py",
        "backend/systems/tension_war/events/__init__.py",
        "backend/systems/tension_war/services/services.py",
        "backend/systems/tension_war/services/__init__.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "magic": {
      "name": "magic",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 2,
      "repositories_count": 1,
      "routers_count": 2,
      "schemas_count": 1,
      "utils_count": 2,
      "files": [
        "backend/systems/magic/__init__.py",
        "backend/systems/magic/routers/__init__.py",
        "backend/systems/magic/routers/router.py",
        "backend/systems/magic/utils/__init__.py",
        "backend/systems/magic/utils/websocket.py",
        "backend/systems/magic/repositories/__init__.py",
        "backend/systems/magic/models/models.py",
        "backend/systems/magic/models/__init__.py",
        "backend/systems/magic/schemas/__init__.py",
        "backend/systems/magic/events/__init__.py",
        "backend/systems/magic/services/services.py",
        "backend/systems/magic/services/__init__.py",
        "backend/systems/magic/router/magic_router.py",
        "backend/systems/magic/router/__init__.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "chaos": {
      "name": "chaos",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 4,
      "services_count": 3,
      "repositories_count": 1,
      "routers_count": 0,
      "schemas_count": 1,
      "utils_count": 4,
      "files": [
        "backend/systems/chaos/__init__.py",
        "backend/systems/chaos/core/system_integrator.py",
        "backend/systems/chaos/core/config.py",
        "backend/systems/chaos/core/pressure_monitor.py",
        "backend/systems/chaos/core/__init__.py",
        "backend/systems/chaos/core/event_triggers.py",
        "backend/systems/chaos/core/chaos_engine.py",
        "backend/systems/chaos/utils/event_utils.py",
        "backend/systems/chaos/utils/pressure_calculations.py",
        "backend/systems/chaos/utils/__init__.py",
        "backend/systems/chaos/utils/chaos_math.py",
        "backend/systems/chaos/repositories/__init__.py",
        "backend/systems/chaos/models/chaos_events.py",
        "backend/systems/chaos/models/pressure_data.py",
        "backend/systems/chaos/models/chaos_state.py",
        "backend/systems/chaos/models/__init__.py",
        "backend/systems/chaos/schemas/__init__.py",
        "backend/systems/chaos/api/chaos_api.py",
        "backend/systems/chaos/api/__init__.py",
        "backend/systems/chaos/services/mitigation_service.py",
        "backend/systems/chaos/services/__init__.py",
        "backend/systems/chaos/services/event_manager.py",
        "backend/systems/chaos/analytics/chaos_analytics.py",
        "backend/systems/chaos/analytics/performance_monitor.py",
        "backend/systems/chaos/analytics/__init__.py",
        "backend/systems/chaos/analytics/event_tracker.py",
        "backend/systems/chaos/analytics/configuration_manager.py"
      ],
      "issues": [
        "Missing chaos component: chaos_calculator",
        "Missing chaos component: event_trigger",
        "Missing chaos component: mitigation_factor",
        "Missing chaos component: cross_system_integration"
      ],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "motif": {
      "name": "motif",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 5,
      "repositories_count": 2,
      "routers_count": 3,
      "schemas_count": 1,
      "utils_count": 4,
      "files": [
        "backend/systems/motif/__init__.py",
        "backend/systems/motif/routers/__init__.py",
        "backend/systems/motif/routers/motif_routes.py",
        "backend/systems/motif/routers/router.py",
        "backend/systems/motif/utils/chaos_utils.py",
        "backend/systems/motif/utils/__init__.py",
        "backend/systems/motif/utils/utils.py",
        "backend/systems/motif/utils/motif_utils.py",
        "backend/systems/motif/repositories/__init__.py",
        "backend/systems/motif/repositories/repository.py",
        "backend/systems/motif/models/models.py",
        "backend/systems/motif/models/__init__.py",
        "backend/systems/motif/schemas/__init__.py",
        "backend/systems/motif/events/__init__.py",
        "backend/systems/motif/services/manager_core.py",
        "backend/systems/motif/services/service.py",
        "backend/systems/motif/services/services.py",
        "backend/systems/motif/services/__init__.py",
        "backend/systems/motif/services/motif_engine_class.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "data": {
      "name": "data",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 4,
      "services_count": 3,
      "repositories_count": 2,
      "routers_count": 2,
      "schemas_count": 1,
      "utils_count": 3,
      "files": [
        "backend/systems/data/__init__.py",
        "backend/systems/data/routers/data_router.py",
        "backend/systems/data/routers/__init__.py",
        "backend/systems/data/utils/schema_validator.py",
        "backend/systems/data/utils/data_file_loader.py",
        "backend/systems/data/utils/__init__.py",
        "backend/systems/data/repositories/__init__.py",
        "backend/systems/data/repositories/data_repository.py",
        "backend/systems/data/models/models.py",
        "backend/systems/data/models/__init__.py",
        "backend/systems/data/models/config_models.py",
        "backend/systems/data/models/biome_models.py",
        "backend/systems/data/schemas/__init__.py",
        "backend/systems/data/events/event_handlers.py",
        "backend/systems/data/events/__init__.py",
        "backend/systems/data/events/event_publisher.py",
        "backend/systems/data/events/data_events.py",
        "backend/systems/data/loaders/game_data_registry.py",
        "backend/systems/data/loaders/__init__.py",
        "backend/systems/data/services/services.py",
        "backend/systems/data/services/data_service.py",
        "backend/systems/data/services/__init__.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "memory": {
      "name": "memory",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 4,
      "repositories_count": 1,
      "routers_count": 2,
      "schemas_count": 1,
      "utils_count": 7,
      "files": [
        "backend/systems/memory/__init__.py",
        "backend/systems/memory/routers/__init__.py",
        "backend/systems/memory/routers/memory_routes.py",
        "backend/systems/memory/memory_categories/memory_memory_categories.py",
        "backend/systems/memory/memory_categories/__init__.py",
        "backend/systems/memory/summarization_styles/memory_summarization_styles.py",
        "backend/systems/memory/summarization_styles/__init__.py",
        "backend/systems/memory/memory_associations/__init__.py",
        "backend/systems/memory/memory_associations/memory_memory_associations.py",
        "backend/systems/memory/utils/cognitive_frames.py",
        "backend/systems/memory/utils/__init__.py",
        "backend/systems/memory/utils/saliency_scoring.py",
        "backend/systems/memory/utils/memory_associations.py",
        "backend/systems/memory/utils/summarization_styles.py",
        "backend/systems/memory/utils/memory_categories.py",
        "backend/systems/memory/utils/memory_utils.py",
        "backend/systems/memory/repositories/__init__.py",
        "backend/systems/memory/models/models.py",
        "backend/systems/memory/models/__init__.py",
        "backend/systems/memory/saliency_scoring/__init__.py",
        "backend/systems/memory/saliency_scoring/memory_saliency_scoring.py",
        "backend/systems/memory/schemas/__init__.py",
        "backend/systems/memory/events/__init__.py",
        "backend/systems/memory/cognitive_frames/__init__.py",
        "backend/systems/memory/cognitive_frames/memory_cognitive_frames.py",
        "backend/systems/memory/services/services.py",
        "backend/systems/memory/services/memory.py",
        "backend/systems/memory/services/__init__.py",
        "backend/systems/memory/services/memory_manager_core.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "analytics": {
      "name": "analytics",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 3,
      "repositories_count": 2,
      "routers_count": 2,
      "schemas_count": 1,
      "utils_count": 1,
      "files": [
        "backend/systems/analytics/__init__.py",
        "backend/systems/analytics/routers/__init__.py",
        "backend/systems/analytics/routers/analytics_router.py",
        "backend/systems/analytics/utils/__init__.py",
        "backend/systems/analytics/repositories/__init__.py",
        "backend/systems/analytics/repositories/analytics_repository.py",
        "backend/systems/analytics/models/models.py",
        "backend/systems/analytics/models/__init__.py",
        "backend/systems/analytics/schemas/__init__.py",
        "backend/systems/analytics/events/__init__.py",
        "backend/systems/analytics/services/services.py",
        "backend/systems/analytics/services/__init__.py",
        "backend/systems/analytics/services/analytics_service.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "auth_user": {
      "name": "auth_user",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 4,
      "services_count": 6,
      "repositories_count": 1,
      "routers_count": 3,
      "schemas_count": 1,
      "utils_count": 4,
      "files": [
        "backend/systems/auth_user/__init__.py",
        "backend/systems/auth_user/routers/__init__.py",
        "backend/systems/auth_user/routers/auth_relationship_router.py",
        "backend/systems/auth_user/routers/auth_router.py",
        "backend/systems/auth_user/utils/auth_utils.py",
        "backend/systems/auth_user/utils/__init__.py",
        "backend/systems/auth_user/utils/validation_utils.py",
        "backend/systems/auth_user/utils/base.py",
        "backend/systems/auth_user/repositories/__init__.py",
        "backend/systems/auth_user/models/models.py",
        "backend/systems/auth_user/models/__init__.py",
        "backend/systems/auth_user/models/user_models.py",
        "backend/systems/auth_user/models/auth_relationship_models.py",
        "backend/systems/auth_user/schemas/__init__.py",
        "backend/systems/auth_user/events/__init__.py",
        "backend/systems/auth_user/services/auth_service.py",
        "backend/systems/auth_user/services/services.py",
        "backend/systems/auth_user/services/__init__.py",
        "backend/systems/auth_user/services/password_service.py",
        "backend/systems/auth_user/services/security_service.py",
        "backend/systems/auth_user/services/token_service.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "storage": {
      "name": "storage",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 6,
      "services_count": 2,
      "repositories_count": 1,
      "routers_count": 1,
      "schemas_count": 1,
      "utils_count": 1,
      "files": [
        "backend/systems/storage/__init__.py",
        "backend/systems/storage/routers/__init__.py",
        "backend/systems/storage/utils/__init__.py",
        "backend/systems/storage/repositories/__init__.py",
        "backend/systems/storage/models/models.py",
        "backend/systems/storage/models/storage_config.py",
        "backend/systems/storage/models/storage_bucket.py",
        "backend/systems/storage/models/__init__.py",
        "backend/systems/storage/models/file_record.py",
        "backend/systems/storage/models/cache_entry.py",
        "backend/systems/storage/schemas/__init__.py",
        "backend/systems/storage/events/__init__.py",
        "backend/systems/storage/services/services.py",
        "backend/systems/storage/services/__init__.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "llm": {
      "name": "llm",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 8,
      "repositories_count": 8,
      "routers_count": 1,
      "schemas_count": 1,
      "utils_count": 5,
      "files": [
        "backend/systems/llm/__init__.py",
        "backend/systems/llm/routers/__init__.py",
        "backend/systems/llm/middleware/__init__.py",
        "backend/systems/llm/middleware/event_integration.py",
        "backend/systems/llm/middleware/event_middleware.py",
        "backend/systems/llm/core/__init__.py",
        "backend/systems/llm/core/gpt_client.py",
        "backend/systems/llm/core/llm_core.py",
        "backend/systems/llm/core/dm_core.py",
        "backend/systems/llm/utils/memory_system.py",
        "backend/systems/llm/utils/__init__.py",
        "backend/systems/llm/utils/faction_system.py",
        "backend/systems/llm/utils/motif_system.py",
        "backend/systems/llm/utils/rumor_system.py",
        "backend/systems/llm/repositories/conversation_repository.py",
        "backend/systems/llm/repositories/integration_repository.py",
        "backend/systems/llm/repositories/__init__.py",
        "backend/systems/llm/repositories/gpt_repository.py",
        "backend/systems/llm/repositories/prompt_repository.py",
        "backend/systems/llm/repositories/event_repository.py",
        "backend/systems/llm/repositories/response_repository.py",
        "backend/systems/llm/repositories/context_repository.py",
        "backend/systems/llm/models/models.py",
        "backend/systems/llm/models/__init__.py",
        "backend/systems/llm/schemas/__init__.py",
        "backend/systems/llm/api/llm_router.py",
        "backend/systems/llm/api/__init__.py",
        "backend/systems/llm/api/dm_routes.py",
        "backend/systems/llm/events/__init__.py",
        "backend/systems/llm/services/services.py",
        "backend/systems/llm/services/conversation_service.py",
        "backend/systems/llm/services/gpt_client_service.py",
        "backend/systems/llm/services/__init__.py",
        "backend/systems/llm/services/llm_service.py",
        "backend/systems/llm/services/prompt_service.py",
        "backend/systems/llm/services/integration_service.py",
        "backend/systems/llm/services/event_processing_service.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "equipment": {
      "name": "equipment",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 2,
      "repositories_count": 1,
      "routers_count": 1,
      "schemas_count": 1,
      "utils_count": 5,
      "files": [
        "backend/systems/equipment/__init__.py",
        "backend/systems/equipment/routers/__init__.py",
        "backend/systems/equipment/utils/set_bonus_utils.py",
        "backend/systems/equipment/utils/identify_item_utils.py",
        "backend/systems/equipment/utils/durability_utils.py",
        "backend/systems/equipment/utils/__init__.py",
        "backend/systems/equipment/utils/inventory_utils.py",
        "backend/systems/equipment/repositories/__init__.py",
        "backend/systems/equipment/models/models.py",
        "backend/systems/equipment/models/__init__.py",
        "backend/systems/equipment/schemas/__init__.py",
        "backend/systems/equipment/events/__init__.py",
        "backend/systems/equipment/services/services.py",
        "backend/systems/equipment/services/__init__.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    },
    "dialogue": {
      "name": "dialogue",
      "has_models": true,
      "has_services": true,
      "has_repositories": true,
      "has_routers": true,
      "has_schemas": true,
      "has_utils": true,
      "has_init": true,
      "models_count": 2,
      "services_count": 19,
      "repositories_count": 1,
      "routers_count": 1,
      "schemas_count": 1,
      "utils_count": 1,
      "files": [
        "backend/systems/dialogue/__init__.py",
        "backend/systems/dialogue/routers/__init__.py",
        "backend/systems/dialogue/utils/__init__.py",
        "backend/systems/dialogue/repositories/__init__.py",
        "backend/systems/dialogue/models/models.py",
        "backend/systems/dialogue/models/__init__.py",
        "backend/systems/dialogue/schemas/__init__.py",
        "backend/systems/dialogue/events/__init__.py",
        "backend/systems/dialogue/services/analytics_integration.py",
        "backend/systems/dialogue/services/quest_integration.py",
        "backend/systems/dialogue/services/dialogue_system_new.py",
        "backend/systems/dialogue/services/services.py",
        "backend/systems/dialogue/services/population_integration.py",
        "backend/systems/dialogue/services/time_integration.py",
        "backend/systems/dialogue/services/war_integration.py",
        "backend/systems/dialogue/services/dialogue_system.py",
        "backend/systems/dialogue/services/conversation.py",
        "backend/systems/dialogue/services/region_integration.py",
        "backend/systems/dialogue/services/poi_integration.py",
        "backend/systems/dialogue/services/__init__.py",
        "backend/systems/dialogue/services/faction_integration.py",
        "backend/systems/dialogue/services/memory_integration.py",
        "backend/systems/dialogue/services/world_state_integration.py",
        "backend/systems/dialogue/services/rumor_integration.py",
        "backend/systems/dialogue/services/relationship_integration.py",
        "backend/systems/dialogue/services/dialogue_manager.py",
        "backend/systems/dialogue/services/motif_integration.py"
      ],
      "issues": [],
      "misplaced_tests": [],
      "import_issues": [],
      "missing_components": []
    }
  },
  "imports": [
    {
      "file_path": "backend/systems/combat/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/combat/models/stats.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.Boolean",
        "sqlalchemy.Float",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.JSON",
        "sqlalchemy.orm.relationship",
        "sqlalchemy.dialects.postgresql.UUID",
        "backend.systems.shared.models.base.CoreBaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.dialects.postgresql"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/combat/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.combat.models.CombatEntity",
        "backend.systems.combat.models.CombatModel",
        "backend.systems.combat.models.CreateCombatRequest",
        "backend.systems.combat.models.UpdateCombatRequest",
        "backend.systems.combat.models.CombatResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.CombatNotFoundError",
        "backend.systems.shared.exceptions.CombatValidationError",
        "backend.systems.shared.exceptions.CombatConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/diplomacy/repositories/db_repository.py",
      "imports": [
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "uuid.UUID",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.desc",
        "sqlalchemy.asc",
        "sqlalchemy.orm.Session",
        "sqlalchemy.exc.IntegrityError",
        "backend.systems.diplomacy.db_models.DiplomaticRelationship",
        "backend.systems.diplomacy.db_models.Treaty",
        "backend.systems.diplomacy.db_models.Negotiation",
        "backend.systems.diplomacy.db_models.DiplomaticEvent",
        "backend.systems.diplomacy.db_models.TreatyViolation",
        "backend.systems.diplomacy.db_models.DiplomaticIncident",
        "backend.systems.diplomacy.db_models.Ultimatum",
        "backend.systems.diplomacy.db_models.Sanction",
        "backend.systems.diplomacy.models.DiplomaticStatus",
        "backend.systems.diplomacy.models.TreatyType",
        "backend.systems.diplomacy.models.TreatyStatus",
        "backend.systems.diplomacy.models.NegotiationStatus",
        "backend.systems.diplomacy.models.DiplomaticEventType",
        "backend.systems.diplomacy.models.TreatyViolationType",
        "backend.systems.diplomacy.models.DiplomaticIncidentType",
        "backend.systems.diplomacy.models.DiplomaticIncidentSeverity",
        "backend.systems.diplomacy.models.UltimatumStatus",
        "backend.systems.diplomacy.models.SanctionType",
        "backend.systems.diplomacy.models.SanctionStatus",
        "backend.systems.diplomacy.models.Treaty",
        "backend.systems.diplomacy.models.Negotiation",
        "backend.systems.diplomacy.models.DiplomaticEvent",
        "backend.systems.diplomacy.models.TreatyViolation",
        "backend.systems.diplomacy.models.DiplomaticIncident",
        "backend.systems.diplomacy.models.Ultimatum",
        "backend.systems.diplomacy.models.Sanction"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.exc"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/diplomacy/models/diplomacy_model.py",
      "imports": [
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.DateTime",
        "sqlalchemy.Text",
        "sqlalchemy.ext.declarative.declarative_base",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.Optional"
      ],
      "non_canonical_imports": [
        "sqlalchemy.ext.declarative"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/diplomacy/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/diplomacy/models/db_models.py",
      "imports": [
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "uuid.uuid4",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.Float",
        "sqlalchemy.Boolean",
        "sqlalchemy.DateTime",
        "sqlalchemy.Text",
        "sqlalchemy.JSON",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.Enum",
        "sqlalchemy.UniqueConstraint",
        "sqlalchemy.Index",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.orm.relationship",
        "sqlalchemy.sql.func",
        "sqlalchemy.ext.declarative.declarative_base",
        "backend.systems.diplomacy.models.DiplomaticStatus",
        "backend.systems.diplomacy.models.TreatyType",
        "backend.systems.diplomacy.models.TreatyStatus",
        "backend.systems.diplomacy.models.NegotiationStatus",
        "backend.systems.diplomacy.models.DiplomaticEventType",
        "backend.systems.diplomacy.models.TreatyViolationType",
        "backend.systems.diplomacy.models.DiplomaticIncidentType",
        "backend.systems.diplomacy.models.DiplomaticIncidentSeverity",
        "backend.systems.diplomacy.models.UltimatumStatus",
        "backend.systems.diplomacy.models.SanctionType",
        "backend.systems.diplomacy.models.SanctionStatus"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.orm",
        "sqlalchemy.sql",
        "sqlalchemy.ext.declarative"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/diplomacy/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.diplomacy.models.DiplomacyEntity",
        "backend.systems.diplomacy.models.DiplomacyModel",
        "backend.systems.diplomacy.models.CreateDiplomacyRequest",
        "backend.systems.diplomacy.models.UpdateDiplomacyRequest",
        "backend.systems.diplomacy.models.DiplomacyResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.DiplomacyNotFoundError",
        "backend.systems.shared.exceptions.DiplomacyValidationError",
        "backend.systems.shared.exceptions.DiplomacyConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/diplomacy/services/diplomacy_service.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "sqlalchemy.orm.Session",
        "backend.systems.diplomacymodels.diplomacy_model.DiplomacyModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/population/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "enum.Enum",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/population/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.population.models.PopulationEntity",
        "backend.systems.population.models.PopulationModel",
        "backend.systems.population.models.CreatePopulationRequest",
        "backend.systems.population.models.UpdatePopulationRequest",
        "backend.systems.population.models.PopulationResponse",
        "backend.systems.population.utils.population_utils.calculate_war_impact",
        "backend.systems.population.utils.population_utils.calculate_catastrophe_impact",
        "backend.systems.population.utils.population_utils.calculate_resource_consumption",
        "backend.systems.population.utils.population_utils.calculate_resource_shortage_impact",
        "backend.systems.population.utils.population_utils.calculate_migration_impact",
        "backend.systems.population.utils.population_utils.calculate_seasonal_growth_modifier",
        "backend.systems.population.utils.population_utils.calculate_seasonal_death_rate_modifier",
        "backend.systems.population.utils.population_utils.WarImpactSeverity",
        "backend.systems.population.utils.population_utils.CatastropheType",
        "backend.systems.population.utils.state_utils.is_valid_transition",
        "backend.systems.population.utils.state_utils.is_valid_state_progression",
        "backend.systems.population.utils.state_utils.estimate_time_to_state",
        "backend.systems.population.utils.state_utils.get_poi_status_description",
        "backend.systems.population.utils.state_utils.PopulationState",
        "backend.systems.population.utils.state_utils.StateTransition",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.PopulationNotFoundError",
        "backend.systems.shared.exceptions.PopulationValidationError",
        "backend.systems.shared.exceptions.PopulationConflictError",
        "backend.systems.population.utils.calculate_war_impact",
        "backend.systems.population.utils.calculate_catastrophe_impact",
        "backend.systems.population.utils.calculate_resource_shortage_impact",
        "backend.systems.population.utils.calculate_migration_impact",
        "backend.systems.population.utils.is_valid_transition",
        "backend.systems.population.utils.is_valid_state_progression",
        "backend.systems.population.utils.estimate_time_to_state"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/routers/station_router.py",
      "imports": [
        "typing.List",
        "typing.Optional",
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "fastapi.Depends",
        "fastapi.Query",
        "fastapi.status",
        "fastapi.responses.JSONResponse",
        "uuid",
        "datetime.datetime",
        "backend.systems.crafting.schemas.StationResponseSchema",
        "backend.systems.crafting.schemas.StationListResponseSchema",
        "backend.systems.crafting.schemas.StationSearchSchema",
        "backend.systems.crafting.schemas.StationUseSchema",
        "backend.systems.crafting.schemas.StationUseResponseSchema",
        "backend.systems.crafting.schemas.StationStatusSchema",
        "backend.systems.crafting.schemas.StationUpgradeSchema",
        "backend.systems.crafting.schemas.StationUpgradeResponseSchema",
        "backend.systems.crafting.schemas.StationCreateSchema",
        "backend.systems.crafting.schemas.StationUpdateSchema",
        "backend.systems.crafting.schemas.StationMaintenanceSchema",
        "backend.systems.crafting.schemas.StationMaintenanceResponseSchema",
        "backend.systems.crafting.repositories.StationRepository",
        "backend.systems.crafting.services.StationService"
      ],
      "non_canonical_imports": [
        "fastapi.responses"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/routers/recipe_router.py",
      "imports": [
        "typing.List",
        "typing.Optional",
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "fastapi.Depends",
        "fastapi.Query",
        "fastapi.status",
        "fastapi.responses.JSONResponse",
        "uuid",
        "backend.systems.crafting.schemas.RecipeResponseSchema",
        "backend.systems.crafting.schemas.RecipeListResponseSchema",
        "backend.systems.crafting.schemas.RecipeSearchSchema",
        "backend.systems.crafting.schemas.RecipeDiscoverySchema",
        "backend.systems.crafting.schemas.RecipeDiscoveryResponseSchema",
        "backend.systems.crafting.schemas.CraftabilityCheckSchema",
        "backend.systems.crafting.schemas.CraftabilityResponseSchema",
        "backend.systems.crafting.schemas.RecipeCreateSchema",
        "backend.systems.crafting.schemas.RecipeUpdateSchema",
        "backend.systems.crafting.repositories.RecipeRepository",
        "backend.systems.crafting.services.CraftingService"
      ],
      "non_canonical_imports": [
        "fastapi.responses"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/routers/crafting_router.py",
      "imports": [
        "typing.List",
        "typing.Optional",
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "fastapi.Depends",
        "fastapi.Query",
        "fastapi.status",
        "fastapi.responses.JSONResponse",
        "uuid",
        "backend.systems.crafting.schemas.CraftingStartSchema",
        "backend.systems.crafting.schemas.CraftingStartResponseSchema",
        "backend.systems.crafting.schemas.CraftingStatusResponseSchema",
        "backend.systems.crafting.schemas.CraftingCompleteSchema",
        "backend.systems.crafting.schemas.CraftingCompleteResponseSchema",
        "backend.systems.crafting.schemas.CraftingCancelSchema",
        "backend.systems.crafting.schemas.CraftingCancelResponseSchema",
        "backend.systems.crafting.schemas.CraftingQueueSchema",
        "backend.systems.crafting.schemas.CraftingQueueResponseSchema",
        "backend.systems.crafting.schemas.CraftingBatchSchema",
        "backend.systems.crafting.schemas.CraftingBatchResponseSchema",
        "backend.systems.crafting.schemas.RecipeListResponseSchema",
        "backend.systems.crafting.services.CraftingService",
        "backend.systems.crafting.repositories.RecipeRepository",
        "datetime.datetime",
        "datetime.timedelta",
        "datetime.datetime",
        "backend.systems.crafting.schemas.CraftingProgressSchema",
        "datetime.datetime",
        "backend.systems.crafting.schemas.CraftingResultItemSchema",
        "datetime.datetime",
        "datetime.datetime",
        "backend.systems.crafting.schemas.RecipeResponseSchema"
      ],
      "non_canonical_imports": [
        "fastapi.responses"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/migrations/001_create_crafting_tables.py",
      "imports": [
        "alembic.op",
        "sqlalchemy",
        "sqlalchemy.dialects.postgresql"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/repositories/crafting_repository.py",
      "imports": [
        "typing.List",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "sqlalchemy.orm.Session",
        "backend.systems.shared.models.base.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/repositories/base_repository.py",
      "imports": [
        "typing.Type",
        "typing.TypeVar",
        "typing.Generic",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "sqlalchemy.orm.Session",
        "sqlalchemy.exc.SQLAlchemyError",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "backend.systems.shared.database.base.BaseModel",
        "backend.systems.shared.database.base.SessionManager"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.exc"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/repositories/recipe_repository.py",
      "imports": [
        "typing.List",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "sqlalchemy.orm.Session",
        "sqlalchemy.orm.joinedload",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "backend.systems.crafting.models.recipe.CraftingRecipe",
        "backend.systems.crafting.repositories.base_repository.BaseRepository"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/repositories/station_repository.py",
      "imports": [
        "typing.List",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "backend.systems.crafting.models.station.CraftingStation",
        "backend.systems.crafting.repositories.base_repository.BaseRepository"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/models/ingredient.py",
      "imports": [
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.Boolean",
        "sqlalchemy.JSON",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.database.base.BaseModel",
        "backend.systems.shared.database.base.GUID"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/models/result.py",
      "imports": [
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.Float",
        "sqlalchemy.JSON",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.database.base.BaseModel",
        "backend.systems.shared.database.base.GUID"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/models/station.py",
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.Boolean",
        "sqlalchemy.JSON",
        "sqlalchemy.Float",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.database.base.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/models/recipe.py",
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.Boolean",
        "sqlalchemy.JSON",
        "sqlalchemy.Float",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.database.base.BaseModel",
        "backend.systems.crafting.models.ingredient.CraftingIngredient",
        "backend.systems.crafting.models.result.CraftingResult"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/data/progression_manager.py",
      "imports": [
        "json",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "logging",
        "sqlalchemy.orm.Session",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.crafting.data.cache_manager.get_progression_cache"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/data/recipe_loader.py",
      "imports": [
        "json",
        "yaml",
        "os",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "pathlib.Path",
        "logging",
        "sqlalchemy.orm.Session",
        "backend.systems.crafting.models.recipe.CraftingRecipe",
        "backend.systems.crafting.models.ingredient.CraftingIngredient",
        "backend.systems.crafting.models.result.CraftingResult",
        "backend.systems.crafting.repositories.recipe_repository.RecipeRepository",
        "backend.systems.shared.database.base.get_db_session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/data/station_loader.py",
      "imports": [
        "json",
        "yaml",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "pathlib.Path",
        "logging",
        "sqlalchemy.orm.Session",
        "backend.systems.crafting.models.station.CraftingStation",
        "backend.systems.crafting.repositories.station_repository.StationRepository",
        "backend.systems.shared.database.base.get_db_session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/crafting/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.crafting.models.CraftingEntity",
        "backend.systems.crafting.models.CraftingModel",
        "backend.systems.crafting.models.CreateCraftingRequest",
        "backend.systems.crafting.models.UpdateCraftingRequest",
        "backend.systems.crafting.models.CraftingResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.CraftingNotFoundError",
        "backend.systems.shared.exceptions.CraftingValidationError",
        "backend.systems.shared.exceptions.CraftingConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/loot/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/loot/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.loot.models.LootEntity",
        "backend.systems.loot.models.LootModel",
        "backend.systems.loot.models.CreateLootRequest",
        "backend.systems.loot.models.UpdateLootRequest",
        "backend.systems.loot.models.LootResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.LootNotFoundError",
        "backend.systems.shared.exceptions.LootValidationError",
        "backend.systems.shared.exceptions.LootConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/npc/routers/npc_location_router.py",
      "imports": [
        "typing.Dict",
        "typing.Any",
        "uuid.UUID",
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "backend.systems.npc.services.npc_location_service.NpcLocationService",
        "backend.systems.shared.database.base.get_db_session",
        "sqlalchemy.orm.Session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/npc/repositories/npc_location_repository.py",
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "typing.Optional",
        "uuid.UUID",
        "datetime.datetime",
        "datetime.timedelta",
        "sqlalchemy.orm.Session",
        "sqlalchemy.desc",
        "sqlalchemy.func",
        "logging",
        "backend.systems.npc.models.models.NpcEntity",
        "backend.systems.npc.models.models.NpcLocationHistory",
        "backend.systems.shared.exceptions.NpcNotFoundError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/npc/repositories/npc_memory_repository.py",
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "uuid.UUID",
        "datetime.datetime",
        "datetime.timedelta",
        "sqlalchemy.orm.Session",
        "sqlalchemy.desc",
        "sqlalchemy.func",
        "logging",
        "backend.systems.npc.models.models.NpcMemory",
        "backend.systems.npc.models.models.NpcEntity",
        "backend.systems.shared.exceptions.NpcNotFoundError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/npc/repositories/npc_repository.py",
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "datetime.timedelta",
        "sqlalchemy.orm.Session",
        "sqlalchemy.orm.joinedload",
        "sqlalchemy.desc",
        "sqlalchemy.func",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.exc.IntegrityError",
        "logging",
        "backend.systems.npc.models.models.NpcEntity",
        "backend.systems.npc.models.models.NpcMemory",
        "backend.systems.npc.models.models.NpcFactionAffiliation",
        "backend.systems.npc.models.models.NpcRumor",
        "backend.systems.npc.models.models.NpcLocationHistory",
        "backend.systems.npc.models.models.NpcMotif",
        "backend.systems.npc.models.models.CreateNpcRequest",
        "backend.systems.npc.models.models.UpdateNpcRequest",
        "backend.systems.npc.models.models.NpcResponse",
        "backend.systems.shared.exceptions.NpcNotFoundError",
        "backend.systems.shared.exceptions.NpcValidationError",
        "backend.systems.shared.exceptions.NpcConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.orm",
        "sqlalchemy.exc"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/npc/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.Float",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.database.base.Base",
        "backend.systems.shared.database.base.UUIDMixin",
        "backend.systems.shared.database.base.TimestampMixin"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/npc/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.npc.models.NpcEntity",
        "backend.systems.npc.models.NpcModel",
        "backend.systems.npc.models.CreateNpcRequest",
        "backend.systems.npc.models.UpdateNpcRequest",
        "backend.systems.npc.models.NpcResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.NpcNotFoundError",
        "backend.systems.shared.exceptions.NpcValidationError",
        "backend.systems.shared.exceptions.NpcConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/npc/services/npc_service.py",
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "logging",
        "backend.systems.npc.models.models.NpcEntity",
        "backend.systems.npc.models.models.CreateNpcRequest",
        "backend.systems.npc.models.models.UpdateNpcRequest",
        "backend.systems.npc.models.models.NpcResponse",
        "backend.systems.shared.exceptions.NpcNotFoundError",
        "backend.systems.shared.exceptions.NpcValidationError",
        "backend.systems.shared.exceptions.NpcConflictError",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.npc.repositories.npc_repository.NPCRepository",
        "backend.systems.npc.repositories.npc_memory_repository.NPCMemoryRepository",
        "backend.systems.npc.repositories.npc_location_repository.NPCLocationRepository",
        "backend.systems.npc.events.event_publisher.get_npc_event_publisher"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/world_state/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/world_state/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.world_state.models.World_StateEntity",
        "backend.systems.world_state.models.World_StateModel",
        "backend.systems.world_state.models.CreateWorld_StateRequest",
        "backend.systems.world_state.models.UpdateWorld_StateRequest",
        "backend.systems.world_state.models.World_StateResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.World_StateNotFoundError",
        "backend.systems.shared.exceptions.World_StateValidationError",
        "backend.systems.shared.exceptions.World_StateConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/poi/repositories/base_repository.py",
      "imports": [
        "logging",
        "typing.Any",
        "typing.Dict",
        "typing.Generic",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Type",
        "typing.TypeVar",
        "typing.Union",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.desc",
        "sqlalchemy.asc",
        "sqlalchemy.func",
        "sqlalchemy.text",
        "sqlalchemy.orm.Session",
        "sqlalchemy.exc.SQLAlchemyError",
        "backend.systems.shared.database.base.Base",
        "backend.systems.shared.database.base.get_db",
        "backend.systems.shared.exceptions.RepositoryError",
        "backend.systems.shared.exceptions.EntityNotFoundError",
        "backend.systems.shared.exceptions.EntityConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.exc"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/poi/repositories/poi_repository.py",
      "imports": [
        "logging",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "sqlalchemy.orm.Session",
        "sqlalchemy.exc.SQLAlchemyError",
        "backend.systems.poi.models.models.PoiEntity",
        "backend.systems.poi.models.models.POIType",
        "backend.systems.poi.models.models.POIState",
        "backend.systems.poi.models.models.POIInteractionType",
        "backend.systems.poi.models.models.CreatePoiRequest",
        "backend.systems.poi.models.models.UpdatePoiRequest",
        "backend.systems.poi.repositories.base_repository.PoiBaseRepository",
        "backend.systems.shared.exceptions.RepositoryError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.exc"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/poi/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "enum.Enum",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/poi/services/migration_service.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Set",
        "typing.Any",
        "uuid.UUID",
        "enum.Enum",
        "dataclasses.dataclass",
        "dataclasses.field",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "random",
        "math",
        "backend.systems.poi.models.models.PoiEntity",
        "backend.systems.poi.models.models.POIType",
        "backend.systems.poi.models.models.POIState",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.events.events.event_dispatcher.EventDispatcher",
        "sqlalchemy.orm.Session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/poi/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.poi.models.PoiEntity",
        "backend.systems.poi.models.PoiModel",
        "backend.systems.poi.models.CreatePoiRequest",
        "backend.systems.poi.models.UpdatePoiRequest",
        "backend.systems.poi.models.PoiResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.PoiNotFoundError",
        "backend.systems.shared.exceptions.PoiValidationError",
        "backend.systems.shared.exceptions.PoiConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/poi/services/resource_management_service.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Set",
        "typing.Any",
        "uuid.UUID",
        "enum.Enum",
        "dataclasses.dataclass",
        "dataclasses.field",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "decimal.Decimal",
        "backend.systems.poi.models.models.PoiEntity",
        "backend.systems.poi.models.models.POIType",
        "backend.systems.poi.models.models.POIState",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.events.events.event_dispatcher.EventDispatcher",
        "sqlalchemy.orm.Session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/poi/services/poi_generator.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Set",
        "typing.Any",
        "typing.Callable",
        "uuid.UUID",
        "uuid.uuid4",
        "enum.Enum",
        "dataclasses.dataclass",
        "dataclasses.field",
        "logging",
        "datetime.datetime",
        "random",
        "math",
        "backend.systems.poi.models.models.PoiEntity",
        "backend.systems.poi.models.models.POIType",
        "backend.systems.poi.models.models.POIState",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.events.events.event_dispatcher.EventDispatcher",
        "sqlalchemy.orm.Session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/poi/services/event_integration_service.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Callable",
        "typing.Set",
        "uuid.UUID",
        "uuid.uuid4",
        "enum.Enum",
        "dataclasses.dataclass",
        "dataclasses.field",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "asyncio",
        "functools.wraps",
        "backend.systems.poi.models.models.PoiEntity",
        "backend.systems.poi.models.models.POIType",
        "backend.systems.poi.models.models.POIState",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.shared.events.event_dispatcher.EventDispatcher",
        "sqlalchemy.orm.Session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/poi/services/faction_influence_service.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Set",
        "typing.Any",
        "uuid.UUID",
        "uuid.uuid4",
        "enum.Enum",
        "dataclasses.dataclass",
        "dataclasses.field",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "random",
        "math",
        "backend.systems.poi.models.models.PoiEntity",
        "backend.systems.poi.models.models.POIType",
        "backend.systems.poi.models.models.POIState",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.events.events.event_dispatcher.EventDispatcher",
        "sqlalchemy.orm.Session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/poi/services/landmark_service.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Set",
        "typing.Any",
        "typing.Callable",
        "uuid.UUID",
        "uuid.uuid4",
        "enum.Enum",
        "dataclasses.dataclass",
        "dataclasses.field",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "random",
        "math",
        "backend.systems.poi.models.models.PoiEntity",
        "backend.systems.poi.models.models.POIType",
        "backend.systems.poi.models.models.POIState",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.events.events.event_dispatcher.EventDispatcher",
        "sqlalchemy.orm.Session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/poi/services/unity_frontend_integration.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "uuid.uuid4",
        "enum.Enum",
        "dataclasses.dataclass",
        "dataclasses.field",
        "dataclasses.asdict",
        "logging",
        "datetime.datetime",
        "json",
        "asyncio",
        "backend.systems.poi.models.models.PoiEntity",
        "backend.systems.poi.models.models.POIType",
        "backend.systems.poi.models.models.POIState",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.shared.events.event_dispatcher.EventDispatcher",
        "sqlalchemy.orm.Session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/poi/services/metropolitan_spread_service.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Set",
        "typing.Any",
        "uuid.UUID",
        "enum.Enum",
        "dataclasses.dataclass",
        "math",
        "logging",
        "datetime.datetime",
        "backend.systems.poi.models.models.PoiEntity",
        "backend.systems.poi.models.models.POIType",
        "backend.systems.poi.models.models.POIState",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.events.events.event_dispatcher.EventDispatcher",
        "sqlalchemy.orm.Session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/poi/services/lifecycle_events_service.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Set",
        "typing.Any",
        "typing.Callable",
        "uuid.UUID",
        "uuid.uuid4",
        "enum.Enum",
        "dataclasses.dataclass",
        "dataclasses.field",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "random",
        "backend.systems.poi.models.models.PoiEntity",
        "backend.systems.poi.models.models.POIType",
        "backend.systems.poi.models.models.POIState",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.events.events.event_dispatcher.EventDispatcher",
        "sqlalchemy.orm.Session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/character/routers/character_router.py",
      "imports": [
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.Query",
        "fastapi.Path",
        "sqlalchemy.orm.Session",
        "typing.List",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "logging",
        "backend.systems.shared.database.base.get_db",
        "backend.systems.character.core.character_model.Character",
        "backend.systems.character.models.character.Character",
        "backend.systems.character.services.character_service.CharacterService",
        "backend.systems.character.schemas.character_schemas.CharacterCreateSchema",
        "backend.systems.character.schemas.character_schemas.CharacterUpdateSchema",
        "backend.systems.character.schemas.character_schemas.CharacterResponseSchema",
        "backend.systems.character.schemas.character_schemas.CharacterListResponseSchema"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/character/routers/relationship_router.py",
      "imports": [
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.Query",
        "fastapi.Path",
        "sqlalchemy.orm.Session",
        "typing.List",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "logging",
        "backend.systems.shared.database.base.get_db",
        "backend.systems.character.services.character_service.CharacterService"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/character/database/setup.py",
      "imports": [
        "sqlalchemy.ext.asyncio.create_async_engine",
        "sqlalchemy.ext.asyncio.AsyncSession",
        "sqlalchemy.orm.sessionmaker",
        "backend.systems.shared.config.config"
      ],
      "non_canonical_imports": [
        "sqlalchemy.ext.asyncio",
        "sqlalchemy.ext.asyncio",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/character/core/character_builder_class.py",
      "imports": [
        "os",
        "random",
        "datetime.datetime",
        "backend.systems.shared.rules.rules_utils.calculate_dr",
        "uuid.uuid4",
        "uuid",
        "backend.systems.shared.utils.json_utils.load_json",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "sqlalchemy.orm.exc.NoResultFound",
        "backend.systems.character.Character",
        "backend.systems.user.User",
        "backend.systems.party.Party",
        "backend.systems.world.Region",
        "backend.systems.quest.Quest",
        "backend.systems.spell.Spell",
        "backend.systems.inventory.InventoryItem",
        "backend.systems.save.SaveGame",
        "uuid"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm.exc"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/character/repositories/character_repository.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "sqlalchemy.orm.Session",
        "sqlalchemy.orm.Query",
        "sqlalchemy.exc.SQLAlchemyError",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.shared.utils.error.NotFoundError",
        "backend.systems.shared.utils.error.DatabaseError",
        "backend.systems.character.models.character.Character",
        "backend.systems.character.models.character.Skill"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.orm",
        "sqlalchemy.exc"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/character/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/character/models/character.py",
      "imports": [
        "datetime.datetime",
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.JSON",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.Table",
        "sqlalchemy.DateTime",
        "sqlalchemy.orm.relationship",
        "typing.List",
        "typing.Dict",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "uuid.uuid4",
        "uuid.UUID",
        "backend.systems.shared.database.base.Base",
        "sqlalchemy.ext.declarative.declarative_base",
        "backend.systems.character.core.character_builder_class.CharacterBuilder",
        "backend.systems.character.core.character_builder_class.RACES_DATA",
        "backend.systems.character.core.character_builder_class.FEATS_LIST",
        "backend.systems.character.services.relationship_service.RelationshipService",
        "backend.systems.character.services.relationship_service.RelationshipService",
        "backend.systems.character.models.relationship.RelationshipType",
        "backend.systems.character.services.relationship_service.RelationshipService",
        "backend.systems.character.models.relationship.RelationshipType",
        "backend.systems.character.services.relationship_service.RelationshipService",
        "backend.systems.character.services.mood_service.MoodService",
        "backend.systems.character.services.mood_service.MoodService",
        "backend.systems.character.services.mood_service.MoodService",
        "backend.systems.character.services.goal_service.GoalService",
        "backend.systems.character.services.goal_service.GoalService",
        "backend.systems.character.services.goal_service.GoalService",
        "backend.systems.character.models.visual_model.CharacterModel",
        "backend.systems.character.models.visual_model.CharacterModel",
        "backend.systems.shared.database.base.get_db_session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.ext.declarative"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/character/api/party_api.py",
      "imports": [
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.status",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "uuid.UUID",
        "sqlalchemy.orm.Session",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.character.services.party_service.PartyService",
        "backend.systems.shared.utils.error.NotFoundError",
        "backend.systems.shared.utils.error.DatabaseError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/character/api/character_api.py",
      "imports": [
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.status",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "uuid.UUID",
        "sqlalchemy.orm.Session",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.character.services.character_service.CharacterService",
        "backend.systems.character.models.character_builder.CharacterBuilder",
        "backend.systems.character.api.schemas.CharacterCreate",
        "backend.systems.character.api.schemas.CharacterResponse",
        "backend.systems.character.api.schemas.CharacterUpdate",
        "backend.systems.character.api.schemas.CharacterList"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/character/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.character.models.CharacterEntity",
        "backend.systems.character.models.CharacterModel",
        "backend.systems.character.models.CreateCharacterRequest",
        "backend.systems.character.models.UpdateCharacterRequest",
        "backend.systems.character.models.CharacterResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.CharacterNotFoundError",
        "backend.systems.shared.exceptions.CharacterValidationError",
        "backend.systems.shared.exceptions.CharacterConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/character/services/character_service.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "typing.Union",
        "sqlalchemy.orm.Session",
        "sqlalchemy.exc.SQLAlchemyError",
        "uuid.UUID",
        "uuid.uuid4",
        "random",
        "math",
        "datetime.datetime",
        "backend.systems.character.models.character.Character",
        "backend.systems.character.models.character.Skill",
        "backend.systems.character.models.character_builder.CharacterBuilder",
        "backend.systems.character.models.relationship.Relationship",
        "backend.systems.character.models.relationship.RelationshipType",
        "backend.systems.character.models.mood.CharacterMood",
        "backend.systems.character.models.mood.EmotionalState",
        "backend.systems.character.models.mood.MoodIntensity",
        "backend.systems.character.models.mood.MoodModifier",
        "backend.systems.character.models.goal.Goal",
        "backend.systems.character.models.goal.GoalType",
        "backend.systems.character.models.goal.GoalPriority",
        "backend.systems.character.models.goal.GoalStatus",
        "backend.systems.character.services.relationship_service.RelationshipService",
        "backend.systems.character.services.mood_service.MoodService",
        "backend.systems.character.services.goal_service.GoalService",
        "backend.systems.events.event_dispatcher.EventDispatcher",
        "backend.systems.events.canonical_events.CharacterCreated",
        "backend.systems.events.canonical_events.CharacterLeveledUp",
        "backend.systems.events.canonical_events.CharacterUpdated",
        "backend.systems.events.canonical_events.CharacterDeleted",
        "backend.systems.events.canonical_events.MoodChanged",
        "backend.systems.events.canonical_events.GoalCreated",
        "backend.systems.events.canonical_events.GoalCompleted",
        "backend.systems.events.canonical_events.GoalFailed",
        "backend.systems.events.canonical_events.GoalProgressUpdated",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.shared.utils.error.NotFoundError",
        "backend.systems.shared.utils.error.DatabaseError",
        "backend.systems.shared.utils.error.ValidationError",
        "backend.systems.shared.rules.balance_constants",
        "backend.systems.shared.rules.load_data",
        "backend.systems.character.models.visual_model.CharacterModel",
        "backend.systems.character.models.visual_model.CharacterModel",
        "sqlalchemy.orm.attributes.flag_modified"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.exc",
        "sqlalchemy.orm.attributes"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/character/services/party_service.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "sqlalchemy.orm.Session",
        "sqlalchemy.exc.SQLAlchemyError",
        "uuid.UUID",
        "uuid.uuid4",
        "datetime.datetime",
        "backend.systems.shared.database.base.get_db_session",
        "backend.systems.shared.utils.error.NotFoundError",
        "backend.systems.shared.utils.error.DatabaseError",
        "backend.systems.shared.utils.error.ValidationError",
        "backend.systems.character.models.character.Character",
        "backend.systems.memory.memory_utils.log_permanent_memory"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.exc"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/region/models.py",
      "imports": [
        "json",
        "uuid",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Tuple",
        "enum.Enum",
        "dataclasses.dataclass",
        "dataclasses.field",
        "uuid.UUID",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.Float",
        "sqlalchemy.Boolean",
        "sqlalchemy.DateTime",
        "sqlalchemy.JSON",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.Text",
        "sqlalchemy.Enum",
        "sqlalchemy.Index",
        "sqlalchemy.orm.relationship",
        "sqlalchemy.orm.declarative_base",
        "sqlalchemy.ext.hybrid.hybrid_property",
        "pydantic.BaseModel",
        "pydantic.Field",
        "backend.systems.shared.database.base.BaseModel",
        "backend.systems.shared.database.base.UUIDMixin",
        "backend.systems.shared.database.base.GUID",
        "math"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.orm",
        "sqlalchemy.ext.hybrid"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/region/migrations/001_create_region_tables.py",
      "imports": [
        "alembic.op",
        "sqlalchemy",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/region/repositories/region_repository.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.orm.Query",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "sqlalchemy.exc.SQLAlchemyError",
        "backend.systems.shared.database.Base",
        "backend.systems.shared.database.get_db_session",
        "backend.systems.shared.repositories.BaseRepository",
        "backend.systems.shared.exceptions.RegionNotFoundError",
        "backend.systems.shared.exceptions.RegionValidationError",
        "backend.systems.shared.exceptions.RegionConflictError",
        "backend.systems.shared.exceptions.RepositoryError",
        "backend.systems.region.models.models.RegionEntity",
        "backend.systems.region.models.models.ContinentEntity",
        "backend.systems.region.models.models.RegionMetadata",
        "backend.systems.region.models.models.ContinentMetadata",
        "backend.systems.region.models.models.HexCoordinate",
        "backend.systems.region.models.models.RegionType",
        "backend.systems.region.models.models.ClimateType"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.orm",
        "sqlalchemy.exc"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/region/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "enum.Enum",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.Float",
        "sqlalchemy.JSON",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel",
        "backend.systems.shared.database.base.Base",
        "backend.systems.shared.database.base.TimestampMixin",
        "backend.systems.shared.database.base.UUIDMixin"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/region/schemas/__init__.py",
      "imports": [
        "models.models.HexCoordinateSchema",
        "models.models.CoordinateSchema",
        "models.models.CreateRegionRequest",
        "models.models.UpdateRegionRequest",
        "models.models.RegionResponse",
        "models.models.RegionListResponse"
      ],
      "non_canonical_imports": [
        "models.models",
        "models.models",
        "models.models",
        "models.models",
        "models.models",
        "models.models",
        "models.models",
        "models.models",
        "models.models",
        "models.models",
        "models.models",
        "models.models"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/region/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "backend.systems.region.models.models.RegionEntity",
        "backend.systems.region.models.models.ContinentEntity",
        "backend.systems.region.models.models.RegionMetadata",
        "backend.systems.region.models.models.ContinentMetadata",
        "backend.systems.region.models.models.CreateRegionRequest",
        "backend.systems.region.models.models.UpdateRegionRequest",
        "backend.systems.region.models.models.RegionResponse",
        "backend.systems.region.models.models.RegionType",
        "backend.systems.region.models.models.HexCoordinate",
        "backend.systems.region.repositories.region_repository.RegionRepository",
        "backend.systems.shared.exceptions.RegionNotFoundError",
        "backend.systems.shared.exceptions.RegionValidationError",
        "backend.systems.shared.exceptions.RegionConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/religion/routers/religion_router.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "uuid.UUID",
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.Query",
        "fastapi.status",
        "fastapi.responses.JSONResponse",
        "sqlalchemy.orm.Session",
        "backend.systems.religion.models.CreateReligionRequest",
        "backend.systems.religion.models.UpdateReligionRequest",
        "backend.systems.religion.models.ReligionResponse",
        "backend.systems.religion.models.ReligionListResponse",
        "backend.systems.religion.models.DeityRequest",
        "backend.systems.religion.models.DeityResponse",
        "backend.systems.religion.models.ReligiousPracticeRequest",
        "backend.systems.religion.models.ReligiousPracticeResponse",
        "backend.systems.religion.models.ReligiousEventRequest",
        "backend.systems.religion.models.ReligiousEventResponse",
        "backend.systems.religion.models.ReligiousInfluenceRequest",
        "backend.systems.religion.models.ReligiousInfluenceResponse",
        "backend.systems.religion.services.ReligionService",
        "backend.systems.religion.services.get_religion_service",
        "backend.systems.religion.exceptions.ReligionNotFoundError",
        "backend.systems.religion.exceptions.ReligionValidationError",
        "backend.systems.religion.exceptions.ReligionConflictError",
        "datetime.datetime",
        "datetime.datetime",
        "datetime.datetime"
      ],
      "non_canonical_imports": [
        "fastapi.responses",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/religion/repositories/repository.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.desc",
        "sqlalchemy.asc",
        "sqlalchemy.func",
        "sqlalchemy.exc.IntegrityError",
        "sqlalchemy.exc.NoResultFound",
        "backend.systems.religion.models.ReligionEntity",
        "backend.systems.religion.models.CreateReligionRequest",
        "backend.systems.religion.models.UpdateReligionRequest",
        "backend.systems.religion.models.ReligionResponse",
        "backend.systems.shared.exceptions.ReligionNotFoundError",
        "backend.systems.shared.exceptions.ReligionValidationError",
        "backend.systems.shared.exceptions.ReligionConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.exc",
        "sqlalchemy.exc"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/religion/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.ConfigDict",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/religion/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "uuid.uuid4",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.shared.services.BaseService",
        "backend.systems.religion.models.ReligionEntity",
        "backend.systems.religion.models.CreateReligionRequest",
        "backend.systems.religion.models.UpdateReligionRequest",
        "backend.systems.religion.models.ReligionResponse",
        "backend.systems.religion.repositories.ReligionRepository",
        "backend.systems.religion.repositories.get_religion_repository",
        "backend.systems.shared.exceptions.ReligionNotFoundError",
        "backend.systems.shared.exceptions.ReligionValidationError",
        "backend.systems.shared.exceptions.ReligionConflictError",
        "backend.systems.religion.event_publisher.get_religion_event_publisher",
        "backend.systems.religion.websocket_manager.religion_websocket_manager"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/shared/database/base.py",
      "imports": [
        "os",
        "uuid",
        "typing.Any",
        "typing.Generator",
        "typing.AsyncGenerator",
        "typing.Optional",
        "datetime.datetime",
        "contextlib.asynccontextmanager",
        "sqlalchemy.create_engine",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.DateTime",
        "sqlalchemy.TypeDecorator",
        "sqlalchemy.CHAR",
        "sqlalchemy.event",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.ext.asyncio.AsyncSession",
        "sqlalchemy.ext.asyncio.create_async_engine",
        "sqlalchemy.ext.asyncio.async_sessionmaker",
        "sqlalchemy.orm.sessionmaker",
        "sqlalchemy.orm.Session",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.sql.func",
        "sqlalchemy"
      ],
      "non_canonical_imports": [
        "sqlalchemy.ext.declarative",
        "sqlalchemy.ext.asyncio",
        "sqlalchemy.ext.asyncio",
        "sqlalchemy.ext.asyncio",
        "sqlalchemy.orm",
        "sqlalchemy.orm",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.sql"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/shared/repositories/base_repository.py",
      "imports": [
        "logging",
        "typing.Any",
        "typing.Dict",
        "typing.Generic",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Type",
        "typing.TypeVar",
        "typing.Union",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.desc",
        "sqlalchemy.asc",
        "sqlalchemy.func",
        "sqlalchemy.text",
        "sqlalchemy.orm.Session",
        "sqlalchemy.exc.SQLAlchemyError",
        "backend.systems.shared.database.base.Base",
        "backend.systems.shared.exceptions.RepositoryError",
        "backend.systems.shared.exceptions.EntityNotFoundError",
        "backend.systems.shared.exceptions.EntityConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.exc"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/shared/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "pydantic.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/shared/models/base.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.TypeVar",
        "typing.Generic",
        "typing.Type",
        "abc.ABC",
        "abc.abstractmethod",
        "sqlalchemy.orm.Session",
        "logging"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/shared/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "typing.Generic",
        "typing.TypeVar",
        "typing.Type",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "sqlalchemy.ext.declarative.DeclarativeMeta",
        "backend.systems.shared.models.SharedEntity",
        "backend.systems.shared.models.SharedModel",
        "backend.systems.shared.models.CreateSharedRequest",
        "backend.systems.shared.models.UpdateSharedRequest",
        "backend.systems.shared.models.SharedResponse",
        "backend.systems.shared.exceptions.SharedNotFoundError",
        "backend.systems.shared.exceptions.SharedValidationError",
        "backend.systems.shared.exceptions.SharedConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.ext.declarative"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/inventory/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/inventory/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.inventory.models.InventoryEntity",
        "backend.systems.inventory.models.InventoryModel",
        "backend.systems.inventory.models.CreateInventoryRequest",
        "backend.systems.inventory.models.UpdateInventoryRequest",
        "backend.systems.inventory.models.InventoryResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.InventoryNotFoundError",
        "backend.systems.shared.exceptions.InventoryValidationError",
        "backend.systems.shared.exceptions.InventoryConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/event_base/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/event_base/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.event_base.models.Event_BaseEntity",
        "backend.systems.event_base.models.Event_BaseModel",
        "backend.systems.event_base.models.CreateEvent_BaseRequest",
        "backend.systems.event_base.models.UpdateEvent_BaseRequest",
        "backend.systems.event_base.models.Event_BaseResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.Event_BaseNotFoundError",
        "backend.systems.shared.exceptions.Event_BaseValidationError",
        "backend.systems.shared.exceptions.Event_BaseConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/economy/routers/shop_routes.py",
      "imports": [
        "logging",
        "fastapi.APIRouter",
        "fastapi.Request",
        "sqlalchemy.orm.Session",
        "backend.systems.shared.database.base.get_db",
        "backend.systems.economy.EconomyManager",
        "backend.systems.economy.shop_utils.calculate_sale_value",
        "backend.systems.economy.shop_utils.calculate_resale_value",
        "backend.systems.economy.shop_utils.summarize_shop",
        "backend.systems.economy.shop_utils.calculate_price_with_modifiers",
        "backend.systems.economy.shop_utils.generate_inventory_from_tags",
        "backend.systems.economy.models.Market",
        "backend.systems.economy.models.Resource",
        "backend.systems.shared.database.base.get_async_session",
        "backend.systems.equipment.loot_utils.generate_item_identity",
        "backend.systems.character.models.relationship.Relationship"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/economy/routers/api_routes.py",
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "datetime.datetime",
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "fastapi.Depends",
        "fastapi.Query",
        "fastapi.Body",
        "fastapi.responses.JSONResponse",
        "pydantic.BaseModel",
        "sqlalchemy.orm.Session",
        "backend.systems.economy.economy_manager.EconomyManager",
        "backend.systems.economy.resource.ResourceData",
        "backend.systems.economy.models.market.MarketData"
      ],
      "non_canonical_imports": [
        "fastapi.responses",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/economy/routers/routes.py",
      "imports": [
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.Query",
        "fastapi.Path",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "sqlalchemy.orm.Session",
        "pydantic.BaseModel",
        "pydantic.Field",
        "backend.systems.economy.economy_manager.EconomyManager",
        "backend.systems.economy.database_service.get_db_session",
        "backend.systems.economy.models.ResourceData",
        "backend.systems.economy.models.MarketData",
        "backend.systems.economy.models.TradeRouteData",
        "backend.systems.economy.models.CommodityFutureData"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/economy/migrations/001_create_economy_tables.py",
      "imports": [
        "alembic.op",
        "sqlalchemy",
        "sqlalchemy.dialects.postgresql"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/economy/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/economy/models/market.py",
      "imports": [
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "uuid",
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.Float",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.JSON",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.database.base.Base"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/economy/models/commodity_future.py",
      "imports": [
        "uuid",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "datetime.datetime",
        "dataclasses.dataclass",
        "dataclasses.field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Float",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.Integer",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.database.base.Base"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/economy/models/trade_route.py",
      "imports": [
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "uuid",
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.Float",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.JSON",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.database.base.Base"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/economy/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.economy.models.EconomyEntity",
        "backend.systems.economy.models.EconomyModel",
        "backend.systems.economy.models.CreateEconomyRequest",
        "backend.systems.economy.models.UpdateEconomyRequest",
        "backend.systems.economy.models.EconomyResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.EconomyNotFoundError",
        "backend.systems.shared.exceptions.EconomyValidationError",
        "backend.systems.shared.exceptions.EconomyConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/economy/services/trade_service.py",
      "imports": [
        "os",
        "json",
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "random",
        "sqlalchemy.orm.Session",
        "backend.systems.economy.models.TradeRoute",
        "backend.systems.economy.models.TradeRouteData",
        "backend.systems.economy.models.Resource",
        "backend.systems.economy.resource_service.ResourceService",
        "logging"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/economy/services/economy_manager.py",
      "imports": [
        "os",
        "json",
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "random",
        "math",
        "logging",
        "backend.systems.economy.models.Resource",
        "backend.systems.economy.models.ResourceData",
        "backend.systems.economy.models.TradeRoute",
        "backend.systems.economy.models.TradeRouteData",
        "backend.systems.economy.models.Market",
        "backend.systems.economy.models.MarketData",
        "backend.systems.economy.models.CommodityFuture",
        "backend.systems.economy.models.CommodityFutureData",
        "backend.systems.economy.services.ResourceService",
        "backend.systems.economy.services.TradeService",
        "backend.systems.economy.services.MarketService",
        "backend.systems.economy.services.FuturesService"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/economy/services/market_service.py",
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "backend.systems.economy.models.market.Market",
        "backend.systems.economy.models.market.MarketData"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/economy/services/database_service.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.Generator",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "contextlib.contextmanager",
        "sqlalchemy.create_engine",
        "sqlalchemy.text",
        "sqlalchemy.orm.sessionmaker",
        "sqlalchemy.orm.Session",
        "sqlalchemy.exc.SQLAlchemyError",
        "sqlalchemy.exc.IntegrityError",
        "sqlalchemy.pool.StaticPool",
        "backend.systems.economy.models.Resource",
        "backend.systems.economy.models.Market",
        "backend.systems.economy.models.TradeRoute",
        "backend.systems.economy.models.CommodityFuture",
        "backend.systems.shared.database.base.Base",
        "backend.systems.economy.models.Resource",
        "backend.systems.economy.models.Market",
        "backend.systems.economy.models.TradeRoute",
        "backend.systems.economy.models.CommodityFuture",
        "backend.systems.shared.database.base.Base"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.orm",
        "sqlalchemy.exc",
        "sqlalchemy.exc",
        "sqlalchemy.pool"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/economy/services/futures_service.py",
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "uuid",
        "sqlalchemy.orm.Session",
        "sqlalchemy.or_",
        "sqlalchemy.and_",
        "logging",
        "backend.systems.economy.models.CommodityFuture",
        "backend.systems.economy.models.CommodityFutureData",
        "backend.systems.economy.models.Resource",
        "backend.systems.economy.models.Market"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/faction/routers/faction_router.py",
      "imports": [
        "typing.List",
        "typing.Optional",
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.status",
        "sqlalchemy.orm.Session",
        "backend.systems.shared.database.base.get_db",
        "backend.systems.faction.faction_manager.FactionManager",
        "backend.systems.faction.models.faction.Faction",
        "backend.systems.faction.schemas.faction_types.FactionSchema",
        "backend.systems.faction.schemas.faction_types.FactionType",
        "backend.systems.faction.services.faction_service.FactionNotFoundError",
        "backend.systems.faction.services.faction_service.DuplicateFactionError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/faction/utils/faction_tick_utils.py",
      "imports": [
        "random",
        "collections.deque",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "backend.systems.faction.models.faction.FactionRelationship",
        "datetime.datetime",
        "datetime.timedelta",
        "sqlalchemy.text",
        "random"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/faction/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.ConfigDict",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/faction/services/reputation_service.py",
      "imports": [
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "sqlalchemy.orm.Session",
        "backend.systems.faction.models.faction.Faction",
        "backend.systems.faction.models.faction.FactionMembership",
        "backend.systems.faction.services.faction_service.FactionNotFoundError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/faction/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.faction.models.FactionEntity",
        "backend.systems.faction.models.FactionModel",
        "backend.systems.faction.models.CreateFactionRequest",
        "backend.systems.faction.models.UpdateFactionRequest",
        "backend.systems.faction.models.FactionResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.FactionNotFoundError",
        "backend.systems.shared.exceptions.FactionValidationError",
        "backend.systems.shared.exceptions.FactionConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/faction/services/influence_service.py",
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "backend.systems.faction.models.faction.Faction",
        "backend.systems.faction.services.faction_service.FactionNotFoundError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/faction/services/membership_service.py",
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "backend.systems.faction.models.faction.Faction",
        "backend.systems.faction.models.faction.FactionMembership",
        "backend.systems.faction.services.faction_service.FactionNotFoundError",
        "backend.systems.faction.faction_manager.FactionManager"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/rumor/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/rumor/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.rumor.models.RumorEntity",
        "backend.systems.rumor.models.RumorModel",
        "backend.systems.rumor.models.CreateRumorRequest",
        "backend.systems.rumor.models.UpdateRumorRequest",
        "backend.systems.rumor.models.RumorResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.RumorNotFoundError",
        "backend.systems.shared.exceptions.RumorValidationError",
        "backend.systems.shared.exceptions.RumorConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/quest/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/quest/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.quest.models.QuestEntity",
        "backend.systems.quest.models.QuestModel",
        "backend.systems.quest.models.CreateQuestRequest",
        "backend.systems.quest.models.UpdateQuestRequest",
        "backend.systems.quest.models.QuestResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.QuestNotFoundError",
        "backend.systems.shared.exceptions.QuestValidationError",
        "backend.systems.shared.exceptions.QuestConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/arc/routers/arc_router.py",
      "imports": [
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "uuid.UUID",
        "backend.systems.shared.database.base.get_db",
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.Query",
        "fastapi.status",
        "fastapi.responses.JSONResponse",
        "sqlalchemy.ext.asyncio.AsyncSession",
        "backend.systems.arc.models.arc.ArcType",
        "backend.systems.arc.models.arc.ArcStatus",
        "backend.systems.arc.models.arc.ArcPriority",
        "backend.systems.arc.models.arc_step.ArcStepStatus",
        "backend.systems.arc.models.arc_step.ArcStepType",
        "backend.systems.arc.models.arc_completion_record.ArcCompletionResult",
        "backend.systems.arc.schemas.arc_schemas.ArcCreate",
        "backend.systems.arc.schemas.arc_schemas.ArcUpdate",
        "backend.systems.arc.schemas.arc_schemas.ArcResponse",
        "backend.systems.arc.schemas.arc_schemas.ArcListResponse",
        "backend.systems.arc.schemas.arc_schemas.ArcStepCreate",
        "backend.systems.arc.schemas.arc_schemas.ArcStepUpdate",
        "backend.systems.arc.schemas.arc_schemas.ArcStepResponse",
        "backend.systems.arc.schemas.arc_schemas.ArcProgressionResponse",
        "backend.systems.arc.schemas.arc_schemas.ArcCompletionRecordResponse",
        "backend.systems.arc.schemas.arc_schemas.ArcStatistics",
        "backend.systems.arc.schemas.arc_schemas.ArcStepStatistics",
        "backend.systems.arc.schemas.arc_schemas.ProgressionStatistics",
        "backend.systems.arc.schemas.arc_schemas.CompletionStatistics",
        "backend.systems.arc.schemas.arc_schemas.ArcActivationRequest",
        "backend.systems.arc.schemas.arc_schemas.ArcStepAdvanceRequest",
        "backend.systems.arc.schemas.arc_schemas.ArcCompletionRequest",
        "backend.systems.arc.schemas.arc_schemas.ArcSearchRequest",
        "backend.systems.arc.schemas.arc_schemas.ErrorResponse",
        "backend.systems.arc.schemas.arc_schemas.SuccessResponse",
        "backend.systems.arc.schemas.arc_schemas.ArcOperationResponse",
        "backend.systems.arc.schemas.arc_schemas.BatchArcStatusUpdate",
        "backend.systems.arc.schemas.arc_schemas.BatchArcStepUpdate",
        "backend.systems.arc.services.arc_manager.ArcManager",
        "backend.systems.arc.repositories.arc_repository.ArcRepository",
        "backend.systems.arc.repositories.arc_step_repository.ArcStepRepository",
        "backend.systems.arc.repositories.arc_progression_repository.ArcProgressionRepository",
        "backend.systems.arc.repositories.arc_completion_record_repository.ArcCompletionRecordRepository",
        "backend.systems.arc.shared.database.base.get_async_session"
      ],
      "non_canonical_imports": [
        "fastapi.responses",
        "sqlalchemy.ext.asyncio"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/arc/repositories/arc_completion_record_repository.py",
      "imports": [
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "uuid.UUID",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.desc",
        "sqlalchemy.asc",
        "sqlalchemy.func",
        "sqlalchemy.ext.asyncio.AsyncSession",
        "sqlalchemy.future.select",
        "sqlalchemy.orm.selectinload",
        "backend.systems.arc.models.arc_completion_record.ArcCompletionRecord",
        "backend.systems.arc.models.arc_completion_record.ArcCompletionResult",
        "backend.systems.arc.shared.database.base.BaseRepository"
      ],
      "non_canonical_imports": [
        "sqlalchemy.ext.asyncio",
        "sqlalchemy.future",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/arc/repositories/arc_repository.py",
      "imports": [
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "uuid.UUID",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.desc",
        "sqlalchemy.asc",
        "sqlalchemy.ext.asyncio.AsyncSession",
        "sqlalchemy.future.select",
        "sqlalchemy.orm.selectinload",
        "backend.systems.arc.models.arc.Arc",
        "backend.systems.arc.models.arc.ArcType",
        "backend.systems.arc.models.arc.ArcStatus",
        "backend.systems.arc.models.arc.ArcPriority",
        "backend.systems.arc.shared.database.base.BaseRepository"
      ],
      "non_canonical_imports": [
        "sqlalchemy.ext.asyncio",
        "sqlalchemy.future",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/arc/repositories/arc_step_repository.py",
      "imports": [
        "logging",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "uuid.UUID",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.desc",
        "sqlalchemy.asc",
        "sqlalchemy.ext.asyncio.AsyncSession",
        "sqlalchemy.future.select",
        "sqlalchemy.orm.selectinload",
        "backend.systems.arc.models.arc_step.ArcStep",
        "backend.systems.arc.models.arc_step.ArcStepStatus",
        "backend.systems.arc.models.arc_step.ArcStepType",
        "backend.systems.arc.shared.database.base.BaseRepository"
      ],
      "non_canonical_imports": [
        "sqlalchemy.ext.asyncio",
        "sqlalchemy.future",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/arc/repositories/arc_progression_repository.py",
      "imports": [
        "logging",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "uuid.UUID",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.desc",
        "sqlalchemy.asc",
        "sqlalchemy.ext.asyncio.AsyncSession",
        "sqlalchemy.future.select",
        "sqlalchemy.orm.selectinload",
        "backend.systems.arc.models.arc_progression.ArcProgression",
        "backend.systems.arc.models.arc_progression.ProgressionMethod",
        "backend.systems.arc.shared.database.base.BaseRepository"
      ],
      "non_canonical_imports": [
        "sqlalchemy.ext.asyncio",
        "sqlalchemy.future",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/arc/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/arc/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.arc.models.ArcEntity",
        "backend.systems.arc.models.ArcModel",
        "backend.systems.arc.models.CreateArcRequest",
        "backend.systems.arc.models.UpdateArcRequest",
        "backend.systems.arc.models.ArcResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.ArcNotFoundError",
        "backend.systems.shared.exceptions.ArcValidationError",
        "backend.systems.shared.exceptions.ArcConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/time/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/time/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.time.models.TimeEntity",
        "backend.systems.time.models.TimeModel",
        "backend.systems.time.models.CreateTimeRequest",
        "backend.systems.time.models.UpdateTimeRequest",
        "backend.systems.time.models.TimeResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.TimeNotFoundError",
        "backend.systems.shared.exceptions.TimeValidationError",
        "backend.systems.shared.exceptions.TimeConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/integration/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/integration/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.integration.models.IntegrationEntity",
        "backend.systems.integration.models.IntegrationModel",
        "backend.systems.integration.models.CreateIntegrationRequest",
        "backend.systems.integration.models.UpdateIntegrationRequest",
        "backend.systems.integration.models.IntegrationResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.IntegrationNotFoundError",
        "backend.systems.shared.exceptions.IntegrationValidationError",
        "backend.systems.shared.exceptions.IntegrationConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/world_generation/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/world_generation/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.world_generation.models.World_GenerationEntity",
        "backend.systems.world_generation.models.World_GenerationModel",
        "backend.systems.world_generation.models.CreateWorld_GenerationRequest",
        "backend.systems.world_generation.models.UpdateWorld_GenerationRequest",
        "backend.systems.world_generation.models.World_GenerationResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.World_GenerationNotFoundError",
        "backend.systems.shared.exceptions.World_GenerationValidationError",
        "backend.systems.shared.exceptions.World_GenerationConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/events/routers/events_router.py",
      "imports": [
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.status",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "backend.systems.shared.database.session.get_db",
        "sqlalchemy.orm.Session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/events/utils/export_utils.py",
      "imports": [
        "csv",
        "io",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "reportlab.lib.pagesizes.letter",
        "reportlab.pdfgen.canvas"
      ],
      "non_canonical_imports": [
        "reportlab.lib.pagesizes",
        "reportlab.pdfgen"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/events/utils/database_utils.py",
      "imports": [
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "sqlalchemy.text",
        "sqlalchemy.create_engine",
        "sqlalchemy.orm.Session",
        "sqlalchemy.exc.SQLAlchemyError",
        "contextlib.contextmanager",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "functools.wraps",
        "backend.systems.shared.database.base.db",
        "backend.systems.shared.utils.cache.RedisCache",
        "backend.systems.shared.utils.monitoring.monitor",
        "backend.systems.shared.utils.db_pool.pool_manager",
        "json",
        "threading",
        "collections.defaultdict"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.exc"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/events/repositories/events_repository.py",
      "imports": [
        "typing.List",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "sqlalchemy.orm.Session",
        "backend.systems.shared.models.base.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/events/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/events/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.events.models.EventsEntity",
        "backend.systems.events.models.EventsModel",
        "backend.systems.events.models.CreateEventsRequest",
        "backend.systems.events.models.UpdateEventsRequest",
        "backend.systems.events.models.EventsResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.EventsNotFoundError",
        "backend.systems.shared.exceptions.EventsValidationError",
        "backend.systems.shared.exceptions.EventsConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/tension_war/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/magic/routers/router.py",
      "imports": [
        "typing.List",
        "typing.Optional",
        "uuid.UUID",
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.status",
        "sqlalchemy.orm.Session",
        "backend.systems.shared.database.get_db",
        "backend.systems.magic.models.SpellResponse",
        "backend.systems.magic.models.SpellbookResponse",
        "backend.systems.magic.models.SpellSlotsResponse",
        "backend.systems.magic.models.CastSpellRequest",
        "backend.systems.magic.models.PrepareSpellsRequest",
        "backend.systems.magic.services.MagicService"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/magic/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "uuid.UUID",
        "uuid.uuid4",
        "enum.Enum",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.validator",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.Float",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.dialects.postgresql.ARRAY",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.database.Base",
        "backend.systems.shared.database.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/magic/services/services.py",
      "imports": [
        "typing.List",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "uuid.UUID",
        "datetime.datetime",
        "datetime.timedelta",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "backend.systems.magic.models.Spell",
        "backend.systems.magic.models.Character",
        "backend.systems.magic.models.Spellbook",
        "backend.systems.magic.models.KnownSpell",
        "backend.systems.magic.models.PreparedSpell",
        "backend.systems.magic.models.SpellSlots",
        "backend.systems.magic.models.ActiveSpellEffect",
        "backend.systems.magic.models.CastSpellRequest",
        "re",
        "re"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/chaos/core/system_integrator.py",
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Callable",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "uuid.UUID",
        "models.chaos_events.ChaosEvent",
        "models.chaos_events.ChaosEventType",
        "models.pressure_data.PressureData",
        "models.pressure_data.PressureReading",
        "models.pressure_data.PressureSource",
        "models.chaos_state.ChaosState",
        "config.ChaosConfig"
      ],
      "non_canonical_imports": [
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.pressure_data",
        "models.pressure_data",
        "models.pressure_data",
        "models.pressure_data",
        "models.pressure_data",
        "models.pressure_data",
        "models.chaos_state",
        "models.chaos_state"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/chaos/core/event_triggers.py",
      "imports": [
        "asyncio",
        "logging",
        "random",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Tuple",
        "uuid.UUID",
        "models.chaos_events.ChaosEvent",
        "models.chaos_events.ChaosEventType",
        "models.chaos_events.EventSeverity",
        "models.chaos_events.EventStatus",
        "models.chaos_events.EventEffect",
        "models.chaos_events.EventTriggerCondition",
        "models.chaos_events.EventTemplate",
        "models.chaos_state.ChaosState",
        "models.chaos_state.EventCooldown",
        "models.chaos_state.ChaosLevel",
        "models.pressure_data.PressureData",
        "models.pressure_data.RegionalPressure",
        "config.ChaosConfig",
        "utils.chaos_math.ChaosCalculationResult"
      ],
      "non_canonical_imports": [
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_state",
        "models.chaos_state",
        "models.chaos_state",
        "models.chaos_state",
        "models.chaos_state",
        "models.chaos_state",
        "models.pressure_data",
        "models.pressure_data",
        "models.pressure_data",
        "models.pressure_data",
        "utils.chaos_math",
        "utils.chaos_math"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/chaos/core/chaos_engine.py",
      "imports": [
        "asyncio",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "datetime.timedelta",
        "random",
        "config.ChaosConfig",
        "models.chaos_state.ChaosState",
        "models.chaos_state.ChaosLevel",
        "models.pressure_data.PressureData",
        "core.pressure_monitor.PressureMonitor",
        "services.event_manager.EventManager",
        "core.system_integrator.SystemIntegrator",
        "analytics.chaos_analytics.ChaosAnalytics",
        "utils.chaos_math.ChaosMath",
        "utils.chaos_math.ChaosCalculationResult"
      ],
      "non_canonical_imports": [
        "models.chaos_state",
        "models.chaos_state",
        "models.chaos_state",
        "models.chaos_state",
        "models.pressure_data",
        "models.pressure_data",
        "core.pressure_monitor",
        "core.pressure_monitor",
        "services.event_manager",
        "services.event_manager",
        "core.system_integrator",
        "core.system_integrator",
        "analytics.chaos_analytics",
        "analytics.chaos_analytics",
        "utils.chaos_math",
        "utils.chaos_math",
        "utils.chaos_math",
        "utils.chaos_math"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/chaos/utils/event_utils.py",
      "imports": [
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Tuple",
        "uuid.UUID",
        "models.chaos_events.ChaosEvent",
        "models.chaos_events.ChaosEventType",
        "models.chaos_events.EventSeverity",
        "models.chaos_events.EventStatus",
        "models.chaos_events.EventEffect",
        "models.chaos_events.EventTemplate",
        "models.chaos_state.ChaosState"
      ],
      "non_canonical_imports": [
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_state",
        "models.chaos_state"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/chaos/api/chaos_api.py",
      "imports": [
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "fastapi.Query",
        "fastapi.Path",
        "pydantic.BaseModel",
        "core.chaos_engine.get_chaos_engine",
        "models.chaos_events.ChaosEventType",
        "models.chaos_events.EventSeverity"
      ],
      "non_canonical_imports": [
        "core.chaos_engine",
        "core.chaos_engine",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/chaos/services/event_manager.py",
      "imports": [
        "asyncio",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "uuid.UUID",
        "models.chaos_events.ChaosEvent",
        "models.chaos_events.ChaosEventType",
        "models.chaos_events.EventStatus",
        "models.chaos_state.ChaosState",
        "models.pressure_data.PressureData",
        "core.event_triggers.EventTriggerSystem",
        "services.mitigation_service.MitigationService",
        "utils.event_utils.EventUtils",
        "utils.chaos_math.ChaosCalculationResult",
        "config.ChaosConfig",
        "models.chaos_state.ChaosLevel",
        "models.chaos_state.ChaosLevel"
      ],
      "non_canonical_imports": [
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_state",
        "models.chaos_state",
        "models.pressure_data",
        "models.pressure_data",
        "core.event_triggers",
        "core.event_triggers",
        "services.mitigation_service",
        "services.mitigation_service",
        "utils.event_utils",
        "utils.event_utils",
        "utils.chaos_math",
        "utils.chaos_math",
        "models.chaos_state",
        "models.chaos_state",
        "models.chaos_state",
        "models.chaos_state"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/chaos/analytics/chaos_analytics.py",
      "imports": [
        "asyncio",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "pathlib.Path",
        "event_tracker.EventTracker",
        "performance_monitor.PerformanceMonitor",
        "configuration_manager.ConfigurationManager",
        "config.ChaosConfig",
        "models.chaos_events.ChaosEvent",
        "models.chaos_state.ChaosState",
        "models.pressure_data.PressureData",
        "json",
        "json",
        "json"
      ],
      "non_canonical_imports": [
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_state",
        "models.chaos_state",
        "models.pressure_data",
        "models.pressure_data"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/chaos/analytics/event_tracker.py",
      "imports": [
        "asyncio",
        "logging",
        "json",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "dataclasses.dataclass",
        "dataclasses.field",
        "collections.defaultdict",
        "collections.deque",
        "enum.Enum",
        "pathlib.Path",
        "models.chaos_events.ChaosEvent",
        "models.chaos_events.ChaosEventType",
        "models.chaos_events.EventSeverity",
        "models.chaos_state.ChaosState",
        "models.pressure_data.PressureData",
        "config.ChaosConfig",
        "sys"
      ],
      "non_canonical_imports": [
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_events",
        "models.chaos_state",
        "models.chaos_state",
        "models.pressure_data",
        "models.pressure_data"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/motif/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.motif.models.MotifEntity",
        "backend.systems.motif.models.MotifModel",
        "backend.systems.motif.models.CreateMotifRequest",
        "backend.systems.motif.models.UpdateMotifRequest",
        "backend.systems.motif.models.MotifResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.MotifNotFoundError",
        "backend.systems.shared.exceptions.MotifValidationError",
        "backend.systems.shared.exceptions.MotifConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/data/routers/data_router.py",
      "imports": [
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.status",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "backend.systems.shared.database.session.get_db",
        "sqlalchemy.orm.Session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/data/repositories/data_repository.py",
      "imports": [
        "typing.List",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "sqlalchemy.orm.Session",
        "backend.systems.shared.models.base.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/data/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/data/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.data.models.DataEntity",
        "backend.systems.data.models.DataModel",
        "backend.systems.data.models.CreateDataRequest",
        "backend.systems.data.models.UpdateDataRequest",
        "backend.systems.data.models.DataResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.DataNotFoundError",
        "backend.systems.shared.exceptions.DataValidationError",
        "backend.systems.shared.exceptions.DataConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/memory/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/memory/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.memory.models.MemoryEntity",
        "backend.systems.memory.models.MemoryModel",
        "backend.systems.memory.models.CreateMemoryRequest",
        "backend.systems.memory.models.UpdateMemoryRequest",
        "backend.systems.memory.models.MemoryResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.MemoryNotFoundError",
        "backend.systems.shared.exceptions.MemoryValidationError",
        "backend.systems.shared.exceptions.MemoryConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/memory/services/memory.py",
      "imports": [
        "uuid",
        "datetime.datetime",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.TypeVar",
        "typing.Type",
        "typing.Set",
        "typing.Union",
        "backend.systems.memory.memory_categories.MemoryCategory",
        "backend.systems.memory.memory_categories.categorize_memory_content",
        "backend.systems.memory.memory_categories.apply_category_modifiers",
        "backend.systems.memory.saliency_scoring.calculate_initial_importance",
        "backend.systems.memory.saliency_scoring.calculate_memory_saliency",
        "backend.systems.events.core.event_base.EventBase",
        "dateutil.parser.parse"
      ],
      "non_canonical_imports": [
        "dateutil.parser",
        "dateutil.parser"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/analytics/routers/analytics_router.py",
      "imports": [
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.status",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "backend.systems.shared.database.session.get_db",
        "sqlalchemy.orm.Session"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/analytics/repositories/analytics_repository.py",
      "imports": [
        "typing.List",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "sqlalchemy.orm.Session",
        "backend.systems.shared.models.base.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/analytics/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/analytics/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.analytics.models.AnalyticsEntity",
        "backend.systems.analytics.models.AnalyticsModel",
        "backend.systems.analytics.models.CreateAnalyticsRequest",
        "backend.systems.analytics.models.UpdateAnalyticsRequest",
        "backend.systems.analytics.models.AnalyticsResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.AnalyticsNotFoundError",
        "backend.systems.shared.exceptions.AnalyticsValidationError",
        "backend.systems.shared.exceptions.AnalyticsConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/auth_user/routers/auth_router.py",
      "imports": [
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "uuid.UUID",
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.status",
        "fastapi.Request",
        "fastapi.security.OAuth2PasswordBearer",
        "fastapi.security.OAuth2PasswordRequestForm",
        "sqlalchemy.ext.asyncio.AsyncSession",
        "backend.systems.auth_user.services.auth_service.AuthService",
        "backend.systems.auth_user.services.token_service.TokenService",
        "backend.systems.auth_user.services.password_service.PasswordService",
        "backend.systems.auth_user.repositories.UserRepository",
        "backend.systems.auth_user.repositories.RoleRepository",
        "backend.systems.auth_user.schemas.auth_schemas.UserCreate",
        "backend.systems.auth_user.schemas.auth_schemas.UserResponse",
        "backend.systems.auth_user.schemas.auth_schemas.UserUpdate",
        "backend.systems.auth_user.schemas.auth_schemas.TokenResponse",
        "backend.systems.auth_user.schemas.auth_schemas.RefreshTokenRequest",
        "backend.systems.auth_user.schemas.auth_schemas.PasswordResetRequest",
        "backend.systems.auth_user.schemas.auth_schemas.PasswordResetConfirm",
        "backend.systems.auth_user.models.user_models.User",
        "backend.systems.shared.database.base.SessionManager",
        "backend.systems.shared.utils.error.AuthenticationError",
        "backend.systems.shared.utils.error.ValidationError"
      ],
      "non_canonical_imports": [
        "fastapi.security",
        "fastapi.security",
        "sqlalchemy.ext.asyncio"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/auth_user/utils/base.py",
      "imports": [
        "uuid",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Integer",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.sql.func",
        "datetime.datetime",
        "typing.Any",
        "typing.Dict"
      ],
      "non_canonical_imports": [
        "sqlalchemy.ext.declarative",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.sql"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/auth_user/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/auth_user/models/user_models.py",
      "imports": [
        "sqlalchemy.Column",
        "sqlalchemy.Integer",
        "sqlalchemy.String",
        "sqlalchemy.Boolean",
        "sqlalchemy.DateTime",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.Table",
        "sqlalchemy.UniqueConstraint",
        "sqlalchemy.Index",
        "sqlalchemy.orm.relationship",
        "sqlalchemy.sql.func",
        "sqlalchemy.dialects.postgresql.UUID",
        "backend.systems.auth_user.base.AuthBaseModel",
        "backend.systems.auth_user.base.Base"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.sql",
        "sqlalchemy.dialects.postgresql"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/auth_user/models/auth_relationship_models.py",
      "imports": [
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Boolean",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.UniqueConstraint",
        "sqlalchemy.Index",
        "sqlalchemy.JSON",
        "sqlalchemy.orm.relationship",
        "sqlalchemy.dialects.postgresql.UUID",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "backend.systems.auth_user.base.AuthBaseModel",
        "backend.systems.auth_user.base.Base"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm",
        "sqlalchemy.dialects.postgresql"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/auth_user/services/auth_service.py",
      "imports": [
        "typing.Optional",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "uuid.UUID",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.status",
        "fastapi.security.OAuth2PasswordBearer",
        "sqlalchemy.ext.asyncio.AsyncSession",
        "backend.systems.auth_user.services.token_service.verify_token",
        "backend.systems.utils.check_permission",
        "backend.systems.utils.get_user_characters"
      ],
      "non_canonical_imports": [
        "fastapi.security",
        "sqlalchemy.ext.asyncio"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/auth_user/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.auth_user.models.Auth_UserEntity",
        "backend.systems.auth_user.models.Auth_UserModel",
        "backend.systems.auth_user.models.CreateAuth_UserRequest",
        "backend.systems.auth_user.models.UpdateAuth_UserRequest",
        "backend.systems.auth_user.models.Auth_UserResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.Auth_UserNotFoundError",
        "backend.systems.shared.exceptions.Auth_UserValidationError",
        "backend.systems.shared.exceptions.Auth_UserConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/auth_user/services/password_service.py",
      "imports": [
        "passlib.context.CryptContext"
      ],
      "non_canonical_imports": [
        "passlib.context",
        "passlib.context"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/storage/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/storage/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.storage.models.StorageEntity",
        "backend.systems.storage.models.StorageModel",
        "backend.systems.storage.models.CreateStorageRequest",
        "backend.systems.storage.models.UpdateStorageRequest",
        "backend.systems.storage.models.StorageResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.StorageNotFoundError",
        "backend.systems.shared.exceptions.StorageValidationError",
        "backend.systems.shared.exceptions.StorageConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/llm/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/llm/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.llm.models.LlmEntity",
        "backend.systems.llm.models.LlmModel",
        "backend.systems.llm.models.CreateLlmRequest",
        "backend.systems.llm.models.UpdateLlmRequest",
        "backend.systems.llm.models.LlmResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.LlmNotFoundError",
        "backend.systems.shared.exceptions.LlmValidationError",
        "backend.systems.shared.exceptions.LlmConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/equipment/utils/set_bonus_utils.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "logging",
        "sqlalchemy.orm.Session",
        "backend.systems.equipment.models.Equipment",
        "backend.systems.equipment.models.EquipmentSet",
        "backend.systems.shared.database.base.db",
        "backend.systems.inventory.models.Item"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/equipment/utils/durability_utils.py",
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "logging",
        "random",
        "sqlalchemy.orm.Session",
        "backend.systems.equipment.models.Equipment",
        "backend.systems.equipment.models.EquipmentDurabilityLog",
        "backend.systems.shared.database.base.db",
        "backend.systems.inventory.models.Item",
        "backend.systems.inventory.models.InventoryItem"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/equipment/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/equipment/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.equipment.models.EquipmentEntity",
        "backend.systems.equipment.models.EquipmentModel",
        "backend.systems.equipment.models.CreateEquipmentRequest",
        "backend.systems.equipment.models.UpdateEquipmentRequest",
        "backend.systems.equipment.models.EquipmentResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.EquipmentNotFoundError",
        "backend.systems.shared.exceptions.EquipmentValidationError",
        "backend.systems.shared.exceptions.EquipmentConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/dialogue/models/models.py",
      "imports": [
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "datetime.datetime",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "sqlalchemy.Column",
        "sqlalchemy.String",
        "sqlalchemy.Integer",
        "sqlalchemy.DateTime",
        "sqlalchemy.Boolean",
        "sqlalchemy.Text",
        "sqlalchemy.ForeignKey",
        "sqlalchemy.dialects.postgresql.UUID",
        "sqlalchemy.dialects.postgresql.JSONB",
        "sqlalchemy.ext.declarative.declarative_base",
        "sqlalchemy.orm.relationship",
        "backend.systems.shared.models.BaseModel"
      ],
      "non_canonical_imports": [
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.dialects.postgresql",
        "sqlalchemy.ext.declarative",
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    },
    {
      "file_path": "backend/systems/dialogue/services/services.py",
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.dialogue.models.DialogueEntity",
        "backend.systems.dialogue.models.DialogueModel",
        "backend.systems.dialogue.models.CreateDialogueRequest",
        "backend.systems.dialogue.models.UpdateDialogueRequest",
        "backend.systems.dialogue.models.DialogueResponse",
        "backend.systems.shared.services.BaseService",
        "backend.systems.shared.exceptions.DialogueNotFoundError",
        "backend.systems.shared.exceptions.DialogueValidationError",
        "backend.systems.shared.exceptions.DialogueConflictError"
      ],
      "non_canonical_imports": [
        "sqlalchemy.orm"
      ],
      "missing_dependencies": [],
      "circular_dependencies": []
    }
  ],
  "tests": {
    "combat": {
      "system_name": "combat",
      "canonical_test_path": "backend/tests/systems/combat",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 21
    },
    "diplomacy": {
      "system_name": "diplomacy",
      "canonical_test_path": "backend/tests/systems/diplomacy",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 13
    },
    "population": {
      "system_name": "population",
      "canonical_test_path": "backend/tests/systems/population",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 5
    },
    "crafting": {
      "system_name": "crafting",
      "canonical_test_path": "backend/tests/systems/crafting",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 5
    },
    "loot": {
      "system_name": "loot",
      "canonical_test_path": "backend/tests/systems/loot",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 15
    },
    "npc": {
      "system_name": "npc",
      "canonical_test_path": "backend/tests/systems/npc",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 11
    },
    "world_state": {
      "system_name": "world_state",
      "canonical_test_path": "backend/tests/systems/world_state",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 11
    },
    "poi": {
      "system_name": "poi",
      "canonical_test_path": "backend/tests/systems/poi",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 7
    },
    "character": {
      "system_name": "character",
      "canonical_test_path": "backend/tests/systems/character",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 10
    },
    "region": {
      "system_name": "region",
      "canonical_test_path": "backend/tests/systems/region",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 8
    },
    "religion": {
      "system_name": "religion",
      "canonical_test_path": "backend/tests/systems/religion",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 7
    },
    "shared": {
      "system_name": "shared",
      "canonical_test_path": "backend/tests/systems/shared",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 6
    },
    "inventory": {
      "system_name": "inventory",
      "canonical_test_path": "backend/tests/systems/inventory",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 11
    },
    "event_base": {
      "system_name": "event_base",
      "canonical_test_path": "backend/tests/systems/event_base",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 6
    },
    "economy": {
      "system_name": "economy",
      "canonical_test_path": "backend/tests/systems/economy",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 20
    },
    "faction": {
      "system_name": "faction",
      "canonical_test_path": "backend/tests/systems/faction",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 9
    },
    "rumor": {
      "system_name": "rumor",
      "canonical_test_path": "backend/tests/systems/rumor",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 10
    },
    "quest": {
      "system_name": "quest",
      "canonical_test_path": "backend/tests/systems/quest",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 12
    },
    "arc": {
      "system_name": "arc",
      "canonical_test_path": "backend/tests/systems/arc",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 6
    },
    "time": {
      "system_name": "time",
      "canonical_test_path": "backend/tests/systems/time",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 5
    },
    "integration": {
      "system_name": "integration",
      "canonical_test_path": "backend/tests/systems/integration",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 9
    },
    "world_generation": {
      "system_name": "world_generation",
      "canonical_test_path": "backend/tests/systems/world_generation",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 9
    },
    "events": {
      "system_name": "events",
      "canonical_test_path": "backend/tests/systems/events",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 8
    },
    "tension_war": {
      "system_name": "tension_war",
      "canonical_test_path": "backend/tests/systems/tension_war",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 9
    },
    "magic": {
      "system_name": "magic",
      "canonical_test_path": "backend/tests/systems/magic",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 5
    },
    "chaos": {
      "system_name": "chaos",
      "canonical_test_path": "backend/tests/systems/chaos",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 1
    },
    "motif": {
      "system_name": "motif",
      "canonical_test_path": "backend/tests/systems/motif",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 14
    },
    "data": {
      "system_name": "data",
      "canonical_test_path": "backend/tests/systems/data",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 6
    },
    "memory": {
      "system_name": "memory",
      "canonical_test_path": "backend/tests/systems/memory",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 16
    },
    "analytics": {
      "system_name": "analytics",
      "canonical_test_path": "backend/tests/systems/analytics",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 5
    },
    "auth_user": {
      "system_name": "auth_user",
      "canonical_test_path": "backend/tests/systems/auth_user",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 6
    },
    "storage": {
      "system_name": "storage",
      "canonical_test_path": "backend/tests/systems/storage",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 5
    },
    "llm": {
      "system_name": "llm",
      "canonical_test_path": "backend/tests/systems/llm",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 8
    },
    "equipment": {
      "system_name": "equipment",
      "canonical_test_path": "backend/tests/systems/equipment",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 9
    },
    "dialogue": {
      "system_name": "dialogue",
      "canonical_test_path": "backend/tests/systems/dialogue",
      "has_canonical_tests": true,
      "misplaced_test_paths": [],
      "duplicate_tests": [],
      "missing_test_coverage": [],
      "test_files_count": 22
    }
  },
  "global_issues": [],
  "chaos_system_status": {
    "status": "partial",
    "has_models": true,
    "has_services": true,
    "has_repositories": true,
    "has_routers": true,
    "missing_components": [],
    "issues": [
      "Missing chaos component: chaos_calculator",
      "Missing chaos component: event_trigger",
      "Missing chaos component: mitigation_factor",
      "Missing chaos component: cross_system_integration"
    ],
    "files": [
      "backend/systems/chaos/__init__.py",
      "backend/systems/chaos/core/system_integrator.py",
      "backend/systems/chaos/core/config.py",
      "backend/systems/chaos/core/pressure_monitor.py",
      "backend/systems/chaos/core/__init__.py",
      "backend/systems/chaos/core/event_triggers.py",
      "backend/systems/chaos/core/chaos_engine.py",
      "backend/systems/chaos/utils/event_utils.py",
      "backend/systems/chaos/utils/pressure_calculations.py",
      "backend/systems/chaos/utils/__init__.py",
      "backend/systems/chaos/utils/chaos_math.py",
      "backend/systems/chaos/repositories/__init__.py",
      "backend/systems/chaos/models/chaos_events.py",
      "backend/systems/chaos/models/pressure_data.py",
      "backend/systems/chaos/models/chaos_state.py",
      "backend/systems/chaos/models/__init__.py",
      "backend/systems/chaos/schemas/__init__.py",
      "backend/systems/chaos/api/chaos_api.py",
      "backend/systems/chaos/api/__init__.py",
      "backend/systems/chaos/services/mitigation_service.py",
      "backend/systems/chaos/services/__init__.py",
      "backend/systems/chaos/services/event_manager.py",
      "backend/systems/chaos/analytics/chaos_analytics.py",
      "backend/systems/chaos/analytics/performance_monitor.py",
      "backend/systems/chaos/analytics/__init__.py",
      "backend/systems/chaos/analytics/event_tracker.py",
      "backend/systems/chaos/analytics/configuration_manager.py"
    ]
  },
  "recommendations": [
    "Fix non-canonical imports to use backend.systems.* format",
    "Implement missing chaos system components for Task 49"
  ]
}