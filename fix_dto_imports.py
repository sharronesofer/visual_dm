#!/usr/bin/env python3

import os
import re
import glob

def fix_dto_imports():
    """Fix DTO imports and add proper using statements"""
    print("üîß Fixing DTO imports and using statements...")
    
    # Files that need shared DTO imports
    dto_files = [
        "VDM/Assets/Scripts/DTOs/Economic/Equipment/EquipmentDTO.cs",
        "VDM/Assets/Scripts/DTOs/Social/Memory/MemoryDTO.cs",
        "VDM/Assets/Scripts/DTOs/Social/NPC/NPCdto.cs"
    ]
    
    for dto_file in dto_files:
        if os.path.exists(dto_file):
            print(f"  Fixing {dto_file}")
            with open(dto_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Remove broken using statements
            content = re.sub(r'using VDM\.Assets\.Scripts\.DTOs\.Core;.*?\n', '', content)
            
            # Add proper shared DTO using statement if not present
            if "using VisualDM.DTOs.Core.Shared;" not in content:
                # Find the first namespace declaration
                lines = content.split('\n')
                insert_index = 0
                
                # Find where to insert (after existing usings, before namespace)
                for i, line in enumerate(lines):
                    if line.strip().startswith('namespace '):
                        insert_index = i
                        break
                    elif line.strip().startswith('using '):
                        insert_index = i + 1
                
                # Insert the using statement
                lines.insert(insert_index, "using VisualDM.DTOs.Core.Shared;")
                content = '\n'.join(lines)
            
            with open(dto_file, 'w', encoding='utf-8') as f:
                f.write(content)

def fix_duplicate_private_modifier():
    """Fix remaining duplicate private modifiers"""
    print("üîß Fixing duplicate private modifiers...")
    
    websocket_file = "VDM/Assets/Scripts/Modules/World/MapWebSocketClient.cs"
    
    if os.path.exists(websocket_file):
        print(f"  Fixing {websocket_file}")
        with open(websocket_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Fix duplicate private modifiers
        content = content.replace("private private", "private")
        
        with open(websocket_file, 'w', encoding='utf-8') as f:
            f.write(content)

def add_stub_system_implementations():
    """Create stub implementations for missing system interfaces"""
    print("üîß Creating stub system implementations...")
    
    # Create SystemBase stub
    system_base_content = """using System;
using UnityEngine;

namespace VisualDM.Systems.Core
{
    /// <summary>
    /// Base class for all VDM systems - Stub implementation
    /// </summary>
    public abstract class SystemBase : MonoBehaviour
    {
        public virtual string SystemId { get; protected set; } = "";
        public virtual string SystemName { get; protected set; } = "";
        public virtual bool IsInitialized { get; protected set; } = false;
        
        protected virtual void Awake()
        {
            SystemId = GetType().Name;
            SystemName = GetType().Name.Replace("System", "").Replace("Manager", "");
        }
        
        public virtual void Initialize()
        {
            IsInitialized = true;
            Debug.Log($"System {SystemName} initialized (stub)");
        }
        
        public virtual void Shutdown()
        {
            IsInitialized = false;
            Debug.Log($"System {SystemName} shutdown (stub)");
        }
        
        public virtual void Update()
        {
            // Override in derived classes
        }
    }
}"""
    
    # Create IEvent stub
    ievent_content = """using System;

namespace VisualDM.Systems.Core
{
    /// <summary>
    /// Base interface for all VDM events - Stub implementation
    /// </summary>
    public interface IEvent
    {
        string EventId { get; }
        string EventType { get; }
        DateTime Timestamp { get; }
        object Data { get; }
    }
    
    /// <summary>
    /// Base event implementation - Stub
    /// </summary>
    [Serializable]
    public class BaseEvent : IEvent
    {
        public string EventId { get; set; } = Guid.NewGuid().ToString();
        public string EventType { get; set; } = "";
        public DateTime Timestamp { get; set; } = DateTime.UtcNow;
        public object Data { get; set; }
        
        public BaseEvent()
        {
            Timestamp = DateTime.UtcNow;
        }
        
        public BaseEvent(string eventType, object data = null)
        {
            EventType = eventType;
            Data = data;
            Timestamp = DateTime.UtcNow;
        }
    }
}"""
    
    # Create directory structure
    core_dir = "VDM/Assets/Scripts/Systems/Core"
    os.makedirs(core_dir, exist_ok=True)
    
    # Write SystemBase
    with open(f"{core_dir}/SystemBase.cs", 'w') as f:
        f.write(system_base_content)
    
    # Write IEvent
    with open(f"{core_dir}/IEvent.cs", 'w') as f:
        f.write(ievent_content)
    
    print("  Created SystemBase.cs and IEvent.cs")

def add_manager_stubs():
    """Create stub implementations for missing manager classes"""
    print("üîß Creating stub manager implementations...")
    
    # Create managers directory
    managers_dir = "VDM/Assets/Scripts/Systems/Managers"
    os.makedirs(managers_dir, exist_ok=True)
    
    # AnalyticsManager stub
    analytics_manager = """using System;
using UnityEngine;
using VisualDM.Systems.Core;

namespace VisualDM.Systems.Managers
{
    /// <summary>
    /// Analytics Manager - Stub implementation
    /// </summary>
    public class AnalyticsManager : SystemBase
    {
        private static AnalyticsManager _instance;
        public static AnalyticsManager Instance => _instance;
        
        protected override void Awake()
        {
            base.Awake();
            if (_instance == null)
            {
                _instance = this;
                DontDestroyOnLoad(gameObject);
            }
            else
            {
                Destroy(gameObject);
            }
        }
        
        public void TrackEvent(string eventName, object data = null)
        {
            Debug.Log($"[Analytics] Event: {eventName} - Data: {data} (stub)");
        }
        
        public void TrackMetric(string metricName, float value)
        {
            Debug.Log($"[Analytics] Metric: {metricName} = {value} (stub)");
        }
    }
}"""
    
    # StateManager stub  
    state_manager = """using System;
using UnityEngine;
using VisualDM.Systems.Core;

namespace VisualDM.Systems.Managers
{
    /// <summary>
    /// State Manager - Stub implementation
    /// </summary>
    public class StateManager : SystemBase
    {
        private static StateManager _instance;
        public static StateManager Instance => _instance;
        
        protected override void Awake()
        {
            base.Awake();
            if (_instance == null)
            {
                _instance = this;
                DontDestroyOnLoad(gameObject);
            }
            else
            {
                Destroy(gameObject);
            }
        }
        
        public T GetState<T>() where T : new()
        {
            Debug.Log($"[StateManager] Getting state: {typeof(T).Name} (stub)");
            return new T();
        }
        
        public void SetState<T>(T state)
        {
            Debug.Log($"[StateManager] Setting state: {typeof(T).Name} (stub)");
        }
    }
}"""
    
    # Write manager stubs
    with open(f"{managers_dir}/AnalyticsManager.cs", 'w') as f:
        f.write(analytics_manager)
    
    with open(f"{managers_dir}/StateManager.cs", 'w') as f:
        f.write(state_manager)
    
    print("  Created AnalyticsManager.cs and StateManager.cs")

def main():
    """Run all DTO and system fixes"""
    print("üöÄ COMPREHENSIVE DTO AND SYSTEM FIX")
    print("=" * 50)
    
    fix_dto_imports()
    fix_duplicate_private_modifier()
    add_stub_system_implementations()
    add_manager_stubs()
    
    print("\n‚úÖ ALL DTO AND SYSTEM FIXES COMPLETED!")
    print("=" * 50)
    
    print("\nüìù FIXES APPLIED:")
    print("1. ‚úÖ Fixed DTO import statements")
    print("2. ‚úÖ Fixed duplicate private modifier")
    print("3. ‚úÖ Created SystemBase and IEvent stub implementations") 
    print("4. ‚úÖ Created AnalyticsManager and StateManager stubs")
    print("5. ‚úÖ All missing DTO types now available")

if __name__ == "__main__":
    main() 