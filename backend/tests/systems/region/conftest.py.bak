"""
Test fixtures for the region system.
"""

import os
import json
import pytest
from typing import Dict, List, Any
from unittest.mock import MagicMock, patch
import tempfile
import shutil

from backend.systems.region.models import (
    RegionSchema,
    CoordinateSchema,
    PoiSchema,
    TileSchema,
    RegionMapSchema,
    EventSchema,
    QuestSchema,
    QuestlogEntrySchema,
    HexCoordinateSchema,
)
from backend.systems.region.repository import RegionRepository


@pytest.fixture
def sample_coordinate() -> Dict[str, float]:
    """Sample coordinate data for testing."""
    return {"x": 10.5, "y": 20.75}


@pytest.fixture
def sample_hex_coordinate() -> Dict[str, int]:
    """Sample hex coordinate data for testing."""
    return {"q": 2, "r": -3, "s": 1}


@pytest.fixture
def sample_poi() -> Dict[str, Any]:
    """Sample POI data for testing."""
    return {
        "type": "settlement",
        "coordinates": {"x": 11.25, "y": 21.5},
        "size": 3.5,
        "name": "Test Village",
        "description": "A small village for testing",
        "faction_control": "test_faction",
        "tension": 0.25,
    }


@pytest.fixture
def sample_region() -> Dict[str, Any]:
    """Sample region data for testing."""
    return {
        "id": "r_test123",
        "coordinates": {"x": 10.5, "y": 20.75},
        "size": 5.0,
        "biome": "forest",
        "elevation": 120.5,
        "temperature": 22.5,
        "humidity": 0.65,
        "features": ["river", "hills"],
        "resources": {"wood": 0.8, "stone": 0.4, "herbs": 0.6},
        "pois": [
            {
                "type": "settlement",
                "coordinates": {"x": 11.25, "y": 21.5},
                "size": 3.5,
                "name": "Test Village",
            }
        ],
        "name": "Test Region",
        "description": "A region for testing",
        "faction_control": {"test_faction": 0.8, "other_faction": 0.2},
        "tension": 0.3,
        "last_updated": "2023-05-15T12:30:45",
    }


@pytest.fixture
def sample_tile() -> Dict[str, Any]:
    """Sample tile data for testing."""
    return {"tags": ["forest", "dense", "dark"], "poi": "settlement"}


@pytest.fixture
def sample_map() -> Dict[str, Any]:
    """Sample map data for testing."""
    return {
        "tiles": {
            "0,0": {"tags": ["forest", "dense"], "poi": None},
            "0,1": {"tags": ["forest", "clearing"], "poi": None},
            "1,0": {"tags": ["forest", "river"], "poi": None},
            "1,1": {"tags": ["forest", "settlement"], "poi": "village"},
        }
    }


@pytest.fixture
def sample_event() -> Dict[str, Any]:
    """Sample event data for testing."""
    return {
        "type": "conflict",
        "region": "r_test123",
        "poi_id": "p_test456",
        "description": "A test conflict event",
        "character_id": "c_test789",
        "faction_id": "f_test012",
        "timestamp": "2023-05-15T14:30:00",
        "details": {"severity": "high", "casualties": 25, "winner": "f_test012"},
    }


@pytest.fixture
def sample_quest() -> Dict[str, Any]:
    """Sample quest data for testing."""
    return {
        "title": "Test Quest",
        "description": "A test quest for unit testing",
        "objectives": [
            {"type": "visit", "target": "r_test123", "completed": False},
            {"type": "collect", "item": "wood", "amount": 10, "collected": 0},
        ],
        "rewards": {"gold": 100, "items": ["test_item"], "xp": 50},
        "faction_id": "f_test012",
        "giver_id": "c_test345",
        "status": "active",
    }


@pytest.fixture
def sample_questlog_entry() -> Dict[str, Any]:
    """Sample questlog entry for testing."""
    return {
        "quest": {
            "title": "Test Quest",
            "description": "A test quest for unit testing",
            "objectives": [
                {"type": "visit", "target": "r_test123", "completed": False},
                {"type": "collect", "item": "wood", "amount": 10, "collected": 0},
            ],
            "rewards": {"gold": 100, "items": ["test_item"], "xp": 50},
            "faction_id": "f_test012",
            "giver_id": "c_test345",
            "status": "active",
        },
        "timestamp": "2023-05-15T10:15:30",
    }


@pytest.fixture
def mock_region_repository():
    """Mock region repository for testing."""
    with tempfile.TemporaryDirectory() as temp_dir:
        # Create subdirectories
        regions_dir = os.path.join(temp_dir, "regions")
        maps_dir = os.path.join(temp_dir, "region_maps")
        questlogs_dir = os.path.join(temp_dir, "questlogs")

        os.makedirs(regions_dir, exist_ok=True)
        os.makedirs(maps_dir, exist_ok=True)
        os.makedirs(questlogs_dir, exist_ok=True)

        # Initialize repository with temp directories
        repo = RegionRepository(data_dir=regions_dir)
        repo.maps_dir = maps_dir
        repo.questlogs_dir = questlogs_dir

        yield repo


@pytest.fixture
def populated_region_repository(mock_region_repository, sample_region, sample_map):
    """Mock region repository populated with test data."""
    repo = mock_region_repository

    # Add a region
    with open(os.path.join(repo.data_dir, f"{sample_region['id']}.json"), "w") as f:
        json.dump(sample_region, f)

    # Add a region map
    map_dir = os.path.join(repo.maps_dir, sample_region["id"])
    os.makedirs(map_dir, exist_ok=True)
    with open(os.path.join(map_dir, "tiles.json"), "w") as f:
        json.dump(sample_map, f)

    # Add a questlog
    character_id = "c_test789"
    questlog_file = os.path.join(repo.questlogs_dir, f"{character_id}.json")
    with open(questlog_file, "w") as f:
        json.dump([], f)

    return repo


@pytest.fixture
def mock_file_operations():
    """Mock file operations to avoid actual file I/O."""
    with patch("os.path.exists") as mock_exists, patch(
        "os.makedirs"
    ) as mock_makedirs, patch("open") as mock_open, patch(
        "os.listdir"
    ) as mock_listdir, patch(
        "os.remove"
    ) as mock_remove, patch(
        "shutil.rmtree"
    ) as mock_rmtree:

        # Setup default behavior
        mock_exists.return_value = True
        mock_listdir.return_value = ["test_file.json"]
        mock_open.return_value.__enter__.return_value.read.return_value = "{}"

        yield {
            "exists": mock_exists,
            "makedirs": mock_makedirs,
            "open": mock_open,
            "listdir": mock_listdir,
            "remove": mock_remove,
            "rmtree": mock_rmtree,
        }


@pytest.fixture
def sample_region_data():
    """Return sample region data for testing."""
    return {
        "region_id": "r_test123",
        "name": "Test Region",
        "continent_id": "c_test456",
        "biome_type": "forest",
        "coordinates": {"x": 10, "y": 20},
        "tension": 0.5,
        "resources": {"wood": 0.8, "stone": 0.4, "herbs": 0.6},
        "features": ["dense trees", "small stream", "rocky outcrops"],
        "pois": [
            {
                "poi_id": "p_test789",
                "name": "Test Village",
                "poi_type": "village",
                "coordinates": {"x": 12, "y": 22},
                "population": 150,
            }
        ],
        "neighbors": ["r_neighbor1", "r_neighbor2"],
        "hex_coordinates": [(10, 20), (11, 20), (10, 21)],
        "area_sqkm": 39,
    }


@pytest.fixture
def sample_continent_data():
    """Return sample continent data for testing."""
    return {
        "continent_id": "c_test456",
        "name": "Test Continent",
        "region_coordinates": [
            {"x": 10, "y": 20},
            {"x": 11, "y": 20},
            {"x": 10, "y": 21},
        ],
        "boundary": [
            {"x": 9, "y": 19},
            {"x": 12, "y": 19},
            {"x": 12, "y": 22},
            {"x": 9, "y": 22},
        ],
        "region_ids": ["r_test123", "r_neighbor1", "r_neighbor2"],
        "seed": 12345,
    }


@pytest.fixture
def sample_poi_data():
    """Return sample POI data for testing."""
    return {
        "poi_id": "p_test789",
        "region_id": "r_test123",
        "name": "Test Village",
        "poi_type": "village",
        "coordinates": {"x": 12, "y": 22},
        "state": "normal",
        "population": 150,
        "npcs": ["npc1", "npc2", "npc3"],
        "resources": {"food": 0.7, "water": 0.9, "safety": 0.6},
        "factions": {"faction1": 0.8, "faction2": 0.2},
    }


@pytest.fixture
def mock_region_repository():
    """Create a mock RegionRepository instance."""
    mock_repo = MagicMock()

    # Setup common repository methods
    mock_repo.get_region.return_value = None
    mock_repo.get_all_regions.return_value = []
    mock_repo.save_region.return_value = True
    mock_repo.delete_region.return_value = False
    mock_repo.get_regions_by_continent.return_value = []

    return mock_repo


@pytest.fixture
def mock_data_registry():
    """Create a mock GameDataRegistry."""
    mock_registry = MagicMock()

    # Mock biome data
    mock_registry.get_land_types.return_value = {
        "forest": {
            "name": "Forest",
            "description": "Dense forest with tall trees",
            "conditions": {
                "temperature": (0.3, 0.7),
                "humidity": (0.6, 1.0),
                "elevation": (0.2, 0.6),
            },
            "resources": ["wood", "herbs", "game"],
            "features": ["trees", "streams", "wildlife"],
        },
        "mountain": {
            "name": "Mountain",
            "description": "High peaks and rugged terrain",
            "conditions": {
                "temperature": (0.0, 0.4),
                "humidity": (0.3, 0.7),
                "elevation": (0.7, 1.0),
            },
            "resources": ["stone", "ore", "gems"],
            "features": ["peaks", "caves", "cliffs"],
        },
        "desert": {
            "name": "Desert",
            "description": "Arid, sandy landscape",
            "conditions": {
                "temperature": (0.7, 1.0),
                "humidity": (0.0, 0.3),
                "elevation": (0.1, 0.5),
            },
            "resources": ["sand", "minerals", "cacti"],
            "features": ["dunes", "oasis", "rock formations"],
        },
    }

    # Mock adjacency rules
    mock_registry.get_adjacency_rules.return_value = {
        "forest": ["forest", "mountain"],
        "mountain": ["forest", "mountain", "desert"],
        "desert": ["desert", "mountain"],
    }

    return mock_registry


@pytest.fixture
def temp_data_dir():
    """Create a temporary directory for data files."""
    with tempfile.TemporaryDirectory() as temp_dir:
        # Create subdirectories that might be needed
        os.makedirs(os.path.join(temp_dir, "regions"), exist_ok=True)
        os.makedirs(os.path.join(temp_dir, "continents"), exist_ok=True)
        os.makedirs(os.path.join(temp_dir, "world"), exist_ok=True)

        yield temp_dir


@pytest.fixture
def create_test_world_file(temp_data_dir):
    """Create a test world JSON file in the temporary directory."""

    def _create_file(world_data):
        file_path = os.path.join(temp_data_dir, "world", "world_data.json")
        with open(file_path, "w") as f:
            json.dump(world_data, f)
        return file_path

    return _create_file


@pytest.fixture
def create_test_region_file(temp_data_dir):
    """Create a test region JSON file in the temporary directory."""

    def _create_file(region_id, region_data):
        file_path = os.path.join(temp_data_dir, "regions", f"{region_id}.json")
        with open(file_path, "w") as f:
            json.dump(region_data, f)
        return file_path

    return _create_file
