"""
Tests for the AllianceManager service
"""

import unittest
from unittest.mock import MagicMock, patch
from datetime import datetime
import uuid

from backend.systems.tension_war.services.alliance_manager import AllianceManager
from backend.systems.tension_war.models.alliance import AllianceStatus


class TestAllianceManager(unittest.TestCase):
    """Test suite for the AllianceManager service."""

    def setUp(self):
        """Set up for the tests."""
        self.event_dispatcher_mock = MagicMock()
        with patch(
            "app.core.events.event_dispatcher.EventDispatcher.get_instance",
            return_value=self.event_dispatcher_mock,
        ):
            self.alliance_manager = AllianceManager()

    def test_create_alliance(self):
        """Test creating a new alliance between factions."""
        # Arrange
        faction_a_id = str(uuid.uuid4())
        faction_b_id = str(uuid.uuid4())
        terms = {
            "type": "defensive",
            "mutual_defense": True,
            "trade_bonus": 0.2,
            "military_support": True,
            "duration_days": 180,
        }

        # Act
        with patch(
            "..utils.alliance_utils.calculate_alliance_strength", return_value=0.8
        ):
            alliance = self.alliance_manager.create_alliance(
                faction_a_id, faction_b_id, terms
            )

        # Assert
        self.assertIsNotNone(alliance)
        self.assertEqual(alliance["faction_a_id"], faction_a_id)
        self.assertEqual(alliance["faction_b_id"], faction_b_id)
        self.assertEqual(alliance["terms"], terms)
        self.assertEqual(alliance["status"], AllianceStatus.Active.value)
        self.assertTrue(alliance["is_active"])
        self.assertIsNone(alliance["ended_at"])
        self.assertIn("history", alliance)
        self.assertEqual(len(alliance["history"]), 1)
        self.assertEqual(alliance["history"][0]["event"], "formed")

        # Check that it's stored in the manager
        self.assertIn(alliance["id"], self.alliance_manager.alliances)
        self.assertIn(faction_a_id, self.alliance_manager.faction_alliances)
        self.assertIn(faction_b_id, self.alliance_manager.faction_alliances)

        # Check that the event was dispatched
        self.event_dispatcher_mock.publish_sync.assert_called()

    def test_get_alliance(self):
        """Test getting an alliance by ID."""
        # Arrange
        faction_a_id = str(uuid.uuid4())
        faction_b_id = str(uuid.uuid4())

        # Create an alliance
        with patch(
            "..utils.alliance_utils.calculate_alliance_strength", return_value=0.8
        ):
            alliance = self.alliance_manager.create_alliance(faction_a_id, faction_b_id)

        # Act
        retrieved_alliance = self.alliance_manager.get_alliance(alliance["id"])

        # Assert
        self.assertEqual(retrieved_alliance, alliance)

    def test_get_alliances_by_faction(self):
        """Test getting alliances by faction."""
        # Arrange
        faction_a_id = str(uuid.uuid4())
        faction_b_id = str(uuid.uuid4())
        faction_c_id = str(uuid.uuid4())

        # Create alliances
        with patch(
            "..utils.alliance_utils.calculate_alliance_strength", return_value=0.8
        ):
            alliance1 = self.alliance_manager.create_alliance(
                faction_a_id, faction_b_id
            )
            alliance2 = self.alliance_manager.create_alliance(
                faction_a_id, faction_c_id
            )

        # Act
        faction_a_alliances = self.alliance_manager.get_alliances_by_faction(
            faction_a_id
        )
        faction_b_alliances = self.alliance_manager.get_alliances_by_faction(
            faction_b_id
        )
        faction_c_alliances = self.alliance_manager.get_alliances_by_faction(
            faction_c_id
        )

        # Assert
        self.assertEqual(len(faction_a_alliances), 2)
        self.assertEqual(len(faction_b_alliances), 1)
        self.assertEqual(len(faction_c_alliances), 1)

        # Check that the first alliance is in A's and B's lists
        self.assertIn(alliance1, faction_a_alliances)
        self.assertIn(alliance1, faction_b_alliances)

        # Check that the second alliance is in A's and C's lists
        self.assertIn(alliance2, faction_a_alliances)
        self.assertIn(alliance2, faction_c_alliances)

    def test_get_alliance_between_factions(self):
        """Test getting an alliance between specific factions."""
        # Arrange
        faction_a_id = str(uuid.uuid4())
        faction_b_id = str(uuid.uuid4())
        faction_c_id = str(uuid.uuid4())

        # Create alliances
        with patch(
            "..utils.alliance_utils.calculate_alliance_strength", return_value=0.8
        ):
            expected_alliance = self.alliance_manager.create_alliance(
                faction_a_id, faction_b_id
            )
            self.alliance_manager.create_alliance(faction_a_id, faction_c_id)

        # Act
        alliance = self.alliance_manager.get_alliance_between_factions(
            faction_a_id, faction_b_id
        )

        # Assert
        self.assertEqual(alliance, expected_alliance)

        # Try the reverse order (should find the same alliance)
        reverse_alliance = self.alliance_manager.get_alliance_between_factions(
            faction_b_id, faction_a_id
        )
        self.assertEqual(reverse_alliance, expected_alliance)

        # Try a non-existent alliance
        non_existent = self.alliance_manager.get_alliance_between_factions(
            faction_b_id, faction_c_id
        )
        self.assertIsNone(non_existent)

    def test_update_alliance_terms(self):
        """Test updating alliance terms."""
        # Arrange
        faction_a_id = str(uuid.uuid4())
        faction_b_id = str(uuid.uuid4())

        with patch(
            "..utils.alliance_utils.calculate_alliance_strength", return_value=0.8
        ):
            alliance = self.alliance_manager.create_alliance(faction_a_id, faction_b_id)

        new_terms = {
            "type": "offensive",
            "mutual_defense": True,
            "trade_bonus": 0.3,
            "military_support": True,
            "duration_days": 90,
        }

        # Act
        with patch(
            "..utils.alliance_utils.calculate_alliance_strength", return_value=0.9
        ):
            updated_alliance = self.alliance_manager.update_alliance_terms(
                alliance["id"], new_terms
            )

        # Assert
        self.assertEqual(updated_alliance["terms"], new_terms)
        self.assertGreater(len(updated_alliance["history"]), 1)
        self.assertEqual(updated_alliance["history"][-1]["event"], "terms_updated")

        # The event dispatcher should have been called
        self.event_dispatcher_mock.publish_sync.assert_called()

    def test_end_alliance(self):
        """Test ending an alliance."""
        # Arrange
        faction_a_id = str(uuid.uuid4())
        faction_b_id = str(uuid.uuid4())

        with patch(
            "..utils.alliance_utils.calculate_alliance_strength", return_value=0.8
        ):
            alliance = self.alliance_manager.create_alliance(faction_a_id, faction_b_id)

        reason = "diplomatic disagreement"

        # Act
        ended_alliance = self.alliance_manager.end_alliance(alliance["id"], reason)

        # Assert
        self.assertFalse(ended_alliance["is_active"])
        self.assertEqual(ended_alliance["status"], AllianceStatus.Ended.value)
        self.assertIsNotNone(ended_alliance["ended_at"])
        self.assertGreater(len(ended_alliance["history"]), 1)
        self.assertEqual(ended_alliance["history"][-1]["event"], "ended")
        self.assertEqual(ended_alliance["history"][-1]["details"]["reason"], reason)

        # The event dispatcher should have been called
        self.event_dispatcher_mock.publish_sync.assert_called()

    def test_get_alliances(self):
        """Test getting all alliances."""
        # Arrange
        faction_a_id = str(uuid.uuid4())
        faction_b_id = str(uuid.uuid4())
        faction_c_id = str(uuid.uuid4())

        # Create alliances
        with patch(
            "..utils.alliance_utils.calculate_alliance_strength", return_value=0.8
        ):
            alliance1 = self.alliance_manager.create_alliance(
                faction_a_id, faction_b_id
            )
            alliance2 = self.alliance_manager.create_alliance(
                faction_a_id, faction_c_id
            )

        # End one alliance
        self.alliance_manager.end_alliance(alliance1["id"], "test")

        # Act
        all_alliances = self.alliance_manager.get_alliances()
        active_alliances = self.alliance_manager.get_alliances(active_only=True)

        # Assert
        self.assertEqual(len(all_alliances), 2)
        self.assertEqual(len(active_alliances), 1)
        self.assertIn(alliance1, all_alliances)
        self.assertIn(alliance2, all_alliances)
        self.assertIn(alliance2, active_alliances)
        self.assertNotIn(alliance1, active_alliances)


if __name__ == "__main__":
    unittest.main()
