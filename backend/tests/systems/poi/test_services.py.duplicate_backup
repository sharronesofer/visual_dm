"""
Tests for backend.systems.poi.services

This module contains tests for POI services import/export functionality.
"""

import pytest
from backend.systems.poi import services


class TestPOIServices:
    """Tests for POI services module."""

    def test_poi_service_import(self):
        """Test that POIService can be imported."""
        assert hasattr(services, 'POIService')
        assert services.POIService is not None

    def test_poi_state_service_import(self):
        """Test that POIStateService can be imported."""
        assert hasattr(services, 'POIStateService')
        assert services.POIStateService is not None

    def test_metropolitan_spread_service_import(self):
        """Test that MetropolitanSpreadService can be imported."""
        assert hasattr(services, 'MetropolitanSpreadService')
        assert services.MetropolitanSpreadService is not None

    def test_metropolitan_service_alias_import(self):
        """Test that MetropolitanService alias can be imported."""
        assert hasattr(services, 'MetropolitanService')
        assert services.MetropolitanService is not None
        # Verify it's the same as MetropolitanSpreadService
        assert services.MetropolitanService is services.MetropolitanSpreadService

    def test_faction_influence_service_import(self):
        """Test that FactionInfluenceService can be imported."""
        assert hasattr(services, 'FactionInfluenceService')
        assert services.FactionInfluenceService is not None

    def test_landmark_service_import(self):
        """Test that LandmarkService can be imported."""
        assert hasattr(services, 'LandmarkService')
        assert services.LandmarkService is not None

    def test_lifecycle_events_service_import(self):
        """Test that POILifecycleEventsService can be imported."""
        assert hasattr(services, 'POILifecycleEventsService')
        assert services.POILifecycleEventsService is not None

    def test_migration_service_import(self):
        """Test that POIMigrationService can be imported."""
        assert hasattr(services, 'POIMigrationService')
        assert services.POIMigrationService is not None

    def test_resource_management_service_import(self):
        """Test that ResourceManagementService can be imported."""
        assert hasattr(services, 'ResourceManagementService')
        assert services.ResourceManagementService is not None

    def test_all_exports_defined(self):
        """Test that __all__ contains all expected service classes."""
        expected_exports = [
            "POIService",
            "POIStateService",
            "MetropolitanSpreadService",
            "MetropolitanService",  # Backward compatibility alias
            "FactionInfluenceService",
            "LandmarkService",
            "POILifecycleEventsService",
            "POIMigrationService",
            "ResourceManagementService",
        ]
        
        assert hasattr(services, '__all__')
        assert isinstance(services.__all__, list)
        assert len(services.__all__) == len(expected_exports)
        
        for export in expected_exports:
            assert export in services.__all__

    def test_all_exports_accessible(self):
        """Test that all exports in __all__ are actually accessible."""
        for export_name in services.__all__:
            assert hasattr(services, export_name)
            export_class = getattr(services, export_name)
            assert export_class is not None
            # Verify it's a class (not a function or other object)
            assert isinstance(export_class, type)

    def test_direct_import_from_services(self):
        """Test that services can be imported directly from the services module."""
        from backend.systems.poi.services import (
            POIService,
            POIStateService,
            MetropolitanSpreadService,
            MetropolitanService,
            FactionInfluenceService,
            LandmarkService,
            POILifecycleEventsService,
            POIMigrationService,
            ResourceManagementService,
        )
        
        # Verify all imports are successful and are classes
        services_list = [
            POIService,
            POIStateService,
            MetropolitanSpreadService,
            MetropolitanService,
            FactionInfluenceService,
            LandmarkService,
            POILifecycleEventsService,
            POIMigrationService,
            ResourceManagementService,
        ]
        
        for service_class in services_list:
            assert service_class is not None
            assert isinstance(service_class, type)

    def test_module_docstring(self):
        """Test that the module has proper documentation."""
        assert services.__doc__ is not None
        assert "Service modules for the POI system" in services.__doc__ 