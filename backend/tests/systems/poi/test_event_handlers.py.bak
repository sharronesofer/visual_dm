import pytest
from unittest.mock import patch, MagicMock

from backend.systems.poi.event_handlers import (
    register_handlers,
    handle_population_change,
    handle_faction_influence_change,
    handle_war_damage,
    handle_resource_change,
)
from backend.systems.poi.models import PointOfInterest, POIType, POIState
from backend.systems.events.event_dispatcher import EventDispatcher


class TestPOIEventHandlers:
    """Test suite for POI event handlers."""

    def test_register_handlers(self, mock_event_dispatcher):
        """Test registration of event handlers with the event dispatcher."""
        # Execute
        register_handlers()

        # Verify handlers were registered
        assert mock_event_dispatcher.subscribe.call_count > 0

        # Check specific handlers
        handler_names = [
            call.args[1].__name__
            for call in mock_event_dispatcher.subscribe.call_args_list
        ]
        assert "handle_population_change" in handler_names
        assert "handle_faction_influence_change" in handler_names
        assert "handle_war_damage" in handler_names
        assert "handle_resource_change" in handler_names

    def test_handle_population_change(self, city_poi, mock_event_dispatcher):
        """Test handler for population change events."""
        # Setup
        poi_service_mock = MagicMock()
        poi_state_service_mock = MagicMock()

        # Mock POI service to return our test city
        with patch(
            "backend.systems.poi.event_handlers.POIService",
            return_value=poi_service_mock,
        ), patch(
            "backend.systems.poi.event_handlers.POIStateService",
            return_value=poi_state_service_mock,
        ):
            poi_service_mock.get_poi.return_value = city_poi

            # Original state and population
            original_state = city_poi.current_state
            original_population = city_poi.population

            # Create a population change event (significant decrease)
            event = MagicMock()
            event.poi_id = city_poi.id
            event.old_population = original_population
            event.new_population = int(original_population * 0.3)  # 70% reduction
            event.reason = "Disease outbreak"

            # Execute
            handle_population_change(event)

            # Verify POI service was called
            poi_service_mock.get_poi.assert_called_once_with(city_poi.id)

            # Verify state service was called for state transition
            # The exact state depends on thresholds, but a significant decrease
            # should trigger a state change
            poi_state_service_mock.transition_state.assert_called_once()

            # For less dramatic population changes
            event.new_population = int(original_population * 0.8)  # 20% reduction
            poi_state_service_mock.transition_state.reset_mock()

            # Execute
            handle_population_change(event)

            # This might not trigger a state change depending on thresholds
            # but it should still check population
            poi_service_mock.get_poi.assert_called()

    def test_handle_faction_influence_change(self, city_poi, mock_event_dispatcher):
        """Test handler for faction influence change events."""
        # Setup
        poi_service_mock = MagicMock()
        original_faction = city_poi.controlling_faction_id

        # Mock POI service to return our test city
        with patch(
            "backend.systems.poi.event_handlers.POIService",
            return_value=poi_service_mock,
        ):
            poi_service_mock.get_poi.return_value = city_poi

            # Create a faction influence change event
            event = MagicMock()
            event.poi_id = city_poi.id
            event.faction_id = "new_controlling_faction"
            event.old_influence = 0.2
            event.new_influence = 0.9  # Higher than any existing influence

            # Execute
            handle_faction_influence_change(event)

            # Verify POI service was called
            poi_service_mock.get_poi.assert_called_once_with(city_poi.id)

            # Verify controlling faction was updated
            poi_service_mock.update_poi.assert_called_once()

            # Verify event was dispatched for the change
            mock_event_dispatcher.publish.assert_called_once()

    def test_handle_war_damage(self, city_poi, mock_event_dispatcher):
        """Test handler for war damage events."""
        # Setup
        poi_service_mock = MagicMock()
        poi_state_service_mock = MagicMock()

        # Mock POI services to return our test city
        with patch(
            "backend.systems.poi.event_handlers.POIService",
            return_value=poi_service_mock,
        ), patch(
            "backend.systems.poi.event_handlers.POIStateService",
            return_value=poi_state_service_mock,
        ):
            poi_service_mock.get_poi.return_value = city_poi

            # Create a war damage event with severe damage
            event = MagicMock()
            event.poi_id = city_poi.id
            event.damage_level = 0.9  # 90% damage, severe
            event.attacking_faction_id = "attacking_faction"

            # Execute
            handle_war_damage(event)

            # Verify POI service was called
            poi_service_mock.get_poi.assert_called_once_with(city_poi.id)

            # Severe damage should trigger a state transition to ruins
            poi_state_service_mock.transition_state.assert_called_once()
            transition_call = poi_state_service_mock.transition_state.call_args[0]
            assert transition_call[0] == city_poi.id
            assert (
                transition_call[1].new_state == POIState.RUINS
            )  # Severe damage -> ruins

            # Reset mocks for moderate damage test
            poi_service_mock.reset_mock()
            poi_state_service_mock.reset_mock()

            # Moderate damage event
            event.damage_level = 0.4  # 40% damage, moderate

            # Execute
            handle_war_damage(event)

            # Verify POI service was called
            poi_service_mock.get_poi.assert_called_once_with(city_poi.id)

            # Moderate damage might cause population reduction and state change
            # to declining, but not ruins
            poi_state_service_mock.transition_state.assert_called_once()
            transition_call = poi_state_service_mock.transition_state.call_args[0]
            assert transition_call[0] == city_poi.id
            assert (
                transition_call[1].new_state == POIState.DECLINING
            )  # Moderate damage -> declining

    def test_handle_resource_change(self, city_poi, mock_event_dispatcher):
        """Test handler for resource change events."""
        # Setup
        poi_service_mock = MagicMock()

        # Mock POI service to return our test city
        with patch(
            "backend.systems.poi.event_handlers.POIService",
            return_value=poi_service_mock,
        ):
            poi_service_mock.get_poi.return_value = city_poi

            # Ensure city has initial resources
            city_poi.resources = {"gold": 1000, "food": 500}

            # Create a resource change event
            event = MagicMock()
            event.poi_id = city_poi.id
            event.resource_type = "gold"
            event.amount = -300  # Resource reduction
            event.reason = "Trade deficit"

            # Execute
            handle_resource_change(event)

            # Verify POI service was called
            poi_service_mock.get_poi.assert_called_once_with(city_poi.id)

            # Verify resources were updated
            assert city_poi.resources["gold"] == 700  # 1000 - 300

            # Verify POI was updated
            poi_service_mock.update_poi.assert_called_once()

            # Reset mocks for resource addition test
            poi_service_mock.reset_mock()

            # Resource addition event
            event.resource_type = "food"
            event.amount = 200  # Resource addition

            # Execute
            handle_resource_change(event)

            # Verify POI service was called
            poi_service_mock.get_poi.assert_called_once_with(city_poi.id)

            # Verify resources were updated
            assert city_poi.resources["food"] == 700  # 500 + 200

            # Verify POI was updated
            poi_service_mock.update_poi.assert_called_once()

    def test_handle_non_existent_poi(self, mock_event_dispatcher):
        """Test handlers with non-existent POI ID."""
        # Setup
        poi_service_mock = MagicMock()

        # Mock POI service to return None (POI not found)
        with patch(
            "backend.systems.poi.event_handlers.POIService",
            return_value=poi_service_mock,
        ):
            poi_service_mock.get_poi.return_value = None

            # Create events with non-existent POI ID
            population_event = MagicMock()
            population_event.poi_id = "non_existent_id"

            faction_event = MagicMock()
            faction_event.poi_id = "non_existent_id"

            war_event = MagicMock()
            war_event.poi_id = "non_existent_id"

            resource_event = MagicMock()
            resource_event.poi_id = "non_existent_id"

            # Execute all handlers
            handle_population_change(population_event)
            handle_faction_influence_change(faction_event)
            handle_war_damage(war_event)
            handle_resource_change(resource_event)

            # Verify POI service was called for each
            assert poi_service_mock.get_poi.call_count == 4

            # Verify no updates were attempted
            poi_service_mock.update_poi.assert_not_called()
