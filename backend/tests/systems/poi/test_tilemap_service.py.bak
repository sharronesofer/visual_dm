import pytest
from unittest.mock import patch, MagicMock, Mock
import json

from backend.systems.poi.tilemap_service import TilemapService, TileData, TileType
from backend.systems.poi.models import POIType, POIState, PointOfInterest


class TestTilemapService:
    """Test suite for POI tilemap service."""

    def test_tile_data_creation(self):
        """Test creation of TileData objects."""
        # Create a basic tile
        tile = TileData(tile_type=TileType.CITY, x=5, y=10)

        assert tile.tile_type == TileType.CITY
        assert tile.x == 5
        assert tile.y == 10
        assert tile.poi_id is None
        assert tile.biome is None
        assert tile.resources == []

        # Create a tile with all attributes
        tile = TileData(
            tile_type=TileType.DUNGEON,
            x=15,
            y=20,
            poi_id=123,
            biome="forest",
            elevation=100,
            resources=["wood", "stone"],
        )

        assert tile.tile_type == TileType.DUNGEON
        assert tile.x == 15
        assert tile.y == 20
        assert tile.poi_id == 123
        assert tile.biome == "forest"
        assert tile.elevation == 100
        assert tile.resources == ["wood", "stone"]

    def test_tilemap_service_generate_tilemap(self):
        """Test TilemapService.generate_tilemap method."""
        # Create a mock POI
        mock_poi = Mock(spec=PointOfInterest)
        mock_poi.id = 1
        mock_poi.poi_type = POIType.CITY
        mock_poi.metadata = {"size_class": "medium"}
        mock_poi.level = 3
        mock_poi.tags = ["forest"]

        # Generate tilemap
        rooms = TilemapService.generate_tilemap(mock_poi)

        # Verify tilemap was generated
        assert isinstance(rooms, list)
        assert len(rooms) > 0

        # Verify rooms have required fields
        for room in rooms:
            assert "id" in room
            assert "size" in room
            assert "connections" in room
            assert len(room["size"]) == 2  # width, height
            assert isinstance(room["connections"], list)

    def test_tilemap_service_enrich_tilemap(self):
        """Test TilemapService.enrich_tilemap method."""
        # Create a mock POI
        mock_poi = Mock(spec=PointOfInterest)
        mock_poi.id = 1
        mock_poi.poi_type = POIType.DUNGEON
        mock_poi.level = 2
        mock_poi.tags = ["dark"]

        # Create mock rooms
        rooms = [
            {"id": "R1", "size": [8, 6], "connections": ["R2"], "type": None},
            {"id": "R2", "size": [10, 8], "connections": ["R1"], "type": "boss"},
        ]

        # Enrich tilemap
        enrichment = TilemapService.enrich_tilemap(mock_poi, rooms)

        # Verify enrichment structure
        assert isinstance(enrichment, dict)
        assert "theme" in enrichment
        assert "room_enrichment" in enrichment
        assert isinstance(enrichment["room_enrichment"], dict)

        # Verify each room was enriched
        for room in rooms:
            room_id = room["id"]
            assert room_id in enrichment["room_enrichment"]
            room_data = enrichment["room_enrichment"][room_id]
            assert "objects" in room_data
            assert "monsters" in room_data
            assert "note" in room_data
            assert isinstance(room_data["objects"], list)
            assert isinstance(room_data["monsters"], list)
            assert isinstance(room_data["note"], str)

    def test_tilemap_service_render_tilemap(self):
        """Test TilemapService.render_tilemap method."""
        # Create mock rooms and enrichment
        rooms = [{"id": "R1", "size": [6, 4], "connections": ["R2"], "type": None}]

        enrichment = {
            "theme": "dark",
            "room_enrichment": {
                "R1": {
                    "objects": ["altar", "brazier"],
                    "monsters": ["ghost"],
                    "note": "A dark chamber",
                }
            },
        }

        # Render tilemap
        rendered = TilemapService.render_tilemap(rooms, enrichment)

        # Verify rendered structure
        assert isinstance(rendered, dict)
        assert "theme" in rendered
        assert "rooms" in rendered
        assert rendered["theme"] == "dark"
        assert isinstance(rendered["rooms"], dict)

    def test_tilemap_service_different_poi_types(self):
        """Test tilemap generation for different POI types."""
        poi_types = [
            POIType.CITY,
            POIType.TOWN,
            POIType.VILLAGE,
            POIType.DUNGEON,
            POIType.RUINS,
        ]

        for poi_type in poi_types:
            mock_poi = Mock(spec=PointOfInterest)
            mock_poi.id = 1
            mock_poi.poi_type = poi_type
            mock_poi.metadata = {"size_class": "medium"}
            mock_poi.level = 3
            mock_poi.tags = ["forest"]

            # Generate tilemap
            rooms = TilemapService.generate_tilemap(mock_poi)

            # Verify that rooms were generated
            assert isinstance(rooms, list)
            assert len(rooms) > 0

            # Verify room structure
            for room in rooms:
                assert "id" in room
                assert "size" in room
                assert "connections" in room

    def test_tilemap_service_theme_generation(self):
        """Test theme generation for POIs with different types and tags."""
        # Test POI with specific type
        mock_poi = Mock(spec=PointOfInterest)
        mock_poi.poi_type = POIType.DUNGEON
        mock_poi.tags = []

        theme = TilemapService._generate_theme(mock_poi)
        assert isinstance(theme, str)
        assert len(theme) > 0

        # Test POI with tags
        mock_poi.tags = ["forest", "holy"]
        theme_with_tag = TilemapService._generate_theme(mock_poi)
        assert isinstance(theme_with_tag, str)
        assert len(theme_with_tag) > 0

    def test_tilemap_service_object_generation(self):
        """Test object generation for rooms."""
        # Test normal room
        objects = TilemapService._generate_objects(3)
        assert isinstance(objects, list)
        assert len(objects) <= 3

        # Test special room
        boss_objects = TilemapService._generate_objects(3, "boss")
        assert isinstance(boss_objects, list)
        assert len(boss_objects) <= 3

    def test_tilemap_service_monster_generation(self):
        """Test monster generation for rooms."""
        # Test normal room
        monsters = TilemapService._generate_monsters(2)
        assert isinstance(monsters, list)
        assert len(monsters) <= 2

        # Test boss room
        boss_monsters = TilemapService._generate_monsters(2, "boss", 5)
        assert isinstance(boss_monsters, list)
        assert len(boss_monsters) <= 2

    def test_tilemap_service_room_note_generation(self):
        """Test room note generation."""
        # Test normal room
        note = TilemapService._generate_room_note()
        assert isinstance(note, str)
        assert len(note) > 0

        # Test special room
        boss_note = TilemapService._generate_room_note("boss")
        assert isinstance(boss_note, str)
        assert len(boss_note) > 0
