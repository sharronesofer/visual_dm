"""
Tests for the EconomyManager class.
"""

import pytest
from unittest.mock import MagicMock, patch, call
from datetime import datetime
import json

from backend.systems.economy.economy_manager import EconomyManager
from backend.systems.economy.models.resource import Resource, ResourceType, ResourceData
from backend.systems.economy.models.trade_route import (
    TradeRoute,
    TradeRouteStatus,
    TradeRouteData,
)
from backend.systems.economy.models.market import Market, MarketData


class TestEconomyManager:
    """Test suite for the EconomyManager class."""

    @pytest.fixture
    def event_dispatcher(self):
        """Create a mock event dispatcher."""
        dispatcher = MagicMock()
        dispatcher.publish_sync = MagicMock()
        return dispatcher

    @pytest.fixture
    def db_session(self):
        """Create a mock database session."""
        return MagicMock()

    @pytest.fixture
    def resource_service(self):
        """Create a mock resource service."""
        service = MagicMock()
        return service

    @pytest.fixture
    def trade_service(self):
        """Create a mock trade service."""
        service = MagicMock()
        return service

    @pytest.fixture
    def market_service(self):
        """Create a mock market service."""
        service = MagicMock()
        return service

    @pytest.fixture
    def economy_manager(
        self,
        db_session,
        event_dispatcher,
        resource_service,
        trade_service,
        market_service,
    ):
        """Create an EconomyManager instance with mock dependencies."""
        with patch(
            "backend.core.events.EventDispatcher.get_instance",
            return_value=event_dispatcher,
        ):
            manager = EconomyManager(db_session)
            manager.resource_service = resource_service
            manager.trade_service = trade_service
            manager.market_service = market_service
            return manager

    @pytest.fixture
    def sample_resource(self):
        """Create a sample resource for testing."""
        return Resource(
            id=1,
            name="Gold",
            resource_type=ResourceType.GOLD,
            base_value=100.0,
            amount=50.0,
            region_id=5,
            description="Valuable metal",
        )

    @pytest.fixture
    def sample_trade_route(self):
        """Create a sample trade route for testing."""
        return TradeRoute(
            id=1,
            origin_region_id=5,
            destination_region_id=10,
            resource_id=1,
            quantity=20.0,
            price_per_unit=100.0,
            efficiency=0.9,
            status=TradeRouteStatus.ACTIVE,
        )

    @pytest.fixture
    def sample_market(self):
        """Create a sample market for testing."""
        return Market(
            id=1,
            region_id=5,
            name="Central Market",
            market_type="general",
            price_modifier=1.0,
        )

    def test_get_instance(self):
        """Test the singleton pattern of EconomyManager."""
        # Clear any existing instance
        EconomyManager._instance = None

        # First call should create a new instance
        with patch(
            "backend.core.events.EventDispatcher.get_instance", return_value=MagicMock()
        ):
            instance1 = EconomyManager.get_instance()
            assert instance1 is not None

            # Second call should return the same instance
            instance2 = EconomyManager.get_instance()
            assert instance2 is instance1

            # With a new db_session, should update the existing instance
            db_session = MagicMock()
            instance3 = EconomyManager.get_instance(db_session)
            assert instance3 is instance1
            assert instance3.db_session is db_session

    # Resource API tests

    def test_get_resource(self, economy_manager, resource_service, sample_resource):
        """Test getting a resource by ID."""
        resource_service.get_resource.return_value = sample_resource

        result = economy_manager.get_resource(1)

        resource_service.get_resource.assert_called_once_with(1)
        assert result == sample_resource

    def test_get_resources_by_region(
        self, economy_manager, resource_service, sample_resource
    ):
        """Test getting resources by region."""
        resource_service.get_resources_by_region.return_value = [sample_resource]

        result = economy_manager.get_resources_by_region(5)

        resource_service.get_resources_by_region.assert_called_once_with(5)
        assert result == [sample_resource]

    def test_create_resource(
        self, economy_manager, resource_service, sample_resource, event_dispatcher
    ):
        """Test creating a resource and emitting events."""
        resource_service.create_resource.return_value = sample_resource

        resource_data = ResourceData(
            name="Gold",
            resource_type=ResourceType.GOLD,
            base_value=100.0,
            amount=50.0,
            region_id=5,
            description="Valuable metal",
        )

        result = economy_manager.create_resource(resource_data)

        resource_service.create_resource.assert_called_once_with(resource_data)
        assert result == sample_resource

        # Verify event was emitted
        event_dispatcher.publish_sync.assert_called_once()
        call_args = event_dispatcher.publish_sync.call_args[0][0]
        assert call_args.event_type == "resource.created"
        assert call_args.data["resource_id"] == sample_resource.id
        assert call_args.data["region_id"] == sample_resource.region_id
        assert call_args.data["resource_type"] == sample_resource.resource_type

    def test_update_resource(
        self, economy_manager, resource_service, sample_resource, event_dispatcher
    ):
        """Test updating a resource and emitting events."""
        # Old resource for comparison
        old_resource = Resource(
            id=1,
            name="Gold",
            resource_type=ResourceType.GOLD,
            base_value=100.0,
            amount=40.0,  # Different from updated value
            region_id=5,
            description="Valuable metal",
        )

        resource_service.get_resource.return_value = old_resource
        resource_service.update_resource.return_value = sample_resource

        updates = {"amount": 50.0}
        result = economy_manager.update_resource(1, updates)

        resource_service.update_resource.assert_called_once_with(1, updates)
        assert result == sample_resource

        # Verify event was emitted
        event_dispatcher.publish_sync.assert_called_once()
        call_args = event_dispatcher.publish_sync.call_args[0][0]
        assert call_args.event_type == "resource.updated"
        assert call_args.data["resource_id"] == sample_resource.id
        assert call_args.data["amount"] == sample_resource.amount
        assert call_args.data["old_amount"] == old_resource.amount

    def test_delete_resource(
        self, economy_manager, resource_service, sample_resource, event_dispatcher
    ):
        """Test deleting a resource and emitting events."""
        resource_service.get_resource.return_value = sample_resource
        resource_service.delete_resource.return_value = True

        result = economy_manager.delete_resource(1)

        resource_service.delete_resource.assert_called_once_with(1)
        assert result is True

        # Verify event was emitted
        event_dispatcher.publish_sync.assert_called_once()
        call_args = event_dispatcher.publish_sync.call_args[0][0]
        assert call_args.event_type == "resource.deleted"
        assert call_args.data["resource_id"] == sample_resource.id
        assert call_args.data["region_id"] == sample_resource.region_id

    def test_adjust_resource_amount(
        self, economy_manager, resource_service, sample_resource, event_dispatcher
    ):
        """Test adjusting resource amount and emitting events."""
        # Old resource for comparison
        old_resource = Resource(
            id=1,
            name="Gold",
            resource_type=ResourceType.GOLD,
            base_value=100.0,
            amount=40.0,  # Different from updated value
            region_id=5,
            description="Valuable metal",
        )

        resource_service.get_resource.return_value = old_resource
        resource_service.adjust_resource_amount.return_value = sample_resource

        result = economy_manager.adjust_resource_amount(1, 10.0)

        resource_service.adjust_resource_amount.assert_called_once_with(1, 10.0)
        assert result == sample_resource

        # Verify event was emitted
        event_dispatcher.publish_sync.assert_called_once()
        call_args = event_dispatcher.publish_sync.call_args[0][0]
        assert call_args.event_type == "resource.amount_changed"
        assert call_args.data["resource_id"] == sample_resource.id
        assert call_args.data["amount"] == sample_resource.amount
        assert call_args.data["old_amount"] == old_resource.amount
        assert call_args.data["amount_change"] == 10.0

    def test_transfer_resource(
        self, economy_manager, resource_service, sample_resource, event_dispatcher
    ):
        """Test transferring resources between regions and emitting events."""
        resource_service.get_resource.return_value = sample_resource
        resource_service.transfer_resource.return_value = (True, "Transfer successful")

        result, message = economy_manager.transfer_resource(5, 10, 1, 20.0)

        resource_service.transfer_resource.assert_called_once_with(5, 10, 1, 20.0)
        assert result is True
        assert message == "Transfer successful"

        # Verify event was emitted
        event_dispatcher.publish_sync.assert_called_once()
        call_args = event_dispatcher.publish_sync.call_args[0][0]
        assert call_args.event_type == "resource.transferred"
        assert call_args.data["resource_id"] == sample_resource.id
        assert call_args.data["source_region_id"] == 5
        assert call_args.data["destination_region_id"] == 10
        assert call_args.data["amount"] == 20.0

    # Trade Route API tests

    def test_get_trade_route(self, economy_manager, trade_service, sample_trade_route):
        """Test getting a trade route by ID."""
        trade_service.get_trade_route.return_value = sample_trade_route

        result = economy_manager.get_trade_route(1)

        trade_service.get_trade_route.assert_called_once_with(1)
        assert result == sample_trade_route

    def test_create_trade_route(
        self, economy_manager, trade_service, sample_trade_route, event_dispatcher
    ):
        """Test creating a trade route and emitting events."""
        trade_service.create_trade_route.return_value = sample_trade_route

        trade_route_data = TradeRouteData(
            origin_region_id=5,
            destination_region_id=10,
            resource_id=1,
            quantity=20.0,
            price_per_unit=100.0,
            efficiency=0.9,
            status=TradeRouteStatus.ACTIVE,
        )

        result = economy_manager.create_trade_route(trade_route_data)

        trade_service.create_trade_route.assert_called_once_with(trade_route_data)
        assert result == sample_trade_route

        # Verify event was emitted
        event_dispatcher.publish_sync.assert_called_once()
        call_args = event_dispatcher.publish_sync.call_args[0][0]
        assert call_args.event_type == "trade.route_created"
        assert call_args.data["route_id"] == sample_trade_route.id
        assert call_args.data["origin_region_id"] == sample_trade_route.origin_region_id
        assert (
            call_args.data["destination_region_id"]
            == sample_trade_route.destination_region_id
        )
        assert call_args.data["resource_id"] == sample_trade_route.resource_id

    # Market API tests

    def test_get_market(self, economy_manager, market_service, sample_market):
        """Test getting a market by ID."""
        market_service.get_market.return_value = sample_market

        result = economy_manager.get_market(1)

        market_service.get_market.assert_called_once_with(1)
        assert result == sample_market

    def test_create_market(
        self, economy_manager, market_service, sample_market, event_dispatcher
    ):
        """Test creating a market and emitting events."""
        market_service.create_market.return_value = sample_market

        market_data = MarketData(
            region_id=5,
            name="Central Market",
            market_type="general",
            price_modifier=1.0,
        )

        result = economy_manager.create_market(market_data)

        market_service.create_market.assert_called_once_with(market_data)
        assert result == sample_market

        # Verify event was emitted
        event_dispatcher.publish_sync.assert_called_once()
        call_args = event_dispatcher.publish_sync.call_args[0][0]
        assert call_args.event_type == "market.created"
        assert call_args.data["market_id"] == sample_market.id
        assert call_args.data["region_id"] == sample_market.region_id
        assert call_args.data["name"] == sample_market.name

    # Process Tick tests

    def test_process_tick(
        self, economy_manager, resource_service, trade_service, market_service
    ):
        """Test the process_tick method."""
        # Mock the trade_service.process_trade_routes method
        trade_service.process_trade_routes.return_value = (
            2,
            [{"route_id": 1, "origin_region_id": 5, "destination_region_id": 10}],
        )

        # Mock the market_service.process_markets method
        market_service.process_markets.return_value = [
            {"market_id": 1, "region_id": 5, "updated": True}
        ]

        # Mock private methods to isolate the test
        with patch.object(
            economy_manager, "_generate_economy_events"
        ) as mock_generate_events:
            mock_generate_events.return_value = [
                {"event_type": "economy.price_change", "region_id": 5}
            ]

            result = economy_manager.process_tick(tick_count=2)

            # Verify service calls
            trade_service.process_trade_routes.assert_called_once_with(2)
            market_service.process_markets.assert_called_once()

            # Verify result structure
            assert "timestamp" in result
            assert result["tick_count"] == 2
            assert result["trade_routes_processed"] == 2
            assert "trade_events" in result
            assert "market_updates" in result
            assert "economy_events" in result

            # Verify _generate_economy_events call
            mock_generate_events.assert_called_once_with(2, {5, 10})

    def test_calculate_price_index(self, economy_manager, market_service):
        """Test the calculate_price_index method."""
        # Mock market_service.calculate_price_index
        market_service.calculate_price_index.return_value = {
            "global_price_index": 105.2,
            "regions": {
                "5": {"price_index": 102.3, "resources": {"gold": 100.0, "food": 120.0}}
            },
        }

        result = economy_manager.calculate_price_index(region_id=5)

        market_service.calculate_price_index.assert_called_once_with(region_id=5)
        assert result["global_price_index"] == 105.2
        assert "5" in result["regions"]
        assert result["regions"]["5"]["price_index"] == 102.3

    def test_emit_economy_event(self, economy_manager, event_dispatcher):
        """Test the _emit_economy_event method."""
        # Call the method directly
        economy_manager._emit_economy_event(
            event_type="resource.created", resource_id=1, region_id=5, amount=50.0
        )

        # Verify event dispatcher call
        event_dispatcher.publish_sync.assert_called_once()
        call_args = event_dispatcher.publish_sync.call_args[0][0]
        assert call_args.event_type == "resource.created"
        assert call_args.data["resource_id"] == 1
        assert call_args.data["region_id"] == 5
        assert call_args.data["amount"] == 50.0
        assert "timestamp" in call_args.data
