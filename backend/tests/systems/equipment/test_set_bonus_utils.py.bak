"""
Tests for Equipment Set Bonus utility functions.
"""

import pytest
from unittest.mock import patch, MagicMock, ANY

# Import the module to test
from backend.systems.equipment.set_bonus_utils import (
    calculate_set_bonuses,
    apply_set_bonuses,
    get_equipment_sets,
    get_equipment_set,
    create_equipment_set,
    update_equipment_set,
    delete_equipment_set,
)

# Import models
from backend.systems.equipment.models import Equipment, EquipmentSet


@pytest.fixture
def mock_db_session():
    """Create a mock database session."""
    with patch("backend.systems.equipment.set_bonus_utils.db") as mock_db:
        mock_db.session = MagicMock()
        yield mock_db


@pytest.fixture
def mock_event_dispatcher():
    """Create a mock event dispatcher."""
    with patch(
        "backend.systems.equipment.set_bonus_utils.EventDispatcher"
    ) as mock_dispatcher:
        mock_instance = MagicMock()
        mock_dispatcher.get_instance.return_value = mock_instance
        yield mock_instance


@pytest.fixture
def sample_equipment_set():
    """Create a sample equipment set for testing."""
    return {
        "id": 1,
        "name": "Warrior Set",
        "description": "A set of warrior equipment",
        "set_bonuses": {
            "2": {"stat_bonus": {"strength": 1}},
            "4": {"stat_bonus": {"strength": 2, "dexterity": 1}},
        },
        "item_ids": [101, 102, 103, 104],
    }


@pytest.fixture
def sample_character_equipment():
    """Create sample character equipment for testing."""
    return [
        {"id": 1, "slot": "head", "item_id": 101},
        {"id": 2, "slot": "chest", "item_id": 102},
        {"id": 3, "slot": "hands", "item_id": 103},
        {"id": 4, "slot": "weapon", "item_id": 105},  # Not part of the set
    ]


class TestSetBonusCalculation:
    """Tests for set bonus calculation functions."""

    def test_calculate_set_bonuses_no_sets(self, mock_db_session):
        """Test calculating set bonuses when no sets are equipped."""
        # Mock the query results - no equipment sets
        mock_equipment_sets = []

        # Mock the equipment query results - some equipment
        mock_equipment = [MagicMock(spec=Equipment), MagicMock(spec=Equipment)]
        mock_equipment[0].item_id = 1
        mock_equipment[1].item_id = 2

        # Set up the Equipment query mock
        mock_equipment_query = MagicMock()
        mock_equipment_query.filter_by.return_value = mock_equipment_query
        mock_equipment_query.all.return_value = mock_equipment

        # Set up the EquipmentSet query mock
        mock_set_query = MagicMock()
        mock_set_query.all.return_value = mock_equipment_sets

        # Patch the necessary queries
        with patch(
            "backend.systems.equipment.set_bonus_utils.Equipment.query",
            mock_equipment_query,
        ):
            with patch(
                "backend.systems.equipment.set_bonus_utils.EquipmentSet.query",
                mock_set_query,
            ):
                # Call the function
                result = calculate_set_bonuses(1)  # character_id = 1

                # Check the query was called correctly
                mock_equipment_query.filter_by.assert_called_once_with(character_id=1)

                # Check the result contains no bonuses
                assert result == []

    def test_calculate_set_bonuses_partial_set(
        self, mock_db_session, sample_equipment_set, sample_character_equipment
    ):
        """Test calculating set bonuses with a partial set equipped (only 2-piece bonus)."""
        # Mock the equipment set
        mock_equipment_set = MagicMock(spec=EquipmentSet)
        mock_equipment_set.to_dict.return_value = sample_equipment_set

        # Set up the Equipment query mock
        mock_equipment_query = MagicMock()
        mock_equipment_query.filter_by.return_value = mock_equipment_query
        mock_equipment_query.all.return_value = [
            MagicMock(spec=Equipment, item_id=101),
            MagicMock(spec=Equipment, item_id=102),
            MagicMock(spec=Equipment, item_id=105),  # Not part of the set
        ]

        # Set up the EquipmentSet query mock
        mock_set_query = MagicMock()
        mock_set_query.all.return_value = [mock_equipment_set]

        # Patch the necessary queries
        with patch(
            "backend.systems.equipment.set_bonus_utils.Equipment.query",
            mock_equipment_query,
        ):
            with patch(
                "backend.systems.equipment.set_bonus_utils.EquipmentSet.query",
                mock_set_query,
            ):
                # Call the function
                result = calculate_set_bonuses(1)  # character_id = 1

                # Check the queries were called correctly
                mock_equipment_query.filter_by.assert_called_once_with(character_id=1)

                # Check the result contains the 2-piece bonus but not the 4-piece bonus
                assert len(result) == 1
                assert result[0]["set_id"] == 1
                assert result[0]["set_name"] == "Warrior Set"
                assert result[0]["equipped_count"] == 2
                assert result[0]["total_pieces"] == 4
                assert result[0]["active_bonuses"] == {
                    "2": {"stat_bonus": {"strength": 1}}
                }
                assert "4" not in result[0]["active_bonuses"]

    def test_calculate_set_bonuses_full_set(
        self, mock_db_session, sample_equipment_set
    ):
        """Test calculating set bonuses with a full set equipped (all bonuses active)."""
        # Mock the equipment set
        mock_equipment_set = MagicMock(spec=EquipmentSet)
        mock_equipment_set.to_dict.return_value = sample_equipment_set

        # Set up the Equipment query mock
        mock_equipment_query = MagicMock()
        mock_equipment_query.filter_by.return_value = mock_equipment_query
        mock_equipment_query.all.return_value = [
            MagicMock(spec=Equipment, item_id=101),
            MagicMock(spec=Equipment, item_id=102),
            MagicMock(spec=Equipment, item_id=103),
            MagicMock(spec=Equipment, item_id=104),
        ]

        # Set up the EquipmentSet query mock
        mock_set_query = MagicMock()
        mock_set_query.all.return_value = [mock_equipment_set]

        # Patch the necessary queries
        with patch(
            "backend.systems.equipment.set_bonus_utils.Equipment.query",
            mock_equipment_query,
        ):
            with patch(
                "backend.systems.equipment.set_bonus_utils.EquipmentSet.query",
                mock_set_query,
            ):
                # Call the function
                result = calculate_set_bonuses(1)  # character_id = 1

                # Check the queries were called correctly
                mock_equipment_query.filter_by.assert_called_once_with(character_id=1)

                # Check the result contains both the 2-piece and 4-piece bonuses
                assert len(result) == 1
                assert result[0]["set_id"] == 1
                assert result[0]["set_name"] == "Warrior Set"
                assert result[0]["equipped_count"] == 4
                assert result[0]["total_pieces"] == 4
                assert result[0]["active_bonuses"] == {
                    "2": {"stat_bonus": {"strength": 1}},
                    "4": {"stat_bonus": {"strength": 2, "dexterity": 1}},
                }

    def test_apply_set_bonuses(self):
        """Test applying set bonuses to character stats."""
        # Define character stats and set bonuses
        character_stats = {"strength": 10, "dexterity": 8, "constitution": 12}

        set_bonuses = [
            {
                "set_id": 1,
                "set_name": "Warrior Set",
                "active_bonuses": {
                    "2": {"stat_bonus": {"strength": 1}},
                    "4": {"stat_bonus": {"strength": 2, "dexterity": 1}},
                },
            },
            {
                "set_id": 2,
                "set_name": "Scout Set",
                "active_bonuses": {"2": {"stat_bonus": {"dexterity": 2}}},
            },
        ]

        # Call the function
        result = apply_set_bonuses(character_stats, set_bonuses)

        # Check stats were increased correctly:
        # strength: 10 base + 1 (Warrior 2pc) + 2 (Warrior 4pc) = 13
        # dexterity: 8 base + 1 (Warrior 4pc) + 2 (Scout 2pc) = 11
        # constitution: 12 base (unchanged) = 12
        assert result["strength"] == 13
        assert result["dexterity"] == 11
        assert result["constitution"] == 12

        # Check set bonus information is included
        assert result["set_bonuses"] == set_bonuses


class TestSetManagement:
    """Tests for equipment set management functions."""

    def test_get_equipment_sets(self, mock_db_session):
        """Test getting all equipment sets."""
        # Mock the query results
        mock_sets = [MagicMock(spec=EquipmentSet), MagicMock(spec=EquipmentSet)]

        # Set up to_dict() for each mock
        mock_sets[0].to_dict.return_value = {"id": 1, "name": "Warrior Set"}
        mock_sets[1].to_dict.return_value = {"id": 2, "name": "Scout Set"}

        # Set up the query mock
        mock_query = MagicMock()
        mock_query.all.return_value = mock_sets

        # Mock the model query
        with patch(
            "backend.systems.equipment.set_bonus_utils.EquipmentSet.query", mock_query
        ):
            # Call the function
            result = get_equipment_sets()

            # Check the result contains the expected sets
            assert len(result) == 2
            assert result[0]["id"] == 1
            assert result[0]["name"] == "Warrior Set"
            assert result[1]["id"] == 2
            assert result[1]["name"] == "Scout Set"

    def test_get_equipment_set(self, mock_db_session):
        """Test getting a specific equipment set by ID."""
        # Mock the query result
        mock_set = MagicMock(spec=EquipmentSet)
        mock_set.to_dict.return_value = {"id": 1, "name": "Warrior Set"}

        # Set up the query mock
        mock_query = MagicMock()
        mock_query.filter_by.return_value = mock_query
        mock_query.first.return_value = mock_set

        # Mock the model query
        with patch(
            "backend.systems.equipment.set_bonus_utils.EquipmentSet.query", mock_query
        ):
            # Call the function
            result = get_equipment_set(1)  # set_id = 1

            # Check the query was called correctly
            mock_query.filter_by.assert_called_once_with(id=1)

            # Check the result is the expected set
            assert result["id"] == 1
            assert result["name"] == "Warrior Set"

    def test_get_equipment_set_not_found(self, mock_db_session):
        """Test getting a equipment set that doesn't exist."""
        # Set up the query mock to return None
        mock_query = MagicMock()
        mock_query.filter_by.return_value = mock_query
        mock_query.first.return_value = None

        # Mock the model query
        with patch(
            "backend.systems.equipment.set_bonus_utils.EquipmentSet.query", mock_query
        ):
            # Call the function
            result = get_equipment_set(999)  # Non-existent set_id

            # Check the query was called correctly
            mock_query.filter_by.assert_called_once_with(id=999)

            # Check the result is None
            assert result is None

    def test_create_equipment_set(self, mock_db_session, mock_event_dispatcher):
        """Test creating a new equipment set."""
        # Set up the new set data
        new_set_data = {
            "name": "Rogue Set",
            "description": "A set of rogue equipment",
            "set_bonuses": {
                "2": {"stat_bonus": {"dexterity": 1}},
                "4": {"stat_bonus": {"dexterity": 2, "agility": 1}},
            },
            "item_ids": [201, 202, 203, 204],
        }

        # Mock the new equipment set
        mock_set = MagicMock(spec=EquipmentSet)
        mock_set.id = 3
        mock_set.to_dict.return_value = {**new_set_data, "id": 3}

        # Patch the model constructor
        with patch(
            "backend.systems.equipment.set_bonus_utils.EquipmentSet",
            return_value=mock_set,
        ):
            # Call the function
            result = create_equipment_set(
                new_set_data["name"],
                new_set_data["description"],
                new_set_data["item_ids"],
                new_set_data["set_bonuses"],
            )

            # Check the model was created with the right data
            mock_db_session.session.add.assert_called_once_with(mock_set)
            mock_db_session.session.commit.assert_called_once()

            # Check event was dispatched
            mock_event_dispatcher.publish_sync.assert_called()

            # Check the result is the created set
            assert result == mock_set.to_dict.return_value

    def test_update_equipment_set(self, mock_db_session, mock_event_dispatcher):
        """Test updating an existing equipment set."""
        # Mock the existing set
        mock_set = MagicMock(spec=EquipmentSet)
        mock_set.id = 1
        mock_set.name = "Warrior Set"
        mock_set.description = "Original description"
        mock_set.item_ids = [101, 102, 103, 104]
        mock_set.set_bonuses = {
            "2": {"stat_bonus": {"strength": 1}},
            "4": {"stat_bonus": {"strength": 2}},
        }

        # Update data
        updated_data = {
            "name": "Elite Warrior Set",
            "description": "Updated description",
            "item_ids": [101, 102, 103, 104, 105],
            "set_bonuses": {
                "2": {"stat_bonus": {"strength": 2}},
                "4": {"stat_bonus": {"strength": 3}},
                "5": {"stat_bonus": {"strength": 4, "constitution": 2}},
            },
        }

        # Set up the query mock
        mock_query = MagicMock()
        mock_query.filter_by.return_value = mock_query
        mock_query.first.return_value = mock_set

        # Set up to_dict() to return updated data
        mock_set.to_dict.return_value = {**updated_data, "id": 1}

        # Mock the model query
        with patch(
            "backend.systems.equipment.set_bonus_utils.EquipmentSet.query", mock_query
        ):
            # Call the function with partial update
            result = update_equipment_set(
                1,
                name=updated_data["name"],
                description=updated_data["description"],
                item_ids=updated_data["item_ids"],
                set_bonuses=updated_data["set_bonuses"],
            )

            # Check the query was called correctly
            mock_query.filter_by.assert_called_once_with(id=1)

            # Check the model was updated with the right data
            assert mock_set.name == updated_data["name"]
            assert mock_set.description == updated_data["description"]
            assert mock_set.item_ids == updated_data["item_ids"]
            assert mock_set.set_bonuses == updated_data["set_bonuses"]

            # Check commit was called
            mock_db_session.session.commit.assert_called_once()

            # Check event was dispatched
            mock_event_dispatcher.publish_sync.assert_called()

            # Check the result is the updated set
            assert result == mock_set.to_dict.return_value

    def test_delete_equipment_set(self, mock_db_session, mock_event_dispatcher):
        """Test deleting an equipment set."""
        # Mock the existing set
        mock_set = MagicMock(spec=EquipmentSet)
        mock_set.id = 1
        mock_set.name = "Warrior Set"

        # Set up the query mock
        mock_query = MagicMock()
        mock_query.filter_by.return_value = mock_query
        mock_query.first.return_value = mock_set

        # Mock the model query
        with patch(
            "backend.systems.equipment.set_bonus_utils.EquipmentSet.query", mock_query
        ):
            # Call the function
            result = delete_equipment_set(1)  # set_id = 1

            # Check the query was called correctly
            mock_query.filter_by.assert_called_once_with(id=1)

            # Check the model was deleted
            mock_db_session.session.delete.assert_called_once_with(mock_set)
            mock_db_session.session.commit.assert_called_once()

            # Check event was dispatched
            mock_event_dispatcher.publish_sync.assert_called()

            # Check the result is True
            assert result is True

    def test_delete_equipment_set_not_found(self, mock_db_session):
        """Test deleting a equipment set that doesn't exist."""
        # Set up the query mock to return None
        mock_query = MagicMock()
        mock_query.filter_by.return_value = mock_query
        mock_query.first.return_value = None

        # Mock the model query
        with patch(
            "backend.systems.equipment.set_bonus_utils.EquipmentSet.query", mock_query
        ):
            # Call the function
            result = delete_equipment_set(999)  # Non-existent set_id

            # Check the query was called correctly
            mock_query.filter_by.assert_called_once_with(id=999)

            # Check the session operations were not called
            mock_db_session.session.delete.assert_not_called()
            mock_db_session.session.commit.assert_not_called()

            # Check the result is False
            assert result is False
