"""Add cleanup tables

Revision ID: fc827c04be48
Revises: 797e78e0b2d8
Create Date: 2025-05-02 17:32:22.179960

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'fc827c04be48'
down_revision = '797e78e0b2d8'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop foreign key constraints first
    op.drop_constraint('cleanup_entries_resource_id_fkey', 'cleanup_entries', type_='foreignkey')
    op.drop_constraint('cost_entries_provider_id_fkey', 'cost_entries', type_='foreignkey')
    op.drop_constraint('cloud_resources_provider_id_fkey', 'cloud_resources', type_='foreignkey')
    op.drop_constraint('budget_alerts_budget_id_fkey', 'budget_alerts', type_='foreignkey')
    
    # Drop tables in correct order
    op.drop_table('budget_alerts')
    op.drop_table('budgets')
    op.drop_table('cost_entries')
    op.drop_table('cloud_resources')
    
    # Create new tables
    op.create_table('cleanup_rules',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('resource_type', sa.String(), nullable=False),
    sa.Column('provider_id', sa.Integer(), nullable=False),
    sa.Column('idle_threshold_days', sa.Integer(), nullable=False),
    sa.Column('cost_threshold', sa.Float(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['provider_id'], ['cloud_providers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    # Modify existing tables
    op.add_column('cleanup_entries', sa.Column('provider_id', sa.Integer(), nullable=False))
    op.add_column('cleanup_entries', sa.Column('resource_type', sa.String(), nullable=False))
    op.add_column('cleanup_entries', sa.Column('last_accessed', sa.DateTime(), nullable=True))
    op.add_column('cleanup_entries', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('cleanup_entries', sa.Column('estimated_cost', sa.Float(), nullable=True))
    op.add_column('cleanup_entries', sa.Column('is_cleaned', sa.Boolean(), nullable=True))
    op.add_column('cleanup_entries', sa.Column('cleanup_reason', sa.String(), nullable=True))
    op.add_column('cleanup_entries', sa.Column('rule_id', sa.Integer(), nullable=True))
    op.alter_column('cleanup_entries', 'resource_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(),
               existing_nullable=False)
    op.create_foreign_key(None, 'cleanup_entries', 'cloud_providers', ['provider_id'], ['id'])
    op.create_foreign_key(None, 'cleanup_entries', 'cleanup_rules', ['rule_id'], ['id'])
    op.drop_column('cleanup_entries', 'approved_by')
    op.drop_column('cleanup_entries', 'identified_at')
    op.drop_column('cleanup_entries', 'estimated_savings')
    op.drop_column('cleanup_entries', 'notified_at')
    op.drop_column('cleanup_entries', 'reason')
    op.drop_column('cleanup_entries', 'exemption_reason')
    op.drop_column('cleanup_entries', 'status')
    op.drop_column('cleanup_entries', 'approved_at')
    
    # Modify cloud_providers table
    op.add_column('cloud_providers', sa.Column('api_key', sa.String(), nullable=False))
    op.alter_column('cloud_providers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('cloud_providers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint('cloud_providers_name_key', 'cloud_providers', type_='unique')
    op.drop_column('cloud_providers', 'api_credentials')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('cloud_providers', sa.Column('api_credentials', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.create_unique_constraint('cloud_providers_name_key', 'cloud_providers', ['name'])
    op.alter_column('cloud_providers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('cloud_providers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('cloud_providers', 'api_key')
    op.add_column('cleanup_entries', sa.Column('approved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('cleanup_entries', sa.Column('status', postgresql.ENUM('identified', 'notified', 'approved', 'cleaned', 'failed', 'exempted', name='cleanup_status'), server_default=sa.text("'identified'::cleanup_status"), autoincrement=False, nullable=False))
    op.add_column('cleanup_entries', sa.Column('exemption_reason', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('cleanup_entries', sa.Column('reason', sa.VARCHAR(length=500), autoincrement=False, nullable=False))
    op.add_column('cleanup_entries', sa.Column('notified_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('cleanup_entries', sa.Column('estimated_savings', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('cleanup_entries', sa.Column('identified_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('cleanup_entries', sa.Column('approved_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'cleanup_entries', type_='foreignkey')
    op.drop_constraint(None, 'cleanup_entries', type_='foreignkey')
    op.create_foreign_key('cleanup_entries_resource_id_fkey', 'cleanup_entries', 'cloud_resources', ['resource_id'], ['id'])
    op.alter_column('cleanup_entries', 'resource_id',
               existing_type=sa.String(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.drop_column('cleanup_entries', 'rule_id')
    op.drop_column('cleanup_entries', 'cleanup_reason')
    op.drop_column('cleanup_entries', 'is_cleaned')
    op.drop_column('cleanup_entries', 'estimated_cost')
    op.drop_column('cleanup_entries', 'created_at')
    op.drop_column('cleanup_entries', 'last_accessed')
    op.drop_column('cleanup_entries', 'resource_type')
    op.drop_column('cleanup_entries', 'provider_id')
    
    # Recreate tables in correct order
    op.create_table('cloud_resources',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('resource_id', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('resource_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('region', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('last_used', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['cloud_providers.id'], name='cloud_resources_provider_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='cloud_resources_pkey')
    )
    
    op.create_table('budgets',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('budgets_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('amount', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=3), autoincrement=False, nullable=False),
    sa.Column('period', postgresql.ENUM('monthly', 'quarterly', 'yearly', name='budget_period'), autoincrement=False, nullable=False),
    sa.Column('scope_type', postgresql.ENUM('project', 'team', 'service', name='budget_scope'), autoincrement=False, nullable=False),
    sa.Column('scope_id', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('alert_thresholds', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='budgets_pkey'),
    postgresql_ignore_search_path=False
    )
    
    op.create_table('cost_entries',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('service_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('resource_id', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('cost_amount', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=3), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['cloud_providers.id'], name='cost_entries_provider_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='cost_entries_pkey')
    )
    
    op.create_table('budget_alerts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('budget_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('threshold', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('current_usage', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('percentage_used', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('alert_time', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('acknowledged_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('acknowledged_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['budget_id'], ['budgets.id'], name='budget_alerts_budget_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='budget_alerts_pkey')
    )
    
    op.drop_table('cleanup_rules')
    # ### end Alembic commands ### 