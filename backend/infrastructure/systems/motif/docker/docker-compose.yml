version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: motif_postgres
    environment:
      POSTGRES_DB: motif_db
      POSTGRES_USER: motif_user
      POSTGRES_PASSWORD: motif_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U motif_user -d motif_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - motif_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: motif_redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - motif_network

  # Motif System API
  motif_api:
    build:
      context: ../../../../..
      dockerfile: backend/infrastructure/systems/motif/docker/Dockerfile
    container_name: motif_api
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://motif_user:motif_password@postgres:5432/motif_db
      
      # Redis
      REDIS_URL: redis://:redis_password@redis:6379/0
      
      # Application
      ENVIRONMENT: production
      LOG_LEVEL: info
      DEBUG: false
      
      # API Keys (set in .env file)
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY}
      
      # Security
      SECRET_KEY: ${SECRET_KEY:-change-this-in-production}
      
      # Performance
      POOL_SIZE: 20
      MAX_OVERFLOW: 30
      POOL_TIMEOUT: 30
      
      # Motif system specific
      DEFAULT_MOTIF_INTENSITY: 5
      MAX_CONCURRENT_MOTIFS_PER_REGION: 5
      MOTIF_DECAY_RATE_DAYS: 0.1
      CHAOS_TRIGGER_THRESHOLD: 7.5
    
    ports:
      - "8000:8000"
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/motif/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    restart: unless-stopped
    
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    
    networks:
      - motif_network

  # Database Migration Service (runs once)
  motif_migrate:
    build:
      context: ../../../../..
      dockerfile: backend/infrastructure/systems/motif/docker/Dockerfile
    container_name: motif_migrate
    environment:
      DATABASE_URL: postgresql+asyncpg://motif_user:motif_password@postgres:5432/motif_db
      PYTHONPATH: /app
    command: python backend/infrastructure/systems/motif/database/manage.py --database-url postgresql+asyncpg://motif_user:motif_password@postgres:5432/motif_db init
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    networks:
      - motif_network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: motif_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - motif_api
    restart: unless-stopped
    networks:
      - motif_network
    profiles:
      - production

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: motif_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - motif_network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: motif_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: grafana_admin_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - motif_network
    profiles:
      - monitoring

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  motif_network:
    driver: bridge 