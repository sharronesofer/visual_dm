"""
Events module for loot_utils
Auto-generated by splitting loot_utils.py
"""

import random
from random import random, choice, randint
from uuid import uuid4
from copy import deepcopy
from typing import Dict, List, Any, Tuple, Optional
from datetime import datetime, timedelta
import math
import hashlib
from backend.infrastructure.events import EventDispatcher, EventBase

def log_loot_generation_stats(
    monster_levels: List[int],
    items_generated: List[Dict[str, Any]],
    gold_amount: int,
    source_type: str,
    location_id: Optional[int] = None,
    region_id: Optional[int] = None
) -> None:
    """
    Logs loot generation statistics for analytics.
    
    Args:
        monster_levels: List of monster levels
        items_generated: List of items generated
        gold_amount: Amount of gold generated
        source_type: Source of loot (e.g., "combat", "chest", "quest")
        location_id: Optional ID of the location
        region_id: Optional ID of the region
    """
    # Calculate average monster level
    avg_monster_level = sum(monster_levels) / len(monster_levels) if monster_levels else 0
    
    # Log loot generation
    dispatcher = EventDispatcher.get_instance()
    event = LootAnalyticsEvent(
        event_type="loot.analytics",
        event_category="loot",
        event_action="generation",
        source_type=source_type,
        location_id=location_id,
        region_id=region_id,
        gold_amount=gold_amount,
        value=float(len(items_generated)),
        metadata={
            "avg_monster_level": avg_monster_level,
            "max_monster_level": max(monster_levels) if monster_levels else 0,
            "gold_amount": gold_amount,
            "items_count": len(items_generated),
            "rarity_distribution": {item.get("rarity", "common"): 1 for item in items_generated}
        }
    )
    dispatcher.publish_sync(event)
    
    # Log gold generation relative to monster level
    if monster_levels:
        gold_per_level = gold_amount / sum(monster_levels)
        dispatcher = EventDispatcher.get_instance()
        event = LootAnalyticsEvent(
            event_type="loot.analytics",
            event_category="loot",
            event_action="gold_per_level",
            source_type=source_type,
            location_id=location_id,
            region_id=region_id,
            gold_amount=gold_amount,
            value=gold_per_level,
            metadata={
                "avg_monster_level": avg_monster_level,
                "total_monster_levels": sum(monster_levels),
                "gold_amount": gold_amount,
                "gold_per_level": gold_per_level
            }
        )
        dispatcher.publish_sync(event)

def rarity_progression_to_level(rarity: str) -> int:
    """
    Converts a rarity to a numeric progression level.
    
    Args:
        rarity: Rarity string
        
    Returns:
        Numeric level (1-5)
    """
    rarity_levels = {
        "common": 1,
        "uncommon": 2,
        "rare": 3,
        "epic": 4,
        "legendary": 5
    }
    return rarity_levels.get(rarity.lower(), 1)

