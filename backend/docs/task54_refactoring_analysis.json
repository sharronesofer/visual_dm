{
  "analysis_summary": {
    "total_files_analyzed": 144,
    "critical_priority": 31,
    "high_priority": 54,
    "medium_priority": 51,
    "low_priority": 8
  },
  "target_files": [
    {
      "path": "systems/combat/combat_class.py",
      "lines": 2347,
      "classes": [
        "Combat"
      ],
      "functions": [
        "__init__",
        "_initialize_character_positions",
        "_on_turn_start",
        "_on_turn_end",
        "start_combat",
        "_initialize_turn_queue",
        "_calculate_initiative",
        "_calculate_initiative_for_character",
        "next_turn",
        "take_action",
        "_effect_to_dict",
        "_dict_to_effect",
        "_character_to_dict",
        "serialize",
        "deserialize",
        "to_json",
        "from_json",
        "save_to_file",
        "load_from_file",
        "pause_combat",
        "resume_combat",
        "handle_state_transition",
        "get_state_history",
        "undo_last_action",
        "apply_effect",
        "remove_effect",
        "calculate_damage",
        "apply_damage",
        "apply_healing",
        "get_available_actions",
        "get_combat_state",
        "add_character",
        "remove_character",
        "end_combat",
        "handle_death",
        "delay_turn",
        "move_character",
        "recompute_initiative",
        "get_effect_types",
        "get_character_effects",
        "clear_character_effects",
        "use_movement",
        "ready_action",
        "check_readied_actions",
        "register_reaction_trigger",
        "trigger_reaction",
        "get_available_reactions",
        "process_turn_phase",
        "coordinate_subsystems",
        "handle_status_effects",
        "register_system_hooks",
        "execute_simultaneous_actions",
        "toggle_debug_mode",
        "get_visible_entities",
        "execute_perception_check",
        "safe_getattr"
      ],
      "imports": [
        "logging",
        "random",
        "time",
        "uuid",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple",
        "typing.Union",
        "typing.Callable",
        "backend.systems.combat.combat_state_class.CombatState",
        "backend.systems.combat.turn_queue.TurnQueue",
        "backend.systems.combat.unified_effects.EffectPipeline",
        "backend.systems.combat.unified_effects.CombatEffect",
        "backend.systems.combat.object_pool.combat_pool_manager",
        "backend.systems.combat.action_system.action_system",
        "backend.systems.combat.action_system.ActionResult",
        "backend.systems.combat.action_system.ActionType",
        "backend.systems.combat.combat_area.create_combat_area",
        "backend.systems.combat.combat_area.CombatArea",
        "backend.systems.combat.combat_area.Position",
        "backend.systems.combat.fog_of_war.create_fog_of_war",
        "backend.systems.combat.fog_of_war.FogOfWar",
        "backend.systems.combat.fog_of_war.VisibilityStatus",
        "backend.systems.combat.combat_animation_system.combat_animation_system",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.CombatEvent",
        "backend.systems.combat.effect_visualizer.effect_visualizer",
        "backend.systems.combat.combat_debug_interface.combat_debug_interface",
        "json",
        "json",
        "unified_effects.CombatEffect",
        "unified_effects.EffectType",
        "unified_effects.EffectStackingBehavior",
        "unified_effects.BuffEffect",
        "unified_effects.DebuffEffect",
        "unified_effects.DamageOverTimeEffect",
        "unified_effects.HealOverTimeEffect",
        "unified_effects.ConditionEffect",
        "unified_effects.ResistanceEffect",
        "unified_effects.VulnerabilityEffect",
        "unified_effects.ImmunityEffect",
        "combat_state_class.CombatState"
      ],
      "dependencies": "{'combat', 'events'}",
      "responsibilities": [
        "Configuration",
        "Database Operations",
        "Event Handling",
        "Business Logic",
        "File I/O"
      ],
      "complexity_score": 100,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "_on_turn_start",
            "_on_turn_end",
            "register_reaction_trigger"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_calculate_initiative",
            "_calculate_initiative_for_character",
            "handle_state_transition",
            "calculate_damage",
            "handle_death",
            "process_turn_phase",
            "handle_status_effects",
            "execute_simultaneous_actions",
            "execute_perception_check"
          ],
          "estimated_lines": 180,
          "priority": "high"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "save_to_file",
            "load_from_file",
            "get_state_history",
            "get_available_actions",
            "get_combat_state",
            "get_effect_types",
            "get_character_effects",
            "get_available_reactions",
            "get_visible_entities"
          ],
          "estimated_lines": 180,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "Combat"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/diplomacy/services.py",
      "lines": 2226,
      "classes": [
        "TensionService",
        "DiplomacyService",
        "TensionChangeEvent",
        "StatusChangeEvent"
      ],
      "functions": [
        "__init__",
        "get_faction_relationship",
        "get_faction_relationships",
        "update_faction_tension",
        "set_diplomatic_status",
        "are_at_war",
        "are_allied",
        "check_war_threshold",
        "__init__",
        "create_treaty",
        "_update_faction_relationships_for_treaty",
        "_create_treaty_event",
        "get_treaty",
        "expire_treaty",
        "_update_relationships_for_expired_treaty",
        "list_treaties",
        "start_negotiation",
        "_create_negotiation_event",
        "_update_relationships_for_negotiation",
        "get_negotiation",
        "make_offer",
        "accept_offer",
        "reject_offer",
        "_update_relationships_for_completed_negotiation",
        "get_faction_relationship",
        "get_faction_relationships",
        "update_faction_tension",
        "set_diplomatic_status",
        "are_at_war",
        "are_allied",
        "has_treaty_of_type",
        "report_treaty_violation",
        "acknowledge_violation",
        "resolve_violation",
        "get_treaty_violations",
        "check_treaty_compliance",
        "enforce_treaties_automatically",
        "create_diplomatic_incident",
        "get_diplomatic_incident",
        "update_diplomatic_incident",
        "list_diplomatic_incidents",
        "resolve_diplomatic_incident",
        "notify_treaty_breach",
        "create_ultimatum",
        "get_ultimatum",
        "update_ultimatum",
        "list_ultimatums",
        "respond_to_ultimatum",
        "check_expired_ultimatums",
        "_handle_accepted_ultimatum",
        "_handle_rejected_ultimatum",
        "create_sanction",
        "get_sanction",
        "update_sanction",
        "lift_sanction",
        "list_sanctions",
        "record_sanction_violation",
        "check_expired_sanctions",
        "create_diplomatic_event",
        "add_negotiation_offer",
        "__init__",
        "__init__"
      ],
      "imports": [
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "uuid.UUID",
        "uuid.uuid4",
        "logging",
        "backend.systems.diplomacy.models.DiplomaticEvent",
        "backend.systems.diplomacy.models.DiplomaticEventType",
        "backend.systems.diplomacy.models.DiplomaticStatus",
        "backend.systems.diplomacy.models.Negotiation",
        "backend.systems.diplomacy.models.NegotiationOffer",
        "backend.systems.diplomacy.models.NegotiationStatus",
        "backend.systems.diplomacy.models.Treaty",
        "backend.systems.diplomacy.models.TreatyType",
        "backend.systems.diplomacy.models.TreatyViolation",
        "backend.systems.diplomacy.models.TreatyViolationType",
        "backend.systems.diplomacy.models.DiplomaticIncident",
        "backend.systems.diplomacy.models.DiplomaticIncidentType",
        "backend.systems.diplomacy.models.DiplomaticIncidentSeverity",
        "backend.systems.diplomacy.models.Ultimatum",
        "backend.systems.diplomacy.models.UltimatumStatus",
        "backend.systems.diplomacy.models.Sanction",
        "backend.systems.diplomacy.models.SanctionType",
        "backend.systems.diplomacy.models.SanctionStatus",
        "backend.systems.diplomacy.repository.DiplomacyRepository",
        "backend.systems.events.event_dispatcher.EventDispatcher",
        "logging"
      ],
      "dependencies": "{'diplomacy', 'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling",
        "Configuration"
      ],
      "complexity_score": 100,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_faction_relationship",
            "get_faction_relationships",
            "update_faction_tension",
            "create_treaty",
            "_update_faction_relationships_for_treaty",
            "_create_treaty_event",
            "get_treaty",
            "_update_relationships_for_expired_treaty",
            "_create_negotiation_event",
            "_update_relationships_for_negotiation",
            "get_negotiation",
            "_update_relationships_for_completed_negotiation",
            "get_faction_relationship",
            "get_faction_relationships",
            "update_faction_tension",
            "get_treaty_violations",
            "create_diplomatic_incident",
            "get_diplomatic_incident",
            "update_diplomatic_incident",
            "create_ultimatum",
            "get_ultimatum",
            "update_ultimatum",
            "create_sanction",
            "get_sanction",
            "update_sanction",
            "create_diplomatic_event"
          ],
          "estimated_lines": 520,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_handle_accepted_ultimatum",
            "_handle_rejected_ultimatum"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "record_sanction_violation",
            "add_negotiation_offer"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "TensionService",
            "DiplomacyService",
            "TensionChangeEvent",
            "StatusChangeEvent"
          ],
          "estimated_lines": 120,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/motif/consolidated_manager.py",
      "lines": 2130,
      "classes": [
        "MotifManager",
        "MotifCreatedEvent",
        "MotifTriggeredEvent",
        "MotifStrengthChangedEvent",
        "StorageManager"
      ],
      "functions": [
        "get_instance",
        "__init__",
        "_register_event_handlers",
        "stop_background_tasks",
        "register_event_listener",
        "unregister_event_listener",
        "roll_chaos_event",
        "_on_world_created",
        "_on_world_deleted",
        "_should_use_cache",
        "_invalidate_cache",
        "get_motif_patterns",
        "record_motif_interaction",
        "get_regional_motifs",
        "get_global_motifs",
        "get_instance",
        "save",
        "load"
      ],
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Optional",
        "typing.Union",
        "typing.Any",
        "typing.Tuple",
        "typing.Set",
        "datetime.datetime",
        "datetime.timedelta",
        "logging",
        "random",
        "asyncio",
        "pathlib.Path",
        "uuid.uuid4",
        "math",
        "models.Motif",
        "models.MotifCreate",
        "models.MotifUpdate",
        "models.MotifFilter",
        "models.MotifScope",
        "models.MotifLifecycle",
        "models.MotifCategory",
        "models.MotifEffect",
        "models.LocationInfo",
        "models.Vector2",
        "models.MotifTriggerContext",
        "service.MotifService",
        "repository.MotifRepository",
        "utils.generate_motif_name",
        "utils.generate_motif_description",
        "utils.estimate_motif_compatibility",
        "utils.generate_realistic_duration",
        "utils.motif_to_narrative_context",
        "utils.calculate_motif_spread",
        "utils.roll_chaos_event",
        "utils.NARRATIVE_CHAOS_TABLE",
        "utils.detect_motif_conflicts",
        "utils.get_compatible_motifs",
        "events.event_dispatcher.EventDispatcher",
        "events.event_types.MotifCreatedEvent",
        "events.event_types.MotifTriggeredEvent",
        "events.event_types.MotifStrengthChangedEvent",
        "backend.systems.storage.storage_service.StorageService",
        "events.event_base.EventBase",
        "collections.Counter",
        "random",
        "uuid",
        "datetime.datetime",
        "random",
        "uuid",
        "datetime.datetime",
        "datetime.timedelta",
        "uuid",
        "datetime.datetime",
        "collections.Counter",
        "models.Motif",
        "models.MotifCategory",
        "models.MotifScope",
        "models.MotifLifecycle",
        "models.LocationInfo",
        "models.Motif",
        "models.MotifCategory",
        "models.MotifScope",
        "models.MotifLifecycle",
        "models.MotifCategory",
        "random",
        "models.MotifCategory",
        "random"
      ],
      "dependencies": "{'storage'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling",
        "Configuration"
      ],
      "complexity_score": 100,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_instance",
            "get_motif_patterns",
            "get_regional_motifs",
            "get_global_motifs",
            "get_instance"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "_on_world_created",
            "_on_world_deleted"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_invalidate_cache"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "MotifManager",
            "MotifCreatedEvent",
            "MotifTriggeredEvent",
            "MotifStrengthChangedEvent",
            "StorageManager"
          ],
          "estimated_lines": 150,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/analytics/services/analytics_service.py",
      "lines": 2004,
      "classes": [
        "AnalyticsEventType",
        "AnalyticsService"
      ],
      "functions": [
        "get_analytics_service",
        "get_all",
        "__new__",
        "__init__",
        "storage_path",
        "storage_path",
        "_ensure_async_components",
        "get_instance",
        "register_with_dispatcher",
        "_map_event_to_analytics_type",
        "log_event",
        "queue_track_event",
        "_get_event_type_from_category_action",
        "_store_event_sync",
        "generate_dataset",
        "_generate_dataset_sync",
        "get_event_directory",
        "_start_worker",
        "get_analytics_middleware",
        "_queue_event_safely",
        "_event_matches_filters",
        "get_event_file_path",
        "_get_event_file_path",
        "_append_to_file_sync",
        "analytics_middleware",
        "analytics_middleware",
        "analytics_middleware"
      ],
      "imports": [
        "logging",
        "json",
        "datetime.datetime",
        "datetime.timedelta",
        "os",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Type",
        "typing.Union",
        "typing.Callable",
        "typing.Awaitable",
        "pathlib.Path",
        "asyncio",
        "unittest.mock.MagicMock",
        "inspect",
        "unittest.mock",
        "asyncio.Task",
        "aiofiles",
        "builtins",
        "backend.systems.events.EventBase",
        "backend.systems.events.EventType",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.get_dispatcher",
        "backend.systems.events.SystemEvent",
        "backend.systems.events.GameEvent",
        "backend.systems.events.CharacterEvent",
        "backend.systems.events.FactionEvent",
        "backend.systems.events.MemoryEvent",
        "backend.systems.events.RumorEvent",
        "backend.systems.events.NarrativeEvent"
      ],
      "dependencies": "{'events'}",
      "responsibilities": [
        "Configuration",
        "Database Operations",
        "Event Handling",
        "Business Logic",
        "File I/O"
      ],
      "complexity_score": 100,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_analytics_service",
            "get_all",
            "get_instance",
            "_get_event_type_from_category_action",
            "get_event_directory",
            "get_analytics_middleware",
            "get_event_file_path",
            "_get_event_file_path"
          ],
          "estimated_lines": 160,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_dataset",
            "_generate_dataset_sync"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "AnalyticsEventType",
            "AnalyticsService"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/character/services/character_service.py",
      "lines": 1945,
      "classes": [
        "CharacterService"
      ],
      "functions": [
        "__init__",
        "_calculate_ability_modifier",
        "_has_spellcasting",
        "_calculate_xp_for_level",
        "_get_character_orm_by_id",
        "_get_character_orm_by_uuid",
        "create_character_from_builder",
        "get_character_by_id",
        "get_character_by_uuid",
        "get_character_builder_by_id",
        "update_character_data",
        "delete_character",
        "level_up_character",
        "validate_character_creation_data",
        "add_faction_relationship",
        "add_quest_relationship",
        "get_character_relationships",
        "add_character_relationship",
        "get_character_mood",
        "add_character_mood_modifier",
        "add_character_goal",
        "get_character_goals",
        "update_goal_progress",
        "complete_goal",
        "process_goal_failure",
        "process_goal_completion",
        "build_character_from_input",
        "_initialize_character_goals",
        "_initialize_character_mood",
        "update_mood_from_relationship_change",
        "create_character",
        "get_character",
        "add_experience_points",
        "update_personal_goal_progress",
        "apply_mood_effects_to_relationships",
        "create_character_with_mood"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "typing.Union",
        "typing.Generator",
        "sqlalchemy.orm.Session",
        "sqlalchemy.exc.SQLAlchemyError",
        "uuid.UUID",
        "uuid.uuid4",
        "random",
        "math",
        "datetime.datetime",
        "time",
        "logging",
        "uuid",
        "fastapi.HTTPException",
        "unittest.mock.MagicMock",
        "backend.systems.character.core.character_model.Character",
        "backend.systems.character.core.character_model.Skill",
        "backend.systems.character.core.character_builder.CharacterBuilder",
        "backend.systems.character.models.relationship.Relationship",
        "backend.systems.character.models.relationship.RelationshipType",
        "backend.systems.character.models.mood.CharacterMood",
        "backend.systems.character.models.mood.EmotionalState",
        "backend.systems.character.models.mood.MoodIntensity",
        "backend.systems.character.models.mood.MoodModifier",
        "backend.systems.character.models.goal.Goal",
        "backend.systems.character.models.goal.GoalType",
        "backend.systems.character.models.goal.GoalPriority",
        "backend.systems.character.models.goal.GoalStatus",
        "backend.systems.character.services.relationship_service.RelationshipService",
        "backend.systems.character.services.mood_service.MoodService",
        "backend.systems.character.services.goal_service.GoalService",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.CharacterCreated",
        "backend.systems.events.CharacterLeveledUp",
        "backend.systems.events.CharacterUpdated",
        "backend.systems.events.CharacterDeleted",
        "backend.systems.events.MoodChanged",
        "backend.systems.events.GoalCreated",
        "backend.systems.events.GoalCompleted",
        "backend.systems.events.GoalFailed",
        "backend.systems.events.GoalProgressUpdated",
        "backend.systems.shared.database.get_db_session",
        "backend.systems.shared.database.database_objects.db",
        "backend.systems.shared.utils.common.error.NotFoundError",
        "backend.systems.shared.utils.common.error.DatabaseError",
        "backend.systems.shared.utils.common.error.ValidationError",
        "backend.systems.shared.rules.balance_constants",
        "backend.systems.shared.rules.load_data",
        "backend.systems.world_state.world_state_manager.WorldStateManager",
        "backend.systems.shared.utils.common.error.ValidationError",
        "backend.systems.shared.utils.common.error.DatabaseError",
        "backend.systems.shared.utils.common.error.ValidationError",
        "backend.systems.shared.utils.common.error.DatabaseError"
      ],
      "dependencies": "{'shared', 'character', 'sqlalchemy', 'fastapi', 'world_state', 'events'}",
      "responsibilities": [
        "Configuration",
        "Database Operations",
        "Event Handling",
        "API/Routing",
        "Business Logic"
      ],
      "complexity_score": 99,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_calculate_ability_modifier",
            "_calculate_xp_for_level",
            "validate_character_creation_data",
            "process_goal_failure",
            "process_goal_completion"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "_get_character_orm_by_id",
            "_get_character_orm_by_uuid",
            "create_character_from_builder",
            "get_character_by_id",
            "get_character_by_uuid",
            "get_character_builder_by_id",
            "update_character_data",
            "delete_character",
            "get_character_relationships",
            "get_character_mood",
            "get_character_goals",
            "update_goal_progress",
            "update_mood_from_relationship_change",
            "create_character",
            "get_character",
            "update_personal_goal_progress",
            "create_character_with_mood"
          ],
          "estimated_lines": 340,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "add_faction_relationship"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "CharacterService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/llm/core/dm_core.py",
      "lines": 1702,
      "classes": [
        "ContextRequest",
        "ContextResponse",
        "QuestReminderEvent",
        "RequestClassificationEvent",
        "DungeonMaster",
        "MotifEngine"
      ],
      "functions": [
        "_get_gpt_client",
        "gather_dm_context",
        "fetch_faction_name",
        "generate_region_narration_context",
        "get_tension_flavor_text",
        "resolve_names",
        "gather_relationship_context",
        "gather_faction_context",
        "generate_npc_quest_dialogue",
        "generate_npc_quest_reminder",
        "classify_request",
        "narrate_combat_action",
        "get_tension",
        "context_handler",
        "get_instance",
        "__init__",
        "_register_event_handlers",
        "create_motif",
        "record_motif_occurrence",
        "suggest_motifs_for_context",
        "get_motif_narrative_context",
        "create_faction",
        "set_faction_relationship",
        "get_faction_conflicts",
        "get_faction_narrative_context",
        "_on_memory_created",
        "_on_memory_reinforced",
        "_on_rumor_created",
        "_on_motif_created",
        "_on_motif_occurrence",
        "_on_gpt_request",
        "_on_gpt_response",
        "_on_gpt_error",
        "_on_context_request",
        "_on_quest_reminder",
        "_on_request_classification",
        "get_tension",
        "get_relationship_tier",
        "get_instance",
        "get_active_motifs"
      ],
      "imports": [
        "datetime.datetime",
        "datetime.timedelta",
        "functools.lru_cache",
        "logging",
        "difflib",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "backend.systems.llm.core.event_integration.EventDispatcher",
        "backend.systems.llm.core.event_integration.EventBase",
        "backend.systems.llm.repositories.player_repository.PlayerRepository",
        "backend.systems.llm.repositories.region_repository.RegionRepository",
        "backend.systems.llm.repositories.npc_repository.NPCRepository",
        "backend.systems.llm.repositories.faction_repository.FactionRepository",
        "backend.systems.llm.repositories.world_repository.WorldRepository",
        "backend.systems.memory.services.memory_manager.MemoryManager",
        "backend.systems.memory.models.memory.Memory",
        "backend.systems.rumor.service.RumorService",
        "backend.systems.llm.core.motif_system.MotifSystem",
        "backend.systems.llm.core.faction_system.FactionSystem",
        "logging",
        "json",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "datetime.datetime",
        "backend.systems.llm.core.event_integration.EventDispatcher",
        "backend.systems.memory.services.memory_manager.MemoryManager",
        "backend.systems.rumor.models.Rumor",
        "backend.systems.llm.core.motif_system.MotifSystem",
        "backend.systems.llm.core.motif_system.Motif",
        "backend.systems.llm.core.faction_system.FactionSystem",
        "backend.systems.llm.core.faction_system.Faction",
        "backend.systems.llm.services.gpt_client.GPTClient",
        "backend.systems.motif.get_motif_manager",
        "backend.systems.tension_war.services.tension_manager.TensionManager",
        "backend.systems.character.npc.npc_utils.get_relationship_tier",
        "backend.systems.memory.models.memory.MemoryType",
        "backend.systems.llm.core.gpt_integration.GPTRequestEvent"
      ],
      "dependencies": "{'motif', 'character', 'rumor', 'memory', 'tension_war', 'llm'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 100,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "_get_gpt_client",
            "get_tension_flavor_text",
            "get_tension",
            "get_instance",
            "create_motif",
            "get_motif_narrative_context",
            "create_faction",
            "get_faction_conflicts",
            "get_faction_narrative_context",
            "get_tension",
            "get_relationship_tier",
            "get_instance",
            "get_active_motifs"
          ],
          "estimated_lines": 260,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "fetch_faction_name",
            "gather_faction_context",
            "set_faction_relationship",
            "_on_memory_created",
            "_on_memory_reinforced",
            "_on_rumor_created",
            "_on_motif_created",
            "_on_motif_occurrence",
            "_on_gpt_request",
            "_on_gpt_response",
            "_on_gpt_error",
            "_on_context_request",
            "_on_quest_reminder",
            "_on_request_classification"
          ],
          "estimated_lines": 280,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_region_narration_context",
            "generate_npc_quest_dialogue",
            "generate_npc_quest_reminder"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "ContextRequest",
            "ContextResponse",
            "QuestReminderEvent",
            "RequestClassificationEvent",
            "DungeonMaster",
            "MotifEngine"
          ],
          "estimated_lines": 180,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/motif/utils.py",
      "lines": 1520,
      "classes": [],
      "functions": [
        "roll_chaos_event",
        "generate_motif_name",
        "generate_motif_description",
        "generate_realistic_duration",
        "roll_new_motif",
        "estimate_motif_compatibility",
        "detect_motif_conflicts",
        "get_compatible_motifs",
        "_generate_compatibility_reason",
        "motif_to_narrative_context",
        "calculate_motif_spread",
        "synthesize_motifs",
        "get_region_motif_context",
        "calculate_distance",
        "is_point_in_radius",
        "calculate_motif_influence",
        "generate_random_position",
        "clamp_value",
        "lerp",
        "get_cardinal_direction",
        "calculate_region_center",
        "get_nearby_regions",
        "validate_coordinates",
        "normalize_angle",
        "degrees_to_radians",
        "radians_to_degrees",
        "calculate_bearing",
        "point_to_line_distance",
        "is_point_in_polygon",
        "calculate_polygon_area",
        "generate_uuid",
        "format_timestamp",
        "parse_timestamp",
        "calculate_age_in_days",
        "is_expired",
        "safe_divide",
        "calculate_percentage",
        "round_to_precision",
        "get_enum_values",
        "validate_enum_value",
        "deep_merge_dicts",
        "flatten_dict",
        "unflatten_dict",
        "sanitize_filename",
        "truncate_string",
        "count_words",
        "extract_keywords",
        "calculate_similarity",
        "normalize_text",
        "validate_json_schema",
        "generate_hash",
        "encode_base64",
        "decode_base64",
        "compress_string",
        "decompress_string"
      ],
      "imports": [
        "random",
        "math",
        "re",
        "uuid",
        "hashlib",
        "base64",
        "zlib",
        "json",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "models.Motif",
        "models.MotifCategory",
        "models.MotifScope",
        "models.MotifLifecycle",
        "models.MotifEffect",
        "models.LocationInfo",
        "models.CANONICAL_MOTIFS"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Utilities",
        "Database Operations"
      ],
      "complexity_score": 81,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_motif_name",
            "generate_motif_description",
            "generate_realistic_duration",
            "_generate_compatibility_reason",
            "calculate_motif_spread",
            "calculate_distance",
            "calculate_motif_influence",
            "generate_random_position",
            "calculate_region_center",
            "validate_coordinates",
            "calculate_bearing",
            "calculate_polygon_area",
            "generate_uuid",
            "calculate_age_in_days",
            "calculate_percentage",
            "validate_enum_value",
            "calculate_similarity",
            "validate_json_schema",
            "generate_hash"
          ],
          "estimated_lines": 380,
          "priority": "high"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_compatible_motifs",
            "get_region_motif_context",
            "get_cardinal_direction",
            "get_nearby_regions",
            "get_enum_values"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "utilities.py",
          "responsibility": "Utilities",
          "functions": [
            "format_timestamp",
            "parse_timestamp"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_generation/world_generation_utils.py",
      "lines": 1491,
      "classes": [],
      "functions": [
        "generate_continent_region_coordinates",
        "map_region_to_latlon",
        "get_region_latlon",
        "get_continent_boundary",
        "fetch_weather_for_region",
        "fetch_weather_for_latlon",
        "generate_procedural_weather",
        "walk_region",
        "pick_poi_type",
        "choose_poi_type",
        "pick_valid_tile",
        "pick_social_size",
        "claim_region_hexes_for_city",
        "generate_settlements",
        "generate_non_settlement_pois",
        "generate_region",
        "generate_minor_nature_squares",
        "log_region_event",
        "refresh_cleared_pois",
        "generate_monsters_for_tile",
        "attempt_rest",
        "generate_social_poi",
        "generate_tile",
        "get_rainfall_at_point",
        "get_elevation_at_point",
        "y_to_latitude"
      ],
      "imports": [
        "random",
        "math",
        "typing.List",
        "typing.Tuple",
        "typing.Set",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "typing.Union",
        "uuid.uuid4",
        "datetime.datetime",
        "collections.deque",
        "noise",
        "logging",
        "time",
        "os",
        "backend.systems.world_generation.models.CoordinateSchema",
        "time",
        "hashlib",
        "math",
        "requests"
      ],
      "dependencies": "{'world_generation'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 82,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_continent_region_coordinates",
            "generate_procedural_weather",
            "generate_settlements",
            "generate_non_settlement_pois",
            "generate_region",
            "generate_minor_nature_squares",
            "generate_monsters_for_tile",
            "generate_social_poi",
            "generate_tile"
          ],
          "estimated_lines": 180,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "map_region_to_latlon",
            "claim_region_hexes_for_city",
            "log_region_event"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_region_latlon",
            "get_continent_boundary",
            "get_rainfall_at_point",
            "get_elevation_at_point"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_generation/biome_utils.py",
      "lines": 1452,
      "classes": [
        "BiomeCalculator"
      ],
      "functions": [
        "load_biome_adjacency_rules",
        "apply_adjacency_rules",
        "place_biomes_by_elevation_and_climate",
        "generate_biome_map",
        "transition_biomes",
        "validate_biome_adjacency",
        "get_biome_from_conditions",
        "load_adjacency_rules",
        "validate_adjacency_rules",
        "save_adjacency_rules",
        "get_adjacency_rule",
        "are_biomes_compatible",
        "get_transition_biomes",
        "get_min_transition_width",
        "is_water_land_boundary",
        "weighted_biome_choice",
        "get_common_transition_biome",
        "create_transition_path",
        "apply_adjacency_constraints",
        "merge_adjacency_rules",
        "__init__",
        "calculate_biome",
        "_estimate_temperature_from_latitude",
        "_estimate_rainfall",
        "_classify_temperature",
        "_classify_rainfall"
      ],
      "imports": [
        "json",
        "os",
        "random",
        "math",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Set",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "shutil"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "File I/O",
        "Configuration"
      ],
      "complexity_score": 85,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "load_biome_adjacency_rules",
            "get_biome_from_conditions",
            "load_adjacency_rules",
            "save_adjacency_rules",
            "get_adjacency_rule",
            "get_transition_biomes",
            "get_min_transition_width",
            "get_common_transition_biome",
            "create_transition_path"
          ],
          "estimated_lines": 180,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "place_biomes_by_elevation_and_climate",
            "transition_biomes"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_biome_map",
            "validate_biome_adjacency",
            "validate_adjacency_rules",
            "calculate_biome"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "BiomeCalculator"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/inventory/utils.py",
      "lines": 1292,
      "classes": [
        "InventoryUtils",
        "RecoveryManager"
      ],
      "functions": [
        "calculate_inventory_stats",
        "transfer_item_between_inventories",
        "get_inventory_weight",
        "validate_weight_limit",
        "validate_inventory_capacity",
        "optimize_inventory_stacks",
        "combine_item_stacks",
        "split_item_stack",
        "filter_inventory_items",
        "format_datetime",
        "calculate_total_weight",
        "calculate_total_value",
        "get_inventory_statistics",
        "serialize_sqlalchemy_obj",
        "apply_pagination",
        "generate_grid_position",
        "backup_inventory",
        "restore_inventory"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "typing.Tuple",
        "logging",
        "json",
        "datetime.datetime",
        "sqlalchemy.ext.declarative.DeclarativeMeta",
        "backend.systems.shared.database.db",
        "backend.systems.inventory.models.Item",
        "backend.systems.inventory.models.Inventory",
        "backend.systems.inventory.models.InventoryItem",
        "backend.systems.inventory.repository.InventoryItemRepository",
        "backend.systems.inventory.events.emit_transfer_started",
        "backend.systems.inventory.events.emit_transfer_completed",
        "backend.systems.inventory.events.emit_transfer_failed",
        "backend.systems.inventory.events.emit_weight_limit_exceeded",
        "backend.systems.inventory.models.InventoryItem",
        "backend.systems.inventory.events.InventoryEventType",
        "backend.systems.inventory.events.emit_event",
        "backend.systems.inventory.events.InventoryEventType",
        "backend.systems.inventory.events.emit_event"
      ],
      "dependencies": "{'sqlalchemy', 'inventory', 'shared'}",
      "responsibilities": [
        "Configuration",
        "Utilities",
        "Database Operations",
        "Event Handling",
        "Business Logic",
        "File I/O"
      ],
      "complexity_score": 85,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_inventory_stats",
            "validate_weight_limit",
            "validate_inventory_capacity",
            "calculate_total_weight",
            "calculate_total_value",
            "generate_grid_position"
          ],
          "estimated_lines": 120,
          "priority": "high"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_inventory_weight",
            "get_inventory_statistics"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "utilities.py",
          "responsibility": "Utilities",
          "functions": [
            "format_datetime"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "InventoryUtils",
            "RecoveryManager"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/character/services/goal_service.py",
      "lines": 1289,
      "classes": [
        "GoalService"
      ],
      "functions": [
        "parse_datetime",
        "__init__",
        "_get_character_goal_file",
        "_load_character_goals",
        "_save_character_goals",
        "get_goals_for_character",
        "get_goal",
        "add_goal",
        "add_subgoal",
        "update_goal_progress",
        "complete_goal",
        "fail_goal",
        "abandon_goal",
        "update_goal_priority",
        "remove_goal",
        "get_active_goals",
        "get_completed_goals",
        "get_highest_priority_goals",
        "get_goal_progress_summary",
        "get_goal_by_id",
        "save_goals",
        "save_all_goals",
        "update_goal_status",
        "delete_goal",
        "delete_all_character_goals",
        "_load_goals",
        "update_goal_metadata",
        "get_active_goals_count",
        "get_completed_goals_count",
        "calculate_completion_percentage",
        "get_overdue_goals",
        "get_goal_tree",
        "get_goals_by_type",
        "update_goal_description",
        "_save_character_goals_to_disk",
        "_read_character_goals_from_disk",
        "get_dependent_goals",
        "has_dependency_cycle",
        "set_goal_deadline",
        "get_recent_goals",
        "get_goals_by_date_range",
        "build_tree",
        "has_cycle_dfs"
      ],
      "imports": [
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "typing.Any",
        "uuid.UUID",
        "json",
        "os",
        "backend.systems.events.EventDispatcher",
        "backend.systems.character.models.goal.Goal",
        "backend.systems.character.models.goal.GoalType",
        "backend.systems.character.models.goal.GoalPriority",
        "backend.systems.character.models.goal.GoalStatus",
        "backend.systems.character.models.goal.GoalCreated",
        "backend.systems.character.models.goal.GoalCompleted",
        "backend.systems.character.models.goal.GoalFailed",
        "backend.systems.character.models.goal.GoalAbandoned",
        "backend.systems.character.models.goal.GoalProgressUpdated",
        "backend.systems.character.models.goal.GoalStatusChanged"
      ],
      "dependencies": "{'character', 'events'}",
      "responsibilities": [
        "Utilities",
        "Database Operations",
        "Event Handling",
        "Business Logic",
        "File I/O"
      ],
      "complexity_score": 86,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "utilities.py",
          "responsibility": "Utilities",
          "functions": [
            "parse_datetime"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "_get_character_goal_file",
            "_load_character_goals",
            "_save_character_goals",
            "get_goals_for_character",
            "get_goal",
            "update_goal_progress",
            "update_goal_priority",
            "get_active_goals",
            "get_completed_goals",
            "get_highest_priority_goals",
            "get_goal_progress_summary",
            "get_goal_by_id",
            "save_goals",
            "save_all_goals",
            "update_goal_status",
            "delete_goal",
            "delete_all_character_goals",
            "_load_goals",
            "update_goal_metadata",
            "get_active_goals_count",
            "get_completed_goals_count",
            "get_overdue_goals",
            "get_goal_tree",
            "get_goals_by_type",
            "update_goal_description",
            "_save_character_goals_to_disk",
            "get_dependent_goals",
            "get_recent_goals",
            "get_goals_by_date_range"
          ],
          "estimated_lines": 580,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "abandon_goal"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_completion_percentage"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "GoalService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_state/mods/mod_synchronizer.py",
      "lines": 1255,
      "classes": [
        "ModDependency",
        "ModIncompatibility",
        "ModInfo",
        "ConflictType",
        "ConflictResolutionStrategy",
        "ModConflict",
        "ConflictResolutionRequest",
        "SyncStatus",
        "ModSynchronizer"
      ],
      "functions": [
        "__init__",
        "discover_mods",
        "load_mod",
        "apply_mod",
        "apply_all_mods",
        "_validate_manifest",
        "_load_mod_data",
        "_validate_mod_data",
        "_execute_mod_scripts",
        "_apply_state_changes",
        "_apply_regions",
        "_apply_factions",
        "_apply_npcs",
        "dfs_visit"
      ],
      "imports": [
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "fastapi.WebSocket",
        "fastapi.WebSocketDisconnect",
        "pydantic.BaseModel",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Union",
        "typing.Any",
        "json",
        "os",
        "logging",
        "asyncio",
        "datetime.datetime",
        "pathlib.Path",
        "enum.Enum",
        "importlib.util",
        "sys",
        "backend.systems.world_state.WorldState",
        "backend.systems.world_state.StateCategory",
        "backend.systems.world_state.WorldRegion",
        "backend.systems.world_state.WorldStateLoader"
      ],
      "dependencies": "{'pydantic', 'fastapi', 'world_state'}",
      "responsibilities": [
        "Data Models",
        "Configuration",
        "Database Operations",
        "API/Routing",
        "Business Logic",
        "File I/O"
      ],
      "complexity_score": 100,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "load_mod",
            "_load_mod_data"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_validate_manifest",
            "_validate_mod_data",
            "_execute_mod_scripts"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "ModDependency",
            "ModIncompatibility",
            "ModInfo",
            "ConflictType",
            "ConflictResolutionStrategy",
            "ModConflict",
            "ConflictResolutionRequest",
            "SyncStatus",
            "ModSynchronizer"
          ],
          "estimated_lines": 270,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/llm/core/faction_system.py",
      "lines": 1250,
      "classes": [
        "FactionRelationship",
        "FactionGoal",
        "FactionResource",
        "Faction",
        "FactionSystem",
        "ConfigDict"
      ],
      "functions": [
        "get_instance",
        "__init__",
        "create_faction",
        "get_faction",
        "get_factions_by_type",
        "set_relationship",
        "add_faction_goal",
        "add_faction_resource",
        "_store_faction",
        "_store_relationship",
        "_store_goal",
        "_store_resource",
        "_get_relationship",
        "_dict_to_faction",
        "_is_faction_cached",
        "_cache_faction",
        "_clear_faction_cache",
        "_clear_relationship_cache",
        "_get_faction_from_cache",
        "get_faction_goals",
        "get_faction_resources",
        "get_faction_relationships",
        "calculate_faction_power",
        "get_faction_conflicts",
        "get_faction_narrative_context",
        "__init__"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple",
        "typing.Union",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "json",
        "math",
        "random",
        "uuid.uuid4",
        "firebase_admin.db",
        "pydantic.BaseModel",
        "pydantic.Field",
        "backend.systems.llm.core.event_integration.EventDispatcher",
        "backend.systems.llm.core.event_integration.FactionEvent",
        "pydantic.ConfigDict"
      ],
      "dependencies": "{'firebase', 'pydantic', 'llm'}",
      "responsibilities": [
        "Data Models",
        "Configuration",
        "Database Operations",
        "Event Handling",
        "Business Logic"
      ],
      "complexity_score": 90,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_instance",
            "create_faction",
            "get_faction",
            "get_factions_by_type",
            "_get_relationship",
            "_get_faction_from_cache",
            "get_faction_goals",
            "get_faction_resources",
            "get_faction_relationships",
            "get_faction_conflicts",
            "get_faction_narrative_context"
          ],
          "estimated_lines": 220,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "add_faction_goal",
            "add_faction_resource",
            "_is_faction_cached",
            "_clear_faction_cache"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_faction_power"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "FactionRelationship",
            "FactionGoal",
            "FactionResource",
            "Faction",
            "FactionSystem",
            "ConfigDict"
          ],
          "estimated_lines": 180,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/character/services/mood_service.py",
      "lines": 1182,
      "classes": [
        "MoodService"
      ],
      "functions": [
        "__init__",
        "get_mood",
        "_load_mood",
        "save_mood",
        "update_all_moods",
        "add_mood_modifier",
        "clear_modifiers",
        "get_current_mood",
        "get_mood_description",
        "set_base_mood",
        "get_emotional_state_values",
        "get_active_modifiers",
        "save_all_moods",
        "initialize_mood",
        "remove_mood_modifier",
        "_recalculate_mood",
        "_get_intensity_value",
        "update_mood",
        "delete_mood",
        "get_mood_intensity_for_state",
        "is_feeling_happy",
        "is_feeling_sad",
        "is_feeling_angry",
        "is_feeling_fearful",
        "is_feeling_neutral",
        "get_mood_history",
        "reset_base_mood",
        "get_mood_stats",
        "get_mood_comparison",
        "_are_states_complementary",
        "_generate_mood_comparison_details",
        "serialize_mood_to_json",
        "deserialize_mood_from_json",
        "get_or_create_default_mood",
        "create_mood"
      ],
      "imports": [
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "uuid.uuid4",
        "json",
        "os",
        "backend.systems.events.EventDispatcher",
        "backend.systems.character.models.mood.CharacterMood",
        "backend.systems.character.models.mood.EmotionalState",
        "backend.systems.character.models.mood.MoodIntensity",
        "backend.systems.character.models.mood.MoodModifier",
        "backend.systems.character.models.mood.MoodSource"
      ],
      "dependencies": "{'character', 'events'}",
      "responsibilities": [
        "Business Logic",
        "File I/O",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 86,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_mood",
            "_load_mood",
            "save_mood",
            "update_all_moods",
            "get_current_mood",
            "get_mood_description",
            "get_emotional_state_values",
            "get_active_modifiers",
            "save_all_moods",
            "_get_intensity_value",
            "update_mood",
            "delete_mood",
            "get_mood_intensity_for_state",
            "get_mood_history",
            "get_mood_stats",
            "get_mood_comparison",
            "get_or_create_default_mood",
            "create_mood"
          ],
          "estimated_lines": 360,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_recalculate_mood",
            "_generate_mood_comparison_details"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "MoodService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/combat/unified_effects.py",
      "lines": 1061,
      "classes": [
        "EffectStackingBehavior",
        "EffectType",
        "CombatEffect",
        "BuffEffect",
        "DebuffEffect",
        "DamageOverTimeEffect",
        "HealOverTimeEffect",
        "ConditionEffect",
        "ResistanceEffect",
        "VulnerabilityEffect",
        "ImmunityEffect",
        "EffectPipeline"
      ],
      "functions": [
        "apply",
        "remove",
        "on_turn_start_trigger",
        "on_turn_end_trigger",
        "on_stacked_trigger",
        "can_stack",
        "stack",
        "is_expired",
        "effect_id",
        "modify_damage",
        "get_icon_info",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "modify_damage",
        "__init__",
        "modify_damage",
        "__init__",
        "modify_damage",
        "__init__",
        "get_applied_effects",
        "_get_combatant_id",
        "_get_matching_effects",
        "apply_effect",
        "remove_effect",
        "remove_effect_by_id",
        "remove_effects_by_type",
        "remove_effects_by_name",
        "clear_effects",
        "clear_all_effects",
        "process_turn_start",
        "process_turn_end",
        "modify_damage",
        "register_effect_applied_callback",
        "register_effect_removed_callback",
        "register_effect_expired_callback",
        "unregister_effect_applied_callback",
        "unregister_effect_removed_callback",
        "unregister_effect_expired_callback",
        "is_immune_to_effect",
        "get_active_effects",
        "process_heal",
        "process_healed",
        "process_before_action",
        "process_after_action",
        "apply_damage",
        "apply_healing"
      ],
      "imports": [
        "logging",
        "uuid",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Set",
        "typing.Optional",
        "typing.Callable",
        "typing.Tuple",
        "typing.Union",
        "enum.Enum",
        "enum.auto",
        "dataclasses.dataclass",
        "dataclasses.field",
        "datetime.datetime",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.CombatEvent"
      ],
      "dependencies": "{'events'}",
      "responsibilities": [
        "Business Logic",
        "Data Models",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 93,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "on_turn_start_trigger",
            "on_turn_end_trigger",
            "on_stacked_trigger"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_icon_info",
            "get_applied_effects",
            "_get_combatant_id",
            "_get_matching_effects",
            "get_active_effects"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "process_turn_start",
            "process_turn_end",
            "process_heal",
            "process_healed",
            "process_before_action",
            "process_after_action"
          ],
          "estimated_lines": 120,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "EffectStackingBehavior",
            "EffectType",
            "CombatEffect",
            "BuffEffect",
            "DebuffEffect",
            "DamageOverTimeEffect",
            "HealOverTimeEffect",
            "ConditionEffect",
            "ResistanceEffect",
            "VulnerabilityEffect",
            "ImmunityEffect",
            "EffectPipeline"
          ],
          "estimated_lines": 360,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/diplomacy/repository.py",
      "lines": 1009,
      "classes": [
        "DiplomacyRepository"
      ],
      "functions": [
        "__init__",
        "create_treaty",
        "get_treaty",
        "update_treaty",
        "delete_treaty",
        "list_treaties",
        "create_negotiation",
        "get_negotiation",
        "update_negotiation",
        "delete_negotiation",
        "list_negotiations",
        "create_event",
        "get_event",
        "list_events",
        "get_faction_relationship",
        "update_faction_relationship",
        "get_all_faction_relationships",
        "create_violation",
        "get_violation",
        "update_violation",
        "list_violations",
        "create_ultimatum",
        "get_ultimatum",
        "update_ultimatum",
        "list_ultimatums",
        "_load_ultimatums",
        "_save_ultimatums",
        "create_sanction",
        "get_sanction",
        "update_sanction",
        "delete_sanction",
        "list_sanctions",
        "record_sanction_violation",
        "create_diplomatic_event",
        "create_incident",
        "get_incident",
        "update_incident"
      ],
      "imports": [
        "json",
        "os",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "uuid.UUID",
        "uuid.uuid4",
        "backend.systems.diplomacy.models.DiplomaticEvent",
        "backend.systems.diplomacy.models.DiplomaticEventType",
        "backend.systems.diplomacy.models.DiplomaticIncident",
        "backend.systems.diplomacy.models.DiplomaticIncidentSeverity",
        "backend.systems.diplomacy.models.DiplomaticIncidentType",
        "backend.systems.diplomacy.models.DiplomaticStatus",
        "backend.systems.diplomacy.models.Negotiation",
        "backend.systems.diplomacy.models.NegotiationStatus",
        "backend.systems.diplomacy.models.Sanction",
        "backend.systems.diplomacy.models.SanctionStatus",
        "backend.systems.diplomacy.models.SanctionType",
        "backend.systems.diplomacy.models.Treaty",
        "backend.systems.diplomacy.models.TreatyType",
        "backend.systems.diplomacy.models.TreatyViolation",
        "backend.systems.diplomacy.models.TreatyViolationType",
        "backend.systems.diplomacy.models.Ultimatum",
        "backend.systems.diplomacy.models.UltimatumStatus"
      ],
      "dependencies": "{'diplomacy', 'pydantic'}",
      "responsibilities": [
        "Database Operations",
        "File I/O"
      ],
      "complexity_score": 82,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "create_treaty",
            "get_treaty",
            "update_treaty",
            "delete_treaty",
            "create_negotiation",
            "get_negotiation",
            "update_negotiation",
            "delete_negotiation",
            "create_event",
            "get_event",
            "get_faction_relationship",
            "update_faction_relationship",
            "get_all_faction_relationships",
            "create_violation",
            "get_violation",
            "update_violation",
            "create_ultimatum",
            "get_ultimatum",
            "update_ultimatum",
            "_load_ultimatums",
            "_save_ultimatums",
            "create_sanction",
            "get_sanction",
            "update_sanction",
            "delete_sanction",
            "create_diplomatic_event",
            "create_incident",
            "get_incident",
            "update_incident"
          ],
          "estimated_lines": 580,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "record_sanction_violation"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "DiplomacyRepository"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_state/consolidated_manager.py",
      "lines": 954,
      "classes": [
        "WorldStateManager"
      ],
      "functions": [
        "get_instance",
        "reset_instance",
        "__init__",
        "_register_event_handlers",
        "get_world_state",
        "update_world_state",
        "_save_world_state_to_file",
        "_prepare_for_file",
        "save_world_state",
        "_handle_time_event",
        "_handle_world_reset",
        "_handle_save_request",
        "set_state",
        "get_state",
        "get_state_variable",
        "delete_state",
        "get_history",
        "get_value_at_time",
        "query_state_by_category",
        "query_state_by_region",
        "query_state_by_tags",
        "query_state_by_prefix",
        "get_state_snapshot",
        "_cleanup_old_backups",
        "_deep_update",
        "get_all_state_variables",
        "get_state_count",
        "get_statistics",
        "create_snapshot",
        "restore_snapshot",
        "restore_version",
        "shutdown",
        "get_location",
        "convert_to_serializable"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "json",
        "os",
        "time",
        "datetime.datetime",
        "datetime.timedelta",
        "traceback",
        "logging",
        "pathlib.Path",
        "uuid",
        "shutil",
        "backend.systems.shared.utils.common.error.NotFoundError",
        "backend.systems.shared.utils.common.error.ValidationError",
        "backend.systems.shared.utils.core.time_utils.parse_iso_datetime",
        "backend.systems.events.EventDispatcher",
        "logging",
        "backend.systems.world_state.consolidated_world_models.WorldMap",
        "backend.systems.world_state.consolidated_world_models.Region",
        "backend.systems.world_state.consolidated_world_models.PointOfInterest",
        "backend.systems.world_state.consolidated_world_models.WorldState",
        "backend.systems.world_state.consolidated_state_models.StateVariable",
        "backend.systems.world_state.consolidated_state_models.StateChangeRecord",
        "backend.systems.world_state.consolidated_state_models.StateCategory",
        "backend.systems.world_state.consolidated_state_models.WorldRegion",
        "backend.systems.world_state.consolidated_state_models.StateChangeType",
        "backend.systems.world_state.consolidated_state_models.WorldStateSnapshot",
        "backend.systems.world_state.consolidated_state_models.TemporaryEffect",
        "backend.systems.world_state.events.WorldStateUpdatedEvent",
        "backend.systems.world_state.events.StateVariableDeletedEvent",
        "backend.systems.world_state.consolidated_state_models.WorldStateSnapshot",
        "backend.systems.world_state.events.StateVariableCreatedEvent",
        "backend.systems.world_state.events.StateVariableUpdatedEvent"
      ],
      "dependencies": "{'events', 'shared', 'world_state'}",
      "responsibilities": [
        "Configuration",
        "Utilities",
        "Database Operations",
        "Event Handling",
        "Business Logic",
        "File I/O"
      ],
      "complexity_score": 88,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_instance",
            "get_world_state",
            "update_world_state",
            "_save_world_state_to_file",
            "save_world_state",
            "_handle_save_request",
            "get_state",
            "get_state_variable",
            "delete_state",
            "get_history",
            "get_value_at_time",
            "query_state_by_category",
            "query_state_by_region",
            "query_state_by_tags",
            "query_state_by_prefix",
            "get_state_snapshot",
            "get_all_state_variables",
            "get_state_count",
            "get_statistics",
            "create_snapshot",
            "get_location"
          ],
          "estimated_lines": 420,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_handle_time_event",
            "_handle_world_reset"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "utilities.py",
          "responsibility": "Utilities",
          "functions": [
            "convert_to_serializable"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "WorldStateManager"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_generation/config.py",
      "lines": 886,
      "classes": [
        "ConfigScope",
        "ParameterType",
        "ParameterDefinition",
        "ComponentConfig",
        "PhaseConfig",
        "PipelineConfig"
      ],
      "functions": [
        "create_default_pipeline_config",
        "validate",
        "to_dict",
        "from_dict",
        "to_dict",
        "from_dict",
        "add_component",
        "get_component",
        "remove_component",
        "__init__",
        "_init_from_seed",
        "add_parameter_definition",
        "set_global_parameter",
        "get_global_parameter",
        "add_phase",
        "get_phase",
        "remove_phase",
        "set_component_parameter",
        "get_component_parameter",
        "enable_phase",
        "enable_component",
        "is_phase_enabled",
        "is_component_enabled",
        "to_dict",
        "from_dict",
        "save_to_file",
        "load_from_file",
        "validate",
        "clone",
        "merge"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Set",
        "typing.Union",
        "typing.Type",
        "logging",
        "json",
        "enum.Enum",
        "dataclasses.dataclass",
        "dataclasses.field",
        "dataclasses.asdict",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.field_validator",
        "backend.systems.world_generation.models.WorldSeedSchema",
        "copy",
        "copy"
      ],
      "dependencies": "{'world_generation', 'pydantic'}",
      "responsibilities": [
        "Data Models",
        "Database Operations",
        "File I/O",
        "Configuration"
      ],
      "complexity_score": 91,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "create_default_pipeline_config",
            "get_component",
            "get_global_parameter",
            "get_phase",
            "get_component_parameter",
            "save_to_file",
            "load_from_file"
          ],
          "estimated_lines": 140,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "ConfigScope",
            "ParameterType",
            "ParameterDefinition",
            "ComponentConfig",
            "PhaseConfig",
            "PipelineConfig"
          ],
          "estimated_lines": 180,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/shared/utils/game/random_utils.py",
      "lines": 884,
      "classes": [
        "WeightedRandomSelector",
        "AttributeDistributor",
        "NameGenerator"
      ],
      "functions": [
        "weighted_choice",
        "weighted_choice_multiple",
        "distribute_points",
        "generate_name",
        "__init__",
        "add_item",
        "remove_item",
        "update_weight",
        "select",
        "select_multiple",
        "get_probability",
        "to_dict",
        "__len__",
        "__str__",
        "__init__",
        "uniform_distribution",
        "normal_distribution",
        "skewed_distribution",
        "tiered_distribution",
        "__init__",
        "_find_data_dir",
        "_load_name_data",
        "_save_name_data",
        "add_first_names",
        "add_last_names",
        "add_place_names",
        "generate_first_name",
        "generate_last_name",
        "generate_full_name",
        "generate_place_name",
        "_generate_placeholder_name",
        "generate_unique_id"
      ],
      "imports": [
        "random",
        "math",
        "logging",
        "uuid",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "typing.Union",
        "typing.TypeVar",
        "typing.Generic",
        "typing.Callable",
        "string",
        "json",
        "pathlib.Path",
        "os",
        "re"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "File I/O",
        "Configuration"
      ],
      "complexity_score": 95,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_name",
            "generate_first_name",
            "generate_last_name",
            "generate_full_name",
            "generate_place_name",
            "_generate_placeholder_name",
            "generate_unique_id"
          ],
          "estimated_lines": 140,
          "priority": "high"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "update_weight",
            "get_probability",
            "_find_data_dir",
            "_load_name_data",
            "_save_name_data"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "WeightedRandomSelector",
            "AttributeDistributor",
            "NameGenerator"
          ],
          "estimated_lines": 90,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/time/services/time_manager.py",
      "lines": 859,
      "classes": [
        "TimeAdvancedEvent",
        "SeasonChangedEvent",
        "WeatherChangedEvent",
        "SpecialDateEvent",
        "TimeManager",
        "TimeEncoder"
      ],
      "functions": [
        "__new__",
        "get_instance",
        "__init__",
        "start_auto_advance",
        "stop_auto_advance",
        "_auto_advance_loop",
        "advance_time",
        "_process_scheduled_events",
        "_is_time_reached",
        "_calculate_next_occurrence",
        "schedule_event",
        "cancel_event",
        "register_time_changed_callback",
        "register_day_changed_callback",
        "register_month_changed_callback",
        "register_year_changed_callback",
        "register_season_changed_callback",
        "set_time_scale",
        "get_current_time",
        "save_state",
        "load_state",
        "get_time",
        "get_calendar",
        "config",
        "start_time_progression",
        "stop_time_progression",
        "set_time",
        "advance_time_by_unit",
        "register_callback",
        "unregister_callback",
        "get_event",
        "get_events",
        "configure_calendar",
        "add_important_date",
        "add_holiday",
        "remove_important_date",
        "remove_holiday",
        "get_important_dates_for_date",
        "get_holidays_for_date",
        "is_holiday_today",
        "get_current_time_formatted",
        "get_days_in_month",
        "is_special_date",
        "get_current_season",
        "get_current_weather",
        "get_current_temperature",
        "get_weather_last_changed",
        "export_state_to_json",
        "import_state_from_json",
        "reset",
        "pause",
        "resume",
        "toggle_pause",
        "set_time_scale_preset",
        "update_weather",
        "_emit_time_advanced_event",
        "default"
      ],
      "imports": [
        "asyncio",
        "logging",
        "random",
        "uuid",
        "json",
        "datetime.datetime",
        "datetime.timedelta",
        "heapq.heappush",
        "heapq.heappop",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Callable",
        "typing.Tuple",
        "typing.Any",
        "typing.Union",
        "time",
        "threading",
        "time",
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Callable",
        "typing.Union",
        "datetime.datetime",
        "json",
        "backend.systems.time.models.time_model.GameTime",
        "backend.systems.time.models.time_model.TimeConfig",
        "backend.systems.time.models.time_model.TimeUnit",
        "backend.systems.time.models.calendar_model.CalendarData",
        "backend.systems.time.models.calendar_model.Season",
        "backend.systems.time.models.calendar_model.Month",
        "backend.systems.time.models.event_model.TimeEvent",
        "backend.systems.time.models.event_model.CalendarEvent",
        "backend.systems.time.models.weather_model.WeatherState",
        "backend.systems.time.models.weather_model.WeatherData",
        "backend.systems.time.services.event_scheduler.EventScheduler",
        "backend.systems.time.services.calendar_service.CalendarService",
        "backend.systems.time.services.weather_service.WeatherService",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.EventBase"
      ],
      "dependencies": "{'events', 'time'}",
      "responsibilities": [
        "Configuration",
        "Database Operations",
        "Event Handling",
        "Business Logic",
        "File I/O"
      ],
      "complexity_score": 99,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_instance",
            "get_current_time",
            "save_state",
            "load_state",
            "get_time",
            "get_calendar",
            "get_event",
            "get_events",
            "get_important_dates_for_date",
            "get_holidays_for_date",
            "get_current_time_formatted",
            "get_days_in_month",
            "get_current_season",
            "get_current_weather",
            "get_current_temperature",
            "get_weather_last_changed",
            "update_weather"
          ],
          "estimated_lines": 340,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_process_scheduled_events",
            "_calculate_next_occurrence"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "register_season_changed_callback",
            "_emit_time_advanced_event"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "configuration.py",
          "responsibility": "Configuration",
          "functions": [
            "config",
            "configure_calendar"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "TimeAdvancedEvent",
            "SeasonChangedEvent",
            "WeatherChangedEvent",
            "SpecialDateEvent",
            "TimeManager",
            "TimeEncoder"
          ],
          "estimated_lines": 180,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/llm/core/motif_system.py",
      "lines": 857,
      "classes": [
        "MotifOccurrence",
        "Motif",
        "MotifSystem",
        "ConfigDict"
      ],
      "functions": [
        "get_instance",
        "__init__",
        "create_motif",
        "record_occurrence",
        "get_motif",
        "get_motifs_by_category",
        "get_entity_motifs",
        "get_regional_motifs",
        "get_most_common_motifs",
        "suggest_motifs_for_context",
        "get_motif_narrative_context",
        "_store_motif",
        "_store_occurrence",
        "_update_related_motif_strengths",
        "_dict_to_motif",
        "_is_motif_cached",
        "_cache_motif",
        "_clear_motif_cache",
        "_get_motif_from_cache",
        "__init__"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Union",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "json",
        "math",
        "random",
        "uuid.uuid4",
        "firebase_admin.db",
        "pydantic.BaseModel",
        "pydantic.Field",
        "backend.systems.llm.core.event_integration.EventDispatcher",
        "backend.systems.llm.core.event_integration.MotifEvent",
        "pydantic.ConfigDict"
      ],
      "dependencies": "{'firebase', 'pydantic', 'llm'}",
      "responsibilities": [
        "Event Handling",
        "Data Models",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 81,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_instance",
            "create_motif",
            "get_motif",
            "get_motifs_by_category",
            "get_entity_motifs",
            "get_regional_motifs",
            "get_most_common_motifs",
            "get_motif_narrative_context",
            "_update_related_motif_strengths",
            "_get_motif_from_cache"
          ],
          "estimated_lines": 200,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "MotifOccurrence",
            "Motif",
            "MotifSystem",
            "ConfigDict"
          ],
          "estimated_lines": 120,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/world_generation/world_manager.py",
      "lines": 814,
      "classes": [
        "WorldManager",
        "MockRegionService",
        "MockRegionService",
        "MockRegionService"
      ],
      "functions": [
        "load_world_from_file",
        "save_world_to_file",
        "get_world_data",
        "get_region_data",
        "get_continent_data",
        "list_available_worlds",
        "__new__",
        "__init__",
        "initialize_world",
        "generate_world",
        "generate_continent",
        "_generate_regions_for_continent",
        "_generate_rivers_for_continent",
        "_generate_settlements_for_continent",
        "_generate_features_for_continent",
        "_generate_world_oceans",
        "_generate_climate_zones",
        "_collect_all_regions",
        "_get_continent_by_id",
        "_save_world_data",
        "load_world",
        "export_world",
        "import_world",
        "register_world",
        "unregister_world",
        "get_world",
        "has_world",
        "list_worlds",
        "save_world",
        "get_continent",
        "get_region",
        "get_instance",
        "create_new_region",
        "create_new_region",
        "create_new_region"
      ],
      "imports": [
        "os",
        "json",
        "time",
        "random",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Any",
        "typing.Optional",
        "continent_service.ContinentService",
        "biome_utils.BiomeCalculator",
        "river_generator.RiverGenerator",
        "settlement_service.SettlementService",
        "regional_features.RegionalFeatures",
        "world_generation_utils.generate_continent_region_coordinates",
        "world_generation_utils.get_continent_boundary",
        "world_generation_utils.map_region_to_latlon",
        "continent_repository.continent_repository",
        "continent_repository.continent_repository",
        "backend.systems.region.service.region_service",
        "backend.systems.region.service.region_service",
        "continent_repository.continent_repository",
        "yaml",
        "yaml",
        "backend.systems.region.service.region_service",
        "uuid.uuid4",
        "uuid.uuid4",
        "uuid.uuid4"
      ],
      "dependencies": "{'region'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "File I/O"
      ],
      "complexity_score": 100,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "load_world_from_file",
            "save_world_to_file",
            "get_world_data",
            "get_region_data",
            "get_continent_data",
            "_get_continent_by_id",
            "_save_world_data",
            "load_world",
            "get_world",
            "save_world",
            "get_continent",
            "get_region",
            "get_instance",
            "create_new_region",
            "create_new_region",
            "create_new_region"
          ],
          "estimated_lines": 320,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_world",
            "generate_continent",
            "_generate_regions_for_continent",
            "_generate_rivers_for_continent",
            "_generate_settlements_for_continent",
            "_generate_features_for_continent",
            "_generate_world_oceans",
            "_generate_climate_zones"
          ],
          "estimated_lines": 160,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "WorldManager",
            "MockRegionService",
            "MockRegionService",
            "MockRegionService"
          ],
          "estimated_lines": 120,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/quest/utils.py",
      "lines": 787,
      "classes": [
        "QuestLogEntry",
        "QuestValidator",
        "QuestUtils"
      ],
      "functions": [
        "generate_quest_title",
        "generate_quest_steps",
        "calculate_quest_reward",
        "generate_journal_entry",
        "dict",
        "validate_quest_id",
        "validate_player_id",
        "validate_arc_type",
        "validate_quest_data",
        "_validate_rewards",
        "_validate_requirements",
        "_validate_steps",
        "validate_timestamp",
        "validate_journal_entry",
        "validate_quest_assignment",
        "validate_quest_completion",
        "create_quest",
        "get_quest",
        "get_all_quests",
        "update_quest",
        "update_quest_progress",
        "create_journal_entry",
        "get_player_journal_entries",
        "is_valid_step"
      ],
      "imports": [
        "logging",
        "re",
        "uuid",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "dataclasses.dataclass",
        "dataclasses.field",
        "backend.systems.shared.utils.core.firebase_utils.get_firestore_client",
        "backend.systems.shared.utils.core.firebase_utils.get_document",
        "backend.systems.shared.utils.core.firebase_utils.set_document",
        "backend.systems.shared.utils.core.firebase_utils.update_document",
        "backend.systems.shared.utils.core.firebase_utils.get_collection",
        "backend.systems.shared.utils.common.error.ValidationError",
        "backend.systems.shared.utils.common.error.NotFoundError",
        "backend.systems.shared.utils.common.error.DatabaseError",
        "backend.systems.shared.database.db",
        "random"
      ],
      "dependencies": "{'firebase', 'shared'}",
      "responsibilities": [
        "Business Logic",
        "Data Models",
        "Database Operations"
      ],
      "complexity_score": 86,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_quest_title",
            "generate_quest_steps",
            "calculate_quest_reward",
            "generate_journal_entry",
            "validate_quest_id",
            "validate_player_id",
            "validate_arc_type",
            "validate_quest_data",
            "_validate_rewards",
            "_validate_requirements",
            "_validate_steps",
            "validate_timestamp",
            "validate_journal_entry",
            "validate_quest_assignment",
            "validate_quest_completion"
          ],
          "estimated_lines": 300,
          "priority": "high"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "create_quest",
            "get_quest",
            "get_all_quests",
            "update_quest",
            "update_quest_progress",
            "create_journal_entry",
            "get_player_journal_entries"
          ],
          "estimated_lines": 140,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "QuestLogEntry",
            "QuestValidator",
            "QuestUtils"
          ],
          "estimated_lines": 90,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_generation/components.py",
      "lines": 719,
      "classes": [
        "ComponentType",
        "ComponentPriority",
        "ComponentResult",
        "WorldGenerationContext",
        "GenerationComponent",
        "BiomeGenerationComponent",
        "ElevationGenerationComponent",
        "RiverGenerationComponent",
        "ResourceGenerationComponent",
        "CoastlineGenerationComponent",
        "ClimateGenerationComponent",
        "UtilityComponent",
        "BiomeAdjacencyComponent",
        "CoastlineSmoothingComponent",
        "ElevationGeneratorComponent",
        "RiverGeneratorComponent",
        "ResourceGeneratorComponent",
        "ComponentRegistry"
      ],
      "functions": [
        "__post_init__",
        "__init__",
        "log_execution",
        "get_result",
        "has_result",
        "cache_data",
        "get_cached_data",
        "has_cached_data",
        "__init__",
        "add_dependency",
        "remove_dependency",
        "set_priority",
        "set_config",
        "get_parameter",
        "execute",
        "validate_dependencies",
        "__str__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "execute",
        "__init__",
        "execute",
        "__init__",
        "execute",
        "__init__",
        "execute",
        "__init__",
        "execute",
        "__init__",
        "register",
        "unregister",
        "get",
        "get_all",
        "get_by_type",
        "get_names",
        "get_names_by_type",
        "clear",
        "register_default_components"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Type",
        "typing.Callable",
        "typing.Union",
        "typing.Set",
        "typing.Tuple",
        "abc.ABC",
        "abc.abstractmethod",
        "logging",
        "inspect",
        "time",
        "enum.Enum",
        "enum.auto",
        "dataclasses.dataclass",
        "backend.systems.data.schemas.biome_schema.BiomeSchema",
        "backend.systems.world_generation.models.CoordinateSchema",
        "backend.systems.world_generation.models.ContinentSchema",
        "backend.systems.world_generation.models.Region",
        "backend.systems.world_generation.models.River",
        "backend.systems.world_generation.models.Resource",
        "backend.systems.world_generation.models.World",
        "backend.systems.world_generation.models.WorldSeed",
        "backend.systems.world_generation.models.RegionGenerationParams",
        "backend.systems.world_generation.config.PipelineConfig",
        "backend.systems.world_generation.config.ComponentConfig",
        "backend.systems.world_generation.biome_utils.load_adjacency_rules",
        "backend.systems.world_generation.biome_utils.apply_adjacency_rules",
        "backend.systems.world_generation.coastline_utils.identify_coastlines",
        "backend.systems.world_generation.coastline_utils.smooth_coastlines",
        "backend.systems.world_generation.coastline_utils.place_beaches",
        "backend.systems.world_generation.elevation_utils.generate_noise_elevation",
        "backend.systems.world_generation.elevation_utils.add_mountain_ranges",
        "backend.systems.world_generation.river_generator.RiverGenerator",
        "backend.systems.world_generation.resource_utils.generate_resources",
        "backend.systems.world_generation.resource_utils.calculate_resource_weights"
      ],
      "dependencies": "{'world_generation', 'data'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 88,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_result",
            "get_cached_data",
            "get_parameter",
            "get_all",
            "get_by_type",
            "get_names",
            "get_names_by_type"
          ],
          "estimated_lines": 140,
          "priority": "high"
        },
        {
          "module_name": "configuration.py",
          "responsibility": "Configuration",
          "functions": [
            "set_config"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "validate_dependencies"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "ComponentType",
            "ComponentPriority",
            "ComponentResult",
            "WorldGenerationContext",
            "GenerationComponent",
            "BiomeGenerationComponent",
            "ElevationGenerationComponent",
            "RiverGenerationComponent",
            "ResourceGenerationComponent",
            "CoastlineGenerationComponent",
            "ClimateGenerationComponent",
            "UtilityComponent",
            "BiomeAdjacencyComponent",
            "CoastlineSmoothingComponent",
            "ElevationGeneratorComponent",
            "RiverGeneratorComponent",
            "ResourceGeneratorComponent",
            "ComponentRegistry"
          ],
          "estimated_lines": 540,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/world_state/utils/tick_utils.py",
      "lines": 709,
      "classes": [
        "Faction",
        "NPC",
        "WorldEvent"
      ],
      "functions": [
        "validate_event_data",
        "validate_event_timing",
        "validate_event_status",
        "validate_affected_entities",
        "validate_world_state",
        "validate_region_state",
        "validate_faction_state",
        "process_world_tick",
        "process_npc_actions",
        "process_faction_activities",
        "process_faction_state",
        "process_war_state",
        "process_project_state",
        "check_faction_conflicts",
        "get_shared_borders",
        "calculate_quest_success_rate",
        "log_faction_event",
        "process_region_changes",
        "process_world_events",
        "handle_event_completion",
        "handle_event_effects",
        "handle_war_effects",
        "handle_trade_effects",
        "handle_diplomatic_effects",
        "handle_festival_effects",
        "handle_calamity_effects",
        "handle_discovery_effects",
        "handle_religious_effects",
        "handle_war_completion",
        "handle_trade_completion",
        "handle_diplomatic_completion",
        "handle_festival_completion",
        "handle_calamity_completion",
        "handle_discovery_completion",
        "handle_religious_completion",
        "generate_random_event",
        "calculate_event_weights",
        "generate_event_data",
        "generate_trade_event_data",
        "generate_diplomatic_event_data",
        "calculate_event_duration",
        "handle_tick_events",
        "__init__",
        "__init__",
        "__init__"
      ],
      "imports": [
        "datetime.datetime",
        "random",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "logging",
        "json",
        "os",
        "datetime.datetime",
        "backend.systems.world_state.consolidated_world_models.WorldState",
        "backend.systems.world_state.consolidated_world_models.Region",
        "backend.systems.shared.utils.common.error.ValidationError",
        "logging",
        "datetime.timedelta"
      ],
      "dependencies": "{'shared', 'world_state'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling",
        "Configuration"
      ],
      "complexity_score": 93,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "validate_event_data",
            "validate_event_timing",
            "validate_event_status",
            "validate_affected_entities",
            "validate_world_state",
            "validate_region_state",
            "validate_faction_state",
            "process_world_tick",
            "process_npc_actions",
            "process_faction_activities",
            "process_faction_state",
            "process_war_state",
            "process_project_state",
            "calculate_quest_success_rate",
            "process_region_changes",
            "process_world_events",
            "handle_event_completion",
            "handle_event_effects",
            "handle_war_effects",
            "handle_trade_effects",
            "handle_diplomatic_effects",
            "handle_festival_effects",
            "handle_calamity_effects",
            "handle_discovery_effects",
            "handle_religious_effects",
            "handle_war_completion",
            "handle_trade_completion",
            "handle_diplomatic_completion",
            "handle_festival_completion",
            "handle_calamity_completion",
            "handle_discovery_completion",
            "handle_religious_completion",
            "generate_random_event",
            "calculate_event_weights",
            "generate_event_data",
            "generate_trade_event_data",
            "generate_diplomatic_event_data",
            "calculate_event_duration",
            "handle_tick_events"
          ],
          "estimated_lines": 780,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "check_faction_conflicts",
            "log_faction_event"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_shared_borders"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "Faction",
            "NPC",
            "WorldEvent"
          ],
          "estimated_lines": 90,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/memory/models/memory.py",
      "lines": 704,
      "classes": [
        "MemoryType",
        "MemoryEmotionalValence",
        "MemoryCreatedEvent",
        "MemoryDecayedEvent",
        "MemoryCategorizedEvent",
        "MemoryAccessedEvent",
        "MemoryRecalledEvent",
        "MemoryGraphLink",
        "Memory"
      ],
      "functions": [
        "__init__",
        "to_dict",
        "from_dict",
        "__init__",
        "recall",
        "access",
        "update_categories",
        "update_strength",
        "get_current_saliency",
        "calculate_relevance",
        "is_expired",
        "add_link",
        "has_tag",
        "add_tag",
        "remove_tag",
        "has_category",
        "memory_graph",
        "_emit_created_event",
        "_emit_accessed_event",
        "_emit_categorized_event",
        "to_dict",
        "from_dict",
        "__str__"
      ],
      "imports": [
        "logging",
        "time",
        "uuid",
        "math",
        "enum.Enum",
        "enum.auto",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Set",
        "typing.Type",
        "typing.TypeVar",
        "memory_categories.MemoryCategory",
        "memory_categories.categorize_memory_content",
        "memory_categories.apply_category_modifiers",
        "saliency_scoring.calculate_initial_importance",
        "saliency_scoring.calculate_memory_saliency",
        "backend.systems.events.EventBase"
      ],
      "dependencies": "{'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 81,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "update_categories",
            "update_strength",
            "get_current_saliency"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_relevance"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "_emit_created_event",
            "_emit_accessed_event",
            "_emit_categorized_event"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "MemoryType",
            "MemoryEmotionalValence",
            "MemoryCreatedEvent",
            "MemoryDecayedEvent",
            "MemoryCategorizedEvent",
            "MemoryAccessedEvent",
            "MemoryRecalledEvent",
            "MemoryGraphLink",
            "Memory"
          ],
          "estimated_lines": 270,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/world_generation/world_generator.py",
      "lines": 682,
      "classes": [
        "GenerationPhase",
        "GenerationStatus",
        "WorldGenerator",
        "MockRegionService",
        "MockRegionService"
      ],
      "functions": [
        "__new__",
        "__init__",
        "initialize_world",
        "generate_world",
        "generate_continent",
        "_generate_regions_for_continent",
        "_generate_rivers_for_continent",
        "_generate_settlements_for_continent",
        "_generate_features_for_continent",
        "_generate_world_oceans",
        "_generate_climate_zones",
        "_get_continent_regions",
        "_collect_all_regions",
        "_get_continent_by_id",
        "get_weather_for_region",
        "_save_world_data",
        "load_world",
        "export_world",
        "create_new_region",
        "create_new_region"
      ],
      "imports": [
        "os",
        "json",
        "time",
        "random",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "uuid.uuid4",
        "datetime.datetime",
        "enum.Enum",
        "continent_service.ContinentService",
        "biome_utils.BiomeCalculator",
        "biome_utils.load_adjacency_rules",
        "river_generator.generate_rivers_for_region",
        "settlement_service.SettlementService",
        "regional_features.RegionalFeatures",
        "world_utils.generate_region",
        "world_utils.walk_region",
        "world_utils.claim_region_hexes_for_city",
        "world_utils.generate_settlements",
        "world_utils.generate_non_settlement_pois",
        "world_utils.generate_minor_nature_squares",
        "world_generation_utils.generate_continent_region_coordinates",
        "world_generation_utils.get_continent_boundary",
        "world_generation_utils.map_region_to_latlon",
        "world_generation_utils.generate_procedural_weather",
        "models.CoordinateSchema",
        "models.ContinentSchema",
        "models.ContinentBoundarySchema",
        "models.ContinentCreationRequestSchema",
        "backend.systems.world_generation.continent_repository.continent_repository",
        "backend.systems.world_generation.world_generation_utils.generate_procedural_weather",
        "backend.systems.world_generation.world_generation_utils.map_region_to_latlon",
        "backend.systems.world_generation.models.CoordinateSchema",
        "backend.systems.world_generation.continent_repository.continent_repository",
        "backend.systems.region.service.region_service",
        "backend.systems.region.service.region_service",
        "csv"
      ],
      "dependencies": "{'world_generation', 'region'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "File I/O"
      ],
      "complexity_score": 90,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_world",
            "generate_continent",
            "_generate_regions_for_continent",
            "_generate_rivers_for_continent",
            "_generate_settlements_for_continent",
            "_generate_features_for_continent",
            "_generate_world_oceans",
            "_generate_climate_zones"
          ],
          "estimated_lines": 160,
          "priority": "high"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "_get_continent_regions",
            "_get_continent_by_id",
            "get_weather_for_region",
            "_save_world_data",
            "load_world",
            "create_new_region",
            "create_new_region"
          ],
          "estimated_lines": 140,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "GenerationPhase",
            "GenerationStatus",
            "WorldGenerator",
            "MockRegionService",
            "MockRegionService"
          ],
          "estimated_lines": 150,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/events/event_dispatcher.py",
      "lines": 657,
      "classes": [
        "EventBase",
        "EventMiddleware",
        "EventDispatcher"
      ],
      "functions": [
        "__str__",
        "process_event",
        "get_instance",
        "reset_instance",
        "__init__",
        "subscribe",
        "subscribe_async",
        "unsubscribe",
        "unsubscribe_async",
        "add_middleware",
        "set_event_type_priority",
        "get_event_type_priority",
        "publish",
        "publish_sync",
        "dispatch",
        "publish_batch",
        "publish_background",
        "_process_sync_handlers_and_middleware",
        "_call_sync_handlers",
        "clear_handlers",
        "get_event_priority",
        "process_at_index",
        "next_middleware"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Callable",
        "typing.Union",
        "typing.Type",
        "typing.TypeVar",
        "typing.Awaitable",
        "typing.Optional",
        "logging",
        "asyncio",
        "concurrent.futures.ThreadPoolExecutor",
        "pydantic.BaseModel",
        "logging",
        "logging",
        "inspect",
        "inspect",
        "inspect"
      ],
      "dependencies": "{'pydantic'}",
      "responsibilities": [
        "Business Logic",
        "Data Models",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 82,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "process_event",
            "_process_sync_handlers_and_middleware",
            "process_at_index"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_instance",
            "get_event_type_priority",
            "get_event_priority"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "subscribe_async",
            "unsubscribe_async"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "EventBase",
            "EventMiddleware",
            "EventDispatcher"
          ],
          "estimated_lines": 90,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/llm/core/event_integration.py",
      "lines": 654,
      "classes": [
        "EventBase",
        "EventHandler",
        "EventMiddleware",
        "MiddlewareChain",
        "LoggingMiddleware",
        "ValidationMiddleware",
        "AnalyticsMiddleware",
        "ThrottlingMiddleware",
        "EventTransformMiddleware",
        "EventDispatcher",
        "MemoryEvent",
        "RumorEvent",
        "MotifEvent",
        "FactionEvent",
        "MotifChangedEvent",
        "POIStateChangedEvent",
        "QuestUpdatedEvent",
        "CombatEvent",
        "TimeAdvancedEvent",
        "ConfigDict"
      ],
      "functions": [
        "logging_middleware",
        "analytics_middleware",
        "filtering_middleware",
        "register_narrative_handlers",
        "__init__",
        "process",
        "__init__",
        "add",
        "add_middleware",
        "remove",
        "remove_middleware",
        "process",
        "__init__",
        "process",
        "process",
        "__init__",
        "process",
        "__init__",
        "process",
        "__init__",
        "process",
        "get_instance",
        "__init__",
        "subscribe",
        "unsubscribe",
        "add_middleware",
        "remove_middleware",
        "publish_sync",
        "publish_async",
        "publish",
        "_apply_middleware",
        "memory_handler",
        "rumor_handler",
        "motif_handler",
        "faction_handler",
        "__init__"
      ],
      "imports": [
        "logging",
        "time",
        "uuid",
        "threading",
        "json",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Callable",
        "typing.Type",
        "typing.TypeVar",
        "typing.Optional",
        "typing.Set",
        "typing.Union",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.ConfigDict"
      ],
      "dependencies": "{'pydantic'}",
      "responsibilities": [
        "Data Models",
        "Configuration",
        "Database Operations",
        "Event Handling",
        "File I/O"
      ],
      "complexity_score": 89,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_instance"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "faction_handler"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "EventBase",
            "EventHandler",
            "EventMiddleware",
            "MiddlewareChain",
            "LoggingMiddleware",
            "ValidationMiddleware",
            "AnalyticsMiddleware",
            "ThrottlingMiddleware",
            "EventTransformMiddleware",
            "EventDispatcher",
            "MemoryEvent",
            "RumorEvent",
            "MotifEvent",
            "FactionEvent",
            "MotifChangedEvent",
            "POIStateChangedEvent",
            "QuestUpdatedEvent",
            "CombatEvent",
            "TimeAdvancedEvent",
            "ConfigDict"
          ],
          "estimated_lines": 600,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/world_generation/modding_system.py",
      "lines": 639,
      "classes": [
        "ModDataManager",
        "ModValidationService",
        "ModSynchronizer",
        "TechnicalModInterface",
        "CasualModInterface"
      ],
      "functions": [
        "__init__",
        "_load_schemas",
        "get_available_worlds",
        "load_world_seed",
        "save_world_seed",
        "validate_world_seed",
        "__init__",
        "_load_schemas",
        "validate_mod",
        "__init__",
        "check_conflicts",
        "merge_world_seeds",
        "merge_dict",
        "merge_biomes",
        "merge_factions",
        "__init__",
        "create_new_world_seed",
        "validate_json",
        "save_world_seed",
        "__init__",
        "get_available_assets",
        "create_world_from_selections",
        "_load_asset",
        "save_world_seed"
      ],
      "imports": [
        "os",
        "json",
        "random",
        "shutil",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Set",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "pathlib.Path",
        "datetime.datetime",
        "logging",
        "uuid"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Data Models",
        "Configuration",
        "Database Operations",
        "Business Logic",
        "File I/O"
      ],
      "complexity_score": 98,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "_load_schemas",
            "get_available_worlds",
            "load_world_seed",
            "save_world_seed",
            "_load_schemas",
            "create_new_world_seed",
            "save_world_seed",
            "get_available_assets",
            "create_world_from_selections",
            "_load_asset",
            "save_world_seed"
          ],
          "estimated_lines": 220,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "validate_world_seed",
            "validate_mod",
            "validate_json"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "ModDataManager",
            "ModValidationService",
            "ModSynchronizer",
            "TechnicalModInterface",
            "CasualModInterface"
          ],
          "estimated_lines": 150,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/llm/core/gpt_integration.py",
      "lines": 632,
      "classes": [
        "GPTEvent",
        "GPTModel",
        "GPTIntegration",
        "GPTIntegrationService"
      ],
      "functions": [
        "format_prompt",
        "get_system_prompt",
        "combine_contexts",
        "_deep_merge",
        "process_response",
        "generate_text",
        "analyze_text_importance",
        "generate_character_dialogue",
        "__init__",
        "__init__",
        "get_instance",
        "__init__",
        "_load_prompt",
        "prompt_exists",
        "get_prompt_template",
        "get_event_metadata",
        "clear_cache",
        "get_instance",
        "__init__",
        "register_model",
        "generate_narrative_text",
        "generate_dialogue",
        "analyze_memory_importance",
        "_build_prompt",
        "_call_gpt",
        "replace_variable"
      ],
      "imports": [
        "logging",
        "openai",
        "os",
        "json",
        "re",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "datetime.datetime",
        "backend.systems.events.models.EventBase",
        "asyncio",
        "backend.systems.llm.core.event_integration.EventDispatcher",
        "backend.systems.llm.services.gpt_client.GPTClient",
        "re"
      ],
      "dependencies": "{'events', 'llm'}",
      "responsibilities": [
        "Configuration",
        "Utilities",
        "Database Operations",
        "Event Handling",
        "Business Logic",
        "File I/O"
      ],
      "complexity_score": 93,
      "refactoring_priority": "CRITICAL",
      "suggested_modules": [
        {
          "module_name": "utilities.py",
          "responsibility": "Utilities",
          "functions": [
            "format_prompt"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_system_prompt",
            "get_instance",
            "_load_prompt",
            "get_prompt_template",
            "get_event_metadata",
            "get_instance"
          ],
          "estimated_lines": 120,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "process_response",
            "generate_text",
            "generate_character_dialogue",
            "generate_narrative_text",
            "generate_dialogue"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "GPTEvent",
            "GPTModel",
            "GPTIntegration",
            "GPTIntegrationService"
          ],
          "estimated_lines": 120,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/npc/services/npc_service.py",
      "lines": 1527,
      "classes": [
        "NPCService"
      ],
      "functions": [
        "get_npc_service",
        "get_instance",
        "__init__",
        "create_npc",
        "get_npc",
        "list_npcs",
        "update_npc",
        "delete_npc",
        "get_npc_location",
        "update_npc_location",
        "get_npc_memories",
        "add_memory_to_npc",
        "recall_memory",
        "reinforce_memory",
        "forget_memory",
        "get_npc_faction_status",
        "adjust_npc_faction_allegiance",
        "set_primary_faction",
        "get_npc_rumors",
        "add_rumor_to_npc",
        "spread_rumor",
        "forget_rumor",
        "get_npc_motifs",
        "apply_motif_to_npc",
        "update_motif",
        "remove_motif",
        "run_monthly_population_update",
        "run_rumor_decay",
        "apply_global_motifs_to_all_npcs"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Union",
        "typing.Tuple",
        "typing.cast",
        "uuid.uuid4",
        "datetime.datetime",
        "datetime.timedelta",
        "logging",
        "json",
        "random",
        "firebase_admin.db",
        "backend.systems.events.get_event_dispatcher",
        "backend.systems.npc.models.npc_events.NPCCreated",
        "backend.systems.npc.models.npc_events.NPCUpdated",
        "backend.systems.npc.models.npc_events.NPCDeleted",
        "backend.systems.npc.models.npc_events.NPCMoved",
        "backend.systems.npc.models.npc_events.NPCFactionChanged",
        "backend.systems.npc.models.npc_events.NPCFactionAllegianceAdjusted",
        "backend.systems.npc.models.npc_events.NPCFactionSwitched",
        "backend.systems.npc.models.npc_events.NPCMotifUpdated",
        "backend.systems.npc.models.npc_events.NPCMotifApplied",
        "backend.systems.npc.models.npc_events.NPCRumorLearned",
        "backend.systems.npc.models.npc_events.NPCRumorSpread",
        "backend.systems.npc.models.npc_events.NPCRumorForgotten",
        "backend.systems.npc.models.npc_events.NPCMemoryCreated",
        "backend.systems.npc.models.npc_events.NPCMemoryRecalled",
        "backend.systems.npc.models.npc_events.NPCMemoryReinforced",
        "backend.systems.npc.models.npc_events.NPCMemoryForgotten",
        "backend.systems.npc.models.npc_events.NPCScheduledActionCompleted",
        "backend.systems.npc.models.npc_events.NPCInteracted",
        "backend.systems.npc.models.npc_events.NPCGenerated",
        "backend.systems.npc.models.npc_events.NPCJoinedParty",
        "backend.systems.npc.models.npc_events.NPCLeftParty",
        "backend.systems.npc.models.npc_events.NPCLoyaltyChanged",
        "math"
      ],
      "dependencies": "{'firebase', 'npc', 'events'}",
      "responsibilities": [
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 79,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_npc_service",
            "get_instance",
            "create_npc",
            "get_npc",
            "update_npc",
            "delete_npc",
            "get_npc_location",
            "update_npc_location",
            "get_npc_memories",
            "forget_memory",
            "get_npc_faction_status",
            "get_npc_rumors",
            "forget_rumor",
            "get_npc_motifs",
            "update_motif"
          ],
          "estimated_lines": 300,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "adjust_npc_faction_allegiance",
            "run_monthly_population_update"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "NPCService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/population/service.py",
      "lines": 1519,
      "classes": [
        "PopulationService"
      ],
      "functions": [
        "__new__",
        "_calculate_dungeon_difficulty",
        "_estimate_treasure_level"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "typing.Union",
        "math",
        "datetime.datetime",
        "backend.systems.population.models.POIPopulation",
        "backend.systems.population.models.POIType",
        "backend.systems.population.models.POIState",
        "backend.systems.population.models.PopulationConfig",
        "backend.systems.population.models.PopulationChangedEvent",
        "logging",
        "backend.systems.population.utils.calculate_growth_rate",
        "backend.systems.population.utils.calculate_next_state",
        "backend.systems.population.utils.calculate_target_population",
        "backend.systems.population.utils.calculate_catastrophe_impact",
        "backend.systems.population.utils.calculate_war_impact",
        "backend.systems.population.utils.calculate_resource_shortage_impact",
        "backend.systems.population.utils.calculate_seasonal_growth_modifier",
        "backend.systems.population.utils.calculate_seasonal_death_rate_modifier",
        "backend.systems.population.utils.estimate_time_to_state",
        "backend.systems.population.utils.is_valid_transition",
        "backend.systems.population.utils.calculate_migration_impact",
        "backend.systems.population.utils.get_poi_status_description",
        "backend.systems.population.events.PopulationChangedEventData",
        "backend.systems.population.events.PopulationStateChangedEventData",
        "backend.systems.population.events.PopulationWarImpactEventData",
        "backend.systems.population.events.PopulationCatastropheEventData",
        "backend.systems.population.events.PopulationMigrationEventData",
        "backend.systems.population.events.PopulationResourceShortageEventData",
        "backend.systems.population.events.PopulationSeasonalEffectEventData",
        "backend.systems.events.EventDispatcher"
      ],
      "dependencies": "{'population', 'events'}",
      "responsibilities": [
        "Configuration",
        "Utilities",
        "Database Operations",
        "Event Handling",
        "Business Logic"
      ],
      "complexity_score": 53,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_calculate_dungeon_difficulty"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "PopulationService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/religion/services.py",
      "lines": 1079,
      "classes": [
        "ReligionEvent",
        "ReligionMembershipEvent",
        "ReligionNarrativeEvent",
        "ReligionService"
      ],
      "functions": [
        "get_religion_service",
        "__init__",
        "create_religion",
        "get_religion",
        "get_religions",
        "update_religion",
        "delete_religion",
        "create_membership",
        "get_entity_memberships",
        "get_religion_memberships",
        "update_membership_level",
        "remove_membership",
        "update_devotion",
        "trigger_narrative_hook",
        "_check_for_quest_integration",
        "sync_with_faction",
        "_handle_faction_membership_change",
        "get_membership_count",
        "get_membership"
      ],
      "imports": [
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "models.Religion",
        "models.ReligionMembership",
        "models.ReligionType",
        "models.MembershipLevel",
        "repository.ReligionRepository",
        "repository.get_religion_repository",
        "utils.calculate_devotion_change",
        "utils.generate_conversion_narrative",
        "utils.generate_religion_event",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.EventBase",
        "backend.systems.faction.get_faction_service",
        "backend.systems.quest.get_quest_service"
      ],
      "dependencies": "{'events', 'faction', 'quest'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 76,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_religion_service",
            "create_religion",
            "get_religion",
            "get_religions",
            "update_religion",
            "delete_religion",
            "create_membership",
            "get_entity_memberships",
            "get_religion_memberships",
            "update_membership_level",
            "update_devotion",
            "get_membership_count",
            "get_membership"
          ],
          "estimated_lines": 260,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_handle_faction_membership_change"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "ReligionEvent",
            "ReligionMembershipEvent",
            "ReligionNarrativeEvent",
            "ReligionService"
          ],
          "estimated_lines": 120,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/quest/quest_manager.py",
      "lines": 1043,
      "classes": [
        "QuestManager"
      ],
      "functions": [
        "__init__",
        "update_step_status",
        "accept_quest",
        "abandon_quest",
        "complete_quest",
        "fail_quest",
        "accept_quest_from_board",
        "load_player_arc",
        "save_player_arc",
        "get_player_arcs",
        "get_arc",
        "create_regional_arc",
        "create_global_arc",
        "update_arc_progress",
        "unlock_next_chapter",
        "on_motif_changed",
        "register_event_handlers"
      ],
      "imports": [
        "logging",
        "uuid",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "backend.systems.shared.utils.core.firebase_utils.get_firestore_client",
        "backend.systems.shared.utils.core.firebase_utils.get_document",
        "backend.systems.shared.utils.core.firebase_utils.set_document",
        "backend.systems.shared.utils.core.firebase_utils.update_document",
        "backend.systems.shared.utils.core.firebase_utils.get_collection",
        "backend.systems.shared.utils.common.error.ValidationError",
        "backend.systems.shared.utils.common.error.NotFoundError",
        "backend.systems.shared.utils.common.error.DatabaseError",
        "backend.systems.events.get_event_dispatcher",
        "backend.systems.events.QuestCompletedEvent",
        "backend.systems.events.QuestAcceptedEvent",
        "backend.systems.events.QuestAbandonedEvent",
        "backend.systems.events.QuestFailedEvent",
        "backend.systems.events.QuestStepUpdatedEvent",
        "utils.QuestValidator",
        "motif_integration.QuestMotifIntegration",
        "database.QuestRepository"
      ],
      "dependencies": "{'firebase', 'events', 'shared'}",
      "responsibilities": [
        "Business Logic",
        "Data Models",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 67,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "update_step_status",
            "load_player_arc",
            "save_player_arc",
            "get_player_arcs",
            "get_arc",
            "create_regional_arc",
            "create_global_arc",
            "update_arc_progress"
          ],
          "estimated_lines": 160,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "abandon_quest",
            "on_motif_changed"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "QuestManager"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/quest/motif_integration.py",
      "lines": 1041,
      "classes": [
        "QuestMotifIntegration"
      ],
      "functions": [
        "get_motif_patterns",
        "generate_motif_quest",
        "_modify_quest_steps_for_motif",
        "generate_regional_arc_quest",
        "generate_global_arc_quest",
        "process_motif_quest_completion",
        "apply_motif_to_quest",
        "get_regional_motifs",
        "get_active_motifs",
        "register_event_handlers",
        "update_quest_with_motif_changes",
        "apply_regional_motif_shift",
        "apply_global_motif_changes",
        "process_quest_motif_impact",
        "sync_quest_with_motifs"
      ],
      "imports": [
        "logging",
        "random",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "backend.systems.events.get_event_dispatcher",
        "models.Quest",
        "models.QuestStep",
        "generator.QuestGenerator",
        "backend.systems.motif.MotifManager",
        "backend.systems.arc.services.arc_manager.ArcManager",
        "backend.systems.arc.models.ArcType",
        "backend.systems.arc.models.ArcStatus"
      ],
      "dependencies": "{'events', 'motif', 'arc'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 73,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_motif_patterns",
            "get_regional_motifs",
            "get_active_motifs",
            "update_quest_with_motif_changes"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_motif_quest",
            "generate_regional_arc_quest",
            "generate_global_arc_quest",
            "process_motif_quest_completion",
            "process_quest_motif_impact"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "QuestMotifIntegration"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/combat/unified_combat_utils.py",
      "lines": 1016,
      "classes": [
        "DamageType",
        "StatusEffectType",
        "StatusEffectTarget",
        "EffectDuration"
      ],
      "functions": [
        "calculate_base_damage",
        "apply_critical_hit",
        "calculate_mitigation",
        "apply_full_damage_calculation",
        "get_valid_targets",
        "get_turn_order",
        "resolve_combat_action",
        "apply_status_effect",
        "process_status_effects",
        "remove_status_effect",
        "dispel_effects",
        "is_attack_successful",
        "get_elemental_effectiveness",
        "has_effect",
        "get_effect",
        "get_effect_stacks",
        "register_combat_event_handlers",
        "create_combat_event_handler",
        "remove_combat_event_handler"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "typing.Callable",
        "typing.Any",
        "enum.Enum",
        "random",
        "math",
        "logging",
        "backend.systems.combat.combat_types_stub.Character",
        "backend.systems.combat.combat_types_stub.CombatState",
        "backend.systems.combat.combat_types_stub.CombatAction",
        "backend.systems.combat.combat_types_stub.CombatEvent",
        "backend.systems.combat.combat_types_stub.StatusEffect",
        "backend.systems.combat.combat_types_stub.DamageCalculation",
        "backend.systems.combat.combat_types_stub.ActionResult"
      ],
      "dependencies": "{'combat'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 75,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_base_damage",
            "calculate_mitigation",
            "process_status_effects"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_valid_targets",
            "get_turn_order",
            "get_elemental_effectiveness",
            "get_effect",
            "get_effect_stacks",
            "create_combat_event_handler"
          ],
          "estimated_lines": 120,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "DamageType",
            "StatusEffectType",
            "StatusEffectTarget",
            "EffectDuration"
          ],
          "estimated_lines": 120,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/quest/system_hooks.py",
      "lines": 993,
      "classes": [
        "QuestSystemHooks"
      ],
      "functions": [
        "register_hooks",
        "_register_memory_hooks",
        "_register_rumor_hooks",
        "_register_population_hooks",
        "_register_core_hooks",
        "_get_players_in_region",
        "_generate_ruins_quests",
        "_generate_dungeon_quests"
      ],
      "imports": [
        "logging",
        "random",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "backend.systems.events.get_event_dispatcher",
        "models.Quest",
        "models.QuestStep",
        "quest_manager.QuestManager",
        "motif_integration.QuestMotifIntegration",
        "faction_integration.QuestFactionIntegration",
        "generator.QuestGenerator",
        "utils.QuestUtils",
        "integration.QuestIntegration",
        "backend.systems.memory.MemoryManager",
        "backend.systems.rumor.RumorService",
        "backend.systems.population.population_service",
        "motif_integration.QuestMotifIntegration",
        "arc_manager.ArcManager",
        "backend.systems.player.PlayerManager",
        "backend.systems.world.WorldStateManager",
        "backend.systems.player.PlayerManager",
        "faction_integration.QuestFactionIntegration",
        "backend.systems.player.PlayerManager",
        "backend.systems.player.PlayerManager",
        "backend.systems.player.PlayerManager",
        "backend.systems.player.PlayerManager"
      ],
      "dependencies": "{'world', 'rumor', 'memory', 'player', 'population', 'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 67,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "_register_population_hooks"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "_get_players_in_region"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_generate_ruins_quests",
            "_generate_dungeon_quests"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "QuestSystemHooks"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/inventory/service.py",
      "lines": 989,
      "classes": [
        "InventoryService"
      ],
      "functions": [
        "_handle_validation_result",
        "create_item",
        "update_item",
        "delete_item",
        "get_item",
        "get_items",
        "create_inventory",
        "update_inventory",
        "delete_inventory",
        "get_inventory",
        "get_inventories",
        "get_inventory_by_owner",
        "get_inventory_stats",
        "add_item_to_inventory",
        "remove_item_from_inventory",
        "update_inventory_item",
        "equip_item",
        "unequip_item",
        "transfer_item",
        "validate_inventory_operation"
      ],
      "imports": [
        "logging",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "backend.systems.shared.database.db",
        "backend.systems.inventory.models.item.Item",
        "backend.systems.inventory.models.inventory.Inventory",
        "backend.systems.inventory.models.inventory_item.InventoryItem",
        "backend.systems.inventory.models.item_category.ItemCategory",
        "backend.systems.inventory.schemas.ItemResponse",
        "backend.systems.inventory.schemas.InventoryResponse",
        "backend.systems.inventory.schemas.InventoryItemResponse",
        "backend.systems.inventory.schemas.InventoryDetailResponse",
        "backend.systems.inventory.schemas.InventoryStats",
        "backend.systems.inventory.schemas.ValidationResponse",
        "backend.systems.inventory.validator.InventoryValidator",
        "backend.systems.inventory.repository.ItemRepository",
        "backend.systems.inventory.repository.InventoryRepository",
        "backend.systems.inventory.repository.InventoryItemRepository",
        "backend.systems.inventory.utils.InventoryUtils"
      ],
      "dependencies": "{'inventory', 'shared'}",
      "responsibilities": [
        "Business Logic",
        "Data Models",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 69,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_handle_validation_result",
            "validate_inventory_operation"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "create_item",
            "update_item",
            "delete_item",
            "get_item",
            "get_items",
            "create_inventory",
            "update_inventory",
            "delete_inventory",
            "get_inventory",
            "get_inventories",
            "get_inventory_by_owner",
            "get_inventory_stats",
            "update_inventory_item"
          ],
          "estimated_lines": 260,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "InventoryService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/time/utils/time_utils.py",
      "lines": 952,
      "classes": [],
      "functions": [
        "_get_time_manager",
        "get_current_time",
        "get_current_season",
        "get_formatted_time",
        "get_time_of_day",
        "is_daytime",
        "time_since",
        "format_time_since",
        "schedule_one_time_event",
        "schedule_recurring_event",
        "cancel_scheduled_event",
        "register_event_callback",
        "advance_time",
        "is_leap_year",
        "get_days_in_month",
        "add_important_date",
        "is_important_date",
        "format_time_difference",
        "time_to_string",
        "get_time_of_day_name",
        "is_daytime",
        "calculate_time_difference",
        "time_since",
        "format_time_since",
        "format_time_remaining",
        "convert_time_units",
        "parse_time_string",
        "is_valid_date",
        "get_date_string",
        "is_same_day",
        "is_same_month",
        "time_in_range",
        "time_to_seconds"
      ],
      "imports": [
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "typing.Any",
        "backend.systems.time.models.time_model.GameTime",
        "backend.systems.time.models.time_model.Season",
        "backend.systems.time.models.time_model.TimeUnit",
        "backend.systems.time.models.time_model.WorldTime",
        "backend.systems.time.models.calendar_model.Season",
        "backend.systems.time.models.event_model.EventType",
        "backend.systems.time.services.time_manager.TimeManager"
      ],
      "dependencies": "{'time'}",
      "responsibilities": [
        "Business Logic",
        "Utilities",
        "Database Operations"
      ],
      "complexity_score": 71,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "_get_time_manager",
            "get_current_time",
            "get_current_season",
            "get_formatted_time",
            "get_time_of_day",
            "get_days_in_month",
            "get_time_of_day_name",
            "get_date_string"
          ],
          "estimated_lines": 160,
          "priority": "high"
        },
        {
          "module_name": "utilities.py",
          "responsibility": "Utilities",
          "functions": [
            "format_time_since",
            "format_time_difference",
            "format_time_since",
            "format_time_remaining",
            "convert_time_units",
            "parse_time_string"
          ],
          "estimated_lines": 120,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_time_difference"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/arc/services/arc_manager.py",
      "lines": 946,
      "classes": [
        "ArcManager"
      ],
      "functions": [
        "__init__",
        "_arc_responds_to_event",
        "_arc_responds_to_quest",
        "_arc_responds_to_faction_changes",
        "_detect_quest_hooks",
        "_detect_npc_hooks",
        "_detect_faction_hooks",
        "_detect_location_hooks",
        "_detect_temporal_hooks",
        "_detect_narrative_bridges"
      ],
      "imports": [
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "uuid.UUID",
        "models.Arc",
        "models.ArcType",
        "models.ArcStatus",
        "models.ArcPriority",
        "models.ArcStep",
        "models.ArcStepStatus",
        "models.ArcProgression",
        "models.ProgressionMethod",
        "models.ArcCompletionRecord",
        "models.ArcCompletionResult",
        "repositories.arc_repository.ArcRepository",
        "repositories.arc_step_repository.ArcStepRepository",
        "repositories.progression_repository.ProgressionRepository",
        "arc_generator.ArcGenerator",
        "arc_generator.ArcGenerator"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 67,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "_arc_responds_to_faction_changes",
            "_detect_faction_hooks",
            "_detect_location_hooks"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "ArcManager"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/region/service.py",
      "lines": 897,
      "classes": [
        "RegionService"
      ],
      "functions": [
        "__init__",
        "initialize",
        "_initialize_new_world",
        "get_world_metadata",
        "get_all_continents",
        "get_continent",
        "get_all_regions",
        "get_region",
        "get_regions_by_biome",
        "get_regions_at_coordinates",
        "get_adjacent_regions",
        "regenerate_world",
        "get_biome_data",
        "get_adjacency_rules",
        "get_region_by_coordinates",
        "generate_new_continent",
        "generate_new_region",
        "get_world_map",
        "get_neighbors",
        "get_continent_regions",
        "get_region_pois",
        "list_regions",
        "create_region",
        "update_region",
        "delete_region"
      ],
      "imports": [
        "os",
        "random",
        "json",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "backend.systems.region.models.Region",
        "backend.systems.region.models.RegionType",
        "backend.systems.data.GameDataRegistry",
        "backend.systems.region.repository.RegionRepository",
        "backend.systems.region.world_generator.WorldGenerator",
        "backend.systems.region.generators.RegionGenerator",
        "backend.systems.region.generators.ContinentGenerator",
        "backend.systems.region.models.RegionMetadata",
        "backend.systems.region.models.ContinentMetadata"
      ],
      "dependencies": "{'region', 'data'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 78,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_world_metadata",
            "get_all_continents",
            "get_continent",
            "get_all_regions",
            "get_region",
            "get_regions_by_biome",
            "get_regions_at_coordinates",
            "get_adjacent_regions",
            "get_biome_data",
            "get_adjacency_rules",
            "get_region_by_coordinates",
            "get_world_map",
            "get_neighbors",
            "get_continent_regions",
            "get_region_pois",
            "create_region",
            "update_region",
            "delete_region"
          ],
          "estimated_lines": 360,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "regenerate_world",
            "generate_new_continent",
            "generate_new_region"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "RegionService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/dialogue/faction_integration.py",
      "lines": 890,
      "classes": [
        "DialogueFactionIntegration"
      ],
      "functions": [
        "__init__",
        "add_faction_context_to_dialogue",
        "get_faction_relationship_for_dialogue",
        "get_war_dialogue_context",
        "get_tension_dialogue_references",
        "get_faction_description_for_dialogue",
        "get_war_status_summary",
        "_get_faction_info",
        "_get_character_faction_perspective",
        "_get_faction_relationships",
        "_get_faction_tensions",
        "_get_faction_wars",
        "_get_character_faction",
        "_get_faction_war_role",
        "_get_faction_war_perspective",
        "_get_war_opponents"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "logging",
        "backend.systems.faction.FactionFacade",
        "backend.systems.tension_war.services.tension_manager.TensionManager",
        "backend.systems.tension_war.services.war_manager.WarManager",
        "backend.systems.character.services.character_service.CharacterService"
      ],
      "dependencies": "{'tension_war', 'character', 'faction'}",
      "responsibilities": [
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 69,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "add_faction_context_to_dialogue"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_faction_relationship_for_dialogue",
            "get_war_dialogue_context",
            "get_tension_dialogue_references",
            "get_faction_description_for_dialogue",
            "get_war_status_summary",
            "_get_faction_info",
            "_get_character_faction_perspective",
            "_get_faction_relationships",
            "_get_faction_tensions",
            "_get_faction_wars",
            "_get_character_faction",
            "_get_faction_war_role",
            "_get_faction_war_perspective",
            "_get_war_opponents"
          ],
          "estimated_lines": 280,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "DialogueFactionIntegration"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/dialogue/dialogue_system.py",
      "lines": 873,
      "classes": [
        "Conversation",
        "DialogueSystem"
      ],
      "functions": [
        "get_dialogue_system",
        "__init__",
        "add_message",
        "get_context",
        "extract_information",
        "end_conversation",
        "is_active",
        "add_to_context",
        "add_participant",
        "remove_participant",
        "get_all_participants",
        "save",
        "load",
        "clear_cache",
        "_update_recent_messages",
        "get_instance",
        "__init__",
        "start_conversation",
        "end_conversation",
        "add_message_to_conversation",
        "generate_response",
        "get_conversation",
        "get_active_conversations",
        "_enhance_context_with_integrations"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Callable",
        "typing.Set",
        "logging",
        "uuid",
        "threading",
        "datetime.datetime",
        "backend.systems.dialogue.memory_integration.DialogueMemoryIntegration",
        "backend.systems.dialogue.motif_integration.DialogueMotifIntegration",
        "backend.systems.dialogue.faction_integration.DialogueFactionIntegration",
        "backend.systems.dialogue.population_integration.DialoguePopulationIntegration",
        "backend.systems.dialogue.world_state_integration.DialogueWorldStateIntegration",
        "backend.systems.dialogue.time_integration.DialogueTimeIntegration",
        "backend.systems.dialogue.poi_integration.DialoguePOIIntegration",
        "backend.systems.dialogue.quest_integration.DialogueQuestIntegration",
        "backend.systems.dialogue.region_integration.DialogueRegionIntegration",
        "backend.systems.dialogue.war_integration.DialogueWarIntegration",
        "backend.systems.dialogue.relationship_integration.DialogueRelationshipIntegration",
        "backend.systems.dialogue.analytics_integration.DialogueAnalyticsIntegration",
        "backend.systems.dialogue.events.DialogueEventEmitter",
        "backend.systems.dialogue.events.DialogueStartedEvent",
        "backend.systems.dialogue.events.DialogueMessageEvent",
        "backend.systems.dialogue.events.DialogueEndedEvent",
        "backend.systems.dialogue.conversation.ConversationHistory",
        "backend.systems.dialogue.conversation.ConversationEntry",
        "backend.systems.dialogue.cache.DialogueCache",
        "backend.systems.dialogue.utils.count_tokens",
        "backend.systems.dialogue.utils.relevance_score",
        "backend.systems.dialogue.utils.extract_key_info",
        "backend.systems.dialogue.utils.clean_text_for_dialogue",
        "backend.systems.llm.language_generator.LanguageGenerator",
        "json",
        "json"
      ],
      "dependencies": "{'dialogue', 'llm'}",
      "responsibilities": [
        "Configuration",
        "Database Operations",
        "Event Handling",
        "Business Logic",
        "File I/O"
      ],
      "complexity_score": 75,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_dialogue_system",
            "get_context",
            "get_all_participants",
            "_update_recent_messages",
            "get_instance",
            "get_conversation",
            "get_active_conversations"
          ],
          "estimated_lines": 140,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_response"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "Conversation",
            "DialogueSystem"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_state/utils/terrain_generator.py",
      "lines": 857,
      "classes": [
        "NoiseLayer",
        "TerrainConfig",
        "BiomeInfo",
        "TerrainGenerator"
      ],
      "functions": [
        "default",
        "__init__",
        "load_biome_data",
        "generate_transition_biomes",
        "generate_terrain",
        "_generate_noise",
        "_perlin_noise",
        "_fractal_noise",
        "_ranges_overlap",
        "_merge_ranges",
        "_merge_resources",
        "_blend_colors",
        "_generate_improved_rivers",
        "_determine_biome",
        "_calculate_factor_score",
        "get_biome_info",
        "get_all_biomes",
        "pseudo_random",
        "smoothstep",
        "hex_to_rgb",
        "rgb_to_hex"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "typing.Any",
        "typing.Set",
        "random",
        "math",
        "time",
        "json",
        "numpy",
        "dataclasses.dataclass",
        "dataclasses.field",
        "os"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Data Models",
        "Configuration",
        "Database Operations",
        "Business Logic",
        "File I/O"
      ],
      "complexity_score": 79,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "load_biome_data",
            "get_biome_info",
            "get_all_biomes"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_transition_biomes",
            "generate_terrain",
            "_generate_noise",
            "_generate_improved_rivers",
            "_calculate_factor_score"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "NoiseLayer",
            "TerrainConfig",
            "BiomeInfo",
            "TerrainGenerator"
          ],
          "estimated_lines": 120,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/dialogue/relationship_integration.py",
      "lines": 829,
      "classes": [
        "DialogueRelationshipIntegration",
        "RelationshipManager",
        "CharacterManager"
      ],
      "functions": [
        "__init__",
        "add_relationship_context_to_dialogue",
        "get_relationship_dialogue_modifiers",
        "get_relationship_specific_greetings",
        "get_relationship_specific_farewells",
        "get_relationship_dialogue_topics",
        "update_relationship_from_dialogue",
        "_get_relationship_info",
        "_get_relationship_history",
        "_get_relationship_network",
        "_get_relationship_status_description",
        "get_instance",
        "get_relationship",
        "get_instance",
        "get_character"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "logging",
        "backend.systems.character.services.relationship_service.RelationshipService",
        "backend.systems.character.services.character_service.CharacterService"
      ],
      "dependencies": "{'character'}",
      "responsibilities": [
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 72,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_relationship_dialogue_modifiers",
            "get_relationship_specific_greetings",
            "get_relationship_specific_farewells",
            "get_relationship_dialogue_topics",
            "update_relationship_from_dialogue",
            "_get_relationship_info",
            "_get_relationship_history",
            "_get_relationship_network",
            "_get_relationship_status_description",
            "get_instance",
            "get_relationship",
            "get_instance",
            "get_character"
          ],
          "estimated_lines": 260,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "DialogueRelationshipIntegration",
            "RelationshipManager",
            "CharacterManager"
          ],
          "estimated_lines": 90,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/dialogue/quest_integration.py",
      "lines": 827,
      "classes": [
        "DialogueQuestIntegration",
        "ArcManager"
      ],
      "functions": [
        "__init__",
        "add_quest_context_to_dialogue",
        "get_quest_dialogue_options",
        "get_arc_dialogue_context",
        "get_quest_narrative_description",
        "_get_quest_info",
        "_get_character_relevant_quests",
        "_get_active_arcs",
        "_get_character_quest_role",
        "_get_character_arc_perspective",
        "_get_arc_active_quests",
        "_get_quest_state_description",
        "_get_quest_offer_dialogue",
        "_get_quest_progress_dialogue",
        "_get_quest_completion_dialogue",
        "_get_quest_hint_dialogue",
        "get_instance",
        "get_arc"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "logging",
        "backend.systems.quest.quest_manager.QuestManager",
        "backend.systems.arc.arc_manager.ArcManager"
      ],
      "dependencies": "{'quest', 'arc'}",
      "responsibilities": [
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 70,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_quest_dialogue_options",
            "get_arc_dialogue_context",
            "get_quest_narrative_description",
            "_get_quest_info",
            "_get_character_relevant_quests",
            "_get_active_arcs",
            "_get_character_quest_role",
            "_get_character_arc_perspective",
            "_get_arc_active_quests",
            "_get_quest_state_description",
            "_get_quest_offer_dialogue",
            "_get_quest_progress_dialogue",
            "_get_quest_completion_dialogue",
            "_get_quest_hint_dialogue",
            "get_instance",
            "get_arc"
          ],
          "estimated_lines": 320,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "DialogueQuestIntegration",
            "ArcManager"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/economy/services/resource_service.py",
      "lines": 823,
      "classes": [
        "ResourceService"
      ],
      "functions": [
        "__init__",
        "get_resource",
        "get_resources_by_region",
        "create_resource",
        "update_resource",
        "delete_resource",
        "adjust_resource_amount",
        "get_available_resources",
        "transfer_resource",
        "clear_cache",
        "process_economic_event",
        "simulate_resource_consumption",
        "simulate_production_activities"
      ],
      "imports": [
        "os",
        "json",
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "pathlib.Path",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "backend.systems.economy.models.Resource",
        "backend.systems.economy.models.ResourceData",
        "logging"
      ],
      "dependencies": "{'sqlalchemy', 'economy'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 63,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_resource",
            "get_resources_by_region",
            "create_resource",
            "update_resource",
            "delete_resource",
            "get_available_resources"
          ],
          "estimated_lines": 120,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "process_economic_event"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "simulate_production_activities"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "ResourceService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/character/services/relationship_service.py",
      "lines": 803,
      "classes": [
        "RelationshipService"
      ],
      "functions": [
        "__init__",
        "get_relationship_by_id",
        "get_relationship_by_uuid",
        "get_relationships_by_source",
        "get_relationships_by_target",
        "get_relationship",
        "create_relationship",
        "update_relationship_data",
        "update_relationship_data_field",
        "delete_relationship",
        "create_faction_relationship",
        "update_faction_reputation",
        "_get_standing_for_reputation",
        "get_character_factions",
        "create_quest_relationship",
        "update_quest_progress",
        "get_character_quests",
        "create_spatial_relationship",
        "update_spatial_proximity",
        "get_entity_locations",
        "create_auth_relationship",
        "update_auth_permissions",
        "check_user_permission",
        "get_user_characters",
        "get_character_users",
        "update_character_affinity",
        "update_relationship",
        "update_relationship_by_uuid",
        "delete_relationship_by_uuid",
        "delete_relationships_by_source",
        "delete_relationships_by_target"
      ],
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "uuid.UUID",
        "datetime.datetime",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.exc.SQLAlchemyError",
        "backend.systems.character.models.relationship.Relationship",
        "backend.systems.character.models.relationship.RelationshipType",
        "backend.systems.character.models.relationship_events.RelationshipCreated",
        "backend.systems.character.models.relationship_events.RelationshipUpdated",
        "backend.systems.character.models.relationship_events.RelationshipDeleted",
        "backend.systems.character.models.relationship_events.FactionReputationChanged",
        "backend.systems.character.models.relationship_events.CharacterAffinityChanged",
        "backend.systems.events.EventDispatcher",
        "backend.systems.shared.utils.common.error.NotFoundError",
        "backend.systems.shared.utils.common.error.DatabaseError",
        "backend.systems.shared.utils.common.error.ValidationError"
      ],
      "dependencies": "{'character', 'sqlalchemy', 'events', 'shared'}",
      "responsibilities": [
        "Event Handling",
        "Data Models",
        "Database Operations"
      ],
      "complexity_score": 78,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_relationship_by_id",
            "get_relationship_by_uuid",
            "get_relationships_by_source",
            "get_relationships_by_target",
            "get_relationship",
            "create_relationship",
            "update_relationship_data",
            "update_relationship_data_field",
            "delete_relationship",
            "create_faction_relationship",
            "update_faction_reputation",
            "_get_standing_for_reputation",
            "get_character_factions",
            "create_quest_relationship",
            "update_quest_progress",
            "get_character_quests",
            "create_spatial_relationship",
            "update_spatial_proximity",
            "get_entity_locations",
            "create_auth_relationship",
            "update_auth_permissions",
            "get_user_characters",
            "get_character_users",
            "update_character_affinity",
            "update_relationship",
            "update_relationship_by_uuid",
            "delete_relationship_by_uuid",
            "delete_relationships_by_source",
            "delete_relationships_by_target"
          ],
          "estimated_lines": 580,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "RelationshipService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/combat/combat_animation_system.py",
      "lines": 759,
      "classes": [
        "AnimationDefinition",
        "AnimationInstance",
        "CombatAnimationSystem"
      ],
      "functions": [
        "__init__",
        "to_dict",
        "__init__",
        "update",
        "to_dict",
        "__init__",
        "_init_default_animations",
        "register_animation",
        "play_animation",
        "stop_animation",
        "stop_all_animations",
        "pause_animations",
        "update",
        "get_active_animations",
        "get_animation_definitions",
        "get_animation_count",
        "set_global_speed_multiplier",
        "play_action_animation",
        "play_reaction_animation"
      ],
      "imports": [
        "logging",
        "random",
        "time",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Callable",
        "typing.Tuple",
        "typing.Set",
        "uuid"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Database Operations"
      ],
      "complexity_score": 64,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_active_animations",
            "get_animation_definitions",
            "get_animation_count"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "play_action_animation",
            "play_reaction_animation"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "AnimationDefinition",
            "AnimationInstance",
            "CombatAnimationSystem"
          ],
          "estimated_lines": 90,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/quest/database.py",
      "lines": 750,
      "classes": [
        "QuestRepository"
      ],
      "functions": [
        "get_quests_by_player",
        "get_quests_by_npc",
        "get_quests_by_location",
        "get_quests_by_arc",
        "get_quests_by_status",
        "get_quest",
        "create_quest",
        "update_quest",
        "delete_quest",
        "get_journal_entries",
        "get_journal_entries_by_quest",
        "get_journal_entries_by_arc",
        "create_journal_entry",
        "delete_journal_entry",
        "get_player_arc",
        "get_player_regional_arcs",
        "get_player_global_arcs",
        "get_arc_by_id",
        "save_player_arc",
        "save_regional_arc",
        "save_global_arc",
        "update_arc_progress",
        "unlock_next_chapter"
      ],
      "imports": [
        "logging",
        "uuid",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "backend.systems.shared.utils.core.firebase_utils.get_firestore_client",
        "backend.systems.shared.utils.core.firebase_utils.get_document",
        "backend.systems.shared.utils.core.firebase_utils.set_document",
        "backend.systems.shared.utils.core.firebase_utils.update_document",
        "backend.systems.shared.utils.core.firebase_utils.get_collection",
        "backend.systems.shared.utils.core.firebase_utils.delete_document",
        "backend.systems.shared.utils.common.error.ValidationError",
        "backend.systems.shared.utils.common.error.NotFoundError",
        "backend.systems.shared.utils.common.error.DatabaseError",
        "models.Quest",
        "models.QuestStep",
        "models.JournalEntry"
      ],
      "dependencies": "{'firebase', 'shared'}",
      "responsibilities": [
        "Database Operations"
      ],
      "complexity_score": 73,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_quests_by_player",
            "get_quests_by_npc",
            "get_quests_by_location",
            "get_quests_by_arc",
            "get_quests_by_status",
            "get_quest",
            "create_quest",
            "update_quest",
            "delete_quest",
            "get_journal_entries",
            "get_journal_entries_by_quest",
            "get_journal_entries_by_arc",
            "create_journal_entry",
            "delete_journal_entry",
            "get_player_arc",
            "get_player_regional_arcs",
            "get_player_global_arcs",
            "get_arc_by_id",
            "save_player_arc",
            "save_regional_arc",
            "save_global_arc",
            "update_arc_progress"
          ],
          "estimated_lines": 440,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "QuestRepository"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/combat/combat_area.py",
      "lines": 740,
      "classes": [
        "TerrainFeature",
        "CombatArea"
      ],
      "functions": [
        "create_combat_area",
        "__init__",
        "is_point_inside",
        "get_movement_modifier",
        "provides_cover",
        "is_passable",
        "to_dict",
        "__init__",
        "_position_to_grid",
        "_grid_to_position",
        "add_entity",
        "remove_entity",
        "move_entity",
        "get_entity_position",
        "get_entities_at_position",
        "is_position_valid",
        "can_move_to",
        "calculate_path",
        "add_terrain_feature",
        "remove_terrain_feature",
        "get_terrain_at_position",
        "is_line_of_sight_clear",
        "get_movement_cost",
        "get_nearest_position",
        "create_default_terrain",
        "to_dict"
      ],
      "imports": [
        "logging",
        "math",
        "random",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Set",
        "typing.Union",
        "uuid"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 68,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "create_combat_area",
            "get_movement_modifier",
            "get_entity_position",
            "get_entities_at_position",
            "get_terrain_at_position",
            "get_movement_cost",
            "get_nearest_position",
            "create_default_terrain"
          ],
          "estimated_lines": 160,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "_position_to_grid",
            "is_position_valid"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_path"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "TerrainFeature",
            "CombatArea"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/combat/action_system.py",
      "lines": 737,
      "classes": [
        "ActionType",
        "ActionTarget",
        "ActionResult",
        "ActionDefinition",
        "CombatantActionState",
        "ActionSystem"
      ],
      "functions": [
        "register_basic_actions",
        "__init__",
        "__bool__",
        "requires_target",
        "can_use",
        "execute",
        "update_cooldown",
        "__init__",
        "reset",
        "can_use_action",
        "use_action",
        "use_movement",
        "__init__",
        "combatant_states",
        "reaction_triggers",
        "register_action",
        "get_action",
        "get_actions_by_category",
        "get_actions_for_combatant",
        "reset_combatant_actions",
        "_get_combatant_id",
        "_get_combatant_state",
        "can_use_action",
        "use_action",
        "use_movement",
        "register_reaction_trigger",
        "trigger_reaction",
        "get_available_reactions",
        "get_remaining_actions",
        "get_available_actions"
      ],
      "imports": [
        "logging",
        "enum.Enum",
        "enum.auto",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Callable",
        "typing.Type",
        "typing.TypeVar",
        "typing.Set",
        "typing.Union",
        "dataclasses.dataclass",
        "dataclasses.field"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Data Models",
        "Database Operations"
      ],
      "complexity_score": 79,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "update_cooldown",
            "get_action",
            "get_actions_by_category",
            "get_actions_for_combatant",
            "_get_combatant_id",
            "_get_combatant_state",
            "get_available_reactions",
            "get_remaining_actions",
            "get_available_actions"
          ],
          "estimated_lines": 180,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "reaction_triggers",
            "register_reaction_trigger"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "ActionType",
            "ActionTarget",
            "ActionResult",
            "ActionDefinition",
            "CombatantActionState",
            "ActionSystem"
          ],
          "estimated_lines": 180,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/dialogue/cache.py",
      "lines": 737,
      "classes": [
        "DialogueCache"
      ],
      "functions": [
        "__new__",
        "__init__",
        "get_instance",
        "cache_context",
        "get_cached_context",
        "cache_extraction",
        "get_cached_extraction",
        "cache_character_memories",
        "get_cached_character_memories",
        "clear",
        "_set_expiration",
        "_is_expired",
        "_cleanup_expired",
        "set_conversation",
        "get_conversation",
        "set_messages",
        "get_messages",
        "set_context",
        "get_context",
        "cache_context",
        "get_cached_context",
        "set_character_memories",
        "get_character_memories",
        "set_location_rumors",
        "get_location_rumors",
        "set_location_motifs",
        "get_location_motifs",
        "cache_extraction",
        "get_cached_extraction",
        "clear_conversation_data",
        "clear_character_data",
        "clear_location_data",
        "clear_all"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "threading"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 70,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_instance",
            "get_cached_context",
            "get_cached_extraction",
            "get_cached_character_memories",
            "get_conversation",
            "get_messages",
            "get_context",
            "get_cached_context",
            "get_character_memories",
            "get_location_rumors",
            "get_location_motifs",
            "get_cached_extraction"
          ],
          "estimated_lines": 240,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "set_location_rumors",
            "set_location_motifs",
            "clear_conversation_data",
            "clear_location_data"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "DialogueCache"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/data/schemas/biome_schema.py",
      "lines": 728,
      "classes": [
        "BiomeSchema",
        "BiomeData",
        "AdjacencyRuleType",
        "AdjacencyRuleSchema",
        "AdjacencyRuleSetSchema",
        "ValidationError",
        "BiomeDataWrapper"
      ],
      "functions": [
        "validate_type",
        "validate_required",
        "validate_against_schema",
        "validate_biome",
        "validate_adjacency_rules",
        "validate_json_schema",
        "validate_biome_data",
        "is_biome_compatible",
        "get_transition_biome",
        "get_elevation_transition_score",
        "get_temperature_transition_score",
        "get_humidity_transition_score",
        "validate_range",
        "validate_factor",
        "from_schema",
        "to_schema",
        "validate_min_width",
        "validate_transition_biomes",
        "__init__",
        "formatted_message",
        "__init__",
        "from_biomes",
        "add_biome",
        "get_biome",
        "remove_biome",
        "list_biomes"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "typing.Literal",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.field_validator",
        "enum.Enum"
      ],
      "dependencies": "{'pydantic'}",
      "responsibilities": [
        "Business Logic",
        "Data Models",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 78,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "validate_type",
            "validate_required",
            "validate_against_schema",
            "validate_biome",
            "validate_adjacency_rules",
            "validate_json_schema",
            "validate_biome_data",
            "validate_range",
            "validate_factor",
            "validate_min_width",
            "validate_transition_biomes"
          ],
          "estimated_lines": 220,
          "priority": "high"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_transition_biome",
            "get_elevation_transition_score",
            "get_temperature_transition_score",
            "get_humidity_transition_score",
            "get_biome"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "BiomeSchema",
            "BiomeData",
            "AdjacencyRuleType",
            "AdjacencyRuleSchema",
            "AdjacencyRuleSetSchema",
            "ValidationError",
            "BiomeDataWrapper"
          ],
          "estimated_lines": 210,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/population/router.py",
      "lines": 711,
      "classes": [],
      "functions": [],
      "imports": [
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "fastapi.Depends",
        "fastapi.Query",
        "fastapi.Path",
        "typing.List",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "backend.systems.population.models.POIPopulation",
        "backend.systems.population.models.POIType",
        "backend.systems.population.models.POIState",
        "backend.systems.population.models.PopulationConfig",
        "backend.systems.population.models.PopulationCreateRequest",
        "backend.systems.population.models.PopulationUpdateRequest",
        "backend.systems.population.models.ResourceShortageRequest",
        "backend.systems.population.models.MigrationRequest",
        "backend.systems.population.models.StateTransitionRequest",
        "backend.systems.population.models.SeasonalEffectRequest",
        "backend.systems.population.models.CatastropheRequest",
        "backend.systems.population.models.WarImpactRequest",
        "backend.systems.population.models.PopulationChangeRequest",
        "backend.systems.population.service.population_service",
        "logging"
      ],
      "dependencies": "{'population', 'fastapi'}",
      "responsibilities": [
        "Configuration",
        "Utilities",
        "Database Operations",
        "API/Routing",
        "Business Logic"
      ],
      "complexity_score": 28,
      "refactoring_priority": "HIGH",
      "suggested_modules": []
    },
    {
      "path": "systems/world_state/persistence/state_storage.py",
      "lines": 689,
      "classes": [
        "StateStorage"
      ],
      "functions": [
        "__init__",
        "_ensure_directories",
        "save_state",
        "load_state",
        "save_history",
        "load_history",
        "save_snapshot",
        "load_snapshot",
        "list_snapshots",
        "delete_snapshot",
        "_create_backup",
        "_restore_from_backup",
        "_serialize_variable",
        "_deserialize_variable",
        "_serialize_change_record",
        "_deserialize_change_record",
        "_migrate_state_data",
        "_migrate_history_data",
        "_migrate_snapshot_data"
      ],
      "imports": [
        "os",
        "json",
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "shutil",
        "backend.systems.world_state.StateVariable",
        "backend.systems.world_state.StateChangeRecord",
        "backend.systems.world_state.WorldStateSnapshot",
        "backend.systems.world_state.StateCategory",
        "backend.systems.world_state.WorldRegion",
        "backend.systems.world_state.StateChangeType"
      ],
      "dependencies": "{'world_state'}",
      "responsibilities": [
        "Database Operations",
        "File I/O",
        "Configuration"
      ],
      "complexity_score": 77,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "save_state",
            "load_state",
            "save_history",
            "load_history",
            "save_snapshot",
            "load_snapshot",
            "delete_snapshot",
            "_create_backup"
          ],
          "estimated_lines": 160,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "StateStorage"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_state/consolidated_world_models.py",
      "lines": 677,
      "classes": [
        "TerrainType",
        "LocationType",
        "Weather",
        "Season",
        "LevelRange",
        "PointOfInterest",
        "Region",
        "WorldMap",
        "WorldState",
        "WorldEventTypes"
      ],
      "functions": [
        "get_water_types",
        "get_traversable_types",
        "get_difficult_types",
        "validate_level_range",
        "validate_type",
        "to_dict",
        "from_dict",
        "validate_level_range",
        "to_dict",
        "from_dict",
        "add_region",
        "get_region",
        "get_region_by_coordinates",
        "get_pois_in_region",
        "calculate_distance",
        "to_dict",
        "from_dict",
        "save_to_file",
        "load_from_file",
        "advance_time",
        "update_weather",
        "update_season",
        "add_event",
        "remove_event",
        "add_quest",
        "remove_quest",
        "add_npc",
        "remove_npc"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "typing.Set",
        "typing.Union",
        "enum.Enum",
        "datetime.datetime",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.field_validator",
        "pydantic.ConfigDict",
        "uuid.uuid4",
        "numpy",
        "json",
        "datetime.timedelta"
      ],
      "dependencies": "{'pydantic'}",
      "responsibilities": [
        "Data Models",
        "Configuration",
        "Database Operations",
        "Business Logic",
        "File I/O"
      ],
      "complexity_score": 80,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_water_types",
            "get_traversable_types",
            "get_difficult_types",
            "get_region",
            "get_region_by_coordinates",
            "get_pois_in_region",
            "save_to_file",
            "load_from_file",
            "update_weather",
            "update_season"
          ],
          "estimated_lines": 200,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "validate_level_range",
            "validate_type",
            "validate_level_range",
            "calculate_distance"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "TerrainType",
            "LocationType",
            "Weather",
            "Season",
            "LevelRange",
            "PointOfInterest",
            "Region",
            "WorldMap",
            "WorldState",
            "WorldEventTypes"
          ],
          "estimated_lines": 300,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/dialogue/region_integration.py",
      "lines": 650,
      "classes": [
        "BiomeManager",
        "DialogueRegionIntegration"
      ],
      "functions": [
        "get_instance",
        "get_biome",
        "__init__",
        "add_region_context_to_dialogue",
        "get_region_description_for_dialogue",
        "get_region_context_by_location",
        "get_biome_dialogue_references",
        "get_region_comparison",
        "_get_region_info",
        "_get_biome_info",
        "_get_region_resources",
        "_get_adjacent_regions",
        "_get_seasonal_region_description",
        "_get_weather_region_description",
        "_get_region_for_location"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "logging",
        "backend.systems.region.service.RegionService",
        "backend.systems.poi.POIService"
      ],
      "dependencies": "{'region', 'poi'}",
      "responsibilities": [
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 65,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_instance",
            "get_biome",
            "get_region_description_for_dialogue",
            "get_region_context_by_location",
            "get_biome_dialogue_references",
            "get_region_comparison",
            "_get_region_info",
            "_get_biome_info",
            "_get_region_resources",
            "_get_adjacent_regions",
            "_get_seasonal_region_description",
            "_get_weather_region_description",
            "_get_region_for_location"
          ],
          "estimated_lines": 260,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "add_region_context_to_dialogue"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "BiomeManager",
            "DialogueRegionIntegration"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/economy/services/futures_service.py",
      "lines": 649,
      "classes": [
        "FuturesService"
      ],
      "functions": [
        "__init__",
        "get_future",
        "get_futures_by_resource",
        "get_futures_by_market",
        "get_open_futures",
        "create_future",
        "update_future",
        "match_buyer",
        "settle_future",
        "process_expiring_futures",
        "forecast_future_prices",
        "clear_cache"
      ],
      "imports": [
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "uuid",
        "sqlalchemy.orm.Session",
        "sqlalchemy.or_",
        "sqlalchemy.and_",
        "logging",
        "backend.systems.economy.models.CommodityFuture",
        "backend.systems.economy.models.CommodityFutureData",
        "backend.systems.economy.models.Resource",
        "backend.systems.economy.models.Market"
      ],
      "dependencies": "{'sqlalchemy', 'economy'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 61,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_future",
            "get_futures_by_resource",
            "get_futures_by_market",
            "get_open_futures",
            "create_future",
            "update_future"
          ],
          "estimated_lines": 120,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "process_expiring_futures"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "FuturesService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/character/memory/memory_manager.py",
      "lines": 643,
      "classes": [
        "Memory",
        "MemoryManager"
      ],
      "functions": [
        "__init__",
        "access",
        "decay",
        "reinforce",
        "to_dict",
        "from_dict",
        "get_instance",
        "__init__",
        "_load_memories",
        "_save_memories",
        "create_memory",
        "update_memory",
        "remove_memory",
        "apply_decay",
        "reinforce_memory",
        "_enforce_memory_limits",
        "get_memory",
        "get_memories",
        "query_memories",
        "generate_memory_summary"
      ],
      "imports": [
        "os",
        "uuid",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "json",
        "logging",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.MemoryCreated",
        "backend.systems.events.MemoryDecayed",
        "backend.systems.events.MemoryReinforced",
        "backend.systems.events.MemoryRemoved"
      ],
      "dependencies": "{'events'}",
      "responsibilities": [
        "Business Logic",
        "File I/O",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 66,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_instance",
            "_load_memories",
            "_save_memories",
            "create_memory",
            "update_memory",
            "get_memory",
            "get_memories",
            "query_memories"
          ],
          "estimated_lines": 160,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_memory_summary"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "Memory",
            "MemoryManager"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/crafting/services/crafting_service.py",
      "lines": 638,
      "classes": [
        "CraftingService"
      ],
      "functions": [
        "__init__",
        "load_recipes",
        "load_stations",
        "craft",
        "can_craft",
        "learn_recipe",
        "discover_recipe",
        "get_available_recipes",
        "_emit_crafting_started_event",
        "_emit_crafting_completed_event",
        "_emit_crafting_failed_event",
        "_is_recipe_known",
        "_is_recipe_available_to_character",
        "_check_skill_requirements",
        "_check_station_requirements",
        "_validate_inventory",
        "_process_ingredients",
        "_determine_craft_results",
        "_process_results",
        "_calculate_crafting_experience",
        "_apply_crafting_experience",
        "_track_crafting_achievement",
        "_track_crafting_milestones",
        "craft_item"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "logging",
        "json",
        "os",
        "random",
        "pathlib.Path",
        "backend.systems.events.EventDispatcher",
        "backend.systems.crafting.models.recipe.CraftingRecipe",
        "backend.systems.crafting.models.ingredient.CraftingIngredient",
        "backend.systems.crafting.models.result.CraftingResult",
        "backend.systems.crafting.models.station.CraftingStation",
        "backend.systems.crafting.services.recipe_service.RecipeService",
        "backend.systems.crafting.services.station_service.StationService",
        "backend.systems.crafting.services.crafting_knowledge_service.CraftingKnowledgeService",
        "backend.systems.crafting.services.crafting_experience_service.CraftingExperienceService",
        "backend.systems.crafting.services.crafting_achievement_service.CraftingAchievementService"
      ],
      "dependencies": "{'crafting', 'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 63,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "load_recipes",
            "load_stations",
            "get_available_recipes"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "_emit_crafting_started_event",
            "_emit_crafting_completed_event",
            "_emit_crafting_failed_event",
            "_check_station_requirements"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_validate_inventory",
            "_process_ingredients",
            "_process_results",
            "_calculate_crafting_experience"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "CraftingService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/region/generators.py",
      "lines": 630,
      "classes": [
        "RegionGenerator",
        "ContinentGenerator"
      ],
      "functions": [
        "__init__",
        "generate_region",
        "_generate_profile",
        "_determine_biome_type",
        "_filter_by_adjacency",
        "_generate_resources",
        "_generate_features",
        "_generate_hex_grid",
        "get_biome_distribution",
        "get_region_by_coords",
        "__init__",
        "generate_continent",
        "_random_walk_continent",
        "_calculate_boundary",
        "is_region_in_continent",
        "get_continent_area",
        "get_continent_dimensions"
      ],
      "imports": [
        "random",
        "math",
        "uuid",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Set",
        "datetime.datetime",
        "backend.systems.data.GameDataRegistry",
        "backend.systems.region.models.RegionProfile",
        "backend.systems.region.models.RegionMetadata",
        "backend.systems.region.models.ContinentMetadata",
        "backend.systems.region.models.BiomeConfig",
        "backend.systems.region.models.PointOfInterest",
        "backend.systems.region.models.REGION_HEXES_PER_REGION",
        "backend.systems.region.models.REGION_AREA_SQ_KM",
        "backend.systems.region.models.CONTINENT_SIZE_RANGE",
        "backend.systems.region.models.MAJOR_POIS_PER_REGION",
        "backend.systems.region.models.MINOR_POIS_PER_REGION_MIN",
        "backend.systems.region.models.MINOR_POIS_PER_REGION_MAX",
        "backend.systems.region.models.get_hex_neighbors"
      ],
      "dependencies": "{'region', 'data'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 63,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_region",
            "_generate_profile",
            "_generate_resources",
            "_generate_features",
            "_generate_hex_grid",
            "generate_continent",
            "_calculate_boundary"
          ],
          "estimated_lines": 140,
          "priority": "high"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_biome_distribution",
            "get_region_by_coords",
            "get_continent_area",
            "get_continent_dimensions"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "is_region_in_continent"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "RegionGenerator",
            "ContinentGenerator"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/region/world_generator.py",
      "lines": 621,
      "classes": [
        "WorldGenerator"
      ],
      "functions": [
        "__init__",
        "generate_world",
        "_generate_regions_for_continent",
        "_create_profile_constraints",
        "_generate_pois_for_region",
        "_weighted_choice",
        "_generate_poi_name",
        "_get_poi_category",
        "_save_world_data",
        "load_world_data",
        "get_continent_by_id",
        "get_region_by_id",
        "get_regions_by_continent",
        "get_regions_by_biome"
      ],
      "imports": [
        "os",
        "json",
        "math",
        "random",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Any",
        "typing.Optional",
        "typing.Set",
        "datetime.datetime",
        "backend.systems.shared.utils.common.error.ValidationError",
        "backend.systems.data.GameDataRegistry",
        "backend.systems.region.models.RegionMetadata",
        "backend.systems.region.models.ContinentMetadata",
        "backend.systems.region.models.PointOfInterest",
        "backend.systems.region.models.MAJOR_POIS_PER_REGION",
        "backend.systems.region.models.MINOR_POIS_PER_REGION_MIN",
        "backend.systems.region.models.MINOR_POIS_PER_REGION_MAX",
        "backend.systems.region.models.METROPOLIS_REGION_CLAIM",
        "backend.systems.region.models.get_hex_neighbors",
        "backend.systems.region.generators.RegionGenerator",
        "backend.systems.region.generators.ContinentGenerator"
      ],
      "dependencies": "{'region', 'shared', 'data'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "File I/O",
        "Configuration"
      ],
      "complexity_score": 67,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_world",
            "_generate_regions_for_continent",
            "_generate_pois_for_region",
            "_generate_poi_name"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "_create_profile_constraints",
            "_get_poi_category",
            "_save_world_data",
            "load_world_data",
            "get_continent_by_id",
            "get_region_by_id",
            "get_regions_by_continent",
            "get_regions_by_biome"
          ],
          "estimated_lines": 160,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "WorldGenerator"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/dialogue/poi_integration.py",
      "lines": 615,
      "classes": [
        "POIServiceWrapper",
        "DialoguePOIIntegration"
      ],
      "functions": [
        "__init__",
        "get_poi",
        "query_pois",
        "get_nearby_pois",
        "get_settlement",
        "get_settlement_pois",
        "__init__",
        "add_poi_context_to_dialogue",
        "get_location_state_for_dialogue",
        "get_settlement_dialogue_context",
        "get_poi_description_for_dialogue",
        "get_relevant_pois_for_dialogue",
        "_get_location_info",
        "_get_nearby_locations",
        "_get_state_description",
        "_get_state_visible_effects",
        "_get_state_narrative",
        "_get_time_based_poi_description",
        "_get_character_info"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "logging",
        "backend.systems.poi.services.poi_service.POIService"
      ],
      "dependencies": "{'poi'}",
      "responsibilities": [
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 65,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_poi",
            "query_pois",
            "get_nearby_pois",
            "get_settlement",
            "get_settlement_pois",
            "get_location_state_for_dialogue",
            "get_settlement_dialogue_context",
            "get_poi_description_for_dialogue",
            "get_relevant_pois_for_dialogue",
            "_get_location_info",
            "_get_nearby_locations",
            "_get_state_description",
            "_get_state_visible_effects",
            "_get_state_narrative",
            "_get_time_based_poi_description",
            "_get_character_info"
          ],
          "estimated_lines": 320,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "POIServiceWrapper",
            "DialoguePOIIntegration"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/magic/services.py",
      "lines": 594,
      "classes": [
        "MagicEvent",
        "SpellEffectEvent",
        "MagicService",
        "SpellService",
        "SpellbookService",
        "SpellEffectService",
        "MockRepository",
        "MockRepository",
        "MockRepository",
        "MockRepository"
      ],
      "functions": [
        "__init__",
        "process_magic_tick",
        "_generate_magical_influences",
        "analyze_magical_influences",
        "get_character_magic_summary",
        "_format_magical_knowledge",
        "get_magical_influences",
        "get_magical_influence",
        "process_tick",
        "create_magic_ability",
        "get_magic_ability",
        "update_magic_ability",
        "delete_magic_ability",
        "repository",
        "__init__",
        "get_spell",
        "search_spells",
        "create_spell",
        "update_spell",
        "delete_spell",
        "repository",
        "__init__",
        "get_spellbook",
        "get_known_spells",
        "create_spellbook",
        "get_spellbook_by_id",
        "add_spell",
        "remove_spell",
        "repository",
        "__init__",
        "get_effect",
        "get_active_effects",
        "update_effect_durations",
        "_apply_effect_end",
        "end_effect",
        "dispel_effect",
        "modify_duration",
        "repository",
        "get_all",
        "get_all",
        "get_all",
        "get_all"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "datetime.datetime",
        "models.SpellModel",
        "models.MagicSchool",
        "models.EffectType",
        "models.Spellbook",
        "models.SpellEffect",
        "models.MagicalInfluence",
        "repositories.SpellRepository",
        "repositories.SpellEffectRepository",
        "repositories.SpellbookRepository",
        "utils.calculate_spell_power",
        "utils.validate_spell_requirements",
        "utils.check_spell_compatibility",
        "utils.can_cast_spell",
        "utils.apply_spell_effect",
        "utils.calculate_spell_duration",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.EventBase"
      ],
      "dependencies": "{'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 73,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "process_magic_tick",
            "_generate_magical_influences",
            "process_tick"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_character_magic_summary",
            "get_magical_influences",
            "get_magical_influence",
            "create_magic_ability",
            "get_magic_ability",
            "update_magic_ability",
            "delete_magic_ability",
            "get_spell",
            "create_spell",
            "update_spell",
            "delete_spell",
            "get_spellbook",
            "get_known_spells",
            "create_spellbook",
            "get_spellbook_by_id",
            "get_effect",
            "get_active_effects",
            "update_effect_durations",
            "get_all",
            "get_all",
            "get_all",
            "get_all"
          ],
          "estimated_lines": 440,
          "priority": "high"
        },
        {
          "module_name": "utilities.py",
          "responsibility": "Utilities",
          "functions": [
            "_format_magical_knowledge"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "MagicEvent",
            "SpellEffectEvent",
            "MagicService",
            "SpellService",
            "SpellbookService",
            "SpellEffectService",
            "MockRepository",
            "MockRepository",
            "MockRepository",
            "MockRepository"
          ],
          "estimated_lines": 300,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/combat/turn_queue.py",
      "lines": 587,
      "classes": [
        "TurnQueue"
      ],
      "functions": [
        "clear_all_instances",
        "__init__",
        "current_combatant",
        "queue",
        "is_empty",
        "is_start_of_round",
        "initialize_queue",
        "_get_initiative_value",
        "_sort_queue",
        "_recompute_initiative",
        "add_combatant",
        "remove_combatant",
        "advance_queue",
        "delay_turn",
        "recompute_initiative",
        "clear",
        "is_round_complete",
        "register_turn_start_callback",
        "unregister_turn_start_callback",
        "register_turn_end_callback",
        "unregister_turn_end_callback",
        "next_turn",
        "get_turn_order",
        "_notify_combatant_added",
        "_notify_combatant_removed"
      ],
      "imports": [
        "typing.Any",
        "typing.Callable",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "typing.Tuple",
        "weakref",
        "logging"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 64,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "_get_initiative_value",
            "get_turn_order"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "TurnQueue"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/shared/utils/core/json_storage_utils.py",
      "lines": 585,
      "classes": [
        "DataMigrationError",
        "VersionedJsonStorage"
      ],
      "functions": [
        "load_json_file",
        "save_json_file",
        "get_data_file_path",
        "list_json_files",
        "__init__",
        "_get_file_path",
        "_get_backup_dir",
        "_create_backup",
        "_cleanup_old_backups",
        "register_migration_func",
        "_migrate_data",
        "save",
        "load",
        "delete",
        "list_all",
        "exists",
        "get_version",
        "get_last_modified"
      ],
      "imports": [
        "os",
        "json",
        "shutil",
        "logging",
        "datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "typing.Callable",
        "pathlib.Path",
        "os"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Database Operations",
        "File I/O",
        "Configuration"
      ],
      "complexity_score": 72,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "load_json_file",
            "save_json_file",
            "get_data_file_path",
            "_get_file_path",
            "_get_backup_dir",
            "_create_backup",
            "get_version",
            "get_last_modified"
          ],
          "estimated_lines": 160,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "list_json_files",
            "register_migration_func"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "DataMigrationError",
            "VersionedJsonStorage"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_state/features/derivative_state.py",
      "lines": 585,
      "classes": [
        "DerivedStateRule",
        "DerivativeStateCalculator"
      ],
      "functions": [
        "create_formula_calculator",
        "__init__",
        "__repr__",
        "get_instance",
        "reset_instance",
        "__init__",
        "initialize",
        "register_rule",
        "update_rule",
        "remove_rule",
        "get_derived_value",
        "get_all_derived_keys",
        "get_rule_info",
        "get_dependent_keys",
        "_update_dependency_graphs",
        "_remove_dependency_records",
        "_would_create_circular_dependency",
        "_calculate_derived_value",
        "_recalculate_dependent_values",
        "_handle_state_change",
        "_register_built_in_rules",
        "calculator"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "typing.Callable",
        "typing.Set",
        "json",
        "logging",
        "datetime.datetime",
        "re",
        "backend.systems.world_state.WorldStateManager",
        "backend.systems.world_state.StateVariable",
        "backend.systems.world_state.StateCategory",
        "backend.systems.world_state.WorldRegion",
        "backend.systems.world_state.StateChangeType",
        "backend.systems.events.EventDispatcher"
      ],
      "dependencies": "{'events', 'world_state'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 68,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "create_formula_calculator",
            "get_instance",
            "update_rule",
            "get_derived_value",
            "get_all_derived_keys",
            "get_rule_info",
            "get_dependent_keys",
            "_update_dependency_graphs",
            "_would_create_circular_dependency"
          ],
          "estimated_lines": 180,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_calculate_derived_value",
            "_recalculate_dependent_values",
            "_handle_state_change"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "DerivedStateRule",
            "DerivativeStateCalculator"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_state/utils/world_event_utils.py",
      "lines": 575,
      "classes": [],
      "functions": [
        "log_world_event",
        "roll_chaos_event",
        "inject_chaos_event",
        "trigger_chaos_if_needed",
        "force_chaos",
        "delete_world_event",
        "annotate_world_event",
        "create_world_event",
        "link_events",
        "get_related_events",
        "filter_events_by_category",
        "filter_events_by_location",
        "format_event_description"
      ],
      "imports": [
        "datetime.datetime",
        "random",
        "firebase_admin.db",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "logging",
        "json",
        "os",
        "pathlib.Path",
        "backend.systems.world_state.StateCategory",
        "backend.systems.world_state.WorldRegion",
        "backend.systems.motif.get_motif_manager",
        "backend.systems.motif.utils.check_chaos_threshold",
        "backend.systems.motif.get_motif_manager",
        "backend.systems.motif.utils.roll_chaos_event",
        "app.npc.npc_rumor_utils.sync_event_beliefs"
      ],
      "dependencies": "{'firebase', 'motif', 'world_state'}",
      "responsibilities": [
        "Utilities",
        "Database Operations",
        "File I/O"
      ],
      "complexity_score": 72,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "delete_world_event",
            "create_world_event",
            "get_related_events"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "utilities.py",
          "responsibility": "Utilities",
          "functions": [
            "format_event_description"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/dialogue/time_integration.py",
      "lines": 569,
      "classes": [
        "CalendarManagerStub",
        "DialogueTimeIntegration"
      ],
      "functions": [
        "get_instance",
        "get_event",
        "get_current_season",
        "get_events_in_range",
        "get_current_events",
        "__init__",
        "add_time_context_to_dialogue",
        "get_time_references_for_dialogue",
        "get_event_dialogue_context",
        "get_time_sensitive_dialogue_options",
        "_get_current_time_info",
        "_get_season_info",
        "_get_upcoming_events",
        "_get_current_festival_info",
        "_get_day_period_info",
        "_get_weather_info",
        "_get_time_of_day",
        "_is_daytime",
        "_get_typical_activities_for_time"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "logging",
        "datetime.datetime",
        "datetime.timedelta",
        "backend.systems.time.services.time_manager.TimeManager"
      ],
      "dependencies": "{'time'}",
      "responsibilities": [
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 62,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_instance",
            "get_event",
            "get_current_season",
            "get_events_in_range",
            "get_current_events",
            "get_time_references_for_dialogue",
            "get_event_dialogue_context",
            "get_time_sensitive_dialogue_options",
            "_get_current_time_info",
            "_get_season_info",
            "_get_upcoming_events",
            "_get_current_festival_info",
            "_get_day_period_info",
            "_get_weather_info",
            "_get_time_of_day",
            "_get_typical_activities_for_time"
          ],
          "estimated_lines": 320,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "CalendarManagerStub",
            "DialogueTimeIntegration"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/llm/repositories/faction_repository.py",
      "lines": 567,
      "classes": [
        "FactionRepository"
      ],
      "functions": [
        "get_instance",
        "__init__",
        "get_faction_by_id",
        "save_faction",
        "get_all_factions",
        "get_faction_relationship",
        "save_faction_relationship",
        "get_faction_goal",
        "save_faction_goal",
        "get_faction_resource",
        "save_faction_resource",
        "get_all_faction_relationships",
        "get_all_faction_goals",
        "get_all_faction_resources",
        "get_faction_goals_by_faction",
        "get_faction_resources_by_faction",
        "get_faction_conflicts",
        "clear_cache",
        "update_faction_data",
        "get_faction_data"
      ],
      "imports": [
        "json",
        "os",
        "logging",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Database Operations",
        "File I/O",
        "Configuration"
      ],
      "complexity_score": 71,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_instance",
            "get_faction_by_id",
            "save_faction",
            "get_all_factions",
            "get_faction_relationship",
            "save_faction_relationship",
            "get_faction_goal",
            "save_faction_goal",
            "get_faction_resource",
            "save_faction_resource",
            "get_all_faction_relationships",
            "get_all_faction_goals",
            "get_all_faction_resources",
            "get_faction_goals_by_faction",
            "get_faction_resources_by_faction",
            "get_faction_conflicts",
            "update_faction_data",
            "get_faction_data"
          ],
          "estimated_lines": 360,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "FactionRepository"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/auth_user/services/auth_service.py",
      "lines": 560,
      "classes": [
        "FallbackCryptContext"
      ],
      "functions": [
        "check_permissions",
        "create_access_token",
        "verify_token",
        "verify_user_token",
        "create_refresh_token",
        "verify_password",
        "get_password_hash",
        "generate_password_reset_token",
        "encrypt_data",
        "decrypt_data",
        "generate_api_key",
        "generate_secure_token",
        "hash",
        "verify"
      ],
      "imports": [
        "warnings",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Optional",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Union",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.status",
        "fastapi.security.OAuth2PasswordBearer",
        "jose.JWTError",
        "jose.jwt",
        "passlib.context.CryptContext",
        "uuid.UUID",
        "secrets",
        "string",
        "os",
        "hashlib",
        "backend.systems.shared.utils.common.error.AuthorizationError",
        "backend.systems.shared.config.settings",
        "secrets",
        "string",
        "secrets",
        "base64",
        "base64",
        "hashlib",
        "base64",
        "os"
      ],
      "dependencies": "{'shared', 'fastapi'}",
      "responsibilities": [
        "Business Logic",
        "API/Routing",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 62,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "create_access_token",
            "create_refresh_token",
            "get_password_hash"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_password_reset_token",
            "generate_api_key",
            "generate_secure_token"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "FallbackCryptContext"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_state/loader.py",
      "lines": 556,
      "classes": [
        "WorldStateLoader"
      ],
      "functions": [
        "__init__",
        "load_world_map",
        "save_world_map",
        "load_region",
        "save_region",
        "load_poi",
        "save_poi",
        "load_state_variable",
        "save_state_variable",
        "load_state_history",
        "save_state_history",
        "save_state_snapshot",
        "load_state_snapshot",
        "create_backup",
        "_backup_file",
        "_key_to_filename",
        "cleanup_old_backups",
        "create_empty_world_state"
      ],
      "imports": [
        "json",
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "pathlib.Path",
        "shutil",
        "backend.systems.shared.utils.common.error.NotFoundError",
        "backend.systems.shared.utils.common.error.ValidationError",
        "logging",
        "backend.systems.world_state.consolidated_world_models.WorldMap",
        "backend.systems.world_state.consolidated_world_models.Region",
        "backend.systems.world_state.consolidated_world_models.PointOfInterest",
        "backend.systems.world_state.consolidated_world_models.WorldState",
        "backend.systems.world_state.consolidated_world_models.TerrainType",
        "backend.systems.world_state.consolidated_state_models.StateVariable",
        "backend.systems.world_state.consolidated_state_models.StateChangeRecord",
        "backend.systems.world_state.consolidated_state_models.StateCategory",
        "backend.systems.world_state.consolidated_state_models.WorldRegion",
        "backend.systems.world_state.consolidated_state_models.StateChangeType",
        "backend.systems.world_state.consolidated_state_models.WorldStateSnapshot"
      ],
      "dependencies": "{'shared', 'world_state'}",
      "responsibilities": [
        "Database Operations",
        "File I/O",
        "Configuration"
      ],
      "complexity_score": 76,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "load_world_map",
            "save_world_map",
            "load_region",
            "save_region",
            "load_poi",
            "save_poi",
            "load_state_variable",
            "save_state_variable",
            "load_state_history",
            "save_state_history",
            "save_state_snapshot",
            "load_state_snapshot",
            "create_backup",
            "create_empty_world_state"
          ],
          "estimated_lines": 280,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "WorldStateLoader"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/faction/services/consolidated_faction_service.py",
      "lines": 553,
      "classes": [
        "FactionError",
        "FactionNotFoundError",
        "DuplicateFactionError",
        "InvalidFactionOperationError",
        "RelationshipNotFoundError",
        "MembershipNotFoundError",
        "ConsolidatedFactionService"
      ],
      "functions": [
        "create_faction",
        "get_faction",
        "get_faction_by_name",
        "get_factions",
        "update_faction",
        "delete_faction",
        "assign_faction_to_poi",
        "calculate_affinity",
        "add_faction_goal",
        "propagate_faction_influence"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Tuple",
        "datetime.datetime",
        "logging",
        "random",
        "sqlalchemy.orm.Session",
        "sqlalchemy.and_",
        "sqlalchemy.or_",
        "sqlalchemy.func",
        "backend.systems.faction.models.faction.Faction",
        "backend.systems.faction.models.faction.FactionRelationship",
        "backend.systems.faction.models.faction.FactionMembership",
        "backend.systems.faction.schemas.faction_types.FactionType",
        "backend.systems.faction.schemas.faction_types.FactionAlignment",
        "backend.systems.faction.schemas.faction_types.DiplomaticStance",
        "backend.systems.faction.models.faction_goal.FactionGoal"
      ],
      "dependencies": "{'sqlalchemy', 'faction'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 61,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "create_faction",
            "get_faction",
            "get_faction_by_name",
            "get_factions",
            "update_faction",
            "delete_faction"
          ],
          "estimated_lines": 120,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "assign_faction_to_poi",
            "add_faction_goal",
            "propagate_faction_influence"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_affinity"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "FactionError",
            "FactionNotFoundError",
            "DuplicateFactionError",
            "InvalidFactionOperationError",
            "RelationshipNotFoundError",
            "MembershipNotFoundError",
            "ConsolidatedFactionService"
          ],
          "estimated_lines": 210,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/combat/combat_state_manager.py",
      "lines": 546,
      "classes": [
        "CombatPhase",
        "CombatEncounterType",
        "CombatantState",
        "CombatState",
        "CombatStateManager"
      ],
      "functions": [
        "from_character",
        "update_from_character",
        "get_all_combatants",
        "get_active_combatants",
        "get_player_combatants",
        "get_enemy_combatants",
        "get_active_player_combatants",
        "get_active_enemy_combatants",
        "is_combat_active",
        "is_combat_over",
        "get_victor",
        "to_dict",
        "from_dict",
        "initialize_combat",
        "get_current_state",
        "update_state",
        "advance_turn",
        "update_combatant",
        "end_combat",
        "save_state",
        "load_state",
        "get_state_history",
        "clear_history",
        "_add_to_history",
        "_handle_combat_end",
        "_save_combat_log",
        "get_initiative"
      ],
      "imports": [
        "json",
        "logging",
        "dataclasses.dataclass",
        "dataclasses.field",
        "dataclasses.asdict",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "typing.Tuple",
        "typing.Callable",
        "enum.Enum",
        "enum.auto",
        "time",
        "uuid",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.CombatEvent"
      ],
      "dependencies": "{'events'}",
      "responsibilities": [
        "Data Models",
        "Configuration",
        "Database Operations",
        "Event Handling",
        "Business Logic",
        "File I/O"
      ],
      "complexity_score": 78,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "update_from_character",
            "get_all_combatants",
            "get_active_combatants",
            "get_player_combatants",
            "get_enemy_combatants",
            "get_active_player_combatants",
            "get_active_enemy_combatants",
            "get_victor",
            "get_current_state",
            "update_state",
            "update_combatant",
            "save_state",
            "load_state",
            "get_state_history",
            "_save_combat_log",
            "get_initiative"
          ],
          "estimated_lines": 320,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_handle_combat_end"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "CombatPhase",
            "CombatEncounterType",
            "CombatantState",
            "CombatState",
            "CombatStateManager"
          ],
          "estimated_lines": 150,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/data/utils/data_file_loader.py",
      "lines": 540,
      "classes": [
        "DataFileLoader"
      ],
      "functions": [
        "save_data_file",
        "validate_data_structure",
        "load_data_file",
        "get_file_metadata",
        "load_data_directory",
        "__init__",
        "_find_project_root",
        "enable_cache",
        "clear_cache",
        "load_json",
        "load_yaml",
        "load_text",
        "load_data_directory",
        "file_exists",
        "list_files",
        "get_modification_time",
        "get_file_metadata",
        "_resolve_path",
        "save_data_file",
        "load_data_file"
      ],
      "imports": [
        "json",
        "logging",
        "os",
        "pathlib.Path",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "yaml"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "File I/O"
      ],
      "complexity_score": 74,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "save_data_file",
            "load_data_file",
            "get_file_metadata",
            "load_data_directory",
            "_find_project_root",
            "load_json",
            "load_yaml",
            "load_text",
            "load_data_directory",
            "get_modification_time",
            "get_file_metadata",
            "save_data_file",
            "load_data_file"
          ],
          "estimated_lines": 260,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "validate_data_structure"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "DataFileLoader"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/character/models/goal.py",
      "lines": 539,
      "classes": [
        "GoalStatus",
        "GoalPriority",
        "GoalType",
        "GoalCreated",
        "GoalCompleted",
        "GoalFailed",
        "GoalAbandoned",
        "GoalProgressUpdated",
        "GoalStatusChanged",
        "Goal"
      ],
      "functions": [
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "is_complete",
        "is_active",
        "is_failed",
        "is_abandoned",
        "is_paused",
        "has_subgoals",
        "add_subgoal",
        "update_progress",
        "complete",
        "fail",
        "abandon",
        "pause",
        "resume",
        "update_priority",
        "calculate_subgoal_progress",
        "to_dict",
        "from_dict"
      ],
      "imports": [
        "enum.Enum",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Set",
        "uuid.UUID",
        "uuid.uuid4",
        "logging",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.EventBase"
      ],
      "dependencies": "{'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 67,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "update_progress",
            "update_priority"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_subgoal_progress"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "GoalStatus",
            "GoalPriority",
            "GoalType",
            "GoalCreated",
            "GoalCompleted",
            "GoalFailed",
            "GoalAbandoned",
            "GoalProgressUpdated",
            "GoalStatusChanged",
            "Goal"
          ],
          "estimated_lines": 300,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/character/core/events/canonical_events.py",
      "lines": 529,
      "classes": [
        "EventBase",
        "SystemEventType",
        "SystemEvent",
        "MemoryEventType",
        "MemoryEvent",
        "RumorEventType",
        "RumorEvent",
        "MotifEventType",
        "MotifEvent",
        "PopulationEventType",
        "PopulationEvent",
        "POIEventType",
        "POIEvent",
        "FactionEventType",
        "FactionEvent",
        "QuestEventType",
        "QuestEvent",
        "CombatEventType",
        "CombatEvent",
        "TimeEventType",
        "TimeEvent",
        "RelationshipEventType",
        "RelationshipEvent",
        "StorageEventType",
        "StorageEvent",
        "WorldStateEventType",
        "WorldStateEvent",
        "CharacterEventType",
        "CharacterEvent",
        "LocationEventType",
        "LocationEvent",
        "InventoryEventType",
        "InventoryEvent"
      ],
      "functions": [
        "to_dict",
        "validate_event_type",
        "validate_event_type",
        "validate_event_type",
        "validate_event_type",
        "validate_event_type",
        "validate_event_type",
        "validate_event_type",
        "validate_event_type",
        "validate_event_type",
        "validate_event_type",
        "validate_event_type",
        "validate_event_type",
        "validate_event_type"
      ],
      "imports": [
        "enum.Enum",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.field_validator",
        "pydantic.ConfigDict"
      ],
      "dependencies": "{'pydantic'}",
      "responsibilities": [
        "Business Logic",
        "Data Models",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 62,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "validate_event_type",
            "validate_event_type",
            "validate_event_type",
            "validate_event_type",
            "validate_event_type",
            "validate_event_type",
            "validate_event_type",
            "validate_event_type",
            "validate_event_type",
            "validate_event_type",
            "validate_event_type",
            "validate_event_type",
            "validate_event_type"
          ],
          "estimated_lines": 260,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "EventBase",
            "SystemEventType",
            "SystemEvent",
            "MemoryEventType",
            "MemoryEvent",
            "RumorEventType",
            "RumorEvent",
            "MotifEventType",
            "MotifEvent",
            "PopulationEventType",
            "PopulationEvent",
            "POIEventType",
            "POIEvent",
            "FactionEventType",
            "FactionEvent",
            "QuestEventType",
            "QuestEvent",
            "CombatEventType",
            "CombatEvent",
            "TimeEventType",
            "TimeEvent",
            "RelationshipEventType",
            "RelationshipEvent",
            "StorageEventType",
            "StorageEvent",
            "WorldStateEventType",
            "WorldStateEvent",
            "CharacterEventType",
            "CharacterEvent",
            "LocationEventType",
            "LocationEvent",
            "InventoryEventType",
            "InventoryEvent"
          ],
          "estimated_lines": 990,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/world_state/integration/event_integration.py",
      "lines": 525,
      "classes": [
        "StateChangeEvent",
        "StateCreateEvent",
        "StateDeleteEvent",
        "StateQueryEvent",
        "StateBulkChangeEvent",
        "StateTimelineEvent",
        "WorldStateEventIntegration"
      ],
      "functions": [
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "__init__",
        "get_instance",
        "__init__",
        "initialize",
        "_register_event_handlers",
        "_handle_state_change",
        "_handle_state_create",
        "_handle_state_delete",
        "_handle_state_query",
        "_handle_bulk_change",
        "_handle_state_timeline",
        "publish_state_change",
        "publish_state_version_created",
        "publish_state_snapshot_created"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Callable",
        "datetime.datetime",
        "backend.systems.events.EventDispatcher",
        "backend.systems.world_state.WorldStateManager",
        "backend.systems.world_state.StateVariable",
        "backend.systems.world_state.StateChangeRecord",
        "backend.systems.world_state.StateCategory",
        "backend.systems.world_state.WorldRegion",
        "backend.systems.world_state.StateChangeType",
        "backend.systems.world_state.WorldStateSnapshot",
        "backend.systems.world_state.WorldStateCreatedEvent",
        "backend.systems.world_state.WorldStateUpdatedEvent",
        "backend.systems.world_state.WorldStateDeletedEvent",
        "backend.systems.world_state.api.state_api.WorldStateAPI"
      ],
      "dependencies": "{'events', 'world_state'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 74,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_instance"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_handle_state_change",
            "_handle_state_create",
            "_handle_state_delete",
            "_handle_state_query",
            "_handle_bulk_change",
            "_handle_state_timeline"
          ],
          "estimated_lines": 120,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "publish_state_version_created"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "StateChangeEvent",
            "StateCreateEvent",
            "StateDeleteEvent",
            "StateQueryEvent",
            "StateBulkChangeEvent",
            "StateTimelineEvent",
            "WorldStateEventIntegration"
          ],
          "estimated_lines": 210,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/loot/loot_routes.py",
      "lines": 524,
      "classes": [
        "LootBundleRequest",
        "IdentifyItemRequest",
        "EnhanceItemRequest",
        "ShopInventoryRequest",
        "ShopTransactionRequest",
        "ContextualItemRequest"
      ],
      "functions": [
        "generate_loot"
      ],
      "imports": [
        "flask.Blueprint",
        "flask.request",
        "flask.jsonify",
        "json",
        "backend.systems.loot.loot_manager.LootManager",
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "fastapi.Path",
        "fastapi.Query",
        "fastapi.Body",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "pydantic.BaseModel",
        "backend.systems.loot.data_access.load_equipment_data",
        "backend.systems.loot.data_access.load_item_effects_data",
        "backend.systems.loot.data_access.load_monster_abilities_data",
        "backend.systems.loot.data_access.load_shops_data",
        "backend.systems.loot.loot_core.group_equipment_by_type",
        "backend.systems.loot.loot_core.generate_unidentified_description",
        "backend.systems.loot.loot_core.get_enhancement_requirements",
        "backend.systems.loot.loot_core.add_enchantment_to_item",
        "backend.systems.loot.loot_core.generate_contextual_item",
        "backend.systems.loot.loot_core.apply_faction_motifs",
        "backend.systems.loot.loot_core.apply_regional_motifs",
        "backend.systems.loot.loot_shop.get_region_economic_factors",
        "json",
        "backend.systems.loot.loot_core.generate_item_description",
        "backend.systems.loot.loot_shop.get_dynamic_item_price",
        "json",
        "backend.systems.loot.loot_shop.get_dynamic_item_price"
      ],
      "dependencies": "{'loot', 'pydantic', 'fastapi'}",
      "responsibilities": [
        "Data Models",
        "Database Operations",
        "API/Routing",
        "Business Logic",
        "File I/O"
      ],
      "complexity_score": 65,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_loot"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "LootBundleRequest",
            "IdentifyItemRequest",
            "EnhanceItemRequest",
            "ShopInventoryRequest",
            "ShopTransactionRequest",
            "ContextualItemRequest"
          ],
          "estimated_lines": 180,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/world_generation/events.py",
      "lines": 519,
      "classes": [
        "WorldGenerationEventType",
        "WorldGenerationEvent",
        "GenerationStartedEvent",
        "GenerationCompletedEvent",
        "GenerationFailedEvent",
        "GenerationProgressEvent",
        "GenerationPausedEvent",
        "GenerationResumedEvent",
        "PhaseStartedEvent",
        "PhaseCompletedEvent",
        "PhaseFailedEvent",
        "ComponentStartedEvent",
        "ComponentCompletedEvent",
        "ComponentFailedEvent",
        "WorldSavedEvent",
        "WorldLoadedEvent",
        "ContinentGeneratedEvent",
        "WorldGenerationEventEmitter"
      ],
      "functions": [
        "__init__",
        "_set_generation_context",
        "start_generation",
        "update_progress",
        "complete_generation",
        "fail_generation",
        "pause_generation",
        "resume_generation",
        "start_phase",
        "complete_phase",
        "fail_phase",
        "start_component",
        "complete_component",
        "fail_component",
        "world_saved",
        "world_loaded",
        "continent_generated"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "enum.Enum",
        "datetime.datetime",
        "backend.systems.events.event_base.EventBase",
        "backend.systems.events.event_dispatcher.EventDispatcher",
        "uuid",
        "time",
        "time",
        "time"
      ],
      "dependencies": "{'events'}",
      "responsibilities": [
        "Event Handling",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 64,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "_set_generation_context"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "update_progress"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "WorldGenerationEventType",
            "WorldGenerationEvent",
            "GenerationStartedEvent",
            "GenerationCompletedEvent",
            "GenerationFailedEvent",
            "GenerationProgressEvent",
            "GenerationPausedEvent",
            "GenerationResumedEvent",
            "PhaseStartedEvent",
            "PhaseCompletedEvent",
            "PhaseFailedEvent",
            "ComponentStartedEvent",
            "ComponentCompletedEvent",
            "ComponentFailedEvent",
            "WorldSavedEvent",
            "WorldLoadedEvent",
            "ContinentGeneratedEvent",
            "WorldGenerationEventEmitter"
          ],
          "estimated_lines": 540,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/character/models/mood.py",
      "lines": 517,
      "classes": [
        "EmotionalState",
        "MoodIntensity",
        "MoodSource",
        "MoodModifier",
        "CharacterMood"
      ],
      "functions": [
        "value",
        "from_value",
        "value",
        "is_expired",
        "to_dict",
        "from_dict",
        "__init__",
        "add_modifier",
        "remove_modifier",
        "remove_expired_modifiers",
        "clear_modifiers",
        "update",
        "calculate_mood_values",
        "get_dominant_mood",
        "get_mood_description",
        "set_base_mood",
        "to_dict",
        "from_dict"
      ],
      "imports": [
        "enum.Enum",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "uuid.UUID",
        "uuid.uuid4",
        "logging",
        "dataclasses.dataclass",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.MoodChanged"
      ],
      "dependencies": "{'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling",
        "Configuration"
      ],
      "complexity_score": 67,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_mood_values"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_dominant_mood",
            "get_mood_description"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "EmotionalState",
            "MoodIntensity",
            "MoodSource",
            "MoodModifier",
            "CharacterMood"
          ],
          "estimated_lines": 150,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/dialogue/conversation.py",
      "lines": 505,
      "classes": [
        "ConversationEntry",
        "ConversationHistory"
      ],
      "functions": [
        "__init__",
        "to_dict",
        "from_dict",
        "__init__",
        "add_entry",
        "end_conversation",
        "get_entries",
        "get_messages_for_context",
        "get_all_participants",
        "add_participant",
        "remove_participant",
        "to_dict",
        "from_dict",
        "_emit_conversation_started",
        "_emit_message_event",
        "_emit_conversation_ended",
        "extract_key_info",
        "to_json",
        "from_json",
        "save",
        "load"
      ],
      "imports": [
        "json",
        "datetime.datetime",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Callable",
        "typing.Set",
        "uuid",
        "logging",
        "backend.systems.dialogue.utils.count_tokens",
        "backend.systems.dialogue.utils.extract_key_info",
        "backend.systems.events.EventDispatcher",
        "backend.systems.dialogue.events.DialogueStartedEvent",
        "backend.systems.dialogue.events.DialogueMessageEvent",
        "backend.systems.dialogue.events.DialogueEndedEvent"
      ],
      "dependencies": "{'events', 'dialogue'}",
      "responsibilities": [
        "Event Handling",
        "Database Operations",
        "File I/O",
        "Configuration"
      ],
      "complexity_score": 63,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_entries",
            "get_messages_for_context",
            "get_all_participants"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "_emit_conversation_started",
            "_emit_message_event",
            "_emit_conversation_ended"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "ConversationEntry",
            "ConversationHistory"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/character/core/character_builder.py",
      "lines": 504,
      "classes": [
        "CharacterBuilder",
        "CharacterBuilder"
      ],
      "functions": [
        "finalize_character",
        "generate_basic_stats",
        "__init__",
        "load_from_input",
        "set_race",
        "apply_racial_modifiers",
        "assign_attribute",
        "add_ability",
        "assign_skill",
        "assign_skills",
        "get_available_starter_kits",
        "apply_starter_kit",
        "is_valid",
        "finalize",
        "to_dict",
        "generate_hidden_traits",
        "save",
        "load"
      ],
      "imports": [
        "backend.systems.shared.database.get_db_session",
        "backend.systems.shared.database.db",
        "backend.systems.shared.database.Base",
        "backend.systems.shared.utils.core.json_storage_utils.load_json_file",
        "backend.systems.character.core.character_model.Character",
        "backend.systems.character.core.character_model.Skill",
        "backend.systems.character.core.character_utils.calculate_ability_modifier",
        "datetime.datetime",
        "sqlalchemy.orm.exc.NoResultFound",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "typing.Tuple",
        "os",
        "random",
        "uuid",
        "logging"
      ],
      "dependencies": "{'character', 'sqlalchemy', 'shared'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 67,
      "refactoring_priority": "HIGH",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_basic_stats",
            "generate_hidden_traits"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "load_from_input",
            "get_available_starter_kits"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "CharacterBuilder",
            "CharacterBuilder"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/combat/combat_routes.py",
      "lines": 1159,
      "classes": [],
      "functions": [],
      "imports": [
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Union",
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "fastapi.Body",
        "backend.systems.combat.combat_class.Combat",
        "backend.systems.combat.combat_ram.combat_state_manager",
        "backend.systems.combat.unified_effects.CombatEffect",
        "backend.systems.combat.unified_effects.BuffEffect",
        "backend.systems.combat.unified_effects.DebuffEffect",
        "backend.systems.combat.unified_effects.DamageOverTimeEffect",
        "backend.systems.combat.unified_effects.HealOverTimeEffect",
        "backend.systems.combat.unified_effects.ConditionEffect",
        "backend.systems.combat.unified_effects.ResistanceEffect",
        "backend.systems.combat.unified_effects.VulnerabilityEffect",
        "backend.systems.combat.unified_effects.ImmunityEffect",
        "backend.systems.combat.unified_effects.EffectType",
        "backend.systems.combat.unified_effects.EffectStackingBehavior",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.CombatEvent"
      ],
      "dependencies": "{'combat', 'events', 'fastapi'}",
      "responsibilities": [
        "Event Handling",
        "API/Routing",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 40,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": []
    },
    {
      "path": "systems/tension_war/utils/alliance_utils.py",
      "lines": 1066,
      "classes": [],
      "functions": [
        "evaluate_alliance_compatibility",
        "calculate_alliance_benefits",
        "generate_alliance_terms",
        "evaluate_alliance_stability",
        "evaluate_sanction_impact",
        "evaluate_alliance_strength",
        "calculate_call_to_arms_chance"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "datetime.timedelta",
        "random",
        "models.AllianceConfig",
        "models.AllianceType",
        "models.SanctionType"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 41,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_alliance_benefits",
            "generate_alliance_terms",
            "calculate_call_to_arms_chance"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "evaluate_sanction_impact"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/equipment/service.py",
      "lines": 1051,
      "classes": [
        "EquipmentService"
      ],
      "functions": [
        "gpt_flavor_identify_effect",
        "gpt_flavor_reveal_full_item"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "logging",
        "models.Equipment",
        "inventory_utils.load_equipment_rules",
        "inventory_utils.can_equip_item",
        "inventory_utils.get_equipment_stats",
        "inventory_utils.check_durability_requirements",
        "identify_item_utils.calculate_identification_cost",
        "identify_item_utils.reveal_item_name_and_flavor",
        "identify_item_utils.identify_item",
        "identify_item_utils.fully_identify_item",
        "set_bonus_utils.calculate_set_bonuses",
        "set_bonus_utils.apply_set_bonuses",
        "set_bonus_utils.get_equipment_sets",
        "set_bonus_utils.get_equipment_set",
        "set_bonus_utils.create_equipment_set",
        "set_bonus_utils.update_equipment_set",
        "set_bonus_utils.delete_equipment_set",
        "durability_utils.apply_durability_damage",
        "durability_utils.calculate_combat_damage",
        "durability_utils.calculate_wear_damage",
        "durability_utils.calculate_repair_cost",
        "durability_utils.repair_equipment",
        "durability_utils.get_durability_history",
        "durability_utils.get_durability_status",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.EventBase",
        "events.EquipmentEquippedEvent",
        "events.EquipmentUnequippedEvent",
        "events.EquipmentDamagedEvent",
        "events.EquipmentRepairedEvent",
        "events.EquipmentBrokenEvent",
        "events.EquipmentRepairedFromBrokenEvent",
        "events.ItemIdentifiedEvent",
        "events.ItemNameRevealedEvent",
        "events.NarrativeFlavorTextEvent",
        "events.EquipmentSetActiveEvent",
        "backend.systems.shared.database.db",
        "backend.systems.inventory.models.Inventory",
        "backend.systems.inventory.models.InventoryItem",
        "backend.systems.narrative.utils.gpt_flavor_identify_effect",
        "backend.systems.narrative.utils.gpt_flavor_reveal_full_item"
      ],
      "dependencies": "{'narrative', 'inventory', 'events', 'shared'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling",
        "Configuration"
      ],
      "complexity_score": 54,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "EquipmentService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/quest/integration.py",
      "lines": 1030,
      "classes": [
        "QuestIntegration"
      ],
      "functions": [
        "register_event_handlers",
        "generate_quests_for_player",
        "calculate_quest_duration"
      ],
      "imports": [
        "logging",
        "random",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "backend.systems.events.get_event_dispatcher",
        "backend.systems.npc.services.npc_service.NPCService",
        "backend.systems.world_state.WorldStateManager",
        "models.Quest",
        "models.QuestStep",
        "utils.QuestUtils",
        "utils.QuestValidator",
        "generator.QuestGenerator",
        "motif_integration.QuestMotifIntegration"
      ],
      "dependencies": "{'npc', 'events', 'world_state'}",
      "responsibilities": [
        "Business Logic",
        "Data Models",
        "Database Operations"
      ],
      "complexity_score": 59,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_quests_for_player",
            "calculate_quest_duration"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "QuestIntegration"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/inventory/router.py",
      "lines": 929,
      "classes": [
        "User",
        "InventoryNotifier"
      ],
      "functions": [
        "check_inventory_access",
        "notify_inventory_created",
        "notify_inventory_deleted"
      ],
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "logging",
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.Query",
        "fastapi.Path",
        "fastapi.Body",
        "fastapi.Response",
        "fastapi.status",
        "fastapi.responses.JSONResponse",
        "datetime.datetime",
        "backend.systems.shared.database.db",
        "backend.systems.inventory.models.Item",
        "backend.systems.inventory.models.Inventory",
        "backend.systems.inventory.models.InventoryItem",
        "backend.systems.inventory.service.InventoryService",
        "backend.systems.inventory.utils.transfer_item_between_inventories",
        "backend.systems.auth_user.services.get_current_user",
        "backend.systems.auth_user.services.User",
        "backend.systems.shared.utils.security.check_inventory_access",
        "backend.systems.inventory.notification.InventoryNotifier",
        "backend.systems.inventory.schemas.InventoryItemSchema",
        "backend.systems.inventory.schemas.ItemSchema",
        "backend.systems.inventory.utils.split_item_stack",
        "backend.systems.inventory.utils.combine_item_stacks",
        "backend.systems.inventory.utils.optimize_inventory_stacks",
        "backend.systems.inventory.utils.filter_inventory_items",
        "backend.systems.inventory.migrations.run_migrations"
      ],
      "dependencies": "{'inventory', 'auth_user', 'shared', 'fastapi'}",
      "responsibilities": [
        "API/Routing",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 60,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "User",
            "InventoryNotifier"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/motif/service.py",
      "lines": 928,
      "classes": [
        "MotifService"
      ],
      "functions": [
        "__init__",
        "_extract_narrative_themes",
        "_generate_narrative_guidance",
        "_generate_related_categories",
        "_determine_tone_from_motif",
        "get_current_time"
      ],
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "random",
        "math",
        "logging",
        "json",
        "asyncio",
        "fastapi.HTTPException",
        "fastapi.Depends",
        "fastapi.status",
        "models.Motif",
        "models.MotifCreate",
        "models.MotifUpdate",
        "models.MotifFilter",
        "models.MotifScope",
        "models.MotifLifecycle",
        "models.MotifCategory",
        "models.MotifEffect",
        "models.MotifEffectTarget",
        "models.LocationInfo",
        "repository.MotifRepository",
        "repository.Vector2",
        ".utils",
        "backend.systems.shared.utils.core.time_utils.get_current_time",
        "datetime.datetime"
      ],
      "dependencies": "{'shared', 'fastapi'}",
      "responsibilities": [
        "Business Logic",
        "API/Routing",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 58,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_generate_narrative_guidance",
            "_generate_related_categories"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_current_time"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "MotifService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/memory/services/memory_manager.py",
      "lines": 881,
      "classes": [
        "MemoryForgottenEvent",
        "MemoryManager"
      ],
      "functions": [
        "__init__",
        "_log_info",
        "_log_debug",
        "_log_warning",
        "_log_error"
      ],
      "imports": [
        "asyncio",
        "logging",
        "time",
        "random",
        "uuid",
        "json",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "typing.Union",
        "typing.Callable",
        "math",
        "models.memory.Memory",
        "models.memory.MemoryType",
        "models.memory.MemoryEmotionalValence",
        "models.memory.MemoryCreatedEvent",
        "models.memory.MemoryRecalledEvent",
        "models.memory.MemoryDecayedEvent",
        "utils.memory_utils.create_memory",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.EventBase"
      ],
      "dependencies": "{'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling",
        "Configuration"
      ],
      "complexity_score": 57,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "MemoryForgottenEvent",
            "MemoryManager"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/poi/services/resource_management_service.py",
      "lines": 877,
      "classes": [
        "ResourceManagementService"
      ],
      "functions": [
        "calculate_production",
        "calculate_consumption",
        "get_resource_balance",
        "update_resources",
        "set_resource_modifier",
        "add_resource",
        "remove_resource",
        "check_resource_scarcity",
        "handle_trade",
        "initialize_resources",
        "calculate_resource_production",
        "calculate_resource_consumption",
        "update_resources",
        "apply_shortage_effects",
        "trade_resources"
      ],
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "typing.Optional",
        "datetime.datetime",
        "models.PointOfInterest",
        "models.POIState",
        "models.POIType",
        "lifecycle_events_service.POILifecycleEventsService"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 52,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_production",
            "calculate_consumption",
            "handle_trade",
            "calculate_resource_production",
            "calculate_resource_consumption"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_resource_balance",
            "update_resources",
            "update_resources"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "ResourceManagementService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/poi/services/lifecycle_events_service.py",
      "lines": 852,
      "classes": [
        "POILifecycleEventsService"
      ],
      "functions": [
        "get_events",
        "add_event",
        "get_event_by_id",
        "update_event",
        "expire_event",
        "remove_event",
        "get_poi_history",
        "generate_founding_event",
        "generate_population_milestone_event",
        "generate_leadership_change_event",
        "process_event_effects",
        "generate_narrative_summary",
        "cleanup_expired_events"
      ],
      "imports": [
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "uuid",
        "models.PointOfInterest",
        "models.POIType"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 48,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_events",
            "get_event_by_id",
            "update_event",
            "get_poi_history"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_founding_event",
            "generate_population_milestone_event",
            "generate_leadership_change_event",
            "process_event_effects",
            "generate_narrative_summary"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "POILifecycleEventsService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/motif/router.py",
      "lines": 851,
      "classes": [],
      "functions": [
        "get_motif_service",
        "get_motif_manager"
      ],
      "imports": [
        "typing.List",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.Query",
        "fastapi.WebSocket",
        "models.Motif",
        "models.MotifCreate",
        "models.MotifUpdate",
        "models.MotifFilter",
        "models.MotifScope",
        "models.MotifLifecycle",
        "models.MotifResponse",
        "models.MotifCategory",
        "service.MotifService",
        "repository.MotifRepository",
        "repository.Vector2",
        "consolidated_manager.MotifManager",
        "fastapi.WebSocketDisconnect"
      ],
      "dependencies": "{'fastapi'}",
      "responsibilities": [
        "Business Logic",
        "API/Routing",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 42,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_motif_service",
            "get_motif_manager"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/loot/loot_manager.py",
      "lines": 843,
      "classes": [
        "LootManager"
      ],
      "functions": [
        "get_instance",
        "__init__",
        "initialize",
        "generate_loot",
        "generate_location_loot",
        "identify_item",
        "enhance_item",
        "generate_shop_inventory",
        "restock_shop",
        "process_shop_transaction",
        "track_analytics"
      ],
      "imports": [
        "threading",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "typing.Optional",
        "datetime.datetime",
        "uuid",
        "backend.systems.events.EventDispatcher",
        "backend.systems.loot.loot_core.generate_loot_bundle",
        "backend.systems.loot.loot_core.generate_location_specific_loot",
        "backend.systems.loot.loot_core.generate_item_identity",
        "backend.systems.loot.loot_shop.generate_shop_inventory",
        "backend.systems.loot.loot_shop.restock_shop_inventory",
        "backend.systems.loot.loot_shop.purchase_item_from_shop",
        "backend.systems.loot.loot_shop.sell_item_to_shop",
        "backend.systems.loot.loot_events.LootGeneratedEvent",
        "backend.systems.loot.loot_events.ItemIdentificationEvent",
        "backend.systems.loot.loot_events.ItemEnhancementEvent",
        "backend.systems.loot.loot_events.ShopInventoryEvent",
        "backend.systems.loot.loot_events.ShopRestockEvent",
        "backend.systems.loot.loot_events.ShopTransactionEvent",
        "backend.systems.loot.loot_events.LootAnalyticsEvent",
        "backend.systems.loot.loot_shop.get_region_economic_factors"
      ],
      "dependencies": "{'loot', 'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 52,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_instance"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_loot",
            "generate_location_loot",
            "generate_shop_inventory",
            "process_shop_transaction"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "LootManager"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/faction/services/consolidated_relationship_service.py",
      "lines": 832,
      "classes": [
        "ConsolidatedRelationshipService"
      ],
      "functions": [
        "get_relationship",
        "get_faction_relationships",
        "set_diplomatic_stance",
        "update_tension",
        "declare_war",
        "make_peace",
        "process_tension_decay",
        "resolve_war_outcome"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Tuple",
        "datetime.datetime",
        "logging",
        "random",
        "sqlalchemy.orm.Session",
        "backend.systems.faction.models.faction.Faction",
        "backend.systems.faction.models.faction.FactionRelationship",
        "backend.systems.faction.schemas.faction_types.DiplomaticStance",
        "backend.systems.faction.services.consolidated_faction_service.FactionError",
        "backend.systems.faction.services.consolidated_faction_service.FactionNotFoundError",
        "backend.systems.faction.services.consolidated_faction_service.RelationshipNotFoundError"
      ],
      "dependencies": "{'sqlalchemy', 'faction'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 41,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_relationship",
            "get_faction_relationships",
            "update_tension"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "process_tension_decay"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "ConsolidatedRelationshipService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/loot/loot_shop.py",
      "lines": 831,
      "classes": [],
      "functions": [
        "get_region_economic_factors",
        "calculate_base_price",
        "get_current_supply",
        "get_current_demand",
        "adjust_price_for_supply_demand",
        "get_dynamic_item_price",
        "generate_shop_inventory",
        "get_shop_type_specialization",
        "calculate_shop_price_modifier",
        "restock_shop_inventory",
        "purchase_item_from_shop",
        "sell_item_to_shop"
      ],
      "imports": [
        "random",
        "uuid.uuid4",
        "copy.deepcopy",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "typing.Optional",
        "datetime.datetime",
        "backend.systems.events.EventDispatcher",
        "backend.systems.loot.loot_events.ShopInventoryEvent",
        "backend.systems.loot.loot_events.ShopRestockEvent",
        "backend.systems.loot.loot_events.ShopTransactionEvent",
        "backend.systems.loot.loot_core.generate_item_effects",
        "backend.systems.loot.loot_core.generate_item_identity",
        "backend.systems.loot.data_access.load_equipment_data",
        "backend.systems.loot.data_access.load_item_effects_data",
        "backend.systems.loot.loot_core.group_equipment_by_type"
      ],
      "dependencies": "{'loot', 'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 47,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_region_economic_factors",
            "get_current_supply",
            "get_current_demand",
            "get_dynamic_item_price",
            "get_shop_type_specialization"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_base_price",
            "generate_shop_inventory",
            "calculate_shop_price_modifier"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/events/event_types.py",
      "lines": 826,
      "classes": [
        "SystemEvent",
        "SystemStartup",
        "SystemShutdown",
        "SystemError",
        "SystemConfigChanged",
        "GameEvent",
        "GameInitialized",
        "GameSaved",
        "GameLoaded",
        "GameEnded",
        "CharacterEvent",
        "CharacterCreated",
        "CharacterUpdated",
        "CharacterDeleted",
        "CharacterMoved",
        "CharacterLeveledUp",
        "CharacterInteracted",
        "CharacterRelationshipChanged",
        "MoodChanged",
        "FactionEvent",
        "FactionCreated",
        "FactionUpdated",
        "FactionDeleted",
        "FactionRelationshipChanged",
        "MemoryEvent",
        "MemoryCreated",
        "MemoryUpdated",
        "MemoryDeleted",
        "MemoryRecalled",
        "RumorEvent",
        "RumorCreated",
        "RumorUpdated",
        "RumorDeleted",
        "RumorSpread",
        "POIEvent",
        "POIStateChanged",
        "POIControlChanged",
        "POIInfluenceChanged",
        "PopulationChanged",
        "NarrativeEvent",
        "NarrativeProgressed",
        "NarrativeBranchSelected",
        "NarrativeMotifIntroduced",
        "LootGeneratedEvent",
        "ItemIdentificationEvent",
        "ItemEnhancementEvent",
        "ShopInventoryEvent",
        "ShopRestockEvent",
        "ShopTransactionEvent",
        "LootAnalyticsEvent",
        "MemoryCreatedEvent",
        "MemoryReinforcedEvent",
        "MemoryDeletedEvent",
        "RumorSpreadEvent",
        "MotifChangedEvent",
        "PopulationChangedEvent",
        "POIStateChangedEvent",
        "FactionChangedEvent",
        "QuestUpdatedEvent",
        "QuestAcceptedEvent",
        "QuestCompletedEvent",
        "QuestAbandonedEvent",
        "QuestFailedEvent",
        "QuestStepUpdatedEvent",
        "CombatEvent",
        "TimeAdvancedEvent",
        "EventLoggedEvent",
        "RelationshipChangedEvent",
        "StorageEvent",
        "WorldStateChangedEvent",
        "GoalEvent",
        "GoalCreated",
        "GoalCompleted",
        "GoalFailed",
        "GoalProgressUpdated"
      ],
      "functions": [],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "event_base.EventBase"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 41,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "SystemEvent",
            "SystemStartup",
            "SystemShutdown",
            "SystemError",
            "SystemConfigChanged",
            "GameEvent",
            "GameInitialized",
            "GameSaved",
            "GameLoaded",
            "GameEnded",
            "CharacterEvent",
            "CharacterCreated",
            "CharacterUpdated",
            "CharacterDeleted",
            "CharacterMoved",
            "CharacterLeveledUp",
            "CharacterInteracted",
            "CharacterRelationshipChanged",
            "MoodChanged",
            "FactionEvent",
            "FactionCreated",
            "FactionUpdated",
            "FactionDeleted",
            "FactionRelationshipChanged",
            "MemoryEvent",
            "MemoryCreated",
            "MemoryUpdated",
            "MemoryDeleted",
            "MemoryRecalled",
            "RumorEvent",
            "RumorCreated",
            "RumorUpdated",
            "RumorDeleted",
            "RumorSpread",
            "POIEvent",
            "POIStateChanged",
            "POIControlChanged",
            "POIInfluenceChanged",
            "PopulationChanged",
            "NarrativeEvent",
            "NarrativeProgressed",
            "NarrativeBranchSelected",
            "NarrativeMotifIntroduced",
            "LootGeneratedEvent",
            "ItemIdentificationEvent",
            "ItemEnhancementEvent",
            "ShopInventoryEvent",
            "ShopRestockEvent",
            "ShopTransactionEvent",
            "LootAnalyticsEvent",
            "MemoryCreatedEvent",
            "MemoryReinforcedEvent",
            "MemoryDeletedEvent",
            "RumorSpreadEvent",
            "MotifChangedEvent",
            "PopulationChangedEvent",
            "POIStateChangedEvent",
            "FactionChangedEvent",
            "QuestUpdatedEvent",
            "QuestAcceptedEvent",
            "QuestCompletedEvent",
            "QuestAbandonedEvent",
            "QuestFailedEvent",
            "QuestStepUpdatedEvent",
            "CombatEvent",
            "TimeAdvancedEvent",
            "EventLoggedEvent",
            "RelationshipChangedEvent",
            "StorageEvent",
            "WorldStateChangedEvent",
            "GoalEvent",
            "GoalCreated",
            "GoalCompleted",
            "GoalFailed",
            "GoalProgressUpdated"
          ],
          "estimated_lines": 2250,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/world_generation/elevation_utils.py",
      "lines": 820,
      "classes": [],
      "functions": [
        "get_elevation_type",
        "generate_elevation_map",
        "generate_perlin_noise",
        "apply_terrain_features",
        "add_mountain_peak",
        "add_valley",
        "normalize_elevation_map",
        "calculate_slope",
        "identify_terrain_features",
        "generate_noise_map",
        "apply_island_falloff",
        "elevation_map_to_tiles",
        "smooth_elevation_map",
        "create_mountain_ranges",
        "generate_complete_elevation_map",
        "get_neighboring_tiles",
        "is_valid_elevation_transition"
      ],
      "imports": [
        "random",
        "math",
        "numpy",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Set",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Callable",
        "backend.systems.world_generation.models.BiomeType",
        "backend.systems.world_generation.models.ElevationType",
        "backend.systems.world_generation.models.RegionTile"
      ],
      "dependencies": "{'world_generation'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 50,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_elevation_type",
            "create_mountain_ranges",
            "get_neighboring_tiles"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_elevation_map",
            "generate_perlin_noise",
            "calculate_slope",
            "generate_noise_map",
            "generate_complete_elevation_map"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "normalize_elevation_map",
            "elevation_map_to_tiles",
            "smooth_elevation_map",
            "is_valid_elevation_transition"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_generation/settlement_service.py",
      "lines": 814,
      "classes": [
        "SettlementService"
      ],
      "functions": [
        "__init__",
        "generate_settlements_for_region",
        "_weighted_settlement_type",
        "_find_settlement_locations",
        "_calculate_water_access",
        "_calculate_resource_access",
        "_calculate_trade_access",
        "_count_neighboring_regions",
        "_generate_settlement",
        "_generate_settlement_name",
        "_calculate_economy_weights",
        "_generate_notable_buildings",
        "_get_existing_settlements_in_region",
        "_get_region_by_id"
      ],
      "imports": [
        "random",
        "math",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Set",
        "typing.Any",
        "typing.Optional",
        "world_generation_utils.get_elevation_at_point",
        "world_generation_utils.get_rainfall_at_point"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 52,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_settlements_for_region",
            "_calculate_water_access",
            "_calculate_resource_access",
            "_calculate_trade_access",
            "_generate_settlement",
            "_generate_settlement_name",
            "_calculate_economy_weights",
            "_generate_notable_buildings"
          ],
          "estimated_lines": 160,
          "priority": "high"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "_find_settlement_locations",
            "_get_existing_settlements_in_region",
            "_get_region_by_id"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "SettlementService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/poi/services/migration_service.py",
      "lines": 804,
      "classes": [
        "POIMigrationService"
      ],
      "functions": [
        "calculate_migration_factors",
        "calculate_poi_attractiveness",
        "calculate_migration_rate",
        "calculate_distance_penalty",
        "calculate_migration_flow",
        "process_migration",
        "process_regional_migration",
        "get_migration_history",
        "simulate_external_migration"
      ],
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "typing.Optional",
        "datetime.datetime",
        "random",
        "math",
        "uuid",
        "backend.systems.events.EventDispatcher",
        "backend.systems.poi.events.PopulationChanged",
        "models.PointOfInterest",
        "models.POIState",
        "models.POIType",
        "lifecycle_events_service.POILifecycleEventsService",
        "lifecycle_events_service.POILifecycleEventsService"
      ],
      "dependencies": "{'poi', 'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 50,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_migration_factors",
            "calculate_poi_attractiveness",
            "calculate_migration_rate",
            "calculate_distance_penalty",
            "calculate_migration_flow",
            "process_migration",
            "process_regional_migration"
          ],
          "estimated_lines": 140,
          "priority": "high"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_migration_history"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "POIMigrationService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/rumor/service.py",
      "lines": 797,
      "classes": [
        "RumorService"
      ],
      "functions": [
        "__new__",
        "__init__",
        "get_instance",
        "_fallback_mutation"
      ],
      "imports": [
        "typing.List",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "typing.Union",
        "typing.Callable",
        "typing.Tuple",
        "logging",
        "random",
        "asyncio",
        "datetime.datetime",
        "datetime.timedelta",
        "backend.systems.rumor.models.rumor.Rumor",
        "backend.systems.rumor.models.rumor.RumorVariant",
        "backend.systems.rumor.models.rumor.RumorSpread",
        "backend.systems.rumor.models.rumor.RumorCategory",
        "backend.systems.rumor.models.rumor.RumorSeverity",
        "backend.systems.rumor.models.rumor.RumorEvent",
        "backend.systems.rumor.repository.RumorRepository",
        "backend.systems.events.EventDispatcher",
        "backend.systems.rumor.decay_and_propagation.calculate_rumor_decay",
        "backend.systems.rumor.decay_and_propagation.calculate_mutation_probability",
        "backend.systems.rumor.decay_and_propagation.calculate_believability_for_entity",
        "backend.systems.rumor.decay_and_propagation.calculate_truth_decay"
      ],
      "dependencies": "{'rumor', 'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling",
        "Configuration"
      ],
      "complexity_score": 49,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_instance"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "RumorService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/diplomacy/models.py",
      "lines": 786,
      "classes": [
        "DiplomaticStatus",
        "TensionLevel",
        "WarSide",
        "TreatyType",
        "TreatyStatus",
        "FactionRelationship",
        "FactionTension",
        "War",
        "WarBattle",
        "NegotiationOffer",
        "NegotiationStatus",
        "Treaty",
        "Negotiation",
        "DiplomaticEventType",
        "DiplomaticEvent",
        "TreatyViolationType",
        "TreatyViolation",
        "DiplomaticIncidentType",
        "DiplomaticIncidentSeverity",
        "DiplomaticIncident",
        "UltimatumStatus",
        "Ultimatum",
        "SanctionType",
        "SanctionStatus",
        "Sanction",
        "WarOutcomeType",
        "TensionConfig",
        "WarConfig",
        "WarOutcome",
        "WarState"
      ],
      "functions": [
        "validate_standing",
        "validate_membership_level",
        "data",
        "from_canonical_relationship",
        "validate_tension_range",
        "end_date_must_be_future",
        "duration_days",
        "validate_status_with_violations"
      ],
      "imports": [
        "datetime.datetime",
        "datetime.timedelta",
        "enum.Enum",
        "enum.auto",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "typing.Any",
        "uuid.UUID",
        "uuid.uuid4",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.field_validator",
        "pydantic.ConfigDict",
        "pydantic.model_validator"
      ],
      "dependencies": "{'pydantic'}",
      "responsibilities": [
        "Business Logic",
        "Data Models",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 55,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "validate_standing",
            "validate_membership_level",
            "validate_tension_range",
            "validate_status_with_violations"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "duration_days"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "DiplomaticStatus",
            "TensionLevel",
            "WarSide",
            "TreatyType",
            "TreatyStatus",
            "FactionRelationship",
            "FactionTension",
            "War",
            "WarBattle",
            "NegotiationOffer",
            "NegotiationStatus",
            "Treaty",
            "Negotiation",
            "DiplomaticEventType",
            "DiplomaticEvent",
            "TreatyViolationType",
            "TreatyViolation",
            "DiplomaticIncidentType",
            "DiplomaticIncidentSeverity",
            "DiplomaticIncident",
            "UltimatumStatus",
            "Ultimatum",
            "SanctionType",
            "SanctionStatus",
            "Sanction",
            "WarOutcomeType",
            "TensionConfig",
            "WarConfig",
            "WarOutcome",
            "WarState"
          ],
          "estimated_lines": 900,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/dialogue/war_integration.py",
      "lines": 785,
      "classes": [
        "DialogueWarIntegration"
      ],
      "functions": [
        "__init__",
        "add_war_context_to_dialogue",
        "get_war_dialogue_options",
        "get_tension_dialogue_context",
        "get_war_narrative_description",
        "_get_active_wars",
        "_get_significant_tensions",
        "_get_war_factions",
        "_get_faction_war_perspective",
        "_get_war_sides_description",
        "_get_faction_name",
        "_get_war_state_description",
        "_get_tension_state",
        "_calculate_war_risk",
        "_get_tension_description",
        "_get_war_news_dialogue",
        "_get_war_propaganda_dialogue",
        "_get_peace_dialogue",
        "_get_threat_dialogue",
        "_get_war_progress_description",
        "_get_war_victim_description"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "logging",
        "datetime.datetime",
        "backend.systems.tension_war.services.war_manager.WarManager",
        "backend.systems.tension_war.services.tension_manager.TensionManager"
      ],
      "dependencies": "{'tension_war'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 58,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_war_dialogue_options",
            "get_tension_dialogue_context",
            "get_war_narrative_description",
            "_get_active_wars",
            "_get_significant_tensions",
            "_get_war_factions",
            "_get_faction_war_perspective",
            "_get_war_sides_description",
            "_get_faction_name",
            "_get_war_state_description",
            "_get_tension_state",
            "_get_tension_description",
            "_get_war_news_dialogue",
            "_get_war_propaganda_dialogue",
            "_get_peace_dialogue",
            "_get_threat_dialogue",
            "_get_war_progress_description",
            "_get_war_victim_description"
          ],
          "estimated_lines": 360,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_calculate_war_risk"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "DialogueWarIntegration"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/quest/faction_integration.py",
      "lines": 780,
      "classes": [
        "FactionQuestContext",
        "QuestFactionIntegration"
      ],
      "functions": [
        "register_event_handlers",
        "generate_faction_quest",
        "generate_rivalry_quest",
        "generate_alliance_quest",
        "apply_faction_influence",
        "get_faction_standings"
      ],
      "imports": [
        "logging",
        "random",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "dataclasses.dataclass",
        "dataclasses.field",
        "backend.systems.events.get_event_dispatcher",
        "models.Quest",
        "models.QuestStep",
        "generator.QuestGenerator",
        "backend.systems.faction.FactionFacade",
        "utils.QuestUtils"
      ],
      "dependencies": "{'events', 'faction'}",
      "responsibilities": [
        "Business Logic",
        "Data Models",
        "Database Operations"
      ],
      "complexity_score": 60,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_faction_quest",
            "generate_rivalry_quest",
            "generate_alliance_quest"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "apply_faction_influence"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_faction_standings"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "FactionQuestContext",
            "QuestFactionIntegration"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/loot/loot_core.py",
      "lines": 775,
      "classes": [],
      "functions": [
        "group_equipment_by_type",
        "validate_item",
        "calculate_item_power_score",
        "gpt_name_and_flavor",
        "generate_item_identity",
        "generate_item_effects",
        "generate_loot_bundle",
        "merge_loot_sets",
        "generate_location_specific_loot"
      ],
      "imports": [
        "random",
        "uuid.uuid4",
        "copy.deepcopy",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Tuple",
        "typing.Optional",
        "datetime.datetime",
        "math",
        "backend.systems.events.EventDispatcher",
        "backend.systems.loot.loot_events.LootGeneratedEvent",
        "backend.systems.loot.loot_events.LootAnalyticsEvent"
      ],
      "dependencies": "{'loot', 'events'}",
      "responsibilities": [
        "Business Logic",
        "Event Handling"
      ],
      "complexity_score": 44,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "validate_item",
            "calculate_item_power_score",
            "generate_item_identity",
            "generate_item_effects",
            "generate_loot_bundle",
            "generate_location_specific_loot"
          ],
          "estimated_lines": 120,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/combat/combat_facade.py",
      "lines": 750,
      "classes": [
        "CombatFacade"
      ],
      "functions": [
        "initialize_combat",
        "execute_action",
        "apply_damage",
        "apply_effect",
        "create_and_apply_effect",
        "remove_effect",
        "process_effects",
        "get_active_effects",
        "get_turn_order",
        "advance_turn",
        "get_valid_targets",
        "end_combat",
        "_execute_attack",
        "_execute_skill",
        "_execute_item",
        "_execute_movement"
      ],
      "imports": [
        "logging",
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "typing.Tuple",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.CombatEvent",
        "backend.systems.combat.combat_types_stub.Character",
        "backend.systems.combat.combat_types_stub.CombatState",
        "backend.systems.combat.combat_types_stub.CombatAction",
        "backend.systems.combat.combat_types_stub.StatusEffect",
        "backend.systems.combat.combat_types_stub.DamageCalculation",
        "backend.systems.combat.combat_types_stub.ActionResult",
        "backend.systems.combat.unified_combat_utils.DamageType",
        "backend.systems.combat.unified_combat_utils.StatusEffectType",
        "backend.systems.combat.unified_combat_utils.calculate_base_damage",
        "backend.systems.combat.unified_combat_utils.apply_critical_hit",
        "backend.systems.combat.unified_combat_utils.calculate_mitigation",
        "backend.systems.combat.unified_combat_utils.apply_full_damage_calculation",
        "backend.systems.combat.unified_combat_utils.get_valid_targets",
        "backend.systems.combat.unified_combat_utils.get_turn_order",
        "backend.systems.combat.unified_combat_utils.resolve_combat_action",
        "backend.systems.combat.unified_combat_utils.apply_status_effect",
        "backend.systems.combat.unified_combat_utils.process_status_effects",
        "backend.systems.combat.unified_combat_utils.remove_status_effect",
        "backend.systems.combat.unified_combat_utils.dispel_effects",
        "backend.systems.combat.unified_combat_utils.is_attack_successful",
        "backend.systems.combat.unified_effects.EffectType",
        "backend.systems.combat.unified_effects.EffectPipeline",
        "backend.systems.combat.unified_effects.CombatEffect",
        "backend.systems.combat.unified_effects.BuffEffect",
        "backend.systems.combat.unified_effects.DebuffEffect",
        "backend.systems.combat.unified_effects.DamageOverTimeEffect",
        "backend.systems.combat.unified_effects.HealOverTimeEffect",
        "backend.systems.combat.unified_effects.ConditionEffect",
        "backend.systems.combat.unified_effects.ResistanceEffect",
        "backend.systems.combat.unified_effects.VulnerabilityEffect",
        "backend.systems.combat.unified_effects.ImmunityEffect",
        "backend.systems.combat.combat_validator.validate_combat_action",
        "backend.systems.combat.combat_validator.validate_effect_application",
        "backend.systems.combat.combat_validator.validate_damage_parameters",
        "backend.systems.combat.combat_validator.ValidationResult"
      ],
      "dependencies": "{'combat', 'events'}",
      "responsibilities": [
        "Business Logic",
        "Data Models",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 59,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "execute_action",
            "process_effects",
            "_execute_attack",
            "_execute_skill",
            "_execute_item",
            "_execute_movement"
          ],
          "estimated_lines": 120,
          "priority": "high"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "create_and_apply_effect",
            "get_active_effects",
            "get_turn_order",
            "get_valid_targets"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "CombatFacade"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_generation/service_utils.py",
      "lines": 749,
      "classes": [],
      "functions": [
        "create_humidity_map",
        "create_temperature_map",
        "adjust_biomes_by_temperature_humidity",
        "generate_region_terrain",
        "create_region_from_tiles",
        "smooth_coastlines",
        "add_beaches",
        "expand_water_bodies",
        "apply_biome_adjacency_rules"
      ],
      "imports": [
        "os",
        "json",
        "random",
        "math",
        "uuid",
        "numpy",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Set",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Callable",
        "backend.systems.world_generation.models.World",
        "backend.systems.world_generation.models.Continent",
        "backend.systems.world_generation.models.Region",
        "backend.systems.world_generation.models.RegionTile",
        "backend.systems.world_generation.models.River",
        "backend.systems.world_generation.models.Resource",
        "backend.systems.world_generation.models.BiomeType",
        "backend.systems.world_generation.models.ResourceType",
        "backend.systems.world_generation.elevation_utils.generate_complete_elevation_map",
        "backend.systems.world_generation.elevation_utils.elevation_map_to_tiles",
        "backend.systems.world_generation.elevation_utils.get_elevation_type",
        "backend.systems.world_generation.coastline_utils.identify_coastlines",
        "backend.systems.world_generation.coastline_utils.smooth_coastline",
        "backend.systems.world_generation.coastline_utils.place_beaches",
        "backend.systems.world_generation.river_generator.generate_rivers_for_region",
        "backend.systems.world_generation.resource_utils.assign_resources_to_region",
        "backend.systems.world_generation.resource_utils.generate_special_resource_clusters",
        "backend.systems.world_generation.biome_utils.load_adjacency_rules",
        "backend.systems.world_generation.biome_utils.apply_adjacency_rules"
      ],
      "dependencies": "{'world_generation'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 54,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "create_humidity_map",
            "create_temperature_map",
            "create_region_from_tiles"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_region_terrain"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_generation/world_utils.py",
      "lines": 745,
      "classes": [],
      "functions": [
        "generate_region",
        "walk_region",
        "pick_valid_tile",
        "claim_region_hexes_for_city",
        "generate_settlements",
        "generate_non_settlement_pois",
        "generate_minor_nature_squares",
        "choose_poi_type",
        "determine_biome",
        "get_elevation_at_point",
        "get_moisture_at_point"
      ],
      "imports": [
        "random",
        "logging",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Any",
        "typing.Optional",
        "typing.Set",
        "uuid.uuid4",
        "datetime.datetime",
        "math",
        "math"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 47,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_region",
            "generate_settlements",
            "generate_non_settlement_pois",
            "generate_minor_nature_squares"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "claim_region_hexes_for_city"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_elevation_at_point",
            "get_moisture_at_point"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/population/utils.py",
      "lines": 742,
      "classes": [],
      "functions": [
        "calculate_growth_rate",
        "calculate_next_state",
        "estimate_population_timeline",
        "calculate_target_population",
        "calculate_catastrophe_impact",
        "calculate_war_impact",
        "calculate_resource_shortage_impact",
        "calculate_seasonal_growth_modifier",
        "calculate_seasonal_death_rate_modifier",
        "is_valid_transition",
        "estimate_time_to_state",
        "is_valid_state_progression",
        "get_poi_status_description",
        "calculate_migration_impact"
      ],
      "imports": [
        "math",
        "typing.Dict",
        "typing.Tuple",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "datetime.datetime",
        "datetime.timedelta",
        "backend.systems.population.models.POIPopulation",
        "backend.systems.population.models.POIState",
        "backend.systems.population.models.POIType"
      ],
      "dependencies": "{'population'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 43,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_growth_rate",
            "calculate_next_state",
            "calculate_catastrophe_impact",
            "calculate_war_impact",
            "calculate_resource_shortage_impact",
            "calculate_seasonal_growth_modifier",
            "calculate_seasonal_death_rate_modifier",
            "calculate_migration_impact"
          ],
          "estimated_lines": 160,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "estimate_population_timeline"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "calculate_target_population",
            "get_poi_status_description"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/inventory/validator.py",
      "lines": 723,
      "classes": [
        "InventoryValidator"
      ],
      "functions": [
        "validate_inventory_exists",
        "validate_item_exists",
        "validate_inventory_item_exists",
        "check_stackable_constraints",
        "check_inventory_constraints",
        "validate_add_item",
        "validate_remove_item",
        "validate_transfer_item",
        "validate_equip_item",
        "validate_unequip_item",
        "validate_bulk_transfer"
      ],
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "logging",
        "sqlalchemy.and_",
        "backend.systems.inventory.models.Item",
        "backend.systems.inventory.models.Inventory",
        "backend.systems.inventory.models.InventoryItem",
        "backend.systems.inventory.schemas.ValidationResult",
        "backend.systems.shared.database.db"
      ],
      "dependencies": "{'sqlalchemy', 'inventory', 'shared'}",
      "responsibilities": [
        "Business Logic",
        "Data Models",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 41,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "validate_inventory_exists",
            "validate_item_exists",
            "validate_inventory_item_exists",
            "validate_add_item",
            "validate_remove_item",
            "validate_transfer_item",
            "validate_equip_item",
            "validate_unequip_item",
            "validate_bulk_transfer"
          ],
          "estimated_lines": 180,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "InventoryValidator"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_generation/api.py",
      "lines": 715,
      "classes": [],
      "functions": [
        "generate_world",
        "generate_custom_world",
        "load_world",
        "save_world",
        "subscribe_to_world_events",
        "get_world_info"
      ],
      "imports": [
        "asyncio",
        "logging",
        "uuid",
        "time",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Callable",
        "typing.Set",
        "typing.Tuple",
        "typing.Union",
        "backend.systems.world_generation.world_generator.WorldGenerator",
        "backend.systems.world_generation.seed_loader.load_world_seed",
        "backend.systems.events.event_dispatcher.EventDispatcher",
        "backend.systems.world_generation.events.WorldGenerationEventType",
        "backend.systems.world_generation.events.GenerationStartedEvent",
        "backend.systems.world_generation.events.GenerationCompletedEvent",
        "backend.systems.world_generation.events.GenerationStartedEvent",
        "backend.systems.world_generation.events.GenerationCompletedEvent",
        "backend.systems.world_generation.events.GenerationFailedEvent",
        "backend.systems.world_generation.events.GenerationProgressEvent",
        "backend.systems.world_generation.events.PhaseStartedEvent",
        "backend.systems.world_generation.events.PhaseCompletedEvent",
        "backend.systems.world_generation.events.PhaseFailedEvent",
        "backend.systems.world_generation.events.ComponentStartedEvent",
        "backend.systems.world_generation.events.ComponentCompletedEvent",
        "backend.systems.world_generation.events.ComponentFailedEvent",
        "backend.systems.world_generation.events.WorldSavedEvent",
        "backend.systems.world_generation.events.WorldLoadedEvent"
      ],
      "dependencies": "{'world_generation', 'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling",
        "Configuration"
      ],
      "complexity_score": 49,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_world",
            "generate_custom_world"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "load_world",
            "save_world",
            "get_world_info"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "subscribe_to_world_events"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/dialogue/population_integration.py",
      "lines": 703,
      "classes": [
        "DialoguePopulationIntegration"
      ],
      "functions": [
        "__init__",
        "add_population_data_to_context",
        "get_location_population_data",
        "get_occupation_dialogue",
        "get_social_status_dialogue",
        "modify_dialogue_for_demographics",
        "generate_demographic_comment",
        "generate_occupation_comment",
        "_generate_occupation_dialogue",
        "_get_character_social_status",
        "_get_most_notable_demographic"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "logging",
        "random",
        "backend.systems.population.population_service"
      ],
      "dependencies": "{'population'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 51,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "add_population_data_to_context"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_location_population_data",
            "get_occupation_dialogue",
            "get_social_status_dialogue",
            "_get_character_social_status",
            "_get_most_notable_demographic"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_demographic_comment",
            "generate_occupation_comment",
            "_generate_occupation_dialogue"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "DialoguePopulationIntegration"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/tension_war/services/diplomatic_manager.py",
      "lines": 690,
      "classes": [
        "DiplomaticManager"
      ],
      "functions": [
        "__init__",
        "broker_peace",
        "respond_to_peace_brokering",
        "get_peace_brokering_attempt",
        "get_peace_brokering_attempts_by_war",
        "get_peace_brokering_attempts_by_broker",
        "get_peace_brokering_attempts_by_faction",
        "apply_economic_sanctions",
        "lift_economic_sanctions",
        "get_sanction",
        "get_sanctions_between_factions",
        "get_sanctions_by_faction",
        "record_diplomatic_event",
        "get_diplomatic_events",
        "_apply_broker_reputation_bonus",
        "_emit_peace_brokering_event",
        "_emit_sanction_event"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "uuid",
        "random",
        "logging",
        "backend.systems.events.EventDispatcher",
        "models.WarOutcomeType",
        "models.TensionConfig",
        "models.enums.TensionLevel",
        "models.enums.SanctionType",
        "models.enums.PeaceBrokeringStatus",
        "utils.diplomatic_utils.calculate_peace_acceptance_chance",
        "utils.diplomatic_utils.evaluate_terms_favorability",
        "utils.diplomatic_utils.calculate_broker_reputation_bonus",
        "utils.diplomatic_utils.calculate_sanction_impact"
      ],
      "dependencies": "{'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling",
        "Configuration"
      ],
      "complexity_score": 54,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_peace_brokering_attempt",
            "get_peace_brokering_attempts_by_war",
            "get_peace_brokering_attempts_by_broker",
            "get_peace_brokering_attempts_by_faction",
            "get_sanction",
            "get_sanctions_between_factions",
            "get_sanctions_by_faction",
            "get_diplomatic_events"
          ],
          "estimated_lines": 160,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "_apply_broker_reputation_bonus",
            "_emit_peace_brokering_event",
            "_emit_sanction_event"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "DiplomaticManager"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/tension_war/services/peace_manager.py",
      "lines": 675,
      "classes": [
        "PeaceManager"
      ],
      "functions": [
        "__init__",
        "create_peace_offer",
        "evaluate_peace_offer",
        "_apply_peace_terms",
        "get_pending_peace_offers",
        "create_ceasefire",
        "accept_ceasefire",
        "reject_ceasefire",
        "record_ceasefire_violation",
        "broker_peace",
        "respond_to_brokering",
        "_determine_outcome_type_from_terms",
        "_apply_broker_reputation_bonus",
        "_emit_peace_offer_event",
        "_emit_peace_decision_event",
        "_emit_ceasefire_event",
        "_emit_peace_brokering_event"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "uuid",
        "logging",
        "backend.systems.events.EventDispatcher",
        "models.WarOutcomeType",
        "models.PeaceConfig",
        "models.peace.PeaceOffer",
        "models.peace.PeaceBrokering",
        "models.peace.Ceasefire",
        "utils.peace_utils.evaluate_peace_terms",
        "utils.peace_utils.calculate_acceptance_chance",
        "utils.peace_utils.generate_counter_offer"
      ],
      "dependencies": "{'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling",
        "Configuration"
      ],
      "complexity_score": 47,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "create_peace_offer",
            "get_pending_peace_offers",
            "create_ceasefire"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "_apply_broker_reputation_bonus",
            "_emit_peace_offer_event",
            "_emit_peace_decision_event",
            "_emit_ceasefire_event",
            "_emit_peace_brokering_event"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "PeaceManager"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/tension_war/services/war_manager.py",
      "lines": 643,
      "classes": [
        "WarManager"
      ],
      "functions": [
        "__init__",
        "get_war_status",
        "declare_war",
        "get_war",
        "end_war",
        "advance_war_day",
        "_apply_territorial_changes",
        "_apply_resource_transfers",
        "_apply_population_impact",
        "_apply_reputation_changes",
        "_emit_war_declared_event",
        "_emit_war_ended_event",
        "_check_allies_joining_war",
        "_check_scheduled_battles",
        "generate_daily_raids",
        "_check_war_victory_conditions",
        "_prepare_war_end",
        "_calculate_tension_change",
        "_emit_territorial_change_event",
        "_emit_resource_transfer_event",
        "_emit_population_change_event",
        "_emit_reputation_change_event"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "random",
        "math",
        "datetime.datetime",
        "datetime.timedelta",
        "uuid",
        "logging",
        "backend.systems.events.EventDispatcher",
        "models.WarOutcomeType",
        "models.WarConfig",
        "models.war.Battle",
        "models.war.WarOutcome",
        "models.war.WarState",
        "models.war.ScheduledBattle",
        "models.war.CallToArms",
        "utils.war_utils.calculate_war_chances",
        "utils.war_utils.evaluate_battle_outcome",
        "utils.war_utils.calculate_resource_changes",
        "utils.war_utils.calculate_territorial_changes",
        "utils.war_utils.calculate_population_impact",
        "utils.war_utils.calculate_cultural_impact"
      ],
      "dependencies": "{'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling",
        "Configuration"
      ],
      "complexity_score": 58,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_war_status",
            "get_war"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "_apply_population_impact",
            "_apply_reputation_changes",
            "_emit_war_declared_event",
            "_emit_war_ended_event",
            "_emit_territorial_change_event",
            "_emit_resource_transfer_event",
            "_emit_population_change_event",
            "_emit_reputation_change_event"
          ],
          "estimated_lines": 160,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_daily_raids",
            "_calculate_tension_change"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "WarManager"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/faction/faction_facade.py",
      "lines": 639,
      "classes": [
        "FactionFacade"
      ],
      "functions": [
        "__init__",
        "create_faction",
        "get_faction",
        "get_faction_by_name",
        "get_factions",
        "update_faction",
        "delete_faction",
        "set_diplomatic_stance",
        "get_relationship",
        "get_faction_relationships",
        "update_tension",
        "declare_war",
        "make_peace",
        "process_tension_decay",
        "resolve_war_outcome",
        "assign_faction_to_character",
        "get_faction_members",
        "get_character_factions",
        "update_character_loyalty",
        "remove_character_from_faction",
        "calculate_affinity",
        "switch_character_faction",
        "calculate_faction_schism_probability",
        "assign_faction_to_poi",
        "propagate_faction_influence",
        "add_faction_goal"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Tuple",
        "sqlalchemy.orm.Session",
        "datetime.datetime",
        "backend.systems.faction.models.faction.Faction",
        "backend.systems.faction.models.faction.FactionRelationship",
        "backend.systems.faction.models.faction.FactionMembership",
        "backend.systems.faction.models.faction_goal.FactionGoal",
        "backend.systems.faction.schemas.faction_types.FactionType",
        "backend.systems.faction.schemas.faction_types.FactionAlignment",
        "backend.systems.faction.schemas.faction_types.DiplomaticStance",
        "backend.systems.faction.services.consolidated_faction_service.ConsolidatedFactionService",
        "backend.systems.faction.services.consolidated_faction_service.FactionError",
        "backend.systems.faction.services.consolidated_faction_service.FactionNotFoundError",
        "backend.systems.faction.services.consolidated_faction_service.DuplicateFactionError",
        "backend.systems.faction.services.consolidated_faction_service.InvalidFactionOperationError",
        "backend.systems.faction.services.consolidated_relationship_service.ConsolidatedRelationshipService",
        "backend.systems.faction.services.consolidated_membership_service.ConsolidatedMembershipService"
      ],
      "dependencies": "{'sqlalchemy', 'faction'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 46,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "create_faction",
            "get_faction",
            "get_faction_by_name",
            "get_factions",
            "update_faction",
            "delete_faction",
            "get_relationship",
            "get_faction_relationships",
            "update_tension",
            "get_faction_members",
            "get_character_factions",
            "update_character_loyalty"
          ],
          "estimated_lines": 240,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "process_tension_decay",
            "calculate_affinity",
            "calculate_faction_schism_probability"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "assign_faction_to_character",
            "assign_faction_to_poi",
            "propagate_faction_influence",
            "add_faction_goal"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "FactionFacade"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/npc/routers/npc_router.py",
      "lines": 633,
      "classes": [
        "NPCCreate",
        "NPCUpdate",
        "NPCMemoryRequest",
        "NPCRumorRequest",
        "NPCFactionAdjustment",
        "NPCLocationUpdate",
        "NPCLoyaltyUpdate",
        "NPCMotifRequest",
        "GenerateNPCsRequest"
      ],
      "functions": [
        "get_npc_service_from_session"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Union",
        "uuid.UUID",
        "fastapi.APIRouter",
        "fastapi.Path",
        "fastapi.Query",
        "fastapi.HTTPException",
        "fastapi.Depends",
        "fastapi.Body",
        "fastapi.BackgroundTasks",
        "pydantic.BaseModel",
        "pydantic.Field",
        "datetime.datetime",
        "backend.systems.npc.services.npc_service.get_npc_service",
        "backend.systems.npc.services.npc_service.NPCService",
        "backend.systems.shared.database.get_db_session",
        "sqlalchemy.orm.Session"
      ],
      "dependencies": "{'shared', 'sqlalchemy', 'pydantic', 'fastapi', 'npc'}",
      "responsibilities": [
        "Business Logic",
        "API/Routing",
        "Database Operations",
        "Data Models"
      ],
      "complexity_score": 55,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_npc_service_from_session"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "NPCCreate",
            "NPCUpdate",
            "NPCMemoryRequest",
            "NPCRumorRequest",
            "NPCFactionAdjustment",
            "NPCLocationUpdate",
            "NPCLoyaltyUpdate",
            "NPCMotifRequest",
            "GenerateNPCsRequest"
          ],
          "estimated_lines": 270,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/world_state/optimized_worldgen.py",
      "lines": 629,
      "classes": [
        "OptimizedWorldGenerator"
      ],
      "functions": [
        "create_world_generator",
        "__init__",
        "generate_world_map",
        "generate_region",
        "_generate_world_rivers",
        "_find_neighboring_cells",
        "_get_terrain_elevation",
        "_generate_points_of_interest"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "typing.Any",
        "typing.Set",
        "random",
        "math",
        "time",
        "json",
        "numpy",
        "dataclasses.dataclass",
        "dataclasses.field",
        "os",
        "backend.systems.world_state.consolidated_world_models.WorldMap",
        "backend.systems.world_state.consolidated_world_models.Region",
        "backend.systems.world_state.consolidated_world_models.PointOfInterest",
        "backend.systems.world_state.consolidated_world_models.TerrainType",
        "backend.systems.world_state.utils.terrain_generator.TerrainGenerator",
        "backend.systems.world_state.utils.terrain_generator.TerrainConfig",
        "backend.systems.world_state.utils.terrain_generator.NoiseLayer",
        "backend.systems.world_state.utils.terrain_generator.BiomeInfo"
      ],
      "dependencies": "{'world_state'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "File I/O",
        "Configuration"
      ],
      "complexity_score": 55,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "create_world_generator",
            "_find_neighboring_cells",
            "_get_terrain_elevation"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_world_map",
            "generate_region",
            "_generate_world_rivers",
            "_generate_points_of_interest"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "OptimizedWorldGenerator"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/quest/generator.py",
      "lines": 619,
      "classes": [
        "QuestGenerator"
      ],
      "functions": [
        "generate_quest_title",
        "generate_quest_steps",
        "calculate_quest_reward",
        "generate_quest",
        "generate_journal_entry",
        "generate_arc_for_character",
        "generate_quest_from_poi",
        "generate_questline_from_region"
      ],
      "imports": [
        "logging",
        "random",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "datetime.datetime",
        "backend.systems.npc.NPCService",
        "backend.systems.world_state.WorldStateManager",
        "models.Quest",
        "models.QuestStep",
        "motif_integration.QuestMotifIntegration",
        "backend.systems.inventory.service.InventoryService"
      ],
      "dependencies": "{'npc', 'inventory', 'world_state'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 53,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_quest_title",
            "generate_quest_steps",
            "calculate_quest_reward",
            "generate_quest",
            "generate_journal_entry",
            "generate_arc_for_character",
            "generate_quest_from_poi",
            "generate_questline_from_region"
          ],
          "estimated_lines": 160,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "QuestGenerator"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/economy/utils/shop_utils.py",
      "lines": 618,
      "classes": [],
      "functions": [
        "get_shop_inventory",
        "restock_shop",
        "_generate_shop_inventory",
        "_generate_fallback_inventory",
        "_apply_current_pricing",
        "calculate_sale_value",
        "calculate_purchase_value",
        "get_shop_type_from_poi",
        "initialize_shop_metadata",
        "purchase_item_from_shop",
        "sell_item_to_shop"
      ],
      "imports": [
        "logging",
        "typing.Optional",
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "datetime.timedelta",
        "random",
        "backend.systems.poi.models.PointOfInterest",
        "backend.systems.poi.models.POIType",
        "backend.systems.inventory.models.Inventory",
        "backend.systems.inventory.models.Item",
        "backend.systems.inventory.models.InventoryItem",
        "backend.systems.loot.loot_shop.generate_shop_inventory",
        "backend.systems.loot.loot_shop.restock_shop_inventory",
        "backend.systems.loot.loot_shop.get_dynamic_item_price",
        "backend.systems.loot.loot_shop.calculate_base_price",
        "backend.systems.loot.loot_shop.get_region_economic_factors"
      ],
      "dependencies": "{'loot', 'inventory', 'poi'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 49,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_shop_inventory",
            "get_shop_type_from_poi"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "_generate_shop_inventory",
            "_generate_fallback_inventory",
            "calculate_sale_value",
            "calculate_purchase_value"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/poi/services/landmark_service.py",
      "lines": 604,
      "classes": [
        "LandmarkService"
      ],
      "functions": [
        "get_max_landmarks",
        "get_landmarks",
        "add_landmark",
        "remove_landmark",
        "generate_landmark_name",
        "generate_landmark_description",
        "generate_landmark_bonuses",
        "get_specific_landmark_bonus",
        "calculate_landmark_effects",
        "generate_random_landmark",
        "select_rarity",
        "select_weighted_category",
        "apply_landmark_effects"
      ],
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "datetime.datetime",
        "random",
        "uuid",
        "models.PointOfInterest",
        "models.POIType"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 49,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_max_landmarks",
            "get_landmarks",
            "get_specific_landmark_bonus"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_landmark_name",
            "generate_landmark_description",
            "generate_landmark_bonuses",
            "calculate_landmark_effects",
            "generate_random_landmark"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "LandmarkService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/shared/utils/game/motif_utils.py",
      "lines": 589,
      "classes": [
        "Motif",
        "MotifManager"
      ],
      "functions": [
        "calculate_motif_influence",
        "select_motif",
        "apply_motif_to_value",
        "create_motif_influenced_value",
        "__init__",
        "activate",
        "get_current_weight",
        "get_influence_on",
        "to_dict",
        "from_dict",
        "__str__",
        "get_instance",
        "__init__",
        "add_motif",
        "remove_motif",
        "get_motif",
        "activate_motif",
        "get_motifs_by_category",
        "get_motifs_by_tag",
        "select_weighted_motif",
        "get_combined_influence",
        "get_top_influences",
        "to_dict",
        "from_dict"
      ],
      "imports": [
        "logging",
        "random",
        "typing.Dict",
        "typing.List",
        "typing.Set",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "typing.Union",
        "typing.Callable",
        "math"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 56,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_motif_influence"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "create_motif_influenced_value",
            "get_current_weight",
            "get_influence_on",
            "get_instance",
            "get_motif",
            "get_motifs_by_category",
            "get_motifs_by_tag",
            "get_combined_influence",
            "get_top_influences"
          ],
          "estimated_lines": 180,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "Motif",
            "MotifManager"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/quest/api_router.py",
      "lines": 588,
      "classes": [],
      "functions": [],
      "imports": [
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.Body",
        "fastapi.Query",
        "fastapi.Path",
        "logging",
        "models.Quest",
        "models.QuestStep",
        "models.JournalEntry",
        "database.QuestRepository",
        "quest_manager.QuestManager",
        "utils.QuestValidator",
        "backend.systems.auth_user.services.get_current_active_user",
        "backend.systems.auth_user.services.authenticate_user",
        "backend.systems.shared.utils.common.error.ValidationError",
        "backend.systems.shared.utils.common.error.NotFoundError",
        "backend.systems.shared.utils.core.firebase_utils.get_collection"
      ],
      "dependencies": "{'firebase', 'auth_user', 'shared', 'fastapi'}",
      "responsibilities": [
        "Business Logic",
        "API/Routing",
        "Database Operations",
        "Data Models"
      ],
      "complexity_score": 46,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": []
    },
    {
      "path": "systems/magic/utils.py",
      "lines": 583,
      "classes": [],
      "functions": [
        "calculate_spell_power",
        "validate_spell_requirements",
        "generate_effect_description",
        "calculate_spell_difficulty",
        "parse_spell_target_area",
        "calculate_magic_learning_time",
        "format_spell_duration",
        "check_spell_compatibility",
        "can_cast_spell",
        "apply_spell_effect",
        "calculate_spell_duration",
        "calculate_magic_affinity",
        "format_spell_effects",
        "determine_dominant_school",
        "generate_magic_flavor_text",
        "calculate_magical_influence"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "datetime.datetime",
        "models.SpellModel",
        "models.SpellEffect"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Utilities",
        "Database Operations"
      ],
      "complexity_score": 45,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_spell_power",
            "validate_spell_requirements",
            "generate_effect_description",
            "calculate_spell_difficulty",
            "calculate_magic_learning_time",
            "calculate_spell_duration",
            "calculate_magic_affinity",
            "generate_magic_flavor_text",
            "calculate_magical_influence"
          ],
          "estimated_lines": 180,
          "priority": "high"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "parse_spell_target_area"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "utilities.py",
          "responsibility": "Utilities",
          "functions": [
            "format_spell_duration",
            "format_spell_effects"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/region/router.py",
      "lines": 576,
      "classes": [],
      "functions": [
        "get_region_service",
        "update_region",
        "delete_region",
        "get_region_details_with_weather",
        "get_regions_by_continent",
        "list_all_regions",
        "get_region_map",
        "seed_region",
        "generate_region",
        "generate_new_region",
        "log_event_and_notify_npcs",
        "get_questlog",
        "add_quest"
      ],
      "imports": [
        "typing.List",
        "typing.Optional",
        "typing.Dict",
        "typing.Any",
        "typing.Tuple",
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "fastapi.status",
        "fastapi.Depends",
        "fastapi.Body",
        "fastapi.Query",
        "datetime.datetime",
        "json",
        "random",
        "backend.systems.region.models.RegionSchema",
        "backend.systems.region.models.EventSchema",
        "backend.systems.region.models.RegionGenerationSchema",
        "backend.systems.region.models.QuestlogEntrySchema",
        "backend.systems.region.service.region_service",
        "backend.systems.region.service.RegionService",
        "backend.systems.world_state.utils.world_event_utils.log_world_event",
        "backend.systems.character.npc.npc_rumor_utils.sync_event_beliefs"
      ],
      "dependencies": "{'character', 'region', 'fastapi', 'world_state'}",
      "responsibilities": [
        "Business Logic",
        "API/Routing",
        "Database Operations",
        "File I/O"
      ],
      "complexity_score": 52,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_region_service",
            "update_region",
            "delete_region",
            "get_region_details_with_weather",
            "get_regions_by_continent",
            "get_region_map",
            "get_questlog"
          ],
          "estimated_lines": 140,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_region",
            "generate_new_region"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/equipment/identify_item_utils.py",
      "lines": 565,
      "classes": [],
      "functions": [
        "calculate_identification_cost",
        "identify_item",
        "fully_identify_item",
        "is_fully_identified",
        "get_next_identifiable_level",
        "reveal_item_name_and_flavor",
        "gpt_flavor_identify_effect",
        "gpt_flavor_reveal_full_item"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "logging",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.EventBase",
        "events.ItemIdentifiedEvent",
        "events.ItemNameRevealedEvent",
        "events.NarrativeFlavorTextEvent",
        "backend.systems.shared.database.db",
        "backend.systems.economy.models.EconomicMetric",
        "backend.systems.economy.models.MetricType",
        "backend.systems.faction.models.Faction",
        "backend.systems.narrative.utils.gpt_flavor_identify_effect",
        "backend.systems.narrative.utils.gpt_flavor_reveal_full_item"
      ],
      "dependencies": "{'shared', 'economy', 'narrative', 'events', 'faction'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling"
      ],
      "complexity_score": 45,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_identification_cost"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_next_identifiable_level"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/dialogue/analytics_integration.py",
      "lines": 564,
      "classes": [
        "DialogueAnalyticsIntegration"
      ],
      "functions": [
        "__init__",
        "log_dialogue_event",
        "track_dialogue_topic",
        "log_player_response_choice",
        "track_character_interaction_frequency",
        "get_dialogue_metrics",
        "record_dialogue_quality_rating",
        "_update_dialogue_metrics"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Set",
        "logging",
        "datetime.datetime",
        "json",
        "os",
        "asyncio",
        "backend.systems.analytics.AnalyticsService",
        "backend.systems.analytics.AnalyticsEventType"
      ],
      "dependencies": "{'analytics'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "File I/O",
        "Configuration"
      ],
      "complexity_score": 52,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "track_character_interaction_frequency"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_dialogue_metrics",
            "_update_dialogue_metrics"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "DialogueAnalyticsIntegration"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/inventory/schemas.py",
      "lines": 541,
      "classes": [
        "ItemCategoryEnum",
        "ItemBase",
        "ItemCreate",
        "ItemUpdate",
        "ItemResponse",
        "InventoryItemBase",
        "InventoryItemCreate",
        "InventoryItemUpdate",
        "InventoryItemResponse",
        "InventoryBase",
        "InventoryCreate",
        "InventoryUpdate",
        "InventoryResponse",
        "InventoryDetailResponse",
        "InventoryStats",
        "InventoryTransferRequest",
        "ValidationResult",
        "ValidationResponse",
        "InventoryFilterParams",
        "PaginationParams",
        "PaginatedInventoryResponse",
        "BulkItemTransferRequest",
        "InventoryBackupData"
      ],
      "functions": [
        "validate_max_stack_size",
        "validate_equipment_slot",
        "validate_quantity",
        "validate_quantity",
        "validate_capacity",
        "validate_weight_limit",
        "validate_capacity",
        "validate_weight_limit",
        "validate_quantity",
        "validate_different_inventories",
        "is_error",
        "success",
        "error",
        "calculate_pages",
        "validate_different_inventories",
        "validate_items"
      ],
      "imports": [
        "typing.List",
        "typing.Dict",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "pydantic.BaseModel",
        "pydantic.Field",
        "pydantic.field_validator",
        "pydantic.model_validator",
        "pydantic.ConfigDict",
        "pydantic_core.ValidationError",
        "datetime.datetime",
        "enum.Enum"
      ],
      "dependencies": "{'pydantic'}",
      "responsibilities": [
        "Business Logic",
        "Data Models",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 57,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "validate_max_stack_size",
            "validate_equipment_slot",
            "validate_quantity",
            "validate_quantity",
            "validate_capacity",
            "validate_weight_limit",
            "validate_capacity",
            "validate_weight_limit",
            "validate_quantity",
            "validate_different_inventories",
            "calculate_pages",
            "validate_different_inventories",
            "validate_items"
          ],
          "estimated_lines": 260,
          "priority": "high"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "ItemCategoryEnum",
            "ItemBase",
            "ItemCreate",
            "ItemUpdate",
            "ItemResponse",
            "InventoryItemBase",
            "InventoryItemCreate",
            "InventoryItemUpdate",
            "InventoryItemResponse",
            "InventoryBase",
            "InventoryCreate",
            "InventoryUpdate",
            "InventoryResponse",
            "InventoryDetailResponse",
            "InventoryStats",
            "InventoryTransferRequest",
            "ValidationResult",
            "ValidationResponse",
            "InventoryFilterParams",
            "PaginationParams",
            "PaginatedInventoryResponse",
            "BulkItemTransferRequest",
            "InventoryBackupData"
          ],
          "estimated_lines": 690,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/character/core/character_utils.py",
      "lines": 540,
      "classes": [],
      "functions": [
        "generate_character_stats",
        "generate_character_skills",
        "validate_character_data",
        "validate_character_stats",
        "calculate_level",
        "calculate_ability_modifier",
        "calculate_hit_points",
        "calculate_mana_points",
        "calculate_proficiency_bonus",
        "calculate_saving_throw",
        "calculate_skill_bonus",
        "roll_dice",
        "has_spellcasting",
        "apply_level_up_benefits",
        "calculate_xp_for_level",
        "generate_random_name",
        "parse_coords",
        "perform_skill_check",
        "calculate_dr"
      ],
      "imports": [
        "math",
        "random",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "typing.List"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Utilities"
      ],
      "complexity_score": 46,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_character_stats",
            "generate_character_skills",
            "validate_character_data",
            "validate_character_stats",
            "calculate_level",
            "calculate_ability_modifier",
            "calculate_hit_points",
            "calculate_mana_points",
            "calculate_proficiency_bonus",
            "calculate_saving_throw",
            "calculate_skill_bonus",
            "calculate_xp_for_level",
            "generate_random_name",
            "calculate_dr"
          ],
          "estimated_lines": 280,
          "priority": "high"
        },
        {
          "module_name": "utilities.py",
          "responsibility": "Utilities",
          "functions": [
            "parse_coords"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_state/examples/integration_example.py",
      "lines": 519,
      "classes": [],
      "functions": [
        "print_section",
        "print_json",
        "setup_example_state",
        "direct_api_examples",
        "event_based_examples",
        "bulk_operations_example",
        "main"
      ],
      "imports": [
        "time",
        "json",
        "sys",
        "os",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "backend.systems.world_state.main.initialize_world_state_system",
        "backend.systems.world_state.main.WorldStateSystem",
        "backend.systems.world_state.StateCategory",
        "backend.systems.world_state.WorldRegion",
        "backend.systems.events.EventDispatcher",
        "backend.systems.world_state.integration.event_integration.StateChangeEvent",
        "backend.systems.world_state.integration.event_integration.StateQueryEvent",
        "backend.systems.world_state.integration.event_integration.StateTimelineEvent",
        "backend.systems.world_state.features.derivative_state.DerivedStateRule",
        "backend.systems.world_state.features.derivative_state.create_formula_calculator",
        "traceback"
      ],
      "dependencies": "{'events', 'world_state'}",
      "responsibilities": [
        "Event Handling",
        "Database Operations",
        "File I/O",
        "Configuration"
      ],
      "complexity_score": 35,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": []
    },
    {
      "path": "systems/equipment/durability_utils.py",
      "lines": 515,
      "classes": [],
      "functions": [
        "get_durability_status",
        "calculate_combat_damage",
        "calculate_wear_damage",
        "apply_durability_damage",
        "calculate_repair_cost",
        "repair_equipment",
        "adjust_stats_for_durability",
        "get_durability_history"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "logging",
        "random",
        "sqlalchemy.orm.Session",
        "models.Equipment",
        "models.EquipmentDurabilityLog",
        "events.EquipmentDamagedEvent",
        "events.EquipmentRepairedEvent",
        "events.EquipmentBrokenEvent",
        "events.EquipmentRepairedFromBrokenEvent",
        "backend.systems.events.EventDispatcher",
        "backend.systems.events.EventBase",
        "backend.systems.shared.database.db",
        "backend.systems.inventory.models.Item",
        "backend.systems.inventory.models.InventoryItem"
      ],
      "dependencies": "{'sqlalchemy', 'inventory', 'events', 'shared'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling",
        "Configuration"
      ],
      "complexity_score": 38,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_durability_status",
            "get_durability_history"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_combat_damage",
            "calculate_wear_damage",
            "calculate_repair_cost"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/economy/services/market_service.py",
      "lines": 512,
      "classes": [
        "MarketService"
      ],
      "functions": [
        "__init__",
        "get_market",
        "get_markets_by_region",
        "create_market",
        "update_market",
        "delete_market",
        "calculate_price",
        "_calculate_supply_demand_modifier",
        "update_market_conditions",
        "calculate_price_index",
        "clear_cache"
      ],
      "imports": [
        "os",
        "json",
        "logging",
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Union",
        "datetime.datetime",
        "random",
        "sqlalchemy.orm.Session",
        "backend.systems.economy.models.Market",
        "backend.systems.economy.models.MarketData",
        "backend.systems.economy.models.Resource",
        "backend.systems.economy.services.resource_service.ResourceService",
        "logging"
      ],
      "dependencies": "{'sqlalchemy', 'economy'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 57,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_market",
            "get_markets_by_region",
            "create_market",
            "update_market",
            "delete_market",
            "update_market_conditions"
          ],
          "estimated_lines": 120,
          "priority": "high"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_price",
            "_calculate_supply_demand_modifier",
            "calculate_price_index"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "MarketService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/magic/router.py",
      "lines": 506,
      "classes": [],
      "functions": [
        "create_magic_ability",
        "list_magic_abilities",
        "get_magic_ability",
        "update_magic_ability",
        "delete_magic_ability",
        "create_spell",
        "list_spells",
        "search_spells",
        "get_spell",
        "update_spell",
        "delete_spell",
        "cast_spell",
        "create_spellbook",
        "list_spellbooks",
        "get_spellbook",
        "get_character_spellbook",
        "add_spell_to_spellbook",
        "remove_spell_from_spellbook",
        "list_spell_effects",
        "get_spell_effect",
        "delete_spell_effect",
        "dispel_spell_effect",
        "modify_effect_duration",
        "list_magical_influences",
        "get_magical_influence",
        "get_spellbook_by_owner",
        "get_effects_by_target",
        "analyze_location_magic",
        "get_character_magic_summary",
        "process_magic_tick"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.List",
        "typing.Optional",
        "fastapi.APIRouter",
        "fastapi.HTTPException",
        "fastapi.Depends",
        "fastapi.Query",
        "fastapi.Path",
        "fastapi.Body",
        "sqlalchemy.orm.Session",
        "starlette.status",
        "backend.systems.shared.database.get_db_session",
        "backend.systems.auth_user.services.get_current_active_user",
        "schemas.MagicAbilityCreate",
        "schemas.MagicAbilityUpdate",
        "schemas.MagicAbilityResponse",
        "schemas.SpellCreate",
        "schemas.SpellUpdate",
        "schemas.SpellResponse",
        "schemas.SpellbookCreate",
        "schemas.SpellbookResponse",
        "schemas.SpellEffectCreate",
        "schemas.SpellEffectResponse",
        "schemas.CastSpellRequest",
        "schemas.MagicalInfluenceResponse",
        "schemas.MagicSchoolEnum",
        "schemas.EffectTypeEnum",
        "services.MagicService",
        "services.SpellService",
        "services.SpellbookService",
        "services.SpellEffectService"
      ],
      "dependencies": "{'sqlalchemy', 'auth_user', 'shared', 'fastapi'}",
      "responsibilities": [
        "Business Logic",
        "API/Routing",
        "Database Operations"
      ],
      "complexity_score": 53,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "create_magic_ability",
            "get_magic_ability",
            "update_magic_ability",
            "delete_magic_ability",
            "create_spell",
            "get_spell",
            "update_spell",
            "delete_spell",
            "create_spellbook",
            "get_spellbook",
            "get_character_spellbook",
            "get_spell_effect",
            "delete_spell_effect",
            "get_magical_influence",
            "get_spellbook_by_owner",
            "get_effects_by_target",
            "get_character_magic_summary"
          ],
          "estimated_lines": 340,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "analyze_location_magic"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "process_magic_tick"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/tension_war/services/proxy_war_manager.py",
      "lines": 502,
      "classes": [
        "ProxyWarManager"
      ],
      "functions": [
        "__init__",
        "start_proxy_war",
        "get_proxy_war",
        "get_proxy_wars_by_sponsor",
        "get_proxy_wars_targeting_faction",
        "get_proxy_wars_in_region",
        "update_funding_level",
        "check_discovery",
        "end_proxy_war",
        "record_proxy_war_event",
        "get_proxy_wars",
        "_emit_proxy_war_event"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "uuid",
        "random",
        "logging",
        "backend.systems.events.EventDispatcher",
        "models.ProxyWarConfig",
        "models.enums.ProxyWarStatus",
        "utils.proxy_war_utils.calculate_discovery_risk",
        "utils.proxy_war_utils.calculate_proxy_war_effectiveness",
        "utils.proxy_war_utils.generate_proxy_group_name",
        "utils.proxy_war_utils.evaluate_proxy_war_impact"
      ],
      "dependencies": "{'events'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Event Handling",
        "Configuration"
      ],
      "complexity_score": 46,
      "refactoring_priority": "MEDIUM",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_proxy_war",
            "get_proxy_wars_by_sponsor",
            "get_proxy_wars_targeting_faction",
            "get_proxy_wars_in_region",
            "update_funding_level",
            "get_proxy_wars"
          ],
          "estimated_lines": 120,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "_emit_proxy_war_event"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "ProxyWarManager"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/diplomacy/router.py",
      "lines": 831,
      "classes": [],
      "functions": [
        "get_diplomacy_service",
        "get_tension_service"
      ],
      "imports": [
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "uuid.UUID",
        "fastapi.APIRouter",
        "fastapi.Depends",
        "fastapi.HTTPException",
        "fastapi.Query",
        "fastapi.Body",
        "backend.systems.diplomacy.models.DiplomaticEventType",
        "backend.systems.diplomacy.models.DiplomaticIncidentType",
        "backend.systems.diplomacy.models.DiplomaticStatus",
        "backend.systems.diplomacy.models.SanctionStatus",
        "backend.systems.diplomacy.models.SanctionType",
        "backend.systems.diplomacy.models.TreatyType",
        "backend.systems.diplomacy.models.TreatyViolationType",
        "backend.systems.diplomacy.models.UltimatumStatus",
        "backend.systems.diplomacy.schemas.DiplomaticEventCreate",
        "backend.systems.diplomacy.schemas.DiplomaticEventSchema",
        "backend.systems.diplomacy.schemas.DiplomaticIncidentCreate",
        "backend.systems.diplomacy.schemas.DiplomaticIncidentSchema",
        "backend.systems.diplomacy.schemas.DiplomaticIncidentUpdate",
        "backend.systems.diplomacy.schemas.FactionRelationshipSchema",
        "backend.systems.diplomacy.schemas.NegotiationCreate",
        "backend.systems.diplomacy.schemas.NegotiationOfferCreate",
        "backend.systems.diplomacy.schemas.NegotiationSchema",
        "backend.systems.diplomacy.schemas.NegotiationUpdate",
        "backend.systems.diplomacy.schemas.SanctionCreate",
        "backend.systems.diplomacy.schemas.SanctionSchema",
        "backend.systems.diplomacy.schemas.SanctionUpdate",
        "backend.systems.diplomacy.schemas.SanctionViolationRecord",
        "backend.systems.diplomacy.schemas.TreatyCreate",
        "backend.systems.diplomacy.schemas.TreatySchema",
        "backend.systems.diplomacy.schemas.TreatyUpdate",
        "backend.systems.diplomacy.schemas.TreatyViolationCreate",
        "backend.systems.diplomacy.schemas.TreatyViolationSchema",
        "backend.systems.diplomacy.schemas.UltimatumCreate",
        "backend.systems.diplomacy.schemas.UltimatumSchema",
        "backend.systems.diplomacy.schemas.UltimatumUpdate",
        "backend.systems.diplomacy.services.DiplomacyService",
        "backend.systems.diplomacy.services.TensionService"
      ],
      "dependencies": "{'diplomacy', 'fastapi'}",
      "responsibilities": [
        "API/Routing",
        "Database Operations"
      ],
      "complexity_score": 32,
      "refactoring_priority": "LOW",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_diplomacy_service",
            "get_tension_service"
          ],
          "estimated_lines": 40,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/tension_war/utils/peace_utils.py",
      "lines": 821,
      "classes": [],
      "functions": [
        "evaluate_peace_offer",
        "calculate_acceptance_chance",
        "generate_peace_terms",
        "enforce_peace_treaty",
        "evaluate_ceasefire_violations",
        "evaluate_peace_terms",
        "generate_counter_offer"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "datetime.timedelta",
        "random",
        "models.PeaceConfig",
        "models.WarOutcomeType",
        "models.TensionLevel",
        "models.PeaceConfig",
        "models.PeaceConfig"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Configuration"
      ],
      "complexity_score": 40,
      "refactoring_priority": "LOW",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_acceptance_chance",
            "generate_peace_terms",
            "generate_counter_offer"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/tension_war/utils/proxy_war_utils.py",
      "lines": 791,
      "classes": [],
      "functions": [
        "calculate_proxy_war_success_chance",
        "simulate_proxy_war",
        "calculate_proxy_war_cost",
        "evaluate_proxy_war_target",
        "calculate_discovery_risk",
        "calculate_proxy_war_effectiveness",
        "generate_proxy_group_name",
        "evaluate_proxy_war_impact"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "datetime.timedelta",
        "random",
        "models.ProxyWarConfig",
        "models.ProxyWarOutcomeType",
        "random"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Database Operations",
        "Configuration"
      ],
      "complexity_score": 32,
      "refactoring_priority": "LOW",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_proxy_war_success_chance",
            "calculate_proxy_war_cost",
            "calculate_discovery_risk",
            "calculate_proxy_war_effectiveness",
            "generate_proxy_group_name"
          ],
          "estimated_lines": 100,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/world_generation/resource_utils.py",
      "lines": 724,
      "classes": [],
      "functions": [
        "generate_resource_name",
        "determine_resource_value",
        "generate_resource",
        "generate_resources_for_tile",
        "assign_resources_to_region",
        "generate_special_resource_clusters"
      ],
      "imports": [
        "random",
        "math",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Set",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Callable",
        "backend.systems.world_generation.models.BiomeType",
        "backend.systems.world_generation.models.ResourceType",
        "backend.systems.world_generation.models.Resource"
      ],
      "dependencies": "{'world_generation'}",
      "responsibilities": [
        "Business Logic",
        "Configuration"
      ],
      "complexity_score": 33,
      "refactoring_priority": "LOW",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "generate_resource_name",
            "generate_resource",
            "generate_resources_for_tile",
            "generate_special_resource_clusters"
          ],
          "estimated_lines": 80,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/tension_war/utils/war_utils.py",
      "lines": 686,
      "classes": [],
      "functions": [
        "calculate_disputed_regions",
        "calculate_war_chances",
        "evaluate_battle_outcome",
        "calculate_resource_changes",
        "simulate_war",
        "resolve_war",
        "calculate_territorial_changes",
        "calculate_population_impact",
        "calculate_cultural_impact"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime",
        "datetime.timedelta",
        "random",
        "models.WarConfig",
        "models.WarOutcomeType",
        "models.TensionLevel"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Configuration"
      ],
      "complexity_score": 37,
      "refactoring_priority": "LOW",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_disputed_regions",
            "calculate_war_chances",
            "calculate_resource_changes",
            "calculate_territorial_changes",
            "calculate_population_impact",
            "calculate_cultural_impact"
          ],
          "estimated_lines": 120,
          "priority": "high"
        }
      ]
    },
    {
      "path": "systems/faction/services/consolidated_membership_service.py",
      "lines": 548,
      "classes": [
        "ConsolidatedMembershipService"
      ],
      "functions": [
        "assign_faction_to_character",
        "get_faction_members",
        "get_character_factions",
        "update_character_loyalty",
        "remove_character_from_faction",
        "calculate_faction_schism_probability",
        "switch_faction"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "typing.Tuple",
        "datetime.datetime",
        "logging",
        "random",
        "sqlalchemy.orm.Session",
        "backend.systems.faction.models.faction.Faction",
        "backend.systems.faction.models.faction.FactionMembership",
        "backend.systems.faction.schemas.faction_types.FactionType",
        "backend.systems.faction.services.consolidated_faction_service.FactionError",
        "backend.systems.faction.services.consolidated_faction_service.FactionNotFoundError",
        "backend.systems.faction.services.consolidated_faction_service.MembershipNotFoundError"
      ],
      "dependencies": "{'sqlalchemy', 'faction'}",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 35,
      "refactoring_priority": "LOW",
      "suggested_modules": [
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "assign_faction_to_character"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_faction_members",
            "get_character_factions",
            "update_character_loyalty"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_faction_schism_probability"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "ConsolidatedMembershipService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/poi/services/poi_state_service.py",
      "lines": 525,
      "classes": [
        "POIStateService"
      ],
      "functions": [
        "get_state_info",
        "update_population",
        "transition_state",
        "evaluate_state",
        "apply_war_damage",
        "update_interaction_type"
      ],
      "imports": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "typing.List",
        "datetime.datetime",
        "backend.systems.events.EventDispatcher",
        "backend.systems.poi.events.POIStateChanged",
        "backend.systems.poi.events.POIInteractionTypeChanged",
        "models.PointOfInterest",
        "models.POIState",
        "models.POIInteractionType"
      ],
      "dependencies": "{'poi', 'pydantic', 'events'}",
      "responsibilities": [
        "Event Handling",
        "Database Operations"
      ],
      "complexity_score": 36,
      "refactoring_priority": "LOW",
      "suggested_modules": [
        {
          "module_name": "database_operations.py",
          "responsibility": "Database Operations",
          "functions": [
            "get_state_info",
            "update_population",
            "update_interaction_type"
          ],
          "estimated_lines": 60,
          "priority": "medium"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "transition_state"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        },
        {
          "module_name": "models.py",
          "responsibility": "Data Models",
          "functions": [],
          "classes": [
            "POIStateService"
          ],
          "estimated_lines": 30,
          "priority": "medium"
        }
      ]
    },
    {
      "path": "systems/tension_war/utils/diplomatic_utils.py",
      "lines": 503,
      "classes": [],
      "functions": [
        "calculate_diplomatic_options",
        "evaluate_relation_changes",
        "calculate_sanction_effects",
        "generate_diplomatic_events",
        "evaluate_embassy_status",
        "calculate_peace_acceptance_chance",
        "evaluate_terms_favorability",
        "calculate_broker_reputation_bonus",
        "calculate_sanction_impact"
      ],
      "imports": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "datetime.datetime"
      ],
      "dependencies": "set()",
      "responsibilities": [
        "Business Logic",
        "Database Operations"
      ],
      "complexity_score": 31,
      "refactoring_priority": "LOW",
      "suggested_modules": [
        {
          "module_name": "business_logic.py",
          "responsibility": "Business Logic",
          "functions": [
            "calculate_diplomatic_options",
            "calculate_sanction_effects",
            "generate_diplomatic_events",
            "calculate_peace_acceptance_chance",
            "calculate_broker_reputation_bonus",
            "calculate_sanction_impact"
          ],
          "estimated_lines": 120,
          "priority": "high"
        },
        {
          "module_name": "event_handling.py",
          "responsibility": "Event Handling",
          "functions": [
            "evaluate_relation_changes"
          ],
          "estimated_lines": 20,
          "priority": "medium"
        }
      ]
    }
  ],
  "refactoring_plan": {
    "target_files": [
      {
        "path": "systems/combat/combat_class.py",
        "lines": 2347,
        "classes": [
          "Combat"
        ],
        "functions": [
          "__init__",
          "_initialize_character_positions",
          "_on_turn_start",
          "_on_turn_end",
          "start_combat",
          "_initialize_turn_queue",
          "_calculate_initiative",
          "_calculate_initiative_for_character",
          "next_turn",
          "take_action",
          "_effect_to_dict",
          "_dict_to_effect",
          "_character_to_dict",
          "serialize",
          "deserialize",
          "to_json",
          "from_json",
          "save_to_file",
          "load_from_file",
          "pause_combat",
          "resume_combat",
          "handle_state_transition",
          "get_state_history",
          "undo_last_action",
          "apply_effect",
          "remove_effect",
          "calculate_damage",
          "apply_damage",
          "apply_healing",
          "get_available_actions",
          "get_combat_state",
          "add_character",
          "remove_character",
          "end_combat",
          "handle_death",
          "delay_turn",
          "move_character",
          "recompute_initiative",
          "get_effect_types",
          "get_character_effects",
          "clear_character_effects",
          "use_movement",
          "ready_action",
          "check_readied_actions",
          "register_reaction_trigger",
          "trigger_reaction",
          "get_available_reactions",
          "process_turn_phase",
          "coordinate_subsystems",
          "handle_status_effects",
          "register_system_hooks",
          "execute_simultaneous_actions",
          "toggle_debug_mode",
          "get_visible_entities",
          "execute_perception_check",
          "safe_getattr"
        ],
        "imports": [
          "logging",
          "random",
          "time",
          "uuid",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Set",
          "typing.Tuple",
          "typing.Union",
          "typing.Callable",
          "backend.systems.combat.combat_state_class.CombatState",
          "backend.systems.combat.turn_queue.TurnQueue",
          "backend.systems.combat.unified_effects.EffectPipeline",
          "backend.systems.combat.unified_effects.CombatEffect",
          "backend.systems.combat.object_pool.combat_pool_manager",
          "backend.systems.combat.action_system.action_system",
          "backend.systems.combat.action_system.ActionResult",
          "backend.systems.combat.action_system.ActionType",
          "backend.systems.combat.combat_area.create_combat_area",
          "backend.systems.combat.combat_area.CombatArea",
          "backend.systems.combat.combat_area.Position",
          "backend.systems.combat.fog_of_war.create_fog_of_war",
          "backend.systems.combat.fog_of_war.FogOfWar",
          "backend.systems.combat.fog_of_war.VisibilityStatus",
          "backend.systems.combat.combat_animation_system.combat_animation_system",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.CombatEvent",
          "backend.systems.combat.effect_visualizer.effect_visualizer",
          "backend.systems.combat.combat_debug_interface.combat_debug_interface",
          "json",
          "json",
          "unified_effects.CombatEffect",
          "unified_effects.EffectType",
          "unified_effects.EffectStackingBehavior",
          "unified_effects.BuffEffect",
          "unified_effects.DebuffEffect",
          "unified_effects.DamageOverTimeEffect",
          "unified_effects.HealOverTimeEffect",
          "unified_effects.ConditionEffect",
          "unified_effects.ResistanceEffect",
          "unified_effects.VulnerabilityEffect",
          "unified_effects.ImmunityEffect",
          "combat_state_class.CombatState"
        ],
        "dependencies": "{'combat', 'events'}",
        "responsibilities": [
          "Configuration",
          "Database Operations",
          "Event Handling",
          "Business Logic",
          "File I/O"
        ],
        "complexity_score": 100,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "_on_turn_start",
              "_on_turn_end",
              "register_reaction_trigger"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_calculate_initiative",
              "_calculate_initiative_for_character",
              "handle_state_transition",
              "calculate_damage",
              "handle_death",
              "process_turn_phase",
              "handle_status_effects",
              "execute_simultaneous_actions",
              "execute_perception_check"
            ],
            "estimated_lines": 180,
            "priority": "high"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "save_to_file",
              "load_from_file",
              "get_state_history",
              "get_available_actions",
              "get_combat_state",
              "get_effect_types",
              "get_character_effects",
              "get_available_reactions",
              "get_visible_entities"
            ],
            "estimated_lines": 180,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "Combat"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/diplomacy/services.py",
        "lines": 2226,
        "classes": [
          "TensionService",
          "DiplomacyService",
          "TensionChangeEvent",
          "StatusChangeEvent"
        ],
        "functions": [
          "__init__",
          "get_faction_relationship",
          "get_faction_relationships",
          "update_faction_tension",
          "set_diplomatic_status",
          "are_at_war",
          "are_allied",
          "check_war_threshold",
          "__init__",
          "create_treaty",
          "_update_faction_relationships_for_treaty",
          "_create_treaty_event",
          "get_treaty",
          "expire_treaty",
          "_update_relationships_for_expired_treaty",
          "list_treaties",
          "start_negotiation",
          "_create_negotiation_event",
          "_update_relationships_for_negotiation",
          "get_negotiation",
          "make_offer",
          "accept_offer",
          "reject_offer",
          "_update_relationships_for_completed_negotiation",
          "get_faction_relationship",
          "get_faction_relationships",
          "update_faction_tension",
          "set_diplomatic_status",
          "are_at_war",
          "are_allied",
          "has_treaty_of_type",
          "report_treaty_violation",
          "acknowledge_violation",
          "resolve_violation",
          "get_treaty_violations",
          "check_treaty_compliance",
          "enforce_treaties_automatically",
          "create_diplomatic_incident",
          "get_diplomatic_incident",
          "update_diplomatic_incident",
          "list_diplomatic_incidents",
          "resolve_diplomatic_incident",
          "notify_treaty_breach",
          "create_ultimatum",
          "get_ultimatum",
          "update_ultimatum",
          "list_ultimatums",
          "respond_to_ultimatum",
          "check_expired_ultimatums",
          "_handle_accepted_ultimatum",
          "_handle_rejected_ultimatum",
          "create_sanction",
          "get_sanction",
          "update_sanction",
          "lift_sanction",
          "list_sanctions",
          "record_sanction_violation",
          "check_expired_sanctions",
          "create_diplomatic_event",
          "add_negotiation_offer",
          "__init__",
          "__init__"
        ],
        "imports": [
          "datetime.datetime",
          "datetime.timedelta",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Tuple",
          "typing.Union",
          "uuid.UUID",
          "uuid.uuid4",
          "logging",
          "backend.systems.diplomacy.models.DiplomaticEvent",
          "backend.systems.diplomacy.models.DiplomaticEventType",
          "backend.systems.diplomacy.models.DiplomaticStatus",
          "backend.systems.diplomacy.models.Negotiation",
          "backend.systems.diplomacy.models.NegotiationOffer",
          "backend.systems.diplomacy.models.NegotiationStatus",
          "backend.systems.diplomacy.models.Treaty",
          "backend.systems.diplomacy.models.TreatyType",
          "backend.systems.diplomacy.models.TreatyViolation",
          "backend.systems.diplomacy.models.TreatyViolationType",
          "backend.systems.diplomacy.models.DiplomaticIncident",
          "backend.systems.diplomacy.models.DiplomaticIncidentType",
          "backend.systems.diplomacy.models.DiplomaticIncidentSeverity",
          "backend.systems.diplomacy.models.Ultimatum",
          "backend.systems.diplomacy.models.UltimatumStatus",
          "backend.systems.diplomacy.models.Sanction",
          "backend.systems.diplomacy.models.SanctionType",
          "backend.systems.diplomacy.models.SanctionStatus",
          "backend.systems.diplomacy.repository.DiplomacyRepository",
          "backend.systems.events.event_dispatcher.EventDispatcher",
          "logging"
        ],
        "dependencies": "{'diplomacy', 'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling",
          "Configuration"
        ],
        "complexity_score": 100,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_faction_relationship",
              "get_faction_relationships",
              "update_faction_tension",
              "create_treaty",
              "_update_faction_relationships_for_treaty",
              "_create_treaty_event",
              "get_treaty",
              "_update_relationships_for_expired_treaty",
              "_create_negotiation_event",
              "_update_relationships_for_negotiation",
              "get_negotiation",
              "_update_relationships_for_completed_negotiation",
              "get_faction_relationship",
              "get_faction_relationships",
              "update_faction_tension",
              "get_treaty_violations",
              "create_diplomatic_incident",
              "get_diplomatic_incident",
              "update_diplomatic_incident",
              "create_ultimatum",
              "get_ultimatum",
              "update_ultimatum",
              "create_sanction",
              "get_sanction",
              "update_sanction",
              "create_diplomatic_event"
            ],
            "estimated_lines": 520,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_handle_accepted_ultimatum",
              "_handle_rejected_ultimatum"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "record_sanction_violation",
              "add_negotiation_offer"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "TensionService",
              "DiplomacyService",
              "TensionChangeEvent",
              "StatusChangeEvent"
            ],
            "estimated_lines": 120,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/motif/consolidated_manager.py",
        "lines": 2130,
        "classes": [
          "MotifManager",
          "MotifCreatedEvent",
          "MotifTriggeredEvent",
          "MotifStrengthChangedEvent",
          "StorageManager"
        ],
        "functions": [
          "get_instance",
          "__init__",
          "_register_event_handlers",
          "stop_background_tasks",
          "register_event_listener",
          "unregister_event_listener",
          "roll_chaos_event",
          "_on_world_created",
          "_on_world_deleted",
          "_should_use_cache",
          "_invalidate_cache",
          "get_motif_patterns",
          "record_motif_interaction",
          "get_regional_motifs",
          "get_global_motifs",
          "get_instance",
          "save",
          "load"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Optional",
          "typing.Union",
          "typing.Any",
          "typing.Tuple",
          "typing.Set",
          "datetime.datetime",
          "datetime.timedelta",
          "logging",
          "random",
          "asyncio",
          "pathlib.Path",
          "uuid.uuid4",
          "math",
          "models.Motif",
          "models.MotifCreate",
          "models.MotifUpdate",
          "models.MotifFilter",
          "models.MotifScope",
          "models.MotifLifecycle",
          "models.MotifCategory",
          "models.MotifEffect",
          "models.LocationInfo",
          "models.Vector2",
          "models.MotifTriggerContext",
          "service.MotifService",
          "repository.MotifRepository",
          "utils.generate_motif_name",
          "utils.generate_motif_description",
          "utils.estimate_motif_compatibility",
          "utils.generate_realistic_duration",
          "utils.motif_to_narrative_context",
          "utils.calculate_motif_spread",
          "utils.roll_chaos_event",
          "utils.NARRATIVE_CHAOS_TABLE",
          "utils.detect_motif_conflicts",
          "utils.get_compatible_motifs",
          "events.event_dispatcher.EventDispatcher",
          "events.event_types.MotifCreatedEvent",
          "events.event_types.MotifTriggeredEvent",
          "events.event_types.MotifStrengthChangedEvent",
          "backend.systems.storage.storage_service.StorageService",
          "events.event_base.EventBase",
          "collections.Counter",
          "random",
          "uuid",
          "datetime.datetime",
          "random",
          "uuid",
          "datetime.datetime",
          "datetime.timedelta",
          "uuid",
          "datetime.datetime",
          "collections.Counter",
          "models.Motif",
          "models.MotifCategory",
          "models.MotifScope",
          "models.MotifLifecycle",
          "models.LocationInfo",
          "models.Motif",
          "models.MotifCategory",
          "models.MotifScope",
          "models.MotifLifecycle",
          "models.MotifCategory",
          "random",
          "models.MotifCategory",
          "random"
        ],
        "dependencies": "{'storage'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling",
          "Configuration"
        ],
        "complexity_score": 100,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_instance",
              "get_motif_patterns",
              "get_regional_motifs",
              "get_global_motifs",
              "get_instance"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "_on_world_created",
              "_on_world_deleted"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_invalidate_cache"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "MotifManager",
              "MotifCreatedEvent",
              "MotifTriggeredEvent",
              "MotifStrengthChangedEvent",
              "StorageManager"
            ],
            "estimated_lines": 150,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/analytics/services/analytics_service.py",
        "lines": 2004,
        "classes": [
          "AnalyticsEventType",
          "AnalyticsService"
        ],
        "functions": [
          "get_analytics_service",
          "get_all",
          "__new__",
          "__init__",
          "storage_path",
          "storage_path",
          "_ensure_async_components",
          "get_instance",
          "register_with_dispatcher",
          "_map_event_to_analytics_type",
          "log_event",
          "queue_track_event",
          "_get_event_type_from_category_action",
          "_store_event_sync",
          "generate_dataset",
          "_generate_dataset_sync",
          "get_event_directory",
          "_start_worker",
          "get_analytics_middleware",
          "_queue_event_safely",
          "_event_matches_filters",
          "get_event_file_path",
          "_get_event_file_path",
          "_append_to_file_sync",
          "analytics_middleware",
          "analytics_middleware",
          "analytics_middleware"
        ],
        "imports": [
          "logging",
          "json",
          "datetime.datetime",
          "datetime.timedelta",
          "os",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Type",
          "typing.Union",
          "typing.Callable",
          "typing.Awaitable",
          "pathlib.Path",
          "asyncio",
          "unittest.mock.MagicMock",
          "inspect",
          "unittest.mock",
          "asyncio.Task",
          "aiofiles",
          "builtins",
          "backend.systems.events.EventBase",
          "backend.systems.events.EventType",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.get_dispatcher",
          "backend.systems.events.SystemEvent",
          "backend.systems.events.GameEvent",
          "backend.systems.events.CharacterEvent",
          "backend.systems.events.FactionEvent",
          "backend.systems.events.MemoryEvent",
          "backend.systems.events.RumorEvent",
          "backend.systems.events.NarrativeEvent"
        ],
        "dependencies": "{'events'}",
        "responsibilities": [
          "Configuration",
          "Database Operations",
          "Event Handling",
          "Business Logic",
          "File I/O"
        ],
        "complexity_score": 100,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_analytics_service",
              "get_all",
              "get_instance",
              "_get_event_type_from_category_action",
              "get_event_directory",
              "get_analytics_middleware",
              "get_event_file_path",
              "_get_event_file_path"
            ],
            "estimated_lines": 160,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_dataset",
              "_generate_dataset_sync"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "AnalyticsEventType",
              "AnalyticsService"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/character/services/character_service.py",
        "lines": 1945,
        "classes": [
          "CharacterService"
        ],
        "functions": [
          "__init__",
          "_calculate_ability_modifier",
          "_has_spellcasting",
          "_calculate_xp_for_level",
          "_get_character_orm_by_id",
          "_get_character_orm_by_uuid",
          "create_character_from_builder",
          "get_character_by_id",
          "get_character_by_uuid",
          "get_character_builder_by_id",
          "update_character_data",
          "delete_character",
          "level_up_character",
          "validate_character_creation_data",
          "add_faction_relationship",
          "add_quest_relationship",
          "get_character_relationships",
          "add_character_relationship",
          "get_character_mood",
          "add_character_mood_modifier",
          "add_character_goal",
          "get_character_goals",
          "update_goal_progress",
          "complete_goal",
          "process_goal_failure",
          "process_goal_completion",
          "build_character_from_input",
          "_initialize_character_goals",
          "_initialize_character_mood",
          "update_mood_from_relationship_change",
          "create_character",
          "get_character",
          "add_experience_points",
          "update_personal_goal_progress",
          "apply_mood_effects_to_relationships",
          "create_character_with_mood"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Tuple",
          "typing.Union",
          "typing.Generator",
          "sqlalchemy.orm.Session",
          "sqlalchemy.exc.SQLAlchemyError",
          "uuid.UUID",
          "uuid.uuid4",
          "random",
          "math",
          "datetime.datetime",
          "time",
          "logging",
          "uuid",
          "fastapi.HTTPException",
          "unittest.mock.MagicMock",
          "backend.systems.character.core.character_model.Character",
          "backend.systems.character.core.character_model.Skill",
          "backend.systems.character.core.character_builder.CharacterBuilder",
          "backend.systems.character.models.relationship.Relationship",
          "backend.systems.character.models.relationship.RelationshipType",
          "backend.systems.character.models.mood.CharacterMood",
          "backend.systems.character.models.mood.EmotionalState",
          "backend.systems.character.models.mood.MoodIntensity",
          "backend.systems.character.models.mood.MoodModifier",
          "backend.systems.character.models.goal.Goal",
          "backend.systems.character.models.goal.GoalType",
          "backend.systems.character.models.goal.GoalPriority",
          "backend.systems.character.models.goal.GoalStatus",
          "backend.systems.character.services.relationship_service.RelationshipService",
          "backend.systems.character.services.mood_service.MoodService",
          "backend.systems.character.services.goal_service.GoalService",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.CharacterCreated",
          "backend.systems.events.CharacterLeveledUp",
          "backend.systems.events.CharacterUpdated",
          "backend.systems.events.CharacterDeleted",
          "backend.systems.events.MoodChanged",
          "backend.systems.events.GoalCreated",
          "backend.systems.events.GoalCompleted",
          "backend.systems.events.GoalFailed",
          "backend.systems.events.GoalProgressUpdated",
          "backend.systems.shared.database.get_db_session",
          "backend.systems.shared.database.database_objects.db",
          "backend.systems.shared.utils.common.error.NotFoundError",
          "backend.systems.shared.utils.common.error.DatabaseError",
          "backend.systems.shared.utils.common.error.ValidationError",
          "backend.systems.shared.rules.balance_constants",
          "backend.systems.shared.rules.load_data",
          "backend.systems.world_state.world_state_manager.WorldStateManager",
          "backend.systems.shared.utils.common.error.ValidationError",
          "backend.systems.shared.utils.common.error.DatabaseError",
          "backend.systems.shared.utils.common.error.ValidationError",
          "backend.systems.shared.utils.common.error.DatabaseError"
        ],
        "dependencies": "{'shared', 'character', 'sqlalchemy', 'fastapi', 'world_state', 'events'}",
        "responsibilities": [
          "Configuration",
          "Database Operations",
          "Event Handling",
          "API/Routing",
          "Business Logic"
        ],
        "complexity_score": 99,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_calculate_ability_modifier",
              "_calculate_xp_for_level",
              "validate_character_creation_data",
              "process_goal_failure",
              "process_goal_completion"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "_get_character_orm_by_id",
              "_get_character_orm_by_uuid",
              "create_character_from_builder",
              "get_character_by_id",
              "get_character_by_uuid",
              "get_character_builder_by_id",
              "update_character_data",
              "delete_character",
              "get_character_relationships",
              "get_character_mood",
              "get_character_goals",
              "update_goal_progress",
              "update_mood_from_relationship_change",
              "create_character",
              "get_character",
              "update_personal_goal_progress",
              "create_character_with_mood"
            ],
            "estimated_lines": 340,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "add_faction_relationship"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "CharacterService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/llm/core/dm_core.py",
        "lines": 1702,
        "classes": [
          "ContextRequest",
          "ContextResponse",
          "QuestReminderEvent",
          "RequestClassificationEvent",
          "DungeonMaster",
          "MotifEngine"
        ],
        "functions": [
          "_get_gpt_client",
          "gather_dm_context",
          "fetch_faction_name",
          "generate_region_narration_context",
          "get_tension_flavor_text",
          "resolve_names",
          "gather_relationship_context",
          "gather_faction_context",
          "generate_npc_quest_dialogue",
          "generate_npc_quest_reminder",
          "classify_request",
          "narrate_combat_action",
          "get_tension",
          "context_handler",
          "get_instance",
          "__init__",
          "_register_event_handlers",
          "create_motif",
          "record_motif_occurrence",
          "suggest_motifs_for_context",
          "get_motif_narrative_context",
          "create_faction",
          "set_faction_relationship",
          "get_faction_conflicts",
          "get_faction_narrative_context",
          "_on_memory_created",
          "_on_memory_reinforced",
          "_on_rumor_created",
          "_on_motif_created",
          "_on_motif_occurrence",
          "_on_gpt_request",
          "_on_gpt_response",
          "_on_gpt_error",
          "_on_context_request",
          "_on_quest_reminder",
          "_on_request_classification",
          "get_tension",
          "get_relationship_tier",
          "get_instance",
          "get_active_motifs"
        ],
        "imports": [
          "datetime.datetime",
          "datetime.timedelta",
          "functools.lru_cache",
          "logging",
          "difflib",
          "typing.Optional",
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "backend.systems.llm.core.event_integration.EventDispatcher",
          "backend.systems.llm.core.event_integration.EventBase",
          "backend.systems.llm.repositories.player_repository.PlayerRepository",
          "backend.systems.llm.repositories.region_repository.RegionRepository",
          "backend.systems.llm.repositories.npc_repository.NPCRepository",
          "backend.systems.llm.repositories.faction_repository.FactionRepository",
          "backend.systems.llm.repositories.world_repository.WorldRepository",
          "backend.systems.memory.services.memory_manager.MemoryManager",
          "backend.systems.memory.models.memory.Memory",
          "backend.systems.rumor.service.RumorService",
          "backend.systems.llm.core.motif_system.MotifSystem",
          "backend.systems.llm.core.faction_system.FactionSystem",
          "logging",
          "json",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "datetime.datetime",
          "backend.systems.llm.core.event_integration.EventDispatcher",
          "backend.systems.memory.services.memory_manager.MemoryManager",
          "backend.systems.rumor.models.Rumor",
          "backend.systems.llm.core.motif_system.MotifSystem",
          "backend.systems.llm.core.motif_system.Motif",
          "backend.systems.llm.core.faction_system.FactionSystem",
          "backend.systems.llm.core.faction_system.Faction",
          "backend.systems.llm.services.gpt_client.GPTClient",
          "backend.systems.motif.get_motif_manager",
          "backend.systems.tension_war.services.tension_manager.TensionManager",
          "backend.systems.character.npc.npc_utils.get_relationship_tier",
          "backend.systems.memory.models.memory.MemoryType",
          "backend.systems.llm.core.gpt_integration.GPTRequestEvent"
        ],
        "dependencies": "{'motif', 'character', 'rumor', 'memory', 'tension_war', 'llm'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 100,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "_get_gpt_client",
              "get_tension_flavor_text",
              "get_tension",
              "get_instance",
              "create_motif",
              "get_motif_narrative_context",
              "create_faction",
              "get_faction_conflicts",
              "get_faction_narrative_context",
              "get_tension",
              "get_relationship_tier",
              "get_instance",
              "get_active_motifs"
            ],
            "estimated_lines": 260,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "fetch_faction_name",
              "gather_faction_context",
              "set_faction_relationship",
              "_on_memory_created",
              "_on_memory_reinforced",
              "_on_rumor_created",
              "_on_motif_created",
              "_on_motif_occurrence",
              "_on_gpt_request",
              "_on_gpt_response",
              "_on_gpt_error",
              "_on_context_request",
              "_on_quest_reminder",
              "_on_request_classification"
            ],
            "estimated_lines": 280,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_region_narration_context",
              "generate_npc_quest_dialogue",
              "generate_npc_quest_reminder"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "ContextRequest",
              "ContextResponse",
              "QuestReminderEvent",
              "RequestClassificationEvent",
              "DungeonMaster",
              "MotifEngine"
            ],
            "estimated_lines": 180,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/motif/utils.py",
        "lines": 1520,
        "classes": [],
        "functions": [
          "roll_chaos_event",
          "generate_motif_name",
          "generate_motif_description",
          "generate_realistic_duration",
          "roll_new_motif",
          "estimate_motif_compatibility",
          "detect_motif_conflicts",
          "get_compatible_motifs",
          "_generate_compatibility_reason",
          "motif_to_narrative_context",
          "calculate_motif_spread",
          "synthesize_motifs",
          "get_region_motif_context",
          "calculate_distance",
          "is_point_in_radius",
          "calculate_motif_influence",
          "generate_random_position",
          "clamp_value",
          "lerp",
          "get_cardinal_direction",
          "calculate_region_center",
          "get_nearby_regions",
          "validate_coordinates",
          "normalize_angle",
          "degrees_to_radians",
          "radians_to_degrees",
          "calculate_bearing",
          "point_to_line_distance",
          "is_point_in_polygon",
          "calculate_polygon_area",
          "generate_uuid",
          "format_timestamp",
          "parse_timestamp",
          "calculate_age_in_days",
          "is_expired",
          "safe_divide",
          "calculate_percentage",
          "round_to_precision",
          "get_enum_values",
          "validate_enum_value",
          "deep_merge_dicts",
          "flatten_dict",
          "unflatten_dict",
          "sanitize_filename",
          "truncate_string",
          "count_words",
          "extract_keywords",
          "calculate_similarity",
          "normalize_text",
          "validate_json_schema",
          "generate_hash",
          "encode_base64",
          "decode_base64",
          "compress_string",
          "decompress_string"
        ],
        "imports": [
          "random",
          "math",
          "re",
          "uuid",
          "hashlib",
          "base64",
          "zlib",
          "json",
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "typing.Tuple",
          "datetime.datetime",
          "datetime.timedelta",
          "enum.Enum",
          "models.Motif",
          "models.MotifCategory",
          "models.MotifScope",
          "models.MotifLifecycle",
          "models.MotifEffect",
          "models.LocationInfo",
          "models.CANONICAL_MOTIFS"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Utilities",
          "Database Operations"
        ],
        "complexity_score": 81,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_motif_name",
              "generate_motif_description",
              "generate_realistic_duration",
              "_generate_compatibility_reason",
              "calculate_motif_spread",
              "calculate_distance",
              "calculate_motif_influence",
              "generate_random_position",
              "calculate_region_center",
              "validate_coordinates",
              "calculate_bearing",
              "calculate_polygon_area",
              "generate_uuid",
              "calculate_age_in_days",
              "calculate_percentage",
              "validate_enum_value",
              "calculate_similarity",
              "validate_json_schema",
              "generate_hash"
            ],
            "estimated_lines": 380,
            "priority": "high"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_compatible_motifs",
              "get_region_motif_context",
              "get_cardinal_direction",
              "get_nearby_regions",
              "get_enum_values"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "utilities.py",
            "responsibility": "Utilities",
            "functions": [
              "format_timestamp",
              "parse_timestamp"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_generation/world_generation_utils.py",
        "lines": 1491,
        "classes": [],
        "functions": [
          "generate_continent_region_coordinates",
          "map_region_to_latlon",
          "get_region_latlon",
          "get_continent_boundary",
          "fetch_weather_for_region",
          "fetch_weather_for_latlon",
          "generate_procedural_weather",
          "walk_region",
          "pick_poi_type",
          "choose_poi_type",
          "pick_valid_tile",
          "pick_social_size",
          "claim_region_hexes_for_city",
          "generate_settlements",
          "generate_non_settlement_pois",
          "generate_region",
          "generate_minor_nature_squares",
          "log_region_event",
          "refresh_cleared_pois",
          "generate_monsters_for_tile",
          "attempt_rest",
          "generate_social_poi",
          "generate_tile",
          "get_rainfall_at_point",
          "get_elevation_at_point",
          "y_to_latitude"
        ],
        "imports": [
          "random",
          "math",
          "typing.List",
          "typing.Tuple",
          "typing.Set",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.Union",
          "uuid.uuid4",
          "datetime.datetime",
          "collections.deque",
          "noise",
          "logging",
          "time",
          "os",
          "backend.systems.world_generation.models.CoordinateSchema",
          "time",
          "hashlib",
          "math",
          "requests"
        ],
        "dependencies": "{'world_generation'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 82,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_continent_region_coordinates",
              "generate_procedural_weather",
              "generate_settlements",
              "generate_non_settlement_pois",
              "generate_region",
              "generate_minor_nature_squares",
              "generate_monsters_for_tile",
              "generate_social_poi",
              "generate_tile"
            ],
            "estimated_lines": 180,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "map_region_to_latlon",
              "claim_region_hexes_for_city",
              "log_region_event"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_region_latlon",
              "get_continent_boundary",
              "get_rainfall_at_point",
              "get_elevation_at_point"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_generation/biome_utils.py",
        "lines": 1452,
        "classes": [
          "BiomeCalculator"
        ],
        "functions": [
          "load_biome_adjacency_rules",
          "apply_adjacency_rules",
          "place_biomes_by_elevation_and_climate",
          "generate_biome_map",
          "transition_biomes",
          "validate_biome_adjacency",
          "get_biome_from_conditions",
          "load_adjacency_rules",
          "validate_adjacency_rules",
          "save_adjacency_rules",
          "get_adjacency_rule",
          "are_biomes_compatible",
          "get_transition_biomes",
          "get_min_transition_width",
          "is_water_land_boundary",
          "weighted_biome_choice",
          "get_common_transition_biome",
          "create_transition_path",
          "apply_adjacency_constraints",
          "merge_adjacency_rules",
          "__init__",
          "calculate_biome",
          "_estimate_temperature_from_latitude",
          "_estimate_rainfall",
          "_classify_temperature",
          "_classify_rainfall"
        ],
        "imports": [
          "json",
          "os",
          "random",
          "math",
          "typing.Dict",
          "typing.List",
          "typing.Tuple",
          "typing.Set",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "shutil"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "File I/O",
          "Configuration"
        ],
        "complexity_score": 85,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "load_biome_adjacency_rules",
              "get_biome_from_conditions",
              "load_adjacency_rules",
              "save_adjacency_rules",
              "get_adjacency_rule",
              "get_transition_biomes",
              "get_min_transition_width",
              "get_common_transition_biome",
              "create_transition_path"
            ],
            "estimated_lines": 180,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "place_biomes_by_elevation_and_climate",
              "transition_biomes"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_biome_map",
              "validate_biome_adjacency",
              "validate_adjacency_rules",
              "calculate_biome"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "BiomeCalculator"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/inventory/utils.py",
        "lines": 1292,
        "classes": [
          "InventoryUtils",
          "RecoveryManager"
        ],
        "functions": [
          "calculate_inventory_stats",
          "transfer_item_between_inventories",
          "get_inventory_weight",
          "validate_weight_limit",
          "validate_inventory_capacity",
          "optimize_inventory_stacks",
          "combine_item_stacks",
          "split_item_stack",
          "filter_inventory_items",
          "format_datetime",
          "calculate_total_weight",
          "calculate_total_value",
          "get_inventory_statistics",
          "serialize_sqlalchemy_obj",
          "apply_pagination",
          "generate_grid_position",
          "backup_inventory",
          "restore_inventory"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Union",
          "typing.Tuple",
          "logging",
          "json",
          "datetime.datetime",
          "sqlalchemy.ext.declarative.DeclarativeMeta",
          "backend.systems.shared.database.db",
          "backend.systems.inventory.models.Item",
          "backend.systems.inventory.models.Inventory",
          "backend.systems.inventory.models.InventoryItem",
          "backend.systems.inventory.repository.InventoryItemRepository",
          "backend.systems.inventory.events.emit_transfer_started",
          "backend.systems.inventory.events.emit_transfer_completed",
          "backend.systems.inventory.events.emit_transfer_failed",
          "backend.systems.inventory.events.emit_weight_limit_exceeded",
          "backend.systems.inventory.models.InventoryItem",
          "backend.systems.inventory.events.InventoryEventType",
          "backend.systems.inventory.events.emit_event",
          "backend.systems.inventory.events.InventoryEventType",
          "backend.systems.inventory.events.emit_event"
        ],
        "dependencies": "{'sqlalchemy', 'inventory', 'shared'}",
        "responsibilities": [
          "Configuration",
          "Utilities",
          "Database Operations",
          "Event Handling",
          "Business Logic",
          "File I/O"
        ],
        "complexity_score": 85,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_inventory_stats",
              "validate_weight_limit",
              "validate_inventory_capacity",
              "calculate_total_weight",
              "calculate_total_value",
              "generate_grid_position"
            ],
            "estimated_lines": 120,
            "priority": "high"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_inventory_weight",
              "get_inventory_statistics"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "utilities.py",
            "responsibility": "Utilities",
            "functions": [
              "format_datetime"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "InventoryUtils",
              "RecoveryManager"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/character/services/goal_service.py",
        "lines": 1289,
        "classes": [
          "GoalService"
        ],
        "functions": [
          "parse_datetime",
          "__init__",
          "_get_character_goal_file",
          "_load_character_goals",
          "_save_character_goals",
          "get_goals_for_character",
          "get_goal",
          "add_goal",
          "add_subgoal",
          "update_goal_progress",
          "complete_goal",
          "fail_goal",
          "abandon_goal",
          "update_goal_priority",
          "remove_goal",
          "get_active_goals",
          "get_completed_goals",
          "get_highest_priority_goals",
          "get_goal_progress_summary",
          "get_goal_by_id",
          "save_goals",
          "save_all_goals",
          "update_goal_status",
          "delete_goal",
          "delete_all_character_goals",
          "_load_goals",
          "update_goal_metadata",
          "get_active_goals_count",
          "get_completed_goals_count",
          "calculate_completion_percentage",
          "get_overdue_goals",
          "get_goal_tree",
          "get_goals_by_type",
          "update_goal_description",
          "_save_character_goals_to_disk",
          "_read_character_goals_from_disk",
          "get_dependent_goals",
          "has_dependency_cycle",
          "set_goal_deadline",
          "get_recent_goals",
          "get_goals_by_date_range",
          "build_tree",
          "has_cycle_dfs"
        ],
        "imports": [
          "logging",
          "datetime.datetime",
          "datetime.timedelta",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Union",
          "typing.Any",
          "uuid.UUID",
          "json",
          "os",
          "backend.systems.events.EventDispatcher",
          "backend.systems.character.models.goal.Goal",
          "backend.systems.character.models.goal.GoalType",
          "backend.systems.character.models.goal.GoalPriority",
          "backend.systems.character.models.goal.GoalStatus",
          "backend.systems.character.models.goal.GoalCreated",
          "backend.systems.character.models.goal.GoalCompleted",
          "backend.systems.character.models.goal.GoalFailed",
          "backend.systems.character.models.goal.GoalAbandoned",
          "backend.systems.character.models.goal.GoalProgressUpdated",
          "backend.systems.character.models.goal.GoalStatusChanged"
        ],
        "dependencies": "{'character', 'events'}",
        "responsibilities": [
          "Utilities",
          "Database Operations",
          "Event Handling",
          "Business Logic",
          "File I/O"
        ],
        "complexity_score": 86,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "utilities.py",
            "responsibility": "Utilities",
            "functions": [
              "parse_datetime"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "_get_character_goal_file",
              "_load_character_goals",
              "_save_character_goals",
              "get_goals_for_character",
              "get_goal",
              "update_goal_progress",
              "update_goal_priority",
              "get_active_goals",
              "get_completed_goals",
              "get_highest_priority_goals",
              "get_goal_progress_summary",
              "get_goal_by_id",
              "save_goals",
              "save_all_goals",
              "update_goal_status",
              "delete_goal",
              "delete_all_character_goals",
              "_load_goals",
              "update_goal_metadata",
              "get_active_goals_count",
              "get_completed_goals_count",
              "get_overdue_goals",
              "get_goal_tree",
              "get_goals_by_type",
              "update_goal_description",
              "_save_character_goals_to_disk",
              "get_dependent_goals",
              "get_recent_goals",
              "get_goals_by_date_range"
            ],
            "estimated_lines": 580,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "abandon_goal"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_completion_percentage"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "GoalService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_state/mods/mod_synchronizer.py",
        "lines": 1255,
        "classes": [
          "ModDependency",
          "ModIncompatibility",
          "ModInfo",
          "ConflictType",
          "ConflictResolutionStrategy",
          "ModConflict",
          "ConflictResolutionRequest",
          "SyncStatus",
          "ModSynchronizer"
        ],
        "functions": [
          "__init__",
          "discover_mods",
          "load_mod",
          "apply_mod",
          "apply_all_mods",
          "_validate_manifest",
          "_load_mod_data",
          "_validate_mod_data",
          "_execute_mod_scripts",
          "_apply_state_changes",
          "_apply_regions",
          "_apply_factions",
          "_apply_npcs",
          "dfs_visit"
        ],
        "imports": [
          "fastapi.APIRouter",
          "fastapi.HTTPException",
          "fastapi.WebSocket",
          "fastapi.WebSocketDisconnect",
          "pydantic.BaseModel",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "typing.Union",
          "typing.Any",
          "json",
          "os",
          "logging",
          "asyncio",
          "datetime.datetime",
          "pathlib.Path",
          "enum.Enum",
          "importlib.util",
          "sys",
          "backend.systems.world_state.WorldState",
          "backend.systems.world_state.StateCategory",
          "backend.systems.world_state.WorldRegion",
          "backend.systems.world_state.WorldStateLoader"
        ],
        "dependencies": "{'pydantic', 'fastapi', 'world_state'}",
        "responsibilities": [
          "Data Models",
          "Configuration",
          "Database Operations",
          "API/Routing",
          "Business Logic",
          "File I/O"
        ],
        "complexity_score": 100,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "load_mod",
              "_load_mod_data"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_validate_manifest",
              "_validate_mod_data",
              "_execute_mod_scripts"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "ModDependency",
              "ModIncompatibility",
              "ModInfo",
              "ConflictType",
              "ConflictResolutionStrategy",
              "ModConflict",
              "ConflictResolutionRequest",
              "SyncStatus",
              "ModSynchronizer"
            ],
            "estimated_lines": 270,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/llm/core/faction_system.py",
        "lines": 1250,
        "classes": [
          "FactionRelationship",
          "FactionGoal",
          "FactionResource",
          "Faction",
          "FactionSystem",
          "ConfigDict"
        ],
        "functions": [
          "get_instance",
          "__init__",
          "create_faction",
          "get_faction",
          "get_factions_by_type",
          "set_relationship",
          "add_faction_goal",
          "add_faction_resource",
          "_store_faction",
          "_store_relationship",
          "_store_goal",
          "_store_resource",
          "_get_relationship",
          "_dict_to_faction",
          "_is_faction_cached",
          "_cache_faction",
          "_clear_faction_cache",
          "_clear_relationship_cache",
          "_get_faction_from_cache",
          "get_faction_goals",
          "get_faction_resources",
          "get_faction_relationships",
          "calculate_faction_power",
          "get_faction_conflicts",
          "get_faction_narrative_context",
          "__init__"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "typing.Tuple",
          "typing.Union",
          "logging",
          "datetime.datetime",
          "datetime.timedelta",
          "json",
          "math",
          "random",
          "uuid.uuid4",
          "firebase_admin.db",
          "pydantic.BaseModel",
          "pydantic.Field",
          "backend.systems.llm.core.event_integration.EventDispatcher",
          "backend.systems.llm.core.event_integration.FactionEvent",
          "pydantic.ConfigDict"
        ],
        "dependencies": "{'firebase', 'pydantic', 'llm'}",
        "responsibilities": [
          "Data Models",
          "Configuration",
          "Database Operations",
          "Event Handling",
          "Business Logic"
        ],
        "complexity_score": 90,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_instance",
              "create_faction",
              "get_faction",
              "get_factions_by_type",
              "_get_relationship",
              "_get_faction_from_cache",
              "get_faction_goals",
              "get_faction_resources",
              "get_faction_relationships",
              "get_faction_conflicts",
              "get_faction_narrative_context"
            ],
            "estimated_lines": 220,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "add_faction_goal",
              "add_faction_resource",
              "_is_faction_cached",
              "_clear_faction_cache"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_faction_power"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "FactionRelationship",
              "FactionGoal",
              "FactionResource",
              "Faction",
              "FactionSystem",
              "ConfigDict"
            ],
            "estimated_lines": 180,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/character/services/mood_service.py",
        "lines": 1182,
        "classes": [
          "MoodService"
        ],
        "functions": [
          "__init__",
          "get_mood",
          "_load_mood",
          "save_mood",
          "update_all_moods",
          "add_mood_modifier",
          "clear_modifiers",
          "get_current_mood",
          "get_mood_description",
          "set_base_mood",
          "get_emotional_state_values",
          "get_active_modifiers",
          "save_all_moods",
          "initialize_mood",
          "remove_mood_modifier",
          "_recalculate_mood",
          "_get_intensity_value",
          "update_mood",
          "delete_mood",
          "get_mood_intensity_for_state",
          "is_feeling_happy",
          "is_feeling_sad",
          "is_feeling_angry",
          "is_feeling_fearful",
          "is_feeling_neutral",
          "get_mood_history",
          "reset_base_mood",
          "get_mood_stats",
          "get_mood_comparison",
          "_are_states_complementary",
          "_generate_mood_comparison_details",
          "serialize_mood_to_json",
          "deserialize_mood_from_json",
          "get_or_create_default_mood",
          "create_mood"
        ],
        "imports": [
          "logging",
          "datetime.datetime",
          "datetime.timedelta",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Union",
          "typing.Any",
          "typing.Tuple",
          "uuid.UUID",
          "uuid.uuid4",
          "json",
          "os",
          "backend.systems.events.EventDispatcher",
          "backend.systems.character.models.mood.CharacterMood",
          "backend.systems.character.models.mood.EmotionalState",
          "backend.systems.character.models.mood.MoodIntensity",
          "backend.systems.character.models.mood.MoodModifier",
          "backend.systems.character.models.mood.MoodSource"
        ],
        "dependencies": "{'character', 'events'}",
        "responsibilities": [
          "Business Logic",
          "File I/O",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 86,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_mood",
              "_load_mood",
              "save_mood",
              "update_all_moods",
              "get_current_mood",
              "get_mood_description",
              "get_emotional_state_values",
              "get_active_modifiers",
              "save_all_moods",
              "_get_intensity_value",
              "update_mood",
              "delete_mood",
              "get_mood_intensity_for_state",
              "get_mood_history",
              "get_mood_stats",
              "get_mood_comparison",
              "get_or_create_default_mood",
              "create_mood"
            ],
            "estimated_lines": 360,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_recalculate_mood",
              "_generate_mood_comparison_details"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "MoodService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/combat/unified_effects.py",
        "lines": 1061,
        "classes": [
          "EffectStackingBehavior",
          "EffectType",
          "CombatEffect",
          "BuffEffect",
          "DebuffEffect",
          "DamageOverTimeEffect",
          "HealOverTimeEffect",
          "ConditionEffect",
          "ResistanceEffect",
          "VulnerabilityEffect",
          "ImmunityEffect",
          "EffectPipeline"
        ],
        "functions": [
          "apply",
          "remove",
          "on_turn_start_trigger",
          "on_turn_end_trigger",
          "on_stacked_trigger",
          "can_stack",
          "stack",
          "is_expired",
          "effect_id",
          "modify_damage",
          "get_icon_info",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "modify_damage",
          "__init__",
          "modify_damage",
          "__init__",
          "modify_damage",
          "__init__",
          "get_applied_effects",
          "_get_combatant_id",
          "_get_matching_effects",
          "apply_effect",
          "remove_effect",
          "remove_effect_by_id",
          "remove_effects_by_type",
          "remove_effects_by_name",
          "clear_effects",
          "clear_all_effects",
          "process_turn_start",
          "process_turn_end",
          "modify_damage",
          "register_effect_applied_callback",
          "register_effect_removed_callback",
          "register_effect_expired_callback",
          "unregister_effect_applied_callback",
          "unregister_effect_removed_callback",
          "unregister_effect_expired_callback",
          "is_immune_to_effect",
          "get_active_effects",
          "process_heal",
          "process_healed",
          "process_before_action",
          "process_after_action",
          "apply_damage",
          "apply_healing"
        ],
        "imports": [
          "logging",
          "uuid",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Set",
          "typing.Optional",
          "typing.Callable",
          "typing.Tuple",
          "typing.Union",
          "enum.Enum",
          "enum.auto",
          "dataclasses.dataclass",
          "dataclasses.field",
          "datetime.datetime",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.CombatEvent"
        ],
        "dependencies": "{'events'}",
        "responsibilities": [
          "Business Logic",
          "Data Models",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 93,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "on_turn_start_trigger",
              "on_turn_end_trigger",
              "on_stacked_trigger"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_icon_info",
              "get_applied_effects",
              "_get_combatant_id",
              "_get_matching_effects",
              "get_active_effects"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "process_turn_start",
              "process_turn_end",
              "process_heal",
              "process_healed",
              "process_before_action",
              "process_after_action"
            ],
            "estimated_lines": 120,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "EffectStackingBehavior",
              "EffectType",
              "CombatEffect",
              "BuffEffect",
              "DebuffEffect",
              "DamageOverTimeEffect",
              "HealOverTimeEffect",
              "ConditionEffect",
              "ResistanceEffect",
              "VulnerabilityEffect",
              "ImmunityEffect",
              "EffectPipeline"
            ],
            "estimated_lines": 360,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/diplomacy/repository.py",
        "lines": 1009,
        "classes": [
          "DiplomacyRepository"
        ],
        "functions": [
          "__init__",
          "create_treaty",
          "get_treaty",
          "update_treaty",
          "delete_treaty",
          "list_treaties",
          "create_negotiation",
          "get_negotiation",
          "update_negotiation",
          "delete_negotiation",
          "list_negotiations",
          "create_event",
          "get_event",
          "list_events",
          "get_faction_relationship",
          "update_faction_relationship",
          "get_all_faction_relationships",
          "create_violation",
          "get_violation",
          "update_violation",
          "list_violations",
          "create_ultimatum",
          "get_ultimatum",
          "update_ultimatum",
          "list_ultimatums",
          "_load_ultimatums",
          "_save_ultimatums",
          "create_sanction",
          "get_sanction",
          "update_sanction",
          "delete_sanction",
          "list_sanctions",
          "record_sanction_violation",
          "create_diplomatic_event",
          "create_incident",
          "get_incident",
          "update_incident"
        ],
        "imports": [
          "json",
          "os",
          "datetime.datetime",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Tuple",
          "typing.Union",
          "uuid.UUID",
          "uuid.uuid4",
          "backend.systems.diplomacy.models.DiplomaticEvent",
          "backend.systems.diplomacy.models.DiplomaticEventType",
          "backend.systems.diplomacy.models.DiplomaticIncident",
          "backend.systems.diplomacy.models.DiplomaticIncidentSeverity",
          "backend.systems.diplomacy.models.DiplomaticIncidentType",
          "backend.systems.diplomacy.models.DiplomaticStatus",
          "backend.systems.diplomacy.models.Negotiation",
          "backend.systems.diplomacy.models.NegotiationStatus",
          "backend.systems.diplomacy.models.Sanction",
          "backend.systems.diplomacy.models.SanctionStatus",
          "backend.systems.diplomacy.models.SanctionType",
          "backend.systems.diplomacy.models.Treaty",
          "backend.systems.diplomacy.models.TreatyType",
          "backend.systems.diplomacy.models.TreatyViolation",
          "backend.systems.diplomacy.models.TreatyViolationType",
          "backend.systems.diplomacy.models.Ultimatum",
          "backend.systems.diplomacy.models.UltimatumStatus"
        ],
        "dependencies": "{'diplomacy', 'pydantic'}",
        "responsibilities": [
          "Database Operations",
          "File I/O"
        ],
        "complexity_score": 82,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "create_treaty",
              "get_treaty",
              "update_treaty",
              "delete_treaty",
              "create_negotiation",
              "get_negotiation",
              "update_negotiation",
              "delete_negotiation",
              "create_event",
              "get_event",
              "get_faction_relationship",
              "update_faction_relationship",
              "get_all_faction_relationships",
              "create_violation",
              "get_violation",
              "update_violation",
              "create_ultimatum",
              "get_ultimatum",
              "update_ultimatum",
              "_load_ultimatums",
              "_save_ultimatums",
              "create_sanction",
              "get_sanction",
              "update_sanction",
              "delete_sanction",
              "create_diplomatic_event",
              "create_incident",
              "get_incident",
              "update_incident"
            ],
            "estimated_lines": 580,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "record_sanction_violation"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "DiplomacyRepository"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_state/consolidated_manager.py",
        "lines": 954,
        "classes": [
          "WorldStateManager"
        ],
        "functions": [
          "get_instance",
          "reset_instance",
          "__init__",
          "_register_event_handlers",
          "get_world_state",
          "update_world_state",
          "_save_world_state_to_file",
          "_prepare_for_file",
          "save_world_state",
          "_handle_time_event",
          "_handle_world_reset",
          "_handle_save_request",
          "set_state",
          "get_state",
          "get_state_variable",
          "delete_state",
          "get_history",
          "get_value_at_time",
          "query_state_by_category",
          "query_state_by_region",
          "query_state_by_tags",
          "query_state_by_prefix",
          "get_state_snapshot",
          "_cleanup_old_backups",
          "_deep_update",
          "get_all_state_variables",
          "get_state_count",
          "get_statistics",
          "create_snapshot",
          "restore_snapshot",
          "restore_version",
          "shutdown",
          "get_location",
          "convert_to_serializable"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Tuple",
          "typing.Union",
          "json",
          "os",
          "time",
          "datetime.datetime",
          "datetime.timedelta",
          "traceback",
          "logging",
          "pathlib.Path",
          "uuid",
          "shutil",
          "backend.systems.shared.utils.common.error.NotFoundError",
          "backend.systems.shared.utils.common.error.ValidationError",
          "backend.systems.shared.utils.core.time_utils.parse_iso_datetime",
          "backend.systems.events.EventDispatcher",
          "logging",
          "backend.systems.world_state.consolidated_world_models.WorldMap",
          "backend.systems.world_state.consolidated_world_models.Region",
          "backend.systems.world_state.consolidated_world_models.PointOfInterest",
          "backend.systems.world_state.consolidated_world_models.WorldState",
          "backend.systems.world_state.consolidated_state_models.StateVariable",
          "backend.systems.world_state.consolidated_state_models.StateChangeRecord",
          "backend.systems.world_state.consolidated_state_models.StateCategory",
          "backend.systems.world_state.consolidated_state_models.WorldRegion",
          "backend.systems.world_state.consolidated_state_models.StateChangeType",
          "backend.systems.world_state.consolidated_state_models.WorldStateSnapshot",
          "backend.systems.world_state.consolidated_state_models.TemporaryEffect",
          "backend.systems.world_state.events.WorldStateUpdatedEvent",
          "backend.systems.world_state.events.StateVariableDeletedEvent",
          "backend.systems.world_state.consolidated_state_models.WorldStateSnapshot",
          "backend.systems.world_state.events.StateVariableCreatedEvent",
          "backend.systems.world_state.events.StateVariableUpdatedEvent"
        ],
        "dependencies": "{'events', 'shared', 'world_state'}",
        "responsibilities": [
          "Configuration",
          "Utilities",
          "Database Operations",
          "Event Handling",
          "Business Logic",
          "File I/O"
        ],
        "complexity_score": 88,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_instance",
              "get_world_state",
              "update_world_state",
              "_save_world_state_to_file",
              "save_world_state",
              "_handle_save_request",
              "get_state",
              "get_state_variable",
              "delete_state",
              "get_history",
              "get_value_at_time",
              "query_state_by_category",
              "query_state_by_region",
              "query_state_by_tags",
              "query_state_by_prefix",
              "get_state_snapshot",
              "get_all_state_variables",
              "get_state_count",
              "get_statistics",
              "create_snapshot",
              "get_location"
            ],
            "estimated_lines": 420,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_handle_time_event",
              "_handle_world_reset"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "utilities.py",
            "responsibility": "Utilities",
            "functions": [
              "convert_to_serializable"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "WorldStateManager"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_generation/config.py",
        "lines": 886,
        "classes": [
          "ConfigScope",
          "ParameterType",
          "ParameterDefinition",
          "ComponentConfig",
          "PhaseConfig",
          "PipelineConfig"
        ],
        "functions": [
          "create_default_pipeline_config",
          "validate",
          "to_dict",
          "from_dict",
          "to_dict",
          "from_dict",
          "add_component",
          "get_component",
          "remove_component",
          "__init__",
          "_init_from_seed",
          "add_parameter_definition",
          "set_global_parameter",
          "get_global_parameter",
          "add_phase",
          "get_phase",
          "remove_phase",
          "set_component_parameter",
          "get_component_parameter",
          "enable_phase",
          "enable_component",
          "is_phase_enabled",
          "is_component_enabled",
          "to_dict",
          "from_dict",
          "save_to_file",
          "load_from_file",
          "validate",
          "clone",
          "merge"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Set",
          "typing.Union",
          "typing.Type",
          "logging",
          "json",
          "enum.Enum",
          "dataclasses.dataclass",
          "dataclasses.field",
          "dataclasses.asdict",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.field_validator",
          "backend.systems.world_generation.models.WorldSeedSchema",
          "copy",
          "copy"
        ],
        "dependencies": "{'world_generation', 'pydantic'}",
        "responsibilities": [
          "Data Models",
          "Database Operations",
          "File I/O",
          "Configuration"
        ],
        "complexity_score": 91,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "create_default_pipeline_config",
              "get_component",
              "get_global_parameter",
              "get_phase",
              "get_component_parameter",
              "save_to_file",
              "load_from_file"
            ],
            "estimated_lines": 140,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "ConfigScope",
              "ParameterType",
              "ParameterDefinition",
              "ComponentConfig",
              "PhaseConfig",
              "PipelineConfig"
            ],
            "estimated_lines": 180,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/shared/utils/game/random_utils.py",
        "lines": 884,
        "classes": [
          "WeightedRandomSelector",
          "AttributeDistributor",
          "NameGenerator"
        ],
        "functions": [
          "weighted_choice",
          "weighted_choice_multiple",
          "distribute_points",
          "generate_name",
          "__init__",
          "add_item",
          "remove_item",
          "update_weight",
          "select",
          "select_multiple",
          "get_probability",
          "to_dict",
          "__len__",
          "__str__",
          "__init__",
          "uniform_distribution",
          "normal_distribution",
          "skewed_distribution",
          "tiered_distribution",
          "__init__",
          "_find_data_dir",
          "_load_name_data",
          "_save_name_data",
          "add_first_names",
          "add_last_names",
          "add_place_names",
          "generate_first_name",
          "generate_last_name",
          "generate_full_name",
          "generate_place_name",
          "_generate_placeholder_name",
          "generate_unique_id"
        ],
        "imports": [
          "random",
          "math",
          "logging",
          "uuid",
          "typing.Dict",
          "typing.List",
          "typing.Set",
          "typing.Optional",
          "typing.Tuple",
          "typing.Any",
          "typing.Union",
          "typing.TypeVar",
          "typing.Generic",
          "typing.Callable",
          "string",
          "json",
          "pathlib.Path",
          "os",
          "re"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "File I/O",
          "Configuration"
        ],
        "complexity_score": 95,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_name",
              "generate_first_name",
              "generate_last_name",
              "generate_full_name",
              "generate_place_name",
              "_generate_placeholder_name",
              "generate_unique_id"
            ],
            "estimated_lines": 140,
            "priority": "high"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "update_weight",
              "get_probability",
              "_find_data_dir",
              "_load_name_data",
              "_save_name_data"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "WeightedRandomSelector",
              "AttributeDistributor",
              "NameGenerator"
            ],
            "estimated_lines": 90,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/time/services/time_manager.py",
        "lines": 859,
        "classes": [
          "TimeAdvancedEvent",
          "SeasonChangedEvent",
          "WeatherChangedEvent",
          "SpecialDateEvent",
          "TimeManager",
          "TimeEncoder"
        ],
        "functions": [
          "__new__",
          "get_instance",
          "__init__",
          "start_auto_advance",
          "stop_auto_advance",
          "_auto_advance_loop",
          "advance_time",
          "_process_scheduled_events",
          "_is_time_reached",
          "_calculate_next_occurrence",
          "schedule_event",
          "cancel_event",
          "register_time_changed_callback",
          "register_day_changed_callback",
          "register_month_changed_callback",
          "register_year_changed_callback",
          "register_season_changed_callback",
          "set_time_scale",
          "get_current_time",
          "save_state",
          "load_state",
          "get_time",
          "get_calendar",
          "config",
          "start_time_progression",
          "stop_time_progression",
          "set_time",
          "advance_time_by_unit",
          "register_callback",
          "unregister_callback",
          "get_event",
          "get_events",
          "configure_calendar",
          "add_important_date",
          "add_holiday",
          "remove_important_date",
          "remove_holiday",
          "get_important_dates_for_date",
          "get_holidays_for_date",
          "is_holiday_today",
          "get_current_time_formatted",
          "get_days_in_month",
          "is_special_date",
          "get_current_season",
          "get_current_weather",
          "get_current_temperature",
          "get_weather_last_changed",
          "export_state_to_json",
          "import_state_from_json",
          "reset",
          "pause",
          "resume",
          "toggle_pause",
          "set_time_scale_preset",
          "update_weather",
          "_emit_time_advanced_event",
          "default"
        ],
        "imports": [
          "asyncio",
          "logging",
          "random",
          "uuid",
          "json",
          "datetime.datetime",
          "datetime.timedelta",
          "heapq.heappush",
          "heapq.heappop",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Callable",
          "typing.Tuple",
          "typing.Any",
          "typing.Union",
          "time",
          "threading",
          "time",
          "logging",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Callable",
          "typing.Union",
          "datetime.datetime",
          "json",
          "backend.systems.time.models.time_model.GameTime",
          "backend.systems.time.models.time_model.TimeConfig",
          "backend.systems.time.models.time_model.TimeUnit",
          "backend.systems.time.models.calendar_model.CalendarData",
          "backend.systems.time.models.calendar_model.Season",
          "backend.systems.time.models.calendar_model.Month",
          "backend.systems.time.models.event_model.TimeEvent",
          "backend.systems.time.models.event_model.CalendarEvent",
          "backend.systems.time.models.weather_model.WeatherState",
          "backend.systems.time.models.weather_model.WeatherData",
          "backend.systems.time.services.event_scheduler.EventScheduler",
          "backend.systems.time.services.calendar_service.CalendarService",
          "backend.systems.time.services.weather_service.WeatherService",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.EventBase"
        ],
        "dependencies": "{'events', 'time'}",
        "responsibilities": [
          "Configuration",
          "Database Operations",
          "Event Handling",
          "Business Logic",
          "File I/O"
        ],
        "complexity_score": 99,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_instance",
              "get_current_time",
              "save_state",
              "load_state",
              "get_time",
              "get_calendar",
              "get_event",
              "get_events",
              "get_important_dates_for_date",
              "get_holidays_for_date",
              "get_current_time_formatted",
              "get_days_in_month",
              "get_current_season",
              "get_current_weather",
              "get_current_temperature",
              "get_weather_last_changed",
              "update_weather"
            ],
            "estimated_lines": 340,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_process_scheduled_events",
              "_calculate_next_occurrence"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "register_season_changed_callback",
              "_emit_time_advanced_event"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "configuration.py",
            "responsibility": "Configuration",
            "functions": [
              "config",
              "configure_calendar"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "TimeAdvancedEvent",
              "SeasonChangedEvent",
              "WeatherChangedEvent",
              "SpecialDateEvent",
              "TimeManager",
              "TimeEncoder"
            ],
            "estimated_lines": 180,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/llm/core/motif_system.py",
        "lines": 857,
        "classes": [
          "MotifOccurrence",
          "Motif",
          "MotifSystem",
          "ConfigDict"
        ],
        "functions": [
          "get_instance",
          "__init__",
          "create_motif",
          "record_occurrence",
          "get_motif",
          "get_motifs_by_category",
          "get_entity_motifs",
          "get_regional_motifs",
          "get_most_common_motifs",
          "suggest_motifs_for_context",
          "get_motif_narrative_context",
          "_store_motif",
          "_store_occurrence",
          "_update_related_motif_strengths",
          "_dict_to_motif",
          "_is_motif_cached",
          "_cache_motif",
          "_clear_motif_cache",
          "_get_motif_from_cache",
          "__init__"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "typing.Union",
          "logging",
          "datetime.datetime",
          "datetime.timedelta",
          "json",
          "math",
          "random",
          "uuid.uuid4",
          "firebase_admin.db",
          "pydantic.BaseModel",
          "pydantic.Field",
          "backend.systems.llm.core.event_integration.EventDispatcher",
          "backend.systems.llm.core.event_integration.MotifEvent",
          "pydantic.ConfigDict"
        ],
        "dependencies": "{'firebase', 'pydantic', 'llm'}",
        "responsibilities": [
          "Event Handling",
          "Data Models",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 81,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_instance",
              "create_motif",
              "get_motif",
              "get_motifs_by_category",
              "get_entity_motifs",
              "get_regional_motifs",
              "get_most_common_motifs",
              "get_motif_narrative_context",
              "_update_related_motif_strengths",
              "_get_motif_from_cache"
            ],
            "estimated_lines": 200,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "MotifOccurrence",
              "Motif",
              "MotifSystem",
              "ConfigDict"
            ],
            "estimated_lines": 120,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/world_generation/world_manager.py",
        "lines": 814,
        "classes": [
          "WorldManager",
          "MockRegionService",
          "MockRegionService",
          "MockRegionService"
        ],
        "functions": [
          "load_world_from_file",
          "save_world_to_file",
          "get_world_data",
          "get_region_data",
          "get_continent_data",
          "list_available_worlds",
          "__new__",
          "__init__",
          "initialize_world",
          "generate_world",
          "generate_continent",
          "_generate_regions_for_continent",
          "_generate_rivers_for_continent",
          "_generate_settlements_for_continent",
          "_generate_features_for_continent",
          "_generate_world_oceans",
          "_generate_climate_zones",
          "_collect_all_regions",
          "_get_continent_by_id",
          "_save_world_data",
          "load_world",
          "export_world",
          "import_world",
          "register_world",
          "unregister_world",
          "get_world",
          "has_world",
          "list_worlds",
          "save_world",
          "get_continent",
          "get_region",
          "get_instance",
          "create_new_region",
          "create_new_region",
          "create_new_region"
        ],
        "imports": [
          "os",
          "json",
          "time",
          "random",
          "typing.Dict",
          "typing.List",
          "typing.Tuple",
          "typing.Any",
          "typing.Optional",
          "continent_service.ContinentService",
          "biome_utils.BiomeCalculator",
          "river_generator.RiverGenerator",
          "settlement_service.SettlementService",
          "regional_features.RegionalFeatures",
          "world_generation_utils.generate_continent_region_coordinates",
          "world_generation_utils.get_continent_boundary",
          "world_generation_utils.map_region_to_latlon",
          "continent_repository.continent_repository",
          "continent_repository.continent_repository",
          "backend.systems.region.service.region_service",
          "backend.systems.region.service.region_service",
          "continent_repository.continent_repository",
          "yaml",
          "yaml",
          "backend.systems.region.service.region_service",
          "uuid.uuid4",
          "uuid.uuid4",
          "uuid.uuid4"
        ],
        "dependencies": "{'region'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "File I/O"
        ],
        "complexity_score": 100,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "load_world_from_file",
              "save_world_to_file",
              "get_world_data",
              "get_region_data",
              "get_continent_data",
              "_get_continent_by_id",
              "_save_world_data",
              "load_world",
              "get_world",
              "save_world",
              "get_continent",
              "get_region",
              "get_instance",
              "create_new_region",
              "create_new_region",
              "create_new_region"
            ],
            "estimated_lines": 320,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_world",
              "generate_continent",
              "_generate_regions_for_continent",
              "_generate_rivers_for_continent",
              "_generate_settlements_for_continent",
              "_generate_features_for_continent",
              "_generate_world_oceans",
              "_generate_climate_zones"
            ],
            "estimated_lines": 160,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "WorldManager",
              "MockRegionService",
              "MockRegionService",
              "MockRegionService"
            ],
            "estimated_lines": 120,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/quest/utils.py",
        "lines": 787,
        "classes": [
          "QuestLogEntry",
          "QuestValidator",
          "QuestUtils"
        ],
        "functions": [
          "generate_quest_title",
          "generate_quest_steps",
          "calculate_quest_reward",
          "generate_journal_entry",
          "dict",
          "validate_quest_id",
          "validate_player_id",
          "validate_arc_type",
          "validate_quest_data",
          "_validate_rewards",
          "_validate_requirements",
          "_validate_steps",
          "validate_timestamp",
          "validate_journal_entry",
          "validate_quest_assignment",
          "validate_quest_completion",
          "create_quest",
          "get_quest",
          "get_all_quests",
          "update_quest",
          "update_quest_progress",
          "create_journal_entry",
          "get_player_journal_entries",
          "is_valid_step"
        ],
        "imports": [
          "logging",
          "re",
          "uuid",
          "datetime.datetime",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "dataclasses.dataclass",
          "dataclasses.field",
          "backend.systems.shared.utils.core.firebase_utils.get_firestore_client",
          "backend.systems.shared.utils.core.firebase_utils.get_document",
          "backend.systems.shared.utils.core.firebase_utils.set_document",
          "backend.systems.shared.utils.core.firebase_utils.update_document",
          "backend.systems.shared.utils.core.firebase_utils.get_collection",
          "backend.systems.shared.utils.common.error.ValidationError",
          "backend.systems.shared.utils.common.error.NotFoundError",
          "backend.systems.shared.utils.common.error.DatabaseError",
          "backend.systems.shared.database.db",
          "random"
        ],
        "dependencies": "{'firebase', 'shared'}",
        "responsibilities": [
          "Business Logic",
          "Data Models",
          "Database Operations"
        ],
        "complexity_score": 86,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_quest_title",
              "generate_quest_steps",
              "calculate_quest_reward",
              "generate_journal_entry",
              "validate_quest_id",
              "validate_player_id",
              "validate_arc_type",
              "validate_quest_data",
              "_validate_rewards",
              "_validate_requirements",
              "_validate_steps",
              "validate_timestamp",
              "validate_journal_entry",
              "validate_quest_assignment",
              "validate_quest_completion"
            ],
            "estimated_lines": 300,
            "priority": "high"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "create_quest",
              "get_quest",
              "get_all_quests",
              "update_quest",
              "update_quest_progress",
              "create_journal_entry",
              "get_player_journal_entries"
            ],
            "estimated_lines": 140,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "QuestLogEntry",
              "QuestValidator",
              "QuestUtils"
            ],
            "estimated_lines": 90,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_generation/components.py",
        "lines": 719,
        "classes": [
          "ComponentType",
          "ComponentPriority",
          "ComponentResult",
          "WorldGenerationContext",
          "GenerationComponent",
          "BiomeGenerationComponent",
          "ElevationGenerationComponent",
          "RiverGenerationComponent",
          "ResourceGenerationComponent",
          "CoastlineGenerationComponent",
          "ClimateGenerationComponent",
          "UtilityComponent",
          "BiomeAdjacencyComponent",
          "CoastlineSmoothingComponent",
          "ElevationGeneratorComponent",
          "RiverGeneratorComponent",
          "ResourceGeneratorComponent",
          "ComponentRegistry"
        ],
        "functions": [
          "__post_init__",
          "__init__",
          "log_execution",
          "get_result",
          "has_result",
          "cache_data",
          "get_cached_data",
          "has_cached_data",
          "__init__",
          "add_dependency",
          "remove_dependency",
          "set_priority",
          "set_config",
          "get_parameter",
          "execute",
          "validate_dependencies",
          "__str__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "execute",
          "__init__",
          "execute",
          "__init__",
          "execute",
          "__init__",
          "execute",
          "__init__",
          "execute",
          "__init__",
          "register",
          "unregister",
          "get",
          "get_all",
          "get_by_type",
          "get_names",
          "get_names_by_type",
          "clear",
          "register_default_components"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Type",
          "typing.Callable",
          "typing.Union",
          "typing.Set",
          "typing.Tuple",
          "abc.ABC",
          "abc.abstractmethod",
          "logging",
          "inspect",
          "time",
          "enum.Enum",
          "enum.auto",
          "dataclasses.dataclass",
          "backend.systems.data.schemas.biome_schema.BiomeSchema",
          "backend.systems.world_generation.models.CoordinateSchema",
          "backend.systems.world_generation.models.ContinentSchema",
          "backend.systems.world_generation.models.Region",
          "backend.systems.world_generation.models.River",
          "backend.systems.world_generation.models.Resource",
          "backend.systems.world_generation.models.World",
          "backend.systems.world_generation.models.WorldSeed",
          "backend.systems.world_generation.models.RegionGenerationParams",
          "backend.systems.world_generation.config.PipelineConfig",
          "backend.systems.world_generation.config.ComponentConfig",
          "backend.systems.world_generation.biome_utils.load_adjacency_rules",
          "backend.systems.world_generation.biome_utils.apply_adjacency_rules",
          "backend.systems.world_generation.coastline_utils.identify_coastlines",
          "backend.systems.world_generation.coastline_utils.smooth_coastlines",
          "backend.systems.world_generation.coastline_utils.place_beaches",
          "backend.systems.world_generation.elevation_utils.generate_noise_elevation",
          "backend.systems.world_generation.elevation_utils.add_mountain_ranges",
          "backend.systems.world_generation.river_generator.RiverGenerator",
          "backend.systems.world_generation.resource_utils.generate_resources",
          "backend.systems.world_generation.resource_utils.calculate_resource_weights"
        ],
        "dependencies": "{'world_generation', 'data'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 88,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_result",
              "get_cached_data",
              "get_parameter",
              "get_all",
              "get_by_type",
              "get_names",
              "get_names_by_type"
            ],
            "estimated_lines": 140,
            "priority": "high"
          },
          {
            "module_name": "configuration.py",
            "responsibility": "Configuration",
            "functions": [
              "set_config"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "validate_dependencies"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "ComponentType",
              "ComponentPriority",
              "ComponentResult",
              "WorldGenerationContext",
              "GenerationComponent",
              "BiomeGenerationComponent",
              "ElevationGenerationComponent",
              "RiverGenerationComponent",
              "ResourceGenerationComponent",
              "CoastlineGenerationComponent",
              "ClimateGenerationComponent",
              "UtilityComponent",
              "BiomeAdjacencyComponent",
              "CoastlineSmoothingComponent",
              "ElevationGeneratorComponent",
              "RiverGeneratorComponent",
              "ResourceGeneratorComponent",
              "ComponentRegistry"
            ],
            "estimated_lines": 540,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/world_state/utils/tick_utils.py",
        "lines": 709,
        "classes": [
          "Faction",
          "NPC",
          "WorldEvent"
        ],
        "functions": [
          "validate_event_data",
          "validate_event_timing",
          "validate_event_status",
          "validate_affected_entities",
          "validate_world_state",
          "validate_region_state",
          "validate_faction_state",
          "process_world_tick",
          "process_npc_actions",
          "process_faction_activities",
          "process_faction_state",
          "process_war_state",
          "process_project_state",
          "check_faction_conflicts",
          "get_shared_borders",
          "calculate_quest_success_rate",
          "log_faction_event",
          "process_region_changes",
          "process_world_events",
          "handle_event_completion",
          "handle_event_effects",
          "handle_war_effects",
          "handle_trade_effects",
          "handle_diplomatic_effects",
          "handle_festival_effects",
          "handle_calamity_effects",
          "handle_discovery_effects",
          "handle_religious_effects",
          "handle_war_completion",
          "handle_trade_completion",
          "handle_diplomatic_completion",
          "handle_festival_completion",
          "handle_calamity_completion",
          "handle_discovery_completion",
          "handle_religious_completion",
          "generate_random_event",
          "calculate_event_weights",
          "generate_event_data",
          "generate_trade_event_data",
          "generate_diplomatic_event_data",
          "calculate_event_duration",
          "handle_tick_events",
          "__init__",
          "__init__",
          "__init__"
        ],
        "imports": [
          "datetime.datetime",
          "random",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Union",
          "logging",
          "json",
          "os",
          "datetime.datetime",
          "backend.systems.world_state.consolidated_world_models.WorldState",
          "backend.systems.world_state.consolidated_world_models.Region",
          "backend.systems.shared.utils.common.error.ValidationError",
          "logging",
          "datetime.timedelta"
        ],
        "dependencies": "{'shared', 'world_state'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling",
          "Configuration"
        ],
        "complexity_score": 93,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "validate_event_data",
              "validate_event_timing",
              "validate_event_status",
              "validate_affected_entities",
              "validate_world_state",
              "validate_region_state",
              "validate_faction_state",
              "process_world_tick",
              "process_npc_actions",
              "process_faction_activities",
              "process_faction_state",
              "process_war_state",
              "process_project_state",
              "calculate_quest_success_rate",
              "process_region_changes",
              "process_world_events",
              "handle_event_completion",
              "handle_event_effects",
              "handle_war_effects",
              "handle_trade_effects",
              "handle_diplomatic_effects",
              "handle_festival_effects",
              "handle_calamity_effects",
              "handle_discovery_effects",
              "handle_religious_effects",
              "handle_war_completion",
              "handle_trade_completion",
              "handle_diplomatic_completion",
              "handle_festival_completion",
              "handle_calamity_completion",
              "handle_discovery_completion",
              "handle_religious_completion",
              "generate_random_event",
              "calculate_event_weights",
              "generate_event_data",
              "generate_trade_event_data",
              "generate_diplomatic_event_data",
              "calculate_event_duration",
              "handle_tick_events"
            ],
            "estimated_lines": 780,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "check_faction_conflicts",
              "log_faction_event"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_shared_borders"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "Faction",
              "NPC",
              "WorldEvent"
            ],
            "estimated_lines": 90,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/memory/models/memory.py",
        "lines": 704,
        "classes": [
          "MemoryType",
          "MemoryEmotionalValence",
          "MemoryCreatedEvent",
          "MemoryDecayedEvent",
          "MemoryCategorizedEvent",
          "MemoryAccessedEvent",
          "MemoryRecalledEvent",
          "MemoryGraphLink",
          "Memory"
        ],
        "functions": [
          "__init__",
          "to_dict",
          "from_dict",
          "__init__",
          "recall",
          "access",
          "update_categories",
          "update_strength",
          "get_current_saliency",
          "calculate_relevance",
          "is_expired",
          "add_link",
          "has_tag",
          "add_tag",
          "remove_tag",
          "has_category",
          "memory_graph",
          "_emit_created_event",
          "_emit_accessed_event",
          "_emit_categorized_event",
          "to_dict",
          "from_dict",
          "__str__"
        ],
        "imports": [
          "logging",
          "time",
          "uuid",
          "math",
          "enum.Enum",
          "enum.auto",
          "datetime.datetime",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "typing.Set",
          "typing.Type",
          "typing.TypeVar",
          "memory_categories.MemoryCategory",
          "memory_categories.categorize_memory_content",
          "memory_categories.apply_category_modifiers",
          "saliency_scoring.calculate_initial_importance",
          "saliency_scoring.calculate_memory_saliency",
          "backend.systems.events.EventBase"
        ],
        "dependencies": "{'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 81,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "update_categories",
              "update_strength",
              "get_current_saliency"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_relevance"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "_emit_created_event",
              "_emit_accessed_event",
              "_emit_categorized_event"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "MemoryType",
              "MemoryEmotionalValence",
              "MemoryCreatedEvent",
              "MemoryDecayedEvent",
              "MemoryCategorizedEvent",
              "MemoryAccessedEvent",
              "MemoryRecalledEvent",
              "MemoryGraphLink",
              "Memory"
            ],
            "estimated_lines": 270,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/world_generation/world_generator.py",
        "lines": 682,
        "classes": [
          "GenerationPhase",
          "GenerationStatus",
          "WorldGenerator",
          "MockRegionService",
          "MockRegionService"
        ],
        "functions": [
          "__new__",
          "__init__",
          "initialize_world",
          "generate_world",
          "generate_continent",
          "_generate_regions_for_continent",
          "_generate_rivers_for_continent",
          "_generate_settlements_for_continent",
          "_generate_features_for_continent",
          "_generate_world_oceans",
          "_generate_climate_zones",
          "_get_continent_regions",
          "_collect_all_regions",
          "_get_continent_by_id",
          "get_weather_for_region",
          "_save_world_data",
          "load_world",
          "export_world",
          "create_new_region",
          "create_new_region"
        ],
        "imports": [
          "os",
          "json",
          "time",
          "random",
          "logging",
          "typing.Dict",
          "typing.List",
          "typing.Tuple",
          "typing.Any",
          "typing.Optional",
          "typing.Union",
          "uuid.uuid4",
          "datetime.datetime",
          "enum.Enum",
          "continent_service.ContinentService",
          "biome_utils.BiomeCalculator",
          "biome_utils.load_adjacency_rules",
          "river_generator.generate_rivers_for_region",
          "settlement_service.SettlementService",
          "regional_features.RegionalFeatures",
          "world_utils.generate_region",
          "world_utils.walk_region",
          "world_utils.claim_region_hexes_for_city",
          "world_utils.generate_settlements",
          "world_utils.generate_non_settlement_pois",
          "world_utils.generate_minor_nature_squares",
          "world_generation_utils.generate_continent_region_coordinates",
          "world_generation_utils.get_continent_boundary",
          "world_generation_utils.map_region_to_latlon",
          "world_generation_utils.generate_procedural_weather",
          "models.CoordinateSchema",
          "models.ContinentSchema",
          "models.ContinentBoundarySchema",
          "models.ContinentCreationRequestSchema",
          "backend.systems.world_generation.continent_repository.continent_repository",
          "backend.systems.world_generation.world_generation_utils.generate_procedural_weather",
          "backend.systems.world_generation.world_generation_utils.map_region_to_latlon",
          "backend.systems.world_generation.models.CoordinateSchema",
          "backend.systems.world_generation.continent_repository.continent_repository",
          "backend.systems.region.service.region_service",
          "backend.systems.region.service.region_service",
          "csv"
        ],
        "dependencies": "{'world_generation', 'region'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "File I/O"
        ],
        "complexity_score": 90,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_world",
              "generate_continent",
              "_generate_regions_for_continent",
              "_generate_rivers_for_continent",
              "_generate_settlements_for_continent",
              "_generate_features_for_continent",
              "_generate_world_oceans",
              "_generate_climate_zones"
            ],
            "estimated_lines": 160,
            "priority": "high"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "_get_continent_regions",
              "_get_continent_by_id",
              "get_weather_for_region",
              "_save_world_data",
              "load_world",
              "create_new_region",
              "create_new_region"
            ],
            "estimated_lines": 140,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "GenerationPhase",
              "GenerationStatus",
              "WorldGenerator",
              "MockRegionService",
              "MockRegionService"
            ],
            "estimated_lines": 150,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/events/event_dispatcher.py",
        "lines": 657,
        "classes": [
          "EventBase",
          "EventMiddleware",
          "EventDispatcher"
        ],
        "functions": [
          "__str__",
          "process_event",
          "get_instance",
          "reset_instance",
          "__init__",
          "subscribe",
          "subscribe_async",
          "unsubscribe",
          "unsubscribe_async",
          "add_middleware",
          "set_event_type_priority",
          "get_event_type_priority",
          "publish",
          "publish_sync",
          "dispatch",
          "publish_batch",
          "publish_background",
          "_process_sync_handlers_and_middleware",
          "_call_sync_handlers",
          "clear_handlers",
          "get_event_priority",
          "process_at_index",
          "next_middleware"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Callable",
          "typing.Union",
          "typing.Type",
          "typing.TypeVar",
          "typing.Awaitable",
          "typing.Optional",
          "logging",
          "asyncio",
          "concurrent.futures.ThreadPoolExecutor",
          "pydantic.BaseModel",
          "logging",
          "logging",
          "inspect",
          "inspect",
          "inspect"
        ],
        "dependencies": "{'pydantic'}",
        "responsibilities": [
          "Business Logic",
          "Data Models",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 82,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "process_event",
              "_process_sync_handlers_and_middleware",
              "process_at_index"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_instance",
              "get_event_type_priority",
              "get_event_priority"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "subscribe_async",
              "unsubscribe_async"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "EventBase",
              "EventMiddleware",
              "EventDispatcher"
            ],
            "estimated_lines": 90,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/llm/core/event_integration.py",
        "lines": 654,
        "classes": [
          "EventBase",
          "EventHandler",
          "EventMiddleware",
          "MiddlewareChain",
          "LoggingMiddleware",
          "ValidationMiddleware",
          "AnalyticsMiddleware",
          "ThrottlingMiddleware",
          "EventTransformMiddleware",
          "EventDispatcher",
          "MemoryEvent",
          "RumorEvent",
          "MotifEvent",
          "FactionEvent",
          "MotifChangedEvent",
          "POIStateChangedEvent",
          "QuestUpdatedEvent",
          "CombatEvent",
          "TimeAdvancedEvent",
          "ConfigDict"
        ],
        "functions": [
          "logging_middleware",
          "analytics_middleware",
          "filtering_middleware",
          "register_narrative_handlers",
          "__init__",
          "process",
          "__init__",
          "add",
          "add_middleware",
          "remove",
          "remove_middleware",
          "process",
          "__init__",
          "process",
          "process",
          "__init__",
          "process",
          "__init__",
          "process",
          "__init__",
          "process",
          "get_instance",
          "__init__",
          "subscribe",
          "unsubscribe",
          "add_middleware",
          "remove_middleware",
          "publish_sync",
          "publish_async",
          "publish",
          "_apply_middleware",
          "memory_handler",
          "rumor_handler",
          "motif_handler",
          "faction_handler",
          "__init__"
        ],
        "imports": [
          "logging",
          "time",
          "uuid",
          "threading",
          "json",
          "datetime.datetime",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Callable",
          "typing.Type",
          "typing.TypeVar",
          "typing.Optional",
          "typing.Set",
          "typing.Union",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.ConfigDict"
        ],
        "dependencies": "{'pydantic'}",
        "responsibilities": [
          "Data Models",
          "Configuration",
          "Database Operations",
          "Event Handling",
          "File I/O"
        ],
        "complexity_score": 89,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_instance"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "faction_handler"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "EventBase",
              "EventHandler",
              "EventMiddleware",
              "MiddlewareChain",
              "LoggingMiddleware",
              "ValidationMiddleware",
              "AnalyticsMiddleware",
              "ThrottlingMiddleware",
              "EventTransformMiddleware",
              "EventDispatcher",
              "MemoryEvent",
              "RumorEvent",
              "MotifEvent",
              "FactionEvent",
              "MotifChangedEvent",
              "POIStateChangedEvent",
              "QuestUpdatedEvent",
              "CombatEvent",
              "TimeAdvancedEvent",
              "ConfigDict"
            ],
            "estimated_lines": 600,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/world_generation/modding_system.py",
        "lines": 639,
        "classes": [
          "ModDataManager",
          "ModValidationService",
          "ModSynchronizer",
          "TechnicalModInterface",
          "CasualModInterface"
        ],
        "functions": [
          "__init__",
          "_load_schemas",
          "get_available_worlds",
          "load_world_seed",
          "save_world_seed",
          "validate_world_seed",
          "__init__",
          "_load_schemas",
          "validate_mod",
          "__init__",
          "check_conflicts",
          "merge_world_seeds",
          "merge_dict",
          "merge_biomes",
          "merge_factions",
          "__init__",
          "create_new_world_seed",
          "validate_json",
          "save_world_seed",
          "__init__",
          "get_available_assets",
          "create_world_from_selections",
          "_load_asset",
          "save_world_seed"
        ],
        "imports": [
          "os",
          "json",
          "random",
          "shutil",
          "typing.Dict",
          "typing.List",
          "typing.Tuple",
          "typing.Set",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "pathlib.Path",
          "datetime.datetime",
          "logging",
          "uuid"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Data Models",
          "Configuration",
          "Database Operations",
          "Business Logic",
          "File I/O"
        ],
        "complexity_score": 98,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "_load_schemas",
              "get_available_worlds",
              "load_world_seed",
              "save_world_seed",
              "_load_schemas",
              "create_new_world_seed",
              "save_world_seed",
              "get_available_assets",
              "create_world_from_selections",
              "_load_asset",
              "save_world_seed"
            ],
            "estimated_lines": 220,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "validate_world_seed",
              "validate_mod",
              "validate_json"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "ModDataManager",
              "ModValidationService",
              "ModSynchronizer",
              "TechnicalModInterface",
              "CasualModInterface"
            ],
            "estimated_lines": 150,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/llm/core/gpt_integration.py",
        "lines": 632,
        "classes": [
          "GPTEvent",
          "GPTModel",
          "GPTIntegration",
          "GPTIntegrationService"
        ],
        "functions": [
          "format_prompt",
          "get_system_prompt",
          "combine_contexts",
          "_deep_merge",
          "process_response",
          "generate_text",
          "analyze_text_importance",
          "generate_character_dialogue",
          "__init__",
          "__init__",
          "get_instance",
          "__init__",
          "_load_prompt",
          "prompt_exists",
          "get_prompt_template",
          "get_event_metadata",
          "clear_cache",
          "get_instance",
          "__init__",
          "register_model",
          "generate_narrative_text",
          "generate_dialogue",
          "analyze_memory_importance",
          "_build_prompt",
          "_call_gpt",
          "replace_variable"
        ],
        "imports": [
          "logging",
          "openai",
          "os",
          "json",
          "re",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Union",
          "datetime.datetime",
          "backend.systems.events.models.EventBase",
          "asyncio",
          "backend.systems.llm.core.event_integration.EventDispatcher",
          "backend.systems.llm.services.gpt_client.GPTClient",
          "re"
        ],
        "dependencies": "{'events', 'llm'}",
        "responsibilities": [
          "Configuration",
          "Utilities",
          "Database Operations",
          "Event Handling",
          "Business Logic",
          "File I/O"
        ],
        "complexity_score": 93,
        "refactoring_priority": "CRITICAL",
        "suggested_modules": [
          {
            "module_name": "utilities.py",
            "responsibility": "Utilities",
            "functions": [
              "format_prompt"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_system_prompt",
              "get_instance",
              "_load_prompt",
              "get_prompt_template",
              "get_event_metadata",
              "get_instance"
            ],
            "estimated_lines": 120,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "process_response",
              "generate_text",
              "generate_character_dialogue",
              "generate_narrative_text",
              "generate_dialogue"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "GPTEvent",
              "GPTModel",
              "GPTIntegration",
              "GPTIntegrationService"
            ],
            "estimated_lines": 120,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/npc/services/npc_service.py",
        "lines": 1527,
        "classes": [
          "NPCService"
        ],
        "functions": [
          "get_npc_service",
          "get_instance",
          "__init__",
          "create_npc",
          "get_npc",
          "list_npcs",
          "update_npc",
          "delete_npc",
          "get_npc_location",
          "update_npc_location",
          "get_npc_memories",
          "add_memory_to_npc",
          "recall_memory",
          "reinforce_memory",
          "forget_memory",
          "get_npc_faction_status",
          "adjust_npc_faction_allegiance",
          "set_primary_faction",
          "get_npc_rumors",
          "add_rumor_to_npc",
          "spread_rumor",
          "forget_rumor",
          "get_npc_motifs",
          "apply_motif_to_npc",
          "update_motif",
          "remove_motif",
          "run_monthly_population_update",
          "run_rumor_decay",
          "apply_global_motifs_to_all_npcs"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "typing.Union",
          "typing.Tuple",
          "typing.cast",
          "uuid.uuid4",
          "datetime.datetime",
          "datetime.timedelta",
          "logging",
          "json",
          "random",
          "firebase_admin.db",
          "backend.systems.events.get_event_dispatcher",
          "backend.systems.npc.models.npc_events.NPCCreated",
          "backend.systems.npc.models.npc_events.NPCUpdated",
          "backend.systems.npc.models.npc_events.NPCDeleted",
          "backend.systems.npc.models.npc_events.NPCMoved",
          "backend.systems.npc.models.npc_events.NPCFactionChanged",
          "backend.systems.npc.models.npc_events.NPCFactionAllegianceAdjusted",
          "backend.systems.npc.models.npc_events.NPCFactionSwitched",
          "backend.systems.npc.models.npc_events.NPCMotifUpdated",
          "backend.systems.npc.models.npc_events.NPCMotifApplied",
          "backend.systems.npc.models.npc_events.NPCRumorLearned",
          "backend.systems.npc.models.npc_events.NPCRumorSpread",
          "backend.systems.npc.models.npc_events.NPCRumorForgotten",
          "backend.systems.npc.models.npc_events.NPCMemoryCreated",
          "backend.systems.npc.models.npc_events.NPCMemoryRecalled",
          "backend.systems.npc.models.npc_events.NPCMemoryReinforced",
          "backend.systems.npc.models.npc_events.NPCMemoryForgotten",
          "backend.systems.npc.models.npc_events.NPCScheduledActionCompleted",
          "backend.systems.npc.models.npc_events.NPCInteracted",
          "backend.systems.npc.models.npc_events.NPCGenerated",
          "backend.systems.npc.models.npc_events.NPCJoinedParty",
          "backend.systems.npc.models.npc_events.NPCLeftParty",
          "backend.systems.npc.models.npc_events.NPCLoyaltyChanged",
          "math"
        ],
        "dependencies": "{'firebase', 'npc', 'events'}",
        "responsibilities": [
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 79,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_npc_service",
              "get_instance",
              "create_npc",
              "get_npc",
              "update_npc",
              "delete_npc",
              "get_npc_location",
              "update_npc_location",
              "get_npc_memories",
              "forget_memory",
              "get_npc_faction_status",
              "get_npc_rumors",
              "forget_rumor",
              "get_npc_motifs",
              "update_motif"
            ],
            "estimated_lines": 300,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "adjust_npc_faction_allegiance",
              "run_monthly_population_update"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "NPCService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/population/service.py",
        "lines": 1519,
        "classes": [
          "PopulationService"
        ],
        "functions": [
          "__new__",
          "_calculate_dungeon_difficulty",
          "_estimate_treasure_level"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Tuple",
          "typing.Any",
          "typing.Union",
          "math",
          "datetime.datetime",
          "backend.systems.population.models.POIPopulation",
          "backend.systems.population.models.POIType",
          "backend.systems.population.models.POIState",
          "backend.systems.population.models.PopulationConfig",
          "backend.systems.population.models.PopulationChangedEvent",
          "logging",
          "backend.systems.population.utils.calculate_growth_rate",
          "backend.systems.population.utils.calculate_next_state",
          "backend.systems.population.utils.calculate_target_population",
          "backend.systems.population.utils.calculate_catastrophe_impact",
          "backend.systems.population.utils.calculate_war_impact",
          "backend.systems.population.utils.calculate_resource_shortage_impact",
          "backend.systems.population.utils.calculate_seasonal_growth_modifier",
          "backend.systems.population.utils.calculate_seasonal_death_rate_modifier",
          "backend.systems.population.utils.estimate_time_to_state",
          "backend.systems.population.utils.is_valid_transition",
          "backend.systems.population.utils.calculate_migration_impact",
          "backend.systems.population.utils.get_poi_status_description",
          "backend.systems.population.events.PopulationChangedEventData",
          "backend.systems.population.events.PopulationStateChangedEventData",
          "backend.systems.population.events.PopulationWarImpactEventData",
          "backend.systems.population.events.PopulationCatastropheEventData",
          "backend.systems.population.events.PopulationMigrationEventData",
          "backend.systems.population.events.PopulationResourceShortageEventData",
          "backend.systems.population.events.PopulationSeasonalEffectEventData",
          "backend.systems.events.EventDispatcher"
        ],
        "dependencies": "{'population', 'events'}",
        "responsibilities": [
          "Configuration",
          "Utilities",
          "Database Operations",
          "Event Handling",
          "Business Logic"
        ],
        "complexity_score": 53,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_calculate_dungeon_difficulty"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "PopulationService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/religion/services.py",
        "lines": 1079,
        "classes": [
          "ReligionEvent",
          "ReligionMembershipEvent",
          "ReligionNarrativeEvent",
          "ReligionService"
        ],
        "functions": [
          "get_religion_service",
          "__init__",
          "create_religion",
          "get_religion",
          "get_religions",
          "update_religion",
          "delete_religion",
          "create_membership",
          "get_entity_memberships",
          "get_religion_memberships",
          "update_membership_level",
          "remove_membership",
          "update_devotion",
          "trigger_narrative_hook",
          "_check_for_quest_integration",
          "sync_with_faction",
          "_handle_faction_membership_change",
          "get_membership_count",
          "get_membership"
        ],
        "imports": [
          "logging",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Tuple",
          "datetime.datetime",
          "models.Religion",
          "models.ReligionMembership",
          "models.ReligionType",
          "models.MembershipLevel",
          "repository.ReligionRepository",
          "repository.get_religion_repository",
          "utils.calculate_devotion_change",
          "utils.generate_conversion_narrative",
          "utils.generate_religion_event",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.EventBase",
          "backend.systems.faction.get_faction_service",
          "backend.systems.quest.get_quest_service"
        ],
        "dependencies": "{'events', 'faction', 'quest'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 76,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_religion_service",
              "create_religion",
              "get_religion",
              "get_religions",
              "update_religion",
              "delete_religion",
              "create_membership",
              "get_entity_memberships",
              "get_religion_memberships",
              "update_membership_level",
              "update_devotion",
              "get_membership_count",
              "get_membership"
            ],
            "estimated_lines": 260,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_handle_faction_membership_change"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "ReligionEvent",
              "ReligionMembershipEvent",
              "ReligionNarrativeEvent",
              "ReligionService"
            ],
            "estimated_lines": 120,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/quest/quest_manager.py",
        "lines": 1043,
        "classes": [
          "QuestManager"
        ],
        "functions": [
          "__init__",
          "update_step_status",
          "accept_quest",
          "abandon_quest",
          "complete_quest",
          "fail_quest",
          "accept_quest_from_board",
          "load_player_arc",
          "save_player_arc",
          "get_player_arcs",
          "get_arc",
          "create_regional_arc",
          "create_global_arc",
          "update_arc_progress",
          "unlock_next_chapter",
          "on_motif_changed",
          "register_event_handlers"
        ],
        "imports": [
          "logging",
          "uuid",
          "datetime.datetime",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "backend.systems.shared.utils.core.firebase_utils.get_firestore_client",
          "backend.systems.shared.utils.core.firebase_utils.get_document",
          "backend.systems.shared.utils.core.firebase_utils.set_document",
          "backend.systems.shared.utils.core.firebase_utils.update_document",
          "backend.systems.shared.utils.core.firebase_utils.get_collection",
          "backend.systems.shared.utils.common.error.ValidationError",
          "backend.systems.shared.utils.common.error.NotFoundError",
          "backend.systems.shared.utils.common.error.DatabaseError",
          "backend.systems.events.get_event_dispatcher",
          "backend.systems.events.QuestCompletedEvent",
          "backend.systems.events.QuestAcceptedEvent",
          "backend.systems.events.QuestAbandonedEvent",
          "backend.systems.events.QuestFailedEvent",
          "backend.systems.events.QuestStepUpdatedEvent",
          "utils.QuestValidator",
          "motif_integration.QuestMotifIntegration",
          "database.QuestRepository"
        ],
        "dependencies": "{'firebase', 'events', 'shared'}",
        "responsibilities": [
          "Business Logic",
          "Data Models",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 67,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "update_step_status",
              "load_player_arc",
              "save_player_arc",
              "get_player_arcs",
              "get_arc",
              "create_regional_arc",
              "create_global_arc",
              "update_arc_progress"
            ],
            "estimated_lines": 160,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "abandon_quest",
              "on_motif_changed"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "QuestManager"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/quest/motif_integration.py",
        "lines": 1041,
        "classes": [
          "QuestMotifIntegration"
        ],
        "functions": [
          "get_motif_patterns",
          "generate_motif_quest",
          "_modify_quest_steps_for_motif",
          "generate_regional_arc_quest",
          "generate_global_arc_quest",
          "process_motif_quest_completion",
          "apply_motif_to_quest",
          "get_regional_motifs",
          "get_active_motifs",
          "register_event_handlers",
          "update_quest_with_motif_changes",
          "apply_regional_motif_shift",
          "apply_global_motif_changes",
          "process_quest_motif_impact",
          "sync_quest_with_motifs"
        ],
        "imports": [
          "logging",
          "random",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "backend.systems.events.get_event_dispatcher",
          "models.Quest",
          "models.QuestStep",
          "generator.QuestGenerator",
          "backend.systems.motif.MotifManager",
          "backend.systems.arc.services.arc_manager.ArcManager",
          "backend.systems.arc.models.ArcType",
          "backend.systems.arc.models.ArcStatus"
        ],
        "dependencies": "{'events', 'motif', 'arc'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 73,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_motif_patterns",
              "get_regional_motifs",
              "get_active_motifs",
              "update_quest_with_motif_changes"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_motif_quest",
              "generate_regional_arc_quest",
              "generate_global_arc_quest",
              "process_motif_quest_completion",
              "process_quest_motif_impact"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "QuestMotifIntegration"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/combat/unified_combat_utils.py",
        "lines": 1016,
        "classes": [
          "DamageType",
          "StatusEffectType",
          "StatusEffectTarget",
          "EffectDuration"
        ],
        "functions": [
          "calculate_base_damage",
          "apply_critical_hit",
          "calculate_mitigation",
          "apply_full_damage_calculation",
          "get_valid_targets",
          "get_turn_order",
          "resolve_combat_action",
          "apply_status_effect",
          "process_status_effects",
          "remove_status_effect",
          "dispel_effects",
          "is_attack_successful",
          "get_elemental_effectiveness",
          "has_effect",
          "get_effect",
          "get_effect_stacks",
          "register_combat_event_handlers",
          "create_combat_event_handler",
          "remove_combat_event_handler"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Tuple",
          "typing.Union",
          "typing.Callable",
          "typing.Any",
          "enum.Enum",
          "random",
          "math",
          "logging",
          "backend.systems.combat.combat_types_stub.Character",
          "backend.systems.combat.combat_types_stub.CombatState",
          "backend.systems.combat.combat_types_stub.CombatAction",
          "backend.systems.combat.combat_types_stub.CombatEvent",
          "backend.systems.combat.combat_types_stub.StatusEffect",
          "backend.systems.combat.combat_types_stub.DamageCalculation",
          "backend.systems.combat.combat_types_stub.ActionResult"
        ],
        "dependencies": "{'combat'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 75,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_base_damage",
              "calculate_mitigation",
              "process_status_effects"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_valid_targets",
              "get_turn_order",
              "get_elemental_effectiveness",
              "get_effect",
              "get_effect_stacks",
              "create_combat_event_handler"
            ],
            "estimated_lines": 120,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "DamageType",
              "StatusEffectType",
              "StatusEffectTarget",
              "EffectDuration"
            ],
            "estimated_lines": 120,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/quest/system_hooks.py",
        "lines": 993,
        "classes": [
          "QuestSystemHooks"
        ],
        "functions": [
          "register_hooks",
          "_register_memory_hooks",
          "_register_rumor_hooks",
          "_register_population_hooks",
          "_register_core_hooks",
          "_get_players_in_region",
          "_generate_ruins_quests",
          "_generate_dungeon_quests"
        ],
        "imports": [
          "logging",
          "random",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "datetime.datetime",
          "backend.systems.events.get_event_dispatcher",
          "models.Quest",
          "models.QuestStep",
          "quest_manager.QuestManager",
          "motif_integration.QuestMotifIntegration",
          "faction_integration.QuestFactionIntegration",
          "generator.QuestGenerator",
          "utils.QuestUtils",
          "integration.QuestIntegration",
          "backend.systems.memory.MemoryManager",
          "backend.systems.rumor.RumorService",
          "backend.systems.population.population_service",
          "motif_integration.QuestMotifIntegration",
          "arc_manager.ArcManager",
          "backend.systems.player.PlayerManager",
          "backend.systems.world.WorldStateManager",
          "backend.systems.player.PlayerManager",
          "faction_integration.QuestFactionIntegration",
          "backend.systems.player.PlayerManager",
          "backend.systems.player.PlayerManager",
          "backend.systems.player.PlayerManager",
          "backend.systems.player.PlayerManager"
        ],
        "dependencies": "{'world', 'rumor', 'memory', 'player', 'population', 'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 67,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "_register_population_hooks"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "_get_players_in_region"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_generate_ruins_quests",
              "_generate_dungeon_quests"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "QuestSystemHooks"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/inventory/service.py",
        "lines": 989,
        "classes": [
          "InventoryService"
        ],
        "functions": [
          "_handle_validation_result",
          "create_item",
          "update_item",
          "delete_item",
          "get_item",
          "get_items",
          "create_inventory",
          "update_inventory",
          "delete_inventory",
          "get_inventory",
          "get_inventories",
          "get_inventory_by_owner",
          "get_inventory_stats",
          "add_item_to_inventory",
          "remove_item_from_inventory",
          "update_inventory_item",
          "equip_item",
          "unequip_item",
          "transfer_item",
          "validate_inventory_operation"
        ],
        "imports": [
          "logging",
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "typing.Tuple",
          "typing.Union",
          "datetime.datetime",
          "backend.systems.shared.database.db",
          "backend.systems.inventory.models.item.Item",
          "backend.systems.inventory.models.inventory.Inventory",
          "backend.systems.inventory.models.inventory_item.InventoryItem",
          "backend.systems.inventory.models.item_category.ItemCategory",
          "backend.systems.inventory.schemas.ItemResponse",
          "backend.systems.inventory.schemas.InventoryResponse",
          "backend.systems.inventory.schemas.InventoryItemResponse",
          "backend.systems.inventory.schemas.InventoryDetailResponse",
          "backend.systems.inventory.schemas.InventoryStats",
          "backend.systems.inventory.schemas.ValidationResponse",
          "backend.systems.inventory.validator.InventoryValidator",
          "backend.systems.inventory.repository.ItemRepository",
          "backend.systems.inventory.repository.InventoryRepository",
          "backend.systems.inventory.repository.InventoryItemRepository",
          "backend.systems.inventory.utils.InventoryUtils"
        ],
        "dependencies": "{'inventory', 'shared'}",
        "responsibilities": [
          "Business Logic",
          "Data Models",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 69,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_handle_validation_result",
              "validate_inventory_operation"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "create_item",
              "update_item",
              "delete_item",
              "get_item",
              "get_items",
              "create_inventory",
              "update_inventory",
              "delete_inventory",
              "get_inventory",
              "get_inventories",
              "get_inventory_by_owner",
              "get_inventory_stats",
              "update_inventory_item"
            ],
            "estimated_lines": 260,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "InventoryService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/time/utils/time_utils.py",
        "lines": 952,
        "classes": [],
        "functions": [
          "_get_time_manager",
          "get_current_time",
          "get_current_season",
          "get_formatted_time",
          "get_time_of_day",
          "is_daytime",
          "time_since",
          "format_time_since",
          "schedule_one_time_event",
          "schedule_recurring_event",
          "cancel_scheduled_event",
          "register_event_callback",
          "advance_time",
          "is_leap_year",
          "get_days_in_month",
          "add_important_date",
          "is_important_date",
          "format_time_difference",
          "time_to_string",
          "get_time_of_day_name",
          "is_daytime",
          "calculate_time_difference",
          "time_since",
          "format_time_since",
          "format_time_remaining",
          "convert_time_units",
          "parse_time_string",
          "is_valid_date",
          "get_date_string",
          "is_same_day",
          "is_same_month",
          "time_in_range",
          "time_to_seconds"
        ],
        "imports": [
          "datetime.datetime",
          "datetime.timedelta",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Tuple",
          "typing.Union",
          "typing.Any",
          "backend.systems.time.models.time_model.GameTime",
          "backend.systems.time.models.time_model.Season",
          "backend.systems.time.models.time_model.TimeUnit",
          "backend.systems.time.models.time_model.WorldTime",
          "backend.systems.time.models.calendar_model.Season",
          "backend.systems.time.models.event_model.EventType",
          "backend.systems.time.services.time_manager.TimeManager"
        ],
        "dependencies": "{'time'}",
        "responsibilities": [
          "Business Logic",
          "Utilities",
          "Database Operations"
        ],
        "complexity_score": 71,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "_get_time_manager",
              "get_current_time",
              "get_current_season",
              "get_formatted_time",
              "get_time_of_day",
              "get_days_in_month",
              "get_time_of_day_name",
              "get_date_string"
            ],
            "estimated_lines": 160,
            "priority": "high"
          },
          {
            "module_name": "utilities.py",
            "responsibility": "Utilities",
            "functions": [
              "format_time_since",
              "format_time_difference",
              "format_time_since",
              "format_time_remaining",
              "convert_time_units",
              "parse_time_string"
            ],
            "estimated_lines": 120,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_time_difference"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/arc/services/arc_manager.py",
        "lines": 946,
        "classes": [
          "ArcManager"
        ],
        "functions": [
          "__init__",
          "_arc_responds_to_event",
          "_arc_responds_to_quest",
          "_arc_responds_to_faction_changes",
          "_detect_quest_hooks",
          "_detect_npc_hooks",
          "_detect_faction_hooks",
          "_detect_location_hooks",
          "_detect_temporal_hooks",
          "_detect_narrative_bridges"
        ],
        "imports": [
          "logging",
          "datetime.datetime",
          "datetime.timedelta",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Tuple",
          "uuid.UUID",
          "models.Arc",
          "models.ArcType",
          "models.ArcStatus",
          "models.ArcPriority",
          "models.ArcStep",
          "models.ArcStepStatus",
          "models.ArcProgression",
          "models.ProgressionMethod",
          "models.ArcCompletionRecord",
          "models.ArcCompletionResult",
          "repositories.arc_repository.ArcRepository",
          "repositories.arc_step_repository.ArcStepRepository",
          "repositories.progression_repository.ProgressionRepository",
          "arc_generator.ArcGenerator",
          "arc_generator.ArcGenerator"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 67,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "_arc_responds_to_faction_changes",
              "_detect_faction_hooks",
              "_detect_location_hooks"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "ArcManager"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/region/service.py",
        "lines": 897,
        "classes": [
          "RegionService"
        ],
        "functions": [
          "__init__",
          "initialize",
          "_initialize_new_world",
          "get_world_metadata",
          "get_all_continents",
          "get_continent",
          "get_all_regions",
          "get_region",
          "get_regions_by_biome",
          "get_regions_at_coordinates",
          "get_adjacent_regions",
          "regenerate_world",
          "get_biome_data",
          "get_adjacency_rules",
          "get_region_by_coordinates",
          "generate_new_continent",
          "generate_new_region",
          "get_world_map",
          "get_neighbors",
          "get_continent_regions",
          "get_region_pois",
          "list_regions",
          "create_region",
          "update_region",
          "delete_region"
        ],
        "imports": [
          "os",
          "random",
          "json",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Tuple",
          "typing.Union",
          "backend.systems.region.models.Region",
          "backend.systems.region.models.RegionType",
          "backend.systems.data.GameDataRegistry",
          "backend.systems.region.repository.RegionRepository",
          "backend.systems.region.world_generator.WorldGenerator",
          "backend.systems.region.generators.RegionGenerator",
          "backend.systems.region.generators.ContinentGenerator",
          "backend.systems.region.models.RegionMetadata",
          "backend.systems.region.models.ContinentMetadata"
        ],
        "dependencies": "{'region', 'data'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 78,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_world_metadata",
              "get_all_continents",
              "get_continent",
              "get_all_regions",
              "get_region",
              "get_regions_by_biome",
              "get_regions_at_coordinates",
              "get_adjacent_regions",
              "get_biome_data",
              "get_adjacency_rules",
              "get_region_by_coordinates",
              "get_world_map",
              "get_neighbors",
              "get_continent_regions",
              "get_region_pois",
              "create_region",
              "update_region",
              "delete_region"
            ],
            "estimated_lines": 360,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "regenerate_world",
              "generate_new_continent",
              "generate_new_region"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "RegionService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/dialogue/faction_integration.py",
        "lines": 890,
        "classes": [
          "DialogueFactionIntegration"
        ],
        "functions": [
          "__init__",
          "add_faction_context_to_dialogue",
          "get_faction_relationship_for_dialogue",
          "get_war_dialogue_context",
          "get_tension_dialogue_references",
          "get_faction_description_for_dialogue",
          "get_war_status_summary",
          "_get_faction_info",
          "_get_character_faction_perspective",
          "_get_faction_relationships",
          "_get_faction_tensions",
          "_get_faction_wars",
          "_get_character_faction",
          "_get_faction_war_role",
          "_get_faction_war_perspective",
          "_get_war_opponents"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "logging",
          "backend.systems.faction.FactionFacade",
          "backend.systems.tension_war.services.tension_manager.TensionManager",
          "backend.systems.tension_war.services.war_manager.WarManager",
          "backend.systems.character.services.character_service.CharacterService"
        ],
        "dependencies": "{'tension_war', 'character', 'faction'}",
        "responsibilities": [
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 69,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "add_faction_context_to_dialogue"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_faction_relationship_for_dialogue",
              "get_war_dialogue_context",
              "get_tension_dialogue_references",
              "get_faction_description_for_dialogue",
              "get_war_status_summary",
              "_get_faction_info",
              "_get_character_faction_perspective",
              "_get_faction_relationships",
              "_get_faction_tensions",
              "_get_faction_wars",
              "_get_character_faction",
              "_get_faction_war_role",
              "_get_faction_war_perspective",
              "_get_war_opponents"
            ],
            "estimated_lines": 280,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "DialogueFactionIntegration"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/dialogue/dialogue_system.py",
        "lines": 873,
        "classes": [
          "Conversation",
          "DialogueSystem"
        ],
        "functions": [
          "get_dialogue_system",
          "__init__",
          "add_message",
          "get_context",
          "extract_information",
          "end_conversation",
          "is_active",
          "add_to_context",
          "add_participant",
          "remove_participant",
          "get_all_participants",
          "save",
          "load",
          "clear_cache",
          "_update_recent_messages",
          "get_instance",
          "__init__",
          "start_conversation",
          "end_conversation",
          "add_message_to_conversation",
          "generate_response",
          "get_conversation",
          "get_active_conversations",
          "_enhance_context_with_integrations"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Callable",
          "typing.Set",
          "logging",
          "uuid",
          "threading",
          "datetime.datetime",
          "backend.systems.dialogue.memory_integration.DialogueMemoryIntegration",
          "backend.systems.dialogue.motif_integration.DialogueMotifIntegration",
          "backend.systems.dialogue.faction_integration.DialogueFactionIntegration",
          "backend.systems.dialogue.population_integration.DialoguePopulationIntegration",
          "backend.systems.dialogue.world_state_integration.DialogueWorldStateIntegration",
          "backend.systems.dialogue.time_integration.DialogueTimeIntegration",
          "backend.systems.dialogue.poi_integration.DialoguePOIIntegration",
          "backend.systems.dialogue.quest_integration.DialogueQuestIntegration",
          "backend.systems.dialogue.region_integration.DialogueRegionIntegration",
          "backend.systems.dialogue.war_integration.DialogueWarIntegration",
          "backend.systems.dialogue.relationship_integration.DialogueRelationshipIntegration",
          "backend.systems.dialogue.analytics_integration.DialogueAnalyticsIntegration",
          "backend.systems.dialogue.events.DialogueEventEmitter",
          "backend.systems.dialogue.events.DialogueStartedEvent",
          "backend.systems.dialogue.events.DialogueMessageEvent",
          "backend.systems.dialogue.events.DialogueEndedEvent",
          "backend.systems.dialogue.conversation.ConversationHistory",
          "backend.systems.dialogue.conversation.ConversationEntry",
          "backend.systems.dialogue.cache.DialogueCache",
          "backend.systems.dialogue.utils.count_tokens",
          "backend.systems.dialogue.utils.relevance_score",
          "backend.systems.dialogue.utils.extract_key_info",
          "backend.systems.dialogue.utils.clean_text_for_dialogue",
          "backend.systems.llm.language_generator.LanguageGenerator",
          "json",
          "json"
        ],
        "dependencies": "{'dialogue', 'llm'}",
        "responsibilities": [
          "Configuration",
          "Database Operations",
          "Event Handling",
          "Business Logic",
          "File I/O"
        ],
        "complexity_score": 75,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_dialogue_system",
              "get_context",
              "get_all_participants",
              "_update_recent_messages",
              "get_instance",
              "get_conversation",
              "get_active_conversations"
            ],
            "estimated_lines": 140,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_response"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "Conversation",
              "DialogueSystem"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_state/utils/terrain_generator.py",
        "lines": 857,
        "classes": [
          "NoiseLayer",
          "TerrainConfig",
          "BiomeInfo",
          "TerrainGenerator"
        ],
        "functions": [
          "default",
          "__init__",
          "load_biome_data",
          "generate_transition_biomes",
          "generate_terrain",
          "_generate_noise",
          "_perlin_noise",
          "_fractal_noise",
          "_ranges_overlap",
          "_merge_ranges",
          "_merge_resources",
          "_blend_colors",
          "_generate_improved_rivers",
          "_determine_biome",
          "_calculate_factor_score",
          "get_biome_info",
          "get_all_biomes",
          "pseudo_random",
          "smoothstep",
          "hex_to_rgb",
          "rgb_to_hex"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Tuple",
          "typing.Optional",
          "typing.Any",
          "typing.Set",
          "random",
          "math",
          "time",
          "json",
          "numpy",
          "dataclasses.dataclass",
          "dataclasses.field",
          "os"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Data Models",
          "Configuration",
          "Database Operations",
          "Business Logic",
          "File I/O"
        ],
        "complexity_score": 79,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "load_biome_data",
              "get_biome_info",
              "get_all_biomes"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_transition_biomes",
              "generate_terrain",
              "_generate_noise",
              "_generate_improved_rivers",
              "_calculate_factor_score"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "NoiseLayer",
              "TerrainConfig",
              "BiomeInfo",
              "TerrainGenerator"
            ],
            "estimated_lines": 120,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/dialogue/relationship_integration.py",
        "lines": 829,
        "classes": [
          "DialogueRelationshipIntegration",
          "RelationshipManager",
          "CharacterManager"
        ],
        "functions": [
          "__init__",
          "add_relationship_context_to_dialogue",
          "get_relationship_dialogue_modifiers",
          "get_relationship_specific_greetings",
          "get_relationship_specific_farewells",
          "get_relationship_dialogue_topics",
          "update_relationship_from_dialogue",
          "_get_relationship_info",
          "_get_relationship_history",
          "_get_relationship_network",
          "_get_relationship_status_description",
          "get_instance",
          "get_relationship",
          "get_instance",
          "get_character"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "logging",
          "backend.systems.character.services.relationship_service.RelationshipService",
          "backend.systems.character.services.character_service.CharacterService"
        ],
        "dependencies": "{'character'}",
        "responsibilities": [
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 72,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_relationship_dialogue_modifiers",
              "get_relationship_specific_greetings",
              "get_relationship_specific_farewells",
              "get_relationship_dialogue_topics",
              "update_relationship_from_dialogue",
              "_get_relationship_info",
              "_get_relationship_history",
              "_get_relationship_network",
              "_get_relationship_status_description",
              "get_instance",
              "get_relationship",
              "get_instance",
              "get_character"
            ],
            "estimated_lines": 260,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "DialogueRelationshipIntegration",
              "RelationshipManager",
              "CharacterManager"
            ],
            "estimated_lines": 90,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/dialogue/quest_integration.py",
        "lines": 827,
        "classes": [
          "DialogueQuestIntegration",
          "ArcManager"
        ],
        "functions": [
          "__init__",
          "add_quest_context_to_dialogue",
          "get_quest_dialogue_options",
          "get_arc_dialogue_context",
          "get_quest_narrative_description",
          "_get_quest_info",
          "_get_character_relevant_quests",
          "_get_active_arcs",
          "_get_character_quest_role",
          "_get_character_arc_perspective",
          "_get_arc_active_quests",
          "_get_quest_state_description",
          "_get_quest_offer_dialogue",
          "_get_quest_progress_dialogue",
          "_get_quest_completion_dialogue",
          "_get_quest_hint_dialogue",
          "get_instance",
          "get_arc"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "logging",
          "backend.systems.quest.quest_manager.QuestManager",
          "backend.systems.arc.arc_manager.ArcManager"
        ],
        "dependencies": "{'quest', 'arc'}",
        "responsibilities": [
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 70,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_quest_dialogue_options",
              "get_arc_dialogue_context",
              "get_quest_narrative_description",
              "_get_quest_info",
              "_get_character_relevant_quests",
              "_get_active_arcs",
              "_get_character_quest_role",
              "_get_character_arc_perspective",
              "_get_arc_active_quests",
              "_get_quest_state_description",
              "_get_quest_offer_dialogue",
              "_get_quest_progress_dialogue",
              "_get_quest_completion_dialogue",
              "_get_quest_hint_dialogue",
              "get_instance",
              "get_arc"
            ],
            "estimated_lines": 320,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "DialogueQuestIntegration",
              "ArcManager"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/economy/services/resource_service.py",
        "lines": 823,
        "classes": [
          "ResourceService"
        ],
        "functions": [
          "__init__",
          "get_resource",
          "get_resources_by_region",
          "create_resource",
          "update_resource",
          "delete_resource",
          "adjust_resource_amount",
          "get_available_resources",
          "transfer_resource",
          "clear_cache",
          "process_economic_event",
          "simulate_resource_consumption",
          "simulate_production_activities"
        ],
        "imports": [
          "os",
          "json",
          "logging",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Tuple",
          "typing.Union",
          "pathlib.Path",
          "datetime.datetime",
          "sqlalchemy.orm.Session",
          "backend.systems.economy.models.Resource",
          "backend.systems.economy.models.ResourceData",
          "logging"
        ],
        "dependencies": "{'sqlalchemy', 'economy'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 63,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_resource",
              "get_resources_by_region",
              "create_resource",
              "update_resource",
              "delete_resource",
              "get_available_resources"
            ],
            "estimated_lines": 120,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "process_economic_event"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "simulate_production_activities"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "ResourceService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/character/services/relationship_service.py",
        "lines": 803,
        "classes": [
          "RelationshipService"
        ],
        "functions": [
          "__init__",
          "get_relationship_by_id",
          "get_relationship_by_uuid",
          "get_relationships_by_source",
          "get_relationships_by_target",
          "get_relationship",
          "create_relationship",
          "update_relationship_data",
          "update_relationship_data_field",
          "delete_relationship",
          "create_faction_relationship",
          "update_faction_reputation",
          "_get_standing_for_reputation",
          "get_character_factions",
          "create_quest_relationship",
          "update_quest_progress",
          "get_character_quests",
          "create_spatial_relationship",
          "update_spatial_proximity",
          "get_entity_locations",
          "create_auth_relationship",
          "update_auth_permissions",
          "check_user_permission",
          "get_user_characters",
          "get_character_users",
          "update_character_affinity",
          "update_relationship",
          "update_relationship_by_uuid",
          "delete_relationship_by_uuid",
          "delete_relationships_by_source",
          "delete_relationships_by_target"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "typing.Tuple",
          "typing.Union",
          "uuid.UUID",
          "datetime.datetime",
          "sqlalchemy.orm.Session",
          "sqlalchemy.and_",
          "sqlalchemy.or_",
          "sqlalchemy.exc.SQLAlchemyError",
          "backend.systems.character.models.relationship.Relationship",
          "backend.systems.character.models.relationship.RelationshipType",
          "backend.systems.character.models.relationship_events.RelationshipCreated",
          "backend.systems.character.models.relationship_events.RelationshipUpdated",
          "backend.systems.character.models.relationship_events.RelationshipDeleted",
          "backend.systems.character.models.relationship_events.FactionReputationChanged",
          "backend.systems.character.models.relationship_events.CharacterAffinityChanged",
          "backend.systems.events.EventDispatcher",
          "backend.systems.shared.utils.common.error.NotFoundError",
          "backend.systems.shared.utils.common.error.DatabaseError",
          "backend.systems.shared.utils.common.error.ValidationError"
        ],
        "dependencies": "{'character', 'sqlalchemy', 'events', 'shared'}",
        "responsibilities": [
          "Event Handling",
          "Data Models",
          "Database Operations"
        ],
        "complexity_score": 78,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_relationship_by_id",
              "get_relationship_by_uuid",
              "get_relationships_by_source",
              "get_relationships_by_target",
              "get_relationship",
              "create_relationship",
              "update_relationship_data",
              "update_relationship_data_field",
              "delete_relationship",
              "create_faction_relationship",
              "update_faction_reputation",
              "_get_standing_for_reputation",
              "get_character_factions",
              "create_quest_relationship",
              "update_quest_progress",
              "get_character_quests",
              "create_spatial_relationship",
              "update_spatial_proximity",
              "get_entity_locations",
              "create_auth_relationship",
              "update_auth_permissions",
              "get_user_characters",
              "get_character_users",
              "update_character_affinity",
              "update_relationship",
              "update_relationship_by_uuid",
              "delete_relationship_by_uuid",
              "delete_relationships_by_source",
              "delete_relationships_by_target"
            ],
            "estimated_lines": 580,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "RelationshipService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/combat/combat_animation_system.py",
        "lines": 759,
        "classes": [
          "AnimationDefinition",
          "AnimationInstance",
          "CombatAnimationSystem"
        ],
        "functions": [
          "__init__",
          "to_dict",
          "__init__",
          "update",
          "to_dict",
          "__init__",
          "_init_default_animations",
          "register_animation",
          "play_animation",
          "stop_animation",
          "stop_all_animations",
          "pause_animations",
          "update",
          "get_active_animations",
          "get_animation_definitions",
          "get_animation_count",
          "set_global_speed_multiplier",
          "play_action_animation",
          "play_reaction_animation"
        ],
        "imports": [
          "logging",
          "random",
          "time",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Callable",
          "typing.Tuple",
          "typing.Set",
          "uuid"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Database Operations"
        ],
        "complexity_score": 64,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_active_animations",
              "get_animation_definitions",
              "get_animation_count"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "play_action_animation",
              "play_reaction_animation"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "AnimationDefinition",
              "AnimationInstance",
              "CombatAnimationSystem"
            ],
            "estimated_lines": 90,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/quest/database.py",
        "lines": 750,
        "classes": [
          "QuestRepository"
        ],
        "functions": [
          "get_quests_by_player",
          "get_quests_by_npc",
          "get_quests_by_location",
          "get_quests_by_arc",
          "get_quests_by_status",
          "get_quest",
          "create_quest",
          "update_quest",
          "delete_quest",
          "get_journal_entries",
          "get_journal_entries_by_quest",
          "get_journal_entries_by_arc",
          "create_journal_entry",
          "delete_journal_entry",
          "get_player_arc",
          "get_player_regional_arcs",
          "get_player_global_arcs",
          "get_arc_by_id",
          "save_player_arc",
          "save_regional_arc",
          "save_global_arc",
          "update_arc_progress",
          "unlock_next_chapter"
        ],
        "imports": [
          "logging",
          "uuid",
          "datetime.datetime",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "backend.systems.shared.utils.core.firebase_utils.get_firestore_client",
          "backend.systems.shared.utils.core.firebase_utils.get_document",
          "backend.systems.shared.utils.core.firebase_utils.set_document",
          "backend.systems.shared.utils.core.firebase_utils.update_document",
          "backend.systems.shared.utils.core.firebase_utils.get_collection",
          "backend.systems.shared.utils.core.firebase_utils.delete_document",
          "backend.systems.shared.utils.common.error.ValidationError",
          "backend.systems.shared.utils.common.error.NotFoundError",
          "backend.systems.shared.utils.common.error.DatabaseError",
          "models.Quest",
          "models.QuestStep",
          "models.JournalEntry"
        ],
        "dependencies": "{'firebase', 'shared'}",
        "responsibilities": [
          "Database Operations"
        ],
        "complexity_score": 73,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_quests_by_player",
              "get_quests_by_npc",
              "get_quests_by_location",
              "get_quests_by_arc",
              "get_quests_by_status",
              "get_quest",
              "create_quest",
              "update_quest",
              "delete_quest",
              "get_journal_entries",
              "get_journal_entries_by_quest",
              "get_journal_entries_by_arc",
              "create_journal_entry",
              "delete_journal_entry",
              "get_player_arc",
              "get_player_regional_arcs",
              "get_player_global_arcs",
              "get_arc_by_id",
              "save_player_arc",
              "save_regional_arc",
              "save_global_arc",
              "update_arc_progress"
            ],
            "estimated_lines": 440,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "QuestRepository"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/combat/combat_area.py",
        "lines": 740,
        "classes": [
          "TerrainFeature",
          "CombatArea"
        ],
        "functions": [
          "create_combat_area",
          "__init__",
          "is_point_inside",
          "get_movement_modifier",
          "provides_cover",
          "is_passable",
          "to_dict",
          "__init__",
          "_position_to_grid",
          "_grid_to_position",
          "add_entity",
          "remove_entity",
          "move_entity",
          "get_entity_position",
          "get_entities_at_position",
          "is_position_valid",
          "can_move_to",
          "calculate_path",
          "add_terrain_feature",
          "remove_terrain_feature",
          "get_terrain_at_position",
          "is_line_of_sight_clear",
          "get_movement_cost",
          "get_nearest_position",
          "create_default_terrain",
          "to_dict"
        ],
        "imports": [
          "logging",
          "math",
          "random",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Tuple",
          "typing.Set",
          "typing.Union",
          "uuid"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 68,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "create_combat_area",
              "get_movement_modifier",
              "get_entity_position",
              "get_entities_at_position",
              "get_terrain_at_position",
              "get_movement_cost",
              "get_nearest_position",
              "create_default_terrain"
            ],
            "estimated_lines": 160,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "_position_to_grid",
              "is_position_valid"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_path"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "TerrainFeature",
              "CombatArea"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/combat/action_system.py",
        "lines": 737,
        "classes": [
          "ActionType",
          "ActionTarget",
          "ActionResult",
          "ActionDefinition",
          "CombatantActionState",
          "ActionSystem"
        ],
        "functions": [
          "register_basic_actions",
          "__init__",
          "__bool__",
          "requires_target",
          "can_use",
          "execute",
          "update_cooldown",
          "__init__",
          "reset",
          "can_use_action",
          "use_action",
          "use_movement",
          "__init__",
          "combatant_states",
          "reaction_triggers",
          "register_action",
          "get_action",
          "get_actions_by_category",
          "get_actions_for_combatant",
          "reset_combatant_actions",
          "_get_combatant_id",
          "_get_combatant_state",
          "can_use_action",
          "use_action",
          "use_movement",
          "register_reaction_trigger",
          "trigger_reaction",
          "get_available_reactions",
          "get_remaining_actions",
          "get_available_actions"
        ],
        "imports": [
          "logging",
          "enum.Enum",
          "enum.auto",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Callable",
          "typing.Type",
          "typing.TypeVar",
          "typing.Set",
          "typing.Union",
          "dataclasses.dataclass",
          "dataclasses.field"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Data Models",
          "Database Operations"
        ],
        "complexity_score": 79,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "update_cooldown",
              "get_action",
              "get_actions_by_category",
              "get_actions_for_combatant",
              "_get_combatant_id",
              "_get_combatant_state",
              "get_available_reactions",
              "get_remaining_actions",
              "get_available_actions"
            ],
            "estimated_lines": 180,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "reaction_triggers",
              "register_reaction_trigger"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "ActionType",
              "ActionTarget",
              "ActionResult",
              "ActionDefinition",
              "CombatantActionState",
              "ActionSystem"
            ],
            "estimated_lines": 180,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/dialogue/cache.py",
        "lines": 737,
        "classes": [
          "DialogueCache"
        ],
        "functions": [
          "__new__",
          "__init__",
          "get_instance",
          "cache_context",
          "get_cached_context",
          "cache_extraction",
          "get_cached_extraction",
          "cache_character_memories",
          "get_cached_character_memories",
          "clear",
          "_set_expiration",
          "_is_expired",
          "_cleanup_expired",
          "set_conversation",
          "get_conversation",
          "set_messages",
          "get_messages",
          "set_context",
          "get_context",
          "cache_context",
          "get_cached_context",
          "set_character_memories",
          "get_character_memories",
          "set_location_rumors",
          "get_location_rumors",
          "set_location_motifs",
          "get_location_motifs",
          "cache_extraction",
          "get_cached_extraction",
          "clear_conversation_data",
          "clear_character_data",
          "clear_location_data",
          "clear_all"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "typing.List",
          "logging",
          "datetime.datetime",
          "datetime.timedelta",
          "threading"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 70,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_instance",
              "get_cached_context",
              "get_cached_extraction",
              "get_cached_character_memories",
              "get_conversation",
              "get_messages",
              "get_context",
              "get_cached_context",
              "get_character_memories",
              "get_location_rumors",
              "get_location_motifs",
              "get_cached_extraction"
            ],
            "estimated_lines": 240,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "set_location_rumors",
              "set_location_motifs",
              "clear_conversation_data",
              "clear_location_data"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "DialogueCache"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/data/schemas/biome_schema.py",
        "lines": 728,
        "classes": [
          "BiomeSchema",
          "BiomeData",
          "AdjacencyRuleType",
          "AdjacencyRuleSchema",
          "AdjacencyRuleSetSchema",
          "ValidationError",
          "BiomeDataWrapper"
        ],
        "functions": [
          "validate_type",
          "validate_required",
          "validate_against_schema",
          "validate_biome",
          "validate_adjacency_rules",
          "validate_json_schema",
          "validate_biome_data",
          "is_biome_compatible",
          "get_transition_biome",
          "get_elevation_transition_score",
          "get_temperature_transition_score",
          "get_humidity_transition_score",
          "validate_range",
          "validate_factor",
          "from_schema",
          "to_schema",
          "validate_min_width",
          "validate_transition_biomes",
          "__init__",
          "formatted_message",
          "__init__",
          "from_biomes",
          "add_biome",
          "get_biome",
          "remove_biome",
          "list_biomes"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Union",
          "typing.Literal",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.field_validator",
          "enum.Enum"
        ],
        "dependencies": "{'pydantic'}",
        "responsibilities": [
          "Business Logic",
          "Data Models",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 78,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "validate_type",
              "validate_required",
              "validate_against_schema",
              "validate_biome",
              "validate_adjacency_rules",
              "validate_json_schema",
              "validate_biome_data",
              "validate_range",
              "validate_factor",
              "validate_min_width",
              "validate_transition_biomes"
            ],
            "estimated_lines": 220,
            "priority": "high"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_transition_biome",
              "get_elevation_transition_score",
              "get_temperature_transition_score",
              "get_humidity_transition_score",
              "get_biome"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "BiomeSchema",
              "BiomeData",
              "AdjacencyRuleType",
              "AdjacencyRuleSchema",
              "AdjacencyRuleSetSchema",
              "ValidationError",
              "BiomeDataWrapper"
            ],
            "estimated_lines": 210,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/population/router.py",
        "lines": 711,
        "classes": [],
        "functions": [],
        "imports": [
          "fastapi.APIRouter",
          "fastapi.HTTPException",
          "fastapi.Depends",
          "fastapi.Query",
          "fastapi.Path",
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "backend.systems.population.models.POIPopulation",
          "backend.systems.population.models.POIType",
          "backend.systems.population.models.POIState",
          "backend.systems.population.models.PopulationConfig",
          "backend.systems.population.models.PopulationCreateRequest",
          "backend.systems.population.models.PopulationUpdateRequest",
          "backend.systems.population.models.ResourceShortageRequest",
          "backend.systems.population.models.MigrationRequest",
          "backend.systems.population.models.StateTransitionRequest",
          "backend.systems.population.models.SeasonalEffectRequest",
          "backend.systems.population.models.CatastropheRequest",
          "backend.systems.population.models.WarImpactRequest",
          "backend.systems.population.models.PopulationChangeRequest",
          "backend.systems.population.service.population_service",
          "logging"
        ],
        "dependencies": "{'population', 'fastapi'}",
        "responsibilities": [
          "Configuration",
          "Utilities",
          "Database Operations",
          "API/Routing",
          "Business Logic"
        ],
        "complexity_score": 28,
        "refactoring_priority": "HIGH",
        "suggested_modules": []
      },
      {
        "path": "systems/world_state/persistence/state_storage.py",
        "lines": 689,
        "classes": [
          "StateStorage"
        ],
        "functions": [
          "__init__",
          "_ensure_directories",
          "save_state",
          "load_state",
          "save_history",
          "load_history",
          "save_snapshot",
          "load_snapshot",
          "list_snapshots",
          "delete_snapshot",
          "_create_backup",
          "_restore_from_backup",
          "_serialize_variable",
          "_deserialize_variable",
          "_serialize_change_record",
          "_deserialize_change_record",
          "_migrate_state_data",
          "_migrate_history_data",
          "_migrate_snapshot_data"
        ],
        "imports": [
          "os",
          "json",
          "pathlib.Path",
          "datetime.datetime",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "shutil",
          "backend.systems.world_state.StateVariable",
          "backend.systems.world_state.StateChangeRecord",
          "backend.systems.world_state.WorldStateSnapshot",
          "backend.systems.world_state.StateCategory",
          "backend.systems.world_state.WorldRegion",
          "backend.systems.world_state.StateChangeType"
        ],
        "dependencies": "{'world_state'}",
        "responsibilities": [
          "Database Operations",
          "File I/O",
          "Configuration"
        ],
        "complexity_score": 77,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "save_state",
              "load_state",
              "save_history",
              "load_history",
              "save_snapshot",
              "load_snapshot",
              "delete_snapshot",
              "_create_backup"
            ],
            "estimated_lines": 160,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "StateStorage"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_state/consolidated_world_models.py",
        "lines": 677,
        "classes": [
          "TerrainType",
          "LocationType",
          "Weather",
          "Season",
          "LevelRange",
          "PointOfInterest",
          "Region",
          "WorldMap",
          "WorldState",
          "WorldEventTypes"
        ],
        "functions": [
          "get_water_types",
          "get_traversable_types",
          "get_difficult_types",
          "validate_level_range",
          "validate_type",
          "to_dict",
          "from_dict",
          "validate_level_range",
          "to_dict",
          "from_dict",
          "add_region",
          "get_region",
          "get_region_by_coordinates",
          "get_pois_in_region",
          "calculate_distance",
          "to_dict",
          "from_dict",
          "save_to_file",
          "load_from_file",
          "advance_time",
          "update_weather",
          "update_season",
          "add_event",
          "remove_event",
          "add_quest",
          "remove_quest",
          "add_npc",
          "remove_npc"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Tuple",
          "typing.Set",
          "typing.Union",
          "enum.Enum",
          "datetime.datetime",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.field_validator",
          "pydantic.ConfigDict",
          "uuid.uuid4",
          "numpy",
          "json",
          "datetime.timedelta"
        ],
        "dependencies": "{'pydantic'}",
        "responsibilities": [
          "Data Models",
          "Configuration",
          "Database Operations",
          "Business Logic",
          "File I/O"
        ],
        "complexity_score": 80,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_water_types",
              "get_traversable_types",
              "get_difficult_types",
              "get_region",
              "get_region_by_coordinates",
              "get_pois_in_region",
              "save_to_file",
              "load_from_file",
              "update_weather",
              "update_season"
            ],
            "estimated_lines": 200,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "validate_level_range",
              "validate_type",
              "validate_level_range",
              "calculate_distance"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "TerrainType",
              "LocationType",
              "Weather",
              "Season",
              "LevelRange",
              "PointOfInterest",
              "Region",
              "WorldMap",
              "WorldState",
              "WorldEventTypes"
            ],
            "estimated_lines": 300,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/dialogue/region_integration.py",
        "lines": 650,
        "classes": [
          "BiomeManager",
          "DialogueRegionIntegration"
        ],
        "functions": [
          "get_instance",
          "get_biome",
          "__init__",
          "add_region_context_to_dialogue",
          "get_region_description_for_dialogue",
          "get_region_context_by_location",
          "get_biome_dialogue_references",
          "get_region_comparison",
          "_get_region_info",
          "_get_biome_info",
          "_get_region_resources",
          "_get_adjacent_regions",
          "_get_seasonal_region_description",
          "_get_weather_region_description",
          "_get_region_for_location"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "logging",
          "backend.systems.region.service.RegionService",
          "backend.systems.poi.POIService"
        ],
        "dependencies": "{'region', 'poi'}",
        "responsibilities": [
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 65,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_instance",
              "get_biome",
              "get_region_description_for_dialogue",
              "get_region_context_by_location",
              "get_biome_dialogue_references",
              "get_region_comparison",
              "_get_region_info",
              "_get_biome_info",
              "_get_region_resources",
              "_get_adjacent_regions",
              "_get_seasonal_region_description",
              "_get_weather_region_description",
              "_get_region_for_location"
            ],
            "estimated_lines": 260,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "add_region_context_to_dialogue"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "BiomeManager",
              "DialogueRegionIntegration"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/economy/services/futures_service.py",
        "lines": 649,
        "classes": [
          "FuturesService"
        ],
        "functions": [
          "__init__",
          "get_future",
          "get_futures_by_resource",
          "get_futures_by_market",
          "get_open_futures",
          "create_future",
          "update_future",
          "match_buyer",
          "settle_future",
          "process_expiring_futures",
          "forecast_future_prices",
          "clear_cache"
        ],
        "imports": [
          "logging",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Tuple",
          "typing.Union",
          "datetime.datetime",
          "datetime.timedelta",
          "uuid",
          "sqlalchemy.orm.Session",
          "sqlalchemy.or_",
          "sqlalchemy.and_",
          "logging",
          "backend.systems.economy.models.CommodityFuture",
          "backend.systems.economy.models.CommodityFutureData",
          "backend.systems.economy.models.Resource",
          "backend.systems.economy.models.Market"
        ],
        "dependencies": "{'sqlalchemy', 'economy'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 61,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_future",
              "get_futures_by_resource",
              "get_futures_by_market",
              "get_open_futures",
              "create_future",
              "update_future"
            ],
            "estimated_lines": 120,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "process_expiring_futures"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "FuturesService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/character/memory/memory_manager.py",
        "lines": 643,
        "classes": [
          "Memory",
          "MemoryManager"
        ],
        "functions": [
          "__init__",
          "access",
          "decay",
          "reinforce",
          "to_dict",
          "from_dict",
          "get_instance",
          "__init__",
          "_load_memories",
          "_save_memories",
          "create_memory",
          "update_memory",
          "remove_memory",
          "apply_decay",
          "reinforce_memory",
          "_enforce_memory_limits",
          "get_memory",
          "get_memories",
          "query_memories",
          "generate_memory_summary"
        ],
        "imports": [
          "os",
          "uuid",
          "datetime.datetime",
          "datetime.timedelta",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "json",
          "logging",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.MemoryCreated",
          "backend.systems.events.MemoryDecayed",
          "backend.systems.events.MemoryReinforced",
          "backend.systems.events.MemoryRemoved"
        ],
        "dependencies": "{'events'}",
        "responsibilities": [
          "Business Logic",
          "File I/O",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 66,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_instance",
              "_load_memories",
              "_save_memories",
              "create_memory",
              "update_memory",
              "get_memory",
              "get_memories",
              "query_memories"
            ],
            "estimated_lines": 160,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_memory_summary"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "Memory",
              "MemoryManager"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/crafting/services/crafting_service.py",
        "lines": 638,
        "classes": [
          "CraftingService"
        ],
        "functions": [
          "__init__",
          "load_recipes",
          "load_stations",
          "craft",
          "can_craft",
          "learn_recipe",
          "discover_recipe",
          "get_available_recipes",
          "_emit_crafting_started_event",
          "_emit_crafting_completed_event",
          "_emit_crafting_failed_event",
          "_is_recipe_known",
          "_is_recipe_available_to_character",
          "_check_skill_requirements",
          "_check_station_requirements",
          "_validate_inventory",
          "_process_ingredients",
          "_determine_craft_results",
          "_process_results",
          "_calculate_crafting_experience",
          "_apply_crafting_experience",
          "_track_crafting_achievement",
          "_track_crafting_milestones",
          "craft_item"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Tuple",
          "logging",
          "json",
          "os",
          "random",
          "pathlib.Path",
          "backend.systems.events.EventDispatcher",
          "backend.systems.crafting.models.recipe.CraftingRecipe",
          "backend.systems.crafting.models.ingredient.CraftingIngredient",
          "backend.systems.crafting.models.result.CraftingResult",
          "backend.systems.crafting.models.station.CraftingStation",
          "backend.systems.crafting.services.recipe_service.RecipeService",
          "backend.systems.crafting.services.station_service.StationService",
          "backend.systems.crafting.services.crafting_knowledge_service.CraftingKnowledgeService",
          "backend.systems.crafting.services.crafting_experience_service.CraftingExperienceService",
          "backend.systems.crafting.services.crafting_achievement_service.CraftingAchievementService"
        ],
        "dependencies": "{'crafting', 'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 63,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "load_recipes",
              "load_stations",
              "get_available_recipes"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "_emit_crafting_started_event",
              "_emit_crafting_completed_event",
              "_emit_crafting_failed_event",
              "_check_station_requirements"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_validate_inventory",
              "_process_ingredients",
              "_process_results",
              "_calculate_crafting_experience"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "CraftingService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/region/generators.py",
        "lines": 630,
        "classes": [
          "RegionGenerator",
          "ContinentGenerator"
        ],
        "functions": [
          "__init__",
          "generate_region",
          "_generate_profile",
          "_determine_biome_type",
          "_filter_by_adjacency",
          "_generate_resources",
          "_generate_features",
          "_generate_hex_grid",
          "get_biome_distribution",
          "get_region_by_coords",
          "__init__",
          "generate_continent",
          "_random_walk_continent",
          "_calculate_boundary",
          "is_region_in_continent",
          "get_continent_area",
          "get_continent_dimensions"
        ],
        "imports": [
          "random",
          "math",
          "uuid",
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "typing.Tuple",
          "typing.Set",
          "datetime.datetime",
          "backend.systems.data.GameDataRegistry",
          "backend.systems.region.models.RegionProfile",
          "backend.systems.region.models.RegionMetadata",
          "backend.systems.region.models.ContinentMetadata",
          "backend.systems.region.models.BiomeConfig",
          "backend.systems.region.models.PointOfInterest",
          "backend.systems.region.models.REGION_HEXES_PER_REGION",
          "backend.systems.region.models.REGION_AREA_SQ_KM",
          "backend.systems.region.models.CONTINENT_SIZE_RANGE",
          "backend.systems.region.models.MAJOR_POIS_PER_REGION",
          "backend.systems.region.models.MINOR_POIS_PER_REGION_MIN",
          "backend.systems.region.models.MINOR_POIS_PER_REGION_MAX",
          "backend.systems.region.models.get_hex_neighbors"
        ],
        "dependencies": "{'region', 'data'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 63,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_region",
              "_generate_profile",
              "_generate_resources",
              "_generate_features",
              "_generate_hex_grid",
              "generate_continent",
              "_calculate_boundary"
            ],
            "estimated_lines": 140,
            "priority": "high"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_biome_distribution",
              "get_region_by_coords",
              "get_continent_area",
              "get_continent_dimensions"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "is_region_in_continent"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "RegionGenerator",
              "ContinentGenerator"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/region/world_generator.py",
        "lines": 621,
        "classes": [
          "WorldGenerator"
        ],
        "functions": [
          "__init__",
          "generate_world",
          "_generate_regions_for_continent",
          "_create_profile_constraints",
          "_generate_pois_for_region",
          "_weighted_choice",
          "_generate_poi_name",
          "_get_poi_category",
          "_save_world_data",
          "load_world_data",
          "get_continent_by_id",
          "get_region_by_id",
          "get_regions_by_continent",
          "get_regions_by_biome"
        ],
        "imports": [
          "os",
          "json",
          "math",
          "random",
          "typing.Dict",
          "typing.List",
          "typing.Tuple",
          "typing.Any",
          "typing.Optional",
          "typing.Set",
          "datetime.datetime",
          "backend.systems.shared.utils.common.error.ValidationError",
          "backend.systems.data.GameDataRegistry",
          "backend.systems.region.models.RegionMetadata",
          "backend.systems.region.models.ContinentMetadata",
          "backend.systems.region.models.PointOfInterest",
          "backend.systems.region.models.MAJOR_POIS_PER_REGION",
          "backend.systems.region.models.MINOR_POIS_PER_REGION_MIN",
          "backend.systems.region.models.MINOR_POIS_PER_REGION_MAX",
          "backend.systems.region.models.METROPOLIS_REGION_CLAIM",
          "backend.systems.region.models.get_hex_neighbors",
          "backend.systems.region.generators.RegionGenerator",
          "backend.systems.region.generators.ContinentGenerator"
        ],
        "dependencies": "{'region', 'shared', 'data'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "File I/O",
          "Configuration"
        ],
        "complexity_score": 67,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_world",
              "_generate_regions_for_continent",
              "_generate_pois_for_region",
              "_generate_poi_name"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "_create_profile_constraints",
              "_get_poi_category",
              "_save_world_data",
              "load_world_data",
              "get_continent_by_id",
              "get_region_by_id",
              "get_regions_by_continent",
              "get_regions_by_biome"
            ],
            "estimated_lines": 160,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "WorldGenerator"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/dialogue/poi_integration.py",
        "lines": 615,
        "classes": [
          "POIServiceWrapper",
          "DialoguePOIIntegration"
        ],
        "functions": [
          "__init__",
          "get_poi",
          "query_pois",
          "get_nearby_pois",
          "get_settlement",
          "get_settlement_pois",
          "__init__",
          "add_poi_context_to_dialogue",
          "get_location_state_for_dialogue",
          "get_settlement_dialogue_context",
          "get_poi_description_for_dialogue",
          "get_relevant_pois_for_dialogue",
          "_get_location_info",
          "_get_nearby_locations",
          "_get_state_description",
          "_get_state_visible_effects",
          "_get_state_narrative",
          "_get_time_based_poi_description",
          "_get_character_info"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "logging",
          "backend.systems.poi.services.poi_service.POIService"
        ],
        "dependencies": "{'poi'}",
        "responsibilities": [
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 65,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_poi",
              "query_pois",
              "get_nearby_pois",
              "get_settlement",
              "get_settlement_pois",
              "get_location_state_for_dialogue",
              "get_settlement_dialogue_context",
              "get_poi_description_for_dialogue",
              "get_relevant_pois_for_dialogue",
              "_get_location_info",
              "_get_nearby_locations",
              "_get_state_description",
              "_get_state_visible_effects",
              "_get_state_narrative",
              "_get_time_based_poi_description",
              "_get_character_info"
            ],
            "estimated_lines": 320,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "POIServiceWrapper",
              "DialoguePOIIntegration"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/magic/services.py",
        "lines": 594,
        "classes": [
          "MagicEvent",
          "SpellEffectEvent",
          "MagicService",
          "SpellService",
          "SpellbookService",
          "SpellEffectService",
          "MockRepository",
          "MockRepository",
          "MockRepository",
          "MockRepository"
        ],
        "functions": [
          "__init__",
          "process_magic_tick",
          "_generate_magical_influences",
          "analyze_magical_influences",
          "get_character_magic_summary",
          "_format_magical_knowledge",
          "get_magical_influences",
          "get_magical_influence",
          "process_tick",
          "create_magic_ability",
          "get_magic_ability",
          "update_magic_ability",
          "delete_magic_ability",
          "repository",
          "__init__",
          "get_spell",
          "search_spells",
          "create_spell",
          "update_spell",
          "delete_spell",
          "repository",
          "__init__",
          "get_spellbook",
          "get_known_spells",
          "create_spellbook",
          "get_spellbook_by_id",
          "add_spell",
          "remove_spell",
          "repository",
          "__init__",
          "get_effect",
          "get_active_effects",
          "update_effect_durations",
          "_apply_effect_end",
          "end_effect",
          "dispel_effect",
          "modify_duration",
          "repository",
          "get_all",
          "get_all",
          "get_all",
          "get_all"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Tuple",
          "datetime.datetime",
          "models.SpellModel",
          "models.MagicSchool",
          "models.EffectType",
          "models.Spellbook",
          "models.SpellEffect",
          "models.MagicalInfluence",
          "repositories.SpellRepository",
          "repositories.SpellEffectRepository",
          "repositories.SpellbookRepository",
          "utils.calculate_spell_power",
          "utils.validate_spell_requirements",
          "utils.check_spell_compatibility",
          "utils.can_cast_spell",
          "utils.apply_spell_effect",
          "utils.calculate_spell_duration",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.EventBase"
        ],
        "dependencies": "{'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 73,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "process_magic_tick",
              "_generate_magical_influences",
              "process_tick"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_character_magic_summary",
              "get_magical_influences",
              "get_magical_influence",
              "create_magic_ability",
              "get_magic_ability",
              "update_magic_ability",
              "delete_magic_ability",
              "get_spell",
              "create_spell",
              "update_spell",
              "delete_spell",
              "get_spellbook",
              "get_known_spells",
              "create_spellbook",
              "get_spellbook_by_id",
              "get_effect",
              "get_active_effects",
              "update_effect_durations",
              "get_all",
              "get_all",
              "get_all",
              "get_all"
            ],
            "estimated_lines": 440,
            "priority": "high"
          },
          {
            "module_name": "utilities.py",
            "responsibility": "Utilities",
            "functions": [
              "_format_magical_knowledge"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "MagicEvent",
              "SpellEffectEvent",
              "MagicService",
              "SpellService",
              "SpellbookService",
              "SpellEffectService",
              "MockRepository",
              "MockRepository",
              "MockRepository",
              "MockRepository"
            ],
            "estimated_lines": 300,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/combat/turn_queue.py",
        "lines": 587,
        "classes": [
          "TurnQueue"
        ],
        "functions": [
          "clear_all_instances",
          "__init__",
          "current_combatant",
          "queue",
          "is_empty",
          "is_start_of_round",
          "initialize_queue",
          "_get_initiative_value",
          "_sort_queue",
          "_recompute_initiative",
          "add_combatant",
          "remove_combatant",
          "advance_queue",
          "delay_turn",
          "recompute_initiative",
          "clear",
          "is_round_complete",
          "register_turn_start_callback",
          "unregister_turn_start_callback",
          "register_turn_end_callback",
          "unregister_turn_end_callback",
          "next_turn",
          "get_turn_order",
          "_notify_combatant_added",
          "_notify_combatant_removed"
        ],
        "imports": [
          "typing.Any",
          "typing.Callable",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "typing.Tuple",
          "weakref",
          "logging"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 64,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "_get_initiative_value",
              "get_turn_order"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "TurnQueue"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/shared/utils/core/json_storage_utils.py",
        "lines": 585,
        "classes": [
          "DataMigrationError",
          "VersionedJsonStorage"
        ],
        "functions": [
          "load_json_file",
          "save_json_file",
          "get_data_file_path",
          "list_json_files",
          "__init__",
          "_get_file_path",
          "_get_backup_dir",
          "_create_backup",
          "_cleanup_old_backups",
          "register_migration_func",
          "_migrate_data",
          "save",
          "load",
          "delete",
          "list_all",
          "exists",
          "get_version",
          "get_last_modified"
        ],
        "imports": [
          "os",
          "json",
          "shutil",
          "logging",
          "datetime",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Union",
          "typing.Callable",
          "pathlib.Path",
          "os"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Database Operations",
          "File I/O",
          "Configuration"
        ],
        "complexity_score": 72,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "load_json_file",
              "save_json_file",
              "get_data_file_path",
              "_get_file_path",
              "_get_backup_dir",
              "_create_backup",
              "get_version",
              "get_last_modified"
            ],
            "estimated_lines": 160,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "list_json_files",
              "register_migration_func"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "DataMigrationError",
              "VersionedJsonStorage"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_state/features/derivative_state.py",
        "lines": 585,
        "classes": [
          "DerivedStateRule",
          "DerivativeStateCalculator"
        ],
        "functions": [
          "create_formula_calculator",
          "__init__",
          "__repr__",
          "get_instance",
          "reset_instance",
          "__init__",
          "initialize",
          "register_rule",
          "update_rule",
          "remove_rule",
          "get_derived_value",
          "get_all_derived_keys",
          "get_rule_info",
          "get_dependent_keys",
          "_update_dependency_graphs",
          "_remove_dependency_records",
          "_would_create_circular_dependency",
          "_calculate_derived_value",
          "_recalculate_dependent_values",
          "_handle_state_change",
          "_register_built_in_rules",
          "calculator"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Union",
          "typing.Callable",
          "typing.Set",
          "json",
          "logging",
          "datetime.datetime",
          "re",
          "backend.systems.world_state.WorldStateManager",
          "backend.systems.world_state.StateVariable",
          "backend.systems.world_state.StateCategory",
          "backend.systems.world_state.WorldRegion",
          "backend.systems.world_state.StateChangeType",
          "backend.systems.events.EventDispatcher"
        ],
        "dependencies": "{'events', 'world_state'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 68,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "create_formula_calculator",
              "get_instance",
              "update_rule",
              "get_derived_value",
              "get_all_derived_keys",
              "get_rule_info",
              "get_dependent_keys",
              "_update_dependency_graphs",
              "_would_create_circular_dependency"
            ],
            "estimated_lines": 180,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_calculate_derived_value",
              "_recalculate_dependent_values",
              "_handle_state_change"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "DerivedStateRule",
              "DerivativeStateCalculator"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_state/utils/world_event_utils.py",
        "lines": 575,
        "classes": [],
        "functions": [
          "log_world_event",
          "roll_chaos_event",
          "inject_chaos_event",
          "trigger_chaos_if_needed",
          "force_chaos",
          "delete_world_event",
          "annotate_world_event",
          "create_world_event",
          "link_events",
          "get_related_events",
          "filter_events_by_category",
          "filter_events_by_location",
          "format_event_description"
        ],
        "imports": [
          "datetime.datetime",
          "random",
          "firebase_admin.db",
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "typing.Union",
          "logging",
          "json",
          "os",
          "pathlib.Path",
          "backend.systems.world_state.StateCategory",
          "backend.systems.world_state.WorldRegion",
          "backend.systems.motif.get_motif_manager",
          "backend.systems.motif.utils.check_chaos_threshold",
          "backend.systems.motif.get_motif_manager",
          "backend.systems.motif.utils.roll_chaos_event",
          "app.npc.npc_rumor_utils.sync_event_beliefs"
        ],
        "dependencies": "{'firebase', 'motif', 'world_state'}",
        "responsibilities": [
          "Utilities",
          "Database Operations",
          "File I/O"
        ],
        "complexity_score": 72,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "delete_world_event",
              "create_world_event",
              "get_related_events"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "utilities.py",
            "responsibility": "Utilities",
            "functions": [
              "format_event_description"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/dialogue/time_integration.py",
        "lines": 569,
        "classes": [
          "CalendarManagerStub",
          "DialogueTimeIntegration"
        ],
        "functions": [
          "get_instance",
          "get_event",
          "get_current_season",
          "get_events_in_range",
          "get_current_events",
          "__init__",
          "add_time_context_to_dialogue",
          "get_time_references_for_dialogue",
          "get_event_dialogue_context",
          "get_time_sensitive_dialogue_options",
          "_get_current_time_info",
          "_get_season_info",
          "_get_upcoming_events",
          "_get_current_festival_info",
          "_get_day_period_info",
          "_get_weather_info",
          "_get_time_of_day",
          "_is_daytime",
          "_get_typical_activities_for_time"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "logging",
          "datetime.datetime",
          "datetime.timedelta",
          "backend.systems.time.services.time_manager.TimeManager"
        ],
        "dependencies": "{'time'}",
        "responsibilities": [
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 62,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_instance",
              "get_event",
              "get_current_season",
              "get_events_in_range",
              "get_current_events",
              "get_time_references_for_dialogue",
              "get_event_dialogue_context",
              "get_time_sensitive_dialogue_options",
              "_get_current_time_info",
              "_get_season_info",
              "_get_upcoming_events",
              "_get_current_festival_info",
              "_get_day_period_info",
              "_get_weather_info",
              "_get_time_of_day",
              "_get_typical_activities_for_time"
            ],
            "estimated_lines": 320,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "CalendarManagerStub",
              "DialogueTimeIntegration"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/llm/repositories/faction_repository.py",
        "lines": 567,
        "classes": [
          "FactionRepository"
        ],
        "functions": [
          "get_instance",
          "__init__",
          "get_faction_by_id",
          "save_faction",
          "get_all_factions",
          "get_faction_relationship",
          "save_faction_relationship",
          "get_faction_goal",
          "save_faction_goal",
          "get_faction_resource",
          "save_faction_resource",
          "get_all_faction_relationships",
          "get_all_faction_goals",
          "get_all_faction_resources",
          "get_faction_goals_by_faction",
          "get_faction_resources_by_faction",
          "get_faction_conflicts",
          "clear_cache",
          "update_faction_data",
          "get_faction_data"
        ],
        "imports": [
          "json",
          "os",
          "logging",
          "datetime.datetime",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Tuple"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Database Operations",
          "File I/O",
          "Configuration"
        ],
        "complexity_score": 71,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_instance",
              "get_faction_by_id",
              "save_faction",
              "get_all_factions",
              "get_faction_relationship",
              "save_faction_relationship",
              "get_faction_goal",
              "save_faction_goal",
              "get_faction_resource",
              "save_faction_resource",
              "get_all_faction_relationships",
              "get_all_faction_goals",
              "get_all_faction_resources",
              "get_faction_goals_by_faction",
              "get_faction_resources_by_faction",
              "get_faction_conflicts",
              "update_faction_data",
              "get_faction_data"
            ],
            "estimated_lines": 360,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "FactionRepository"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/auth_user/services/auth_service.py",
        "lines": 560,
        "classes": [
          "FallbackCryptContext"
        ],
        "functions": [
          "check_permissions",
          "create_access_token",
          "verify_token",
          "verify_user_token",
          "create_refresh_token",
          "verify_password",
          "get_password_hash",
          "generate_password_reset_token",
          "encrypt_data",
          "decrypt_data",
          "generate_api_key",
          "generate_secure_token",
          "hash",
          "verify"
        ],
        "imports": [
          "warnings",
          "datetime.datetime",
          "datetime.timedelta",
          "typing.Optional",
          "typing.Any",
          "typing.Dict",
          "typing.List",
          "typing.Union",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.security.OAuth2PasswordBearer",
          "jose.JWTError",
          "jose.jwt",
          "passlib.context.CryptContext",
          "uuid.UUID",
          "secrets",
          "string",
          "os",
          "hashlib",
          "backend.systems.shared.utils.common.error.AuthorizationError",
          "backend.systems.shared.config.settings",
          "secrets",
          "string",
          "secrets",
          "base64",
          "base64",
          "hashlib",
          "base64",
          "os"
        ],
        "dependencies": "{'shared', 'fastapi'}",
        "responsibilities": [
          "Business Logic",
          "API/Routing",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 62,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "create_access_token",
              "create_refresh_token",
              "get_password_hash"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_password_reset_token",
              "generate_api_key",
              "generate_secure_token"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "FallbackCryptContext"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_state/loader.py",
        "lines": 556,
        "classes": [
          "WorldStateLoader"
        ],
        "functions": [
          "__init__",
          "load_world_map",
          "save_world_map",
          "load_region",
          "save_region",
          "load_poi",
          "save_poi",
          "load_state_variable",
          "save_state_variable",
          "load_state_history",
          "save_state_history",
          "save_state_snapshot",
          "load_state_snapshot",
          "create_backup",
          "_backup_file",
          "_key_to_filename",
          "cleanup_old_backups",
          "create_empty_world_state"
        ],
        "imports": [
          "json",
          "logging",
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "typing.List",
          "typing.Tuple",
          "typing.Union",
          "datetime.datetime",
          "pathlib.Path",
          "shutil",
          "backend.systems.shared.utils.common.error.NotFoundError",
          "backend.systems.shared.utils.common.error.ValidationError",
          "logging",
          "backend.systems.world_state.consolidated_world_models.WorldMap",
          "backend.systems.world_state.consolidated_world_models.Region",
          "backend.systems.world_state.consolidated_world_models.PointOfInterest",
          "backend.systems.world_state.consolidated_world_models.WorldState",
          "backend.systems.world_state.consolidated_world_models.TerrainType",
          "backend.systems.world_state.consolidated_state_models.StateVariable",
          "backend.systems.world_state.consolidated_state_models.StateChangeRecord",
          "backend.systems.world_state.consolidated_state_models.StateCategory",
          "backend.systems.world_state.consolidated_state_models.WorldRegion",
          "backend.systems.world_state.consolidated_state_models.StateChangeType",
          "backend.systems.world_state.consolidated_state_models.WorldStateSnapshot"
        ],
        "dependencies": "{'shared', 'world_state'}",
        "responsibilities": [
          "Database Operations",
          "File I/O",
          "Configuration"
        ],
        "complexity_score": 76,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "load_world_map",
              "save_world_map",
              "load_region",
              "save_region",
              "load_poi",
              "save_poi",
              "load_state_variable",
              "save_state_variable",
              "load_state_history",
              "save_state_history",
              "save_state_snapshot",
              "load_state_snapshot",
              "create_backup",
              "create_empty_world_state"
            ],
            "estimated_lines": 280,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "WorldStateLoader"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/faction/services/consolidated_faction_service.py",
        "lines": 553,
        "classes": [
          "FactionError",
          "FactionNotFoundError",
          "DuplicateFactionError",
          "InvalidFactionOperationError",
          "RelationshipNotFoundError",
          "MembershipNotFoundError",
          "ConsolidatedFactionService"
        ],
        "functions": [
          "create_faction",
          "get_faction",
          "get_faction_by_name",
          "get_factions",
          "update_faction",
          "delete_faction",
          "assign_faction_to_poi",
          "calculate_affinity",
          "add_faction_goal",
          "propagate_faction_influence"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "typing.Tuple",
          "datetime.datetime",
          "logging",
          "random",
          "sqlalchemy.orm.Session",
          "sqlalchemy.and_",
          "sqlalchemy.or_",
          "sqlalchemy.func",
          "backend.systems.faction.models.faction.Faction",
          "backend.systems.faction.models.faction.FactionRelationship",
          "backend.systems.faction.models.faction.FactionMembership",
          "backend.systems.faction.schemas.faction_types.FactionType",
          "backend.systems.faction.schemas.faction_types.FactionAlignment",
          "backend.systems.faction.schemas.faction_types.DiplomaticStance",
          "backend.systems.faction.models.faction_goal.FactionGoal"
        ],
        "dependencies": "{'sqlalchemy', 'faction'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 61,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "create_faction",
              "get_faction",
              "get_faction_by_name",
              "get_factions",
              "update_faction",
              "delete_faction"
            ],
            "estimated_lines": 120,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "assign_faction_to_poi",
              "add_faction_goal",
              "propagate_faction_influence"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_affinity"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "FactionError",
              "FactionNotFoundError",
              "DuplicateFactionError",
              "InvalidFactionOperationError",
              "RelationshipNotFoundError",
              "MembershipNotFoundError",
              "ConsolidatedFactionService"
            ],
            "estimated_lines": 210,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/combat/combat_state_manager.py",
        "lines": 546,
        "classes": [
          "CombatPhase",
          "CombatEncounterType",
          "CombatantState",
          "CombatState",
          "CombatStateManager"
        ],
        "functions": [
          "from_character",
          "update_from_character",
          "get_all_combatants",
          "get_active_combatants",
          "get_player_combatants",
          "get_enemy_combatants",
          "get_active_player_combatants",
          "get_active_enemy_combatants",
          "is_combat_active",
          "is_combat_over",
          "get_victor",
          "to_dict",
          "from_dict",
          "initialize_combat",
          "get_current_state",
          "update_state",
          "advance_turn",
          "update_combatant",
          "end_combat",
          "save_state",
          "load_state",
          "get_state_history",
          "clear_history",
          "_add_to_history",
          "_handle_combat_end",
          "_save_combat_log",
          "get_initiative"
        ],
        "imports": [
          "json",
          "logging",
          "dataclasses.dataclass",
          "dataclasses.field",
          "dataclasses.asdict",
          "typing.Any",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Union",
          "typing.Tuple",
          "typing.Callable",
          "enum.Enum",
          "enum.auto",
          "time",
          "uuid",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.CombatEvent"
        ],
        "dependencies": "{'events'}",
        "responsibilities": [
          "Data Models",
          "Configuration",
          "Database Operations",
          "Event Handling",
          "Business Logic",
          "File I/O"
        ],
        "complexity_score": 78,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "update_from_character",
              "get_all_combatants",
              "get_active_combatants",
              "get_player_combatants",
              "get_enemy_combatants",
              "get_active_player_combatants",
              "get_active_enemy_combatants",
              "get_victor",
              "get_current_state",
              "update_state",
              "update_combatant",
              "save_state",
              "load_state",
              "get_state_history",
              "_save_combat_log",
              "get_initiative"
            ],
            "estimated_lines": 320,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_handle_combat_end"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "CombatPhase",
              "CombatEncounterType",
              "CombatantState",
              "CombatState",
              "CombatStateManager"
            ],
            "estimated_lines": 150,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/data/utils/data_file_loader.py",
        "lines": 540,
        "classes": [
          "DataFileLoader"
        ],
        "functions": [
          "save_data_file",
          "validate_data_structure",
          "load_data_file",
          "get_file_metadata",
          "load_data_directory",
          "__init__",
          "_find_project_root",
          "enable_cache",
          "clear_cache",
          "load_json",
          "load_yaml",
          "load_text",
          "load_data_directory",
          "file_exists",
          "list_files",
          "get_modification_time",
          "get_file_metadata",
          "_resolve_path",
          "save_data_file",
          "load_data_file"
        ],
        "imports": [
          "json",
          "logging",
          "os",
          "pathlib.Path",
          "typing.Any",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Union",
          "yaml"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "File I/O"
        ],
        "complexity_score": 74,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "save_data_file",
              "load_data_file",
              "get_file_metadata",
              "load_data_directory",
              "_find_project_root",
              "load_json",
              "load_yaml",
              "load_text",
              "load_data_directory",
              "get_modification_time",
              "get_file_metadata",
              "save_data_file",
              "load_data_file"
            ],
            "estimated_lines": 260,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "validate_data_structure"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "DataFileLoader"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/character/models/goal.py",
        "lines": 539,
        "classes": [
          "GoalStatus",
          "GoalPriority",
          "GoalType",
          "GoalCreated",
          "GoalCompleted",
          "GoalFailed",
          "GoalAbandoned",
          "GoalProgressUpdated",
          "GoalStatusChanged",
          "Goal"
        ],
        "functions": [
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "is_complete",
          "is_active",
          "is_failed",
          "is_abandoned",
          "is_paused",
          "has_subgoals",
          "add_subgoal",
          "update_progress",
          "complete",
          "fail",
          "abandon",
          "pause",
          "resume",
          "update_priority",
          "calculate_subgoal_progress",
          "to_dict",
          "from_dict"
        ],
        "imports": [
          "enum.Enum",
          "datetime.datetime",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "typing.Set",
          "uuid.UUID",
          "uuid.uuid4",
          "logging",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.EventBase"
        ],
        "dependencies": "{'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 67,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "update_progress",
              "update_priority"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_subgoal_progress"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "GoalStatus",
              "GoalPriority",
              "GoalType",
              "GoalCreated",
              "GoalCompleted",
              "GoalFailed",
              "GoalAbandoned",
              "GoalProgressUpdated",
              "GoalStatusChanged",
              "Goal"
            ],
            "estimated_lines": 300,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/character/core/events/canonical_events.py",
        "lines": 529,
        "classes": [
          "EventBase",
          "SystemEventType",
          "SystemEvent",
          "MemoryEventType",
          "MemoryEvent",
          "RumorEventType",
          "RumorEvent",
          "MotifEventType",
          "MotifEvent",
          "PopulationEventType",
          "PopulationEvent",
          "POIEventType",
          "POIEvent",
          "FactionEventType",
          "FactionEvent",
          "QuestEventType",
          "QuestEvent",
          "CombatEventType",
          "CombatEvent",
          "TimeEventType",
          "TimeEvent",
          "RelationshipEventType",
          "RelationshipEvent",
          "StorageEventType",
          "StorageEvent",
          "WorldStateEventType",
          "WorldStateEvent",
          "CharacterEventType",
          "CharacterEvent",
          "LocationEventType",
          "LocationEvent",
          "InventoryEventType",
          "InventoryEvent"
        ],
        "functions": [
          "to_dict",
          "validate_event_type",
          "validate_event_type",
          "validate_event_type",
          "validate_event_type",
          "validate_event_type",
          "validate_event_type",
          "validate_event_type",
          "validate_event_type",
          "validate_event_type",
          "validate_event_type",
          "validate_event_type",
          "validate_event_type",
          "validate_event_type"
        ],
        "imports": [
          "enum.Enum",
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "typing.Union",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.field_validator",
          "pydantic.ConfigDict"
        ],
        "dependencies": "{'pydantic'}",
        "responsibilities": [
          "Business Logic",
          "Data Models",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 62,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "validate_event_type",
              "validate_event_type",
              "validate_event_type",
              "validate_event_type",
              "validate_event_type",
              "validate_event_type",
              "validate_event_type",
              "validate_event_type",
              "validate_event_type",
              "validate_event_type",
              "validate_event_type",
              "validate_event_type",
              "validate_event_type"
            ],
            "estimated_lines": 260,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "EventBase",
              "SystemEventType",
              "SystemEvent",
              "MemoryEventType",
              "MemoryEvent",
              "RumorEventType",
              "RumorEvent",
              "MotifEventType",
              "MotifEvent",
              "PopulationEventType",
              "PopulationEvent",
              "POIEventType",
              "POIEvent",
              "FactionEventType",
              "FactionEvent",
              "QuestEventType",
              "QuestEvent",
              "CombatEventType",
              "CombatEvent",
              "TimeEventType",
              "TimeEvent",
              "RelationshipEventType",
              "RelationshipEvent",
              "StorageEventType",
              "StorageEvent",
              "WorldStateEventType",
              "WorldStateEvent",
              "CharacterEventType",
              "CharacterEvent",
              "LocationEventType",
              "LocationEvent",
              "InventoryEventType",
              "InventoryEvent"
            ],
            "estimated_lines": 990,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/world_state/integration/event_integration.py",
        "lines": 525,
        "classes": [
          "StateChangeEvent",
          "StateCreateEvent",
          "StateDeleteEvent",
          "StateQueryEvent",
          "StateBulkChangeEvent",
          "StateTimelineEvent",
          "WorldStateEventIntegration"
        ],
        "functions": [
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "get_instance",
          "__init__",
          "initialize",
          "_register_event_handlers",
          "_handle_state_change",
          "_handle_state_create",
          "_handle_state_delete",
          "_handle_state_query",
          "_handle_bulk_change",
          "_handle_state_timeline",
          "publish_state_change",
          "publish_state_version_created",
          "publish_state_snapshot_created"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "typing.Callable",
          "datetime.datetime",
          "backend.systems.events.EventDispatcher",
          "backend.systems.world_state.WorldStateManager",
          "backend.systems.world_state.StateVariable",
          "backend.systems.world_state.StateChangeRecord",
          "backend.systems.world_state.StateCategory",
          "backend.systems.world_state.WorldRegion",
          "backend.systems.world_state.StateChangeType",
          "backend.systems.world_state.WorldStateSnapshot",
          "backend.systems.world_state.WorldStateCreatedEvent",
          "backend.systems.world_state.WorldStateUpdatedEvent",
          "backend.systems.world_state.WorldStateDeletedEvent",
          "backend.systems.world_state.api.state_api.WorldStateAPI"
        ],
        "dependencies": "{'events', 'world_state'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 74,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_instance"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_handle_state_change",
              "_handle_state_create",
              "_handle_state_delete",
              "_handle_state_query",
              "_handle_bulk_change",
              "_handle_state_timeline"
            ],
            "estimated_lines": 120,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "publish_state_version_created"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "StateChangeEvent",
              "StateCreateEvent",
              "StateDeleteEvent",
              "StateQueryEvent",
              "StateBulkChangeEvent",
              "StateTimelineEvent",
              "WorldStateEventIntegration"
            ],
            "estimated_lines": 210,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/loot/loot_routes.py",
        "lines": 524,
        "classes": [
          "LootBundleRequest",
          "IdentifyItemRequest",
          "EnhanceItemRequest",
          "ShopInventoryRequest",
          "ShopTransactionRequest",
          "ContextualItemRequest"
        ],
        "functions": [
          "generate_loot"
        ],
        "imports": [
          "flask.Blueprint",
          "flask.request",
          "flask.jsonify",
          "json",
          "backend.systems.loot.loot_manager.LootManager",
          "fastapi.APIRouter",
          "fastapi.HTTPException",
          "fastapi.Path",
          "fastapi.Query",
          "fastapi.Body",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "pydantic.BaseModel",
          "backend.systems.loot.data_access.load_equipment_data",
          "backend.systems.loot.data_access.load_item_effects_data",
          "backend.systems.loot.data_access.load_monster_abilities_data",
          "backend.systems.loot.data_access.load_shops_data",
          "backend.systems.loot.loot_core.group_equipment_by_type",
          "backend.systems.loot.loot_core.generate_unidentified_description",
          "backend.systems.loot.loot_core.get_enhancement_requirements",
          "backend.systems.loot.loot_core.add_enchantment_to_item",
          "backend.systems.loot.loot_core.generate_contextual_item",
          "backend.systems.loot.loot_core.apply_faction_motifs",
          "backend.systems.loot.loot_core.apply_regional_motifs",
          "backend.systems.loot.loot_shop.get_region_economic_factors",
          "json",
          "backend.systems.loot.loot_core.generate_item_description",
          "backend.systems.loot.loot_shop.get_dynamic_item_price",
          "json",
          "backend.systems.loot.loot_shop.get_dynamic_item_price"
        ],
        "dependencies": "{'loot', 'pydantic', 'fastapi'}",
        "responsibilities": [
          "Data Models",
          "Database Operations",
          "API/Routing",
          "Business Logic",
          "File I/O"
        ],
        "complexity_score": 65,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_loot"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "LootBundleRequest",
              "IdentifyItemRequest",
              "EnhanceItemRequest",
              "ShopInventoryRequest",
              "ShopTransactionRequest",
              "ContextualItemRequest"
            ],
            "estimated_lines": 180,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/world_generation/events.py",
        "lines": 519,
        "classes": [
          "WorldGenerationEventType",
          "WorldGenerationEvent",
          "GenerationStartedEvent",
          "GenerationCompletedEvent",
          "GenerationFailedEvent",
          "GenerationProgressEvent",
          "GenerationPausedEvent",
          "GenerationResumedEvent",
          "PhaseStartedEvent",
          "PhaseCompletedEvent",
          "PhaseFailedEvent",
          "ComponentStartedEvent",
          "ComponentCompletedEvent",
          "ComponentFailedEvent",
          "WorldSavedEvent",
          "WorldLoadedEvent",
          "ContinentGeneratedEvent",
          "WorldGenerationEventEmitter"
        ],
        "functions": [
          "__init__",
          "_set_generation_context",
          "start_generation",
          "update_progress",
          "complete_generation",
          "fail_generation",
          "pause_generation",
          "resume_generation",
          "start_phase",
          "complete_phase",
          "fail_phase",
          "start_component",
          "complete_component",
          "fail_component",
          "world_saved",
          "world_loaded",
          "continent_generated"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "typing.List",
          "enum.Enum",
          "datetime.datetime",
          "backend.systems.events.event_base.EventBase",
          "backend.systems.events.event_dispatcher.EventDispatcher",
          "uuid",
          "time",
          "time",
          "time"
        ],
        "dependencies": "{'events'}",
        "responsibilities": [
          "Event Handling",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 64,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "_set_generation_context"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "update_progress"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "WorldGenerationEventType",
              "WorldGenerationEvent",
              "GenerationStartedEvent",
              "GenerationCompletedEvent",
              "GenerationFailedEvent",
              "GenerationProgressEvent",
              "GenerationPausedEvent",
              "GenerationResumedEvent",
              "PhaseStartedEvent",
              "PhaseCompletedEvent",
              "PhaseFailedEvent",
              "ComponentStartedEvent",
              "ComponentCompletedEvent",
              "ComponentFailedEvent",
              "WorldSavedEvent",
              "WorldLoadedEvent",
              "ContinentGeneratedEvent",
              "WorldGenerationEventEmitter"
            ],
            "estimated_lines": 540,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/character/models/mood.py",
        "lines": 517,
        "classes": [
          "EmotionalState",
          "MoodIntensity",
          "MoodSource",
          "MoodModifier",
          "CharacterMood"
        ],
        "functions": [
          "value",
          "from_value",
          "value",
          "is_expired",
          "to_dict",
          "from_dict",
          "__init__",
          "add_modifier",
          "remove_modifier",
          "remove_expired_modifiers",
          "clear_modifiers",
          "update",
          "calculate_mood_values",
          "get_dominant_mood",
          "get_mood_description",
          "set_base_mood",
          "to_dict",
          "from_dict"
        ],
        "imports": [
          "enum.Enum",
          "datetime.datetime",
          "datetime.timedelta",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "uuid.UUID",
          "uuid.uuid4",
          "logging",
          "dataclasses.dataclass",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.MoodChanged"
        ],
        "dependencies": "{'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling",
          "Configuration"
        ],
        "complexity_score": 67,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_mood_values"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_dominant_mood",
              "get_mood_description"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "EmotionalState",
              "MoodIntensity",
              "MoodSource",
              "MoodModifier",
              "CharacterMood"
            ],
            "estimated_lines": 150,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/dialogue/conversation.py",
        "lines": 505,
        "classes": [
          "ConversationEntry",
          "ConversationHistory"
        ],
        "functions": [
          "__init__",
          "to_dict",
          "from_dict",
          "__init__",
          "add_entry",
          "end_conversation",
          "get_entries",
          "get_messages_for_context",
          "get_all_participants",
          "add_participant",
          "remove_participant",
          "to_dict",
          "from_dict",
          "_emit_conversation_started",
          "_emit_message_event",
          "_emit_conversation_ended",
          "extract_key_info",
          "to_json",
          "from_json",
          "save",
          "load"
        ],
        "imports": [
          "json",
          "datetime.datetime",
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "typing.Callable",
          "typing.Set",
          "uuid",
          "logging",
          "backend.systems.dialogue.utils.count_tokens",
          "backend.systems.dialogue.utils.extract_key_info",
          "backend.systems.events.EventDispatcher",
          "backend.systems.dialogue.events.DialogueStartedEvent",
          "backend.systems.dialogue.events.DialogueMessageEvent",
          "backend.systems.dialogue.events.DialogueEndedEvent"
        ],
        "dependencies": "{'events', 'dialogue'}",
        "responsibilities": [
          "Event Handling",
          "Database Operations",
          "File I/O",
          "Configuration"
        ],
        "complexity_score": 63,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_entries",
              "get_messages_for_context",
              "get_all_participants"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "_emit_conversation_started",
              "_emit_message_event",
              "_emit_conversation_ended"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "ConversationEntry",
              "ConversationHistory"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/character/core/character_builder.py",
        "lines": 504,
        "classes": [
          "CharacterBuilder",
          "CharacterBuilder"
        ],
        "functions": [
          "finalize_character",
          "generate_basic_stats",
          "__init__",
          "load_from_input",
          "set_race",
          "apply_racial_modifiers",
          "assign_attribute",
          "add_ability",
          "assign_skill",
          "assign_skills",
          "get_available_starter_kits",
          "apply_starter_kit",
          "is_valid",
          "finalize",
          "to_dict",
          "generate_hidden_traits",
          "save",
          "load"
        ],
        "imports": [
          "backend.systems.shared.database.get_db_session",
          "backend.systems.shared.database.db",
          "backend.systems.shared.database.Base",
          "backend.systems.shared.utils.core.json_storage_utils.load_json_file",
          "backend.systems.character.core.character_model.Character",
          "backend.systems.character.core.character_model.Skill",
          "backend.systems.character.core.character_utils.calculate_ability_modifier",
          "datetime.datetime",
          "sqlalchemy.orm.exc.NoResultFound",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Union",
          "typing.Tuple",
          "os",
          "random",
          "uuid",
          "logging"
        ],
        "dependencies": "{'character', 'sqlalchemy', 'shared'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 67,
        "refactoring_priority": "HIGH",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_basic_stats",
              "generate_hidden_traits"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "load_from_input",
              "get_available_starter_kits"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "CharacterBuilder",
              "CharacterBuilder"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/combat/combat_routes.py",
        "lines": 1159,
        "classes": [],
        "functions": [],
        "imports": [
          "logging",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Union",
          "fastapi.APIRouter",
          "fastapi.HTTPException",
          "fastapi.Body",
          "backend.systems.combat.combat_class.Combat",
          "backend.systems.combat.combat_ram.combat_state_manager",
          "backend.systems.combat.unified_effects.CombatEffect",
          "backend.systems.combat.unified_effects.BuffEffect",
          "backend.systems.combat.unified_effects.DebuffEffect",
          "backend.systems.combat.unified_effects.DamageOverTimeEffect",
          "backend.systems.combat.unified_effects.HealOverTimeEffect",
          "backend.systems.combat.unified_effects.ConditionEffect",
          "backend.systems.combat.unified_effects.ResistanceEffect",
          "backend.systems.combat.unified_effects.VulnerabilityEffect",
          "backend.systems.combat.unified_effects.ImmunityEffect",
          "backend.systems.combat.unified_effects.EffectType",
          "backend.systems.combat.unified_effects.EffectStackingBehavior",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.CombatEvent"
        ],
        "dependencies": "{'combat', 'events', 'fastapi'}",
        "responsibilities": [
          "Event Handling",
          "API/Routing",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 40,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": []
      },
      {
        "path": "systems/tension_war/utils/alliance_utils.py",
        "lines": 1066,
        "classes": [],
        "functions": [
          "evaluate_alliance_compatibility",
          "calculate_alliance_benefits",
          "generate_alliance_terms",
          "evaluate_alliance_stability",
          "evaluate_sanction_impact",
          "evaluate_alliance_strength",
          "calculate_call_to_arms_chance"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "datetime.datetime",
          "datetime.timedelta",
          "random",
          "models.AllianceConfig",
          "models.AllianceType",
          "models.SanctionType"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 41,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_alliance_benefits",
              "generate_alliance_terms",
              "calculate_call_to_arms_chance"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "evaluate_sanction_impact"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/equipment/service.py",
        "lines": 1051,
        "classes": [
          "EquipmentService"
        ],
        "functions": [
          "gpt_flavor_identify_effect",
          "gpt_flavor_reveal_full_item"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Tuple",
          "logging",
          "models.Equipment",
          "inventory_utils.load_equipment_rules",
          "inventory_utils.can_equip_item",
          "inventory_utils.get_equipment_stats",
          "inventory_utils.check_durability_requirements",
          "identify_item_utils.calculate_identification_cost",
          "identify_item_utils.reveal_item_name_and_flavor",
          "identify_item_utils.identify_item",
          "identify_item_utils.fully_identify_item",
          "set_bonus_utils.calculate_set_bonuses",
          "set_bonus_utils.apply_set_bonuses",
          "set_bonus_utils.get_equipment_sets",
          "set_bonus_utils.get_equipment_set",
          "set_bonus_utils.create_equipment_set",
          "set_bonus_utils.update_equipment_set",
          "set_bonus_utils.delete_equipment_set",
          "durability_utils.apply_durability_damage",
          "durability_utils.calculate_combat_damage",
          "durability_utils.calculate_wear_damage",
          "durability_utils.calculate_repair_cost",
          "durability_utils.repair_equipment",
          "durability_utils.get_durability_history",
          "durability_utils.get_durability_status",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.EventBase",
          "events.EquipmentEquippedEvent",
          "events.EquipmentUnequippedEvent",
          "events.EquipmentDamagedEvent",
          "events.EquipmentRepairedEvent",
          "events.EquipmentBrokenEvent",
          "events.EquipmentRepairedFromBrokenEvent",
          "events.ItemIdentifiedEvent",
          "events.ItemNameRevealedEvent",
          "events.NarrativeFlavorTextEvent",
          "events.EquipmentSetActiveEvent",
          "backend.systems.shared.database.db",
          "backend.systems.inventory.models.Inventory",
          "backend.systems.inventory.models.InventoryItem",
          "backend.systems.narrative.utils.gpt_flavor_identify_effect",
          "backend.systems.narrative.utils.gpt_flavor_reveal_full_item"
        ],
        "dependencies": "{'narrative', 'inventory', 'events', 'shared'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling",
          "Configuration"
        ],
        "complexity_score": 54,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "EquipmentService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/quest/integration.py",
        "lines": 1030,
        "classes": [
          "QuestIntegration"
        ],
        "functions": [
          "register_event_handlers",
          "generate_quests_for_player",
          "calculate_quest_duration"
        ],
        "imports": [
          "logging",
          "random",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "datetime.datetime",
          "backend.systems.events.get_event_dispatcher",
          "backend.systems.npc.services.npc_service.NPCService",
          "backend.systems.world_state.WorldStateManager",
          "models.Quest",
          "models.QuestStep",
          "utils.QuestUtils",
          "utils.QuestValidator",
          "generator.QuestGenerator",
          "motif_integration.QuestMotifIntegration"
        ],
        "dependencies": "{'npc', 'events', 'world_state'}",
        "responsibilities": [
          "Business Logic",
          "Data Models",
          "Database Operations"
        ],
        "complexity_score": 59,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_quests_for_player",
              "calculate_quest_duration"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "QuestIntegration"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/inventory/router.py",
        "lines": 929,
        "classes": [
          "User",
          "InventoryNotifier"
        ],
        "functions": [
          "check_inventory_access",
          "notify_inventory_created",
          "notify_inventory_deleted"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "logging",
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.Query",
          "fastapi.Path",
          "fastapi.Body",
          "fastapi.Response",
          "fastapi.status",
          "fastapi.responses.JSONResponse",
          "datetime.datetime",
          "backend.systems.shared.database.db",
          "backend.systems.inventory.models.Item",
          "backend.systems.inventory.models.Inventory",
          "backend.systems.inventory.models.InventoryItem",
          "backend.systems.inventory.service.InventoryService",
          "backend.systems.inventory.utils.transfer_item_between_inventories",
          "backend.systems.auth_user.services.get_current_user",
          "backend.systems.auth_user.services.User",
          "backend.systems.shared.utils.security.check_inventory_access",
          "backend.systems.inventory.notification.InventoryNotifier",
          "backend.systems.inventory.schemas.InventoryItemSchema",
          "backend.systems.inventory.schemas.ItemSchema",
          "backend.systems.inventory.utils.split_item_stack",
          "backend.systems.inventory.utils.combine_item_stacks",
          "backend.systems.inventory.utils.optimize_inventory_stacks",
          "backend.systems.inventory.utils.filter_inventory_items",
          "backend.systems.inventory.migrations.run_migrations"
        ],
        "dependencies": "{'inventory', 'auth_user', 'shared', 'fastapi'}",
        "responsibilities": [
          "API/Routing",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 60,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "User",
              "InventoryNotifier"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/motif/service.py",
        "lines": 928,
        "classes": [
          "MotifService"
        ],
        "functions": [
          "__init__",
          "_extract_narrative_themes",
          "_generate_narrative_guidance",
          "_generate_related_categories",
          "_determine_tone_from_motif",
          "get_current_time"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Optional",
          "typing.Any",
          "typing.Tuple",
          "typing.Union",
          "datetime.datetime",
          "datetime.timedelta",
          "random",
          "math",
          "logging",
          "json",
          "asyncio",
          "fastapi.HTTPException",
          "fastapi.Depends",
          "fastapi.status",
          "models.Motif",
          "models.MotifCreate",
          "models.MotifUpdate",
          "models.MotifFilter",
          "models.MotifScope",
          "models.MotifLifecycle",
          "models.MotifCategory",
          "models.MotifEffect",
          "models.MotifEffectTarget",
          "models.LocationInfo",
          "repository.MotifRepository",
          "repository.Vector2",
          ".utils",
          "backend.systems.shared.utils.core.time_utils.get_current_time",
          "datetime.datetime"
        ],
        "dependencies": "{'shared', 'fastapi'}",
        "responsibilities": [
          "Business Logic",
          "API/Routing",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 58,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_generate_narrative_guidance",
              "_generate_related_categories"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_current_time"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "MotifService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/memory/services/memory_manager.py",
        "lines": 881,
        "classes": [
          "MemoryForgottenEvent",
          "MemoryManager"
        ],
        "functions": [
          "__init__",
          "_log_info",
          "_log_debug",
          "_log_warning",
          "_log_error"
        ],
        "imports": [
          "asyncio",
          "logging",
          "time",
          "random",
          "uuid",
          "json",
          "datetime.datetime",
          "datetime.timedelta",
          "typing.Dict",
          "typing.List",
          "typing.Set",
          "typing.Optional",
          "typing.Tuple",
          "typing.Any",
          "typing.Union",
          "typing.Callable",
          "math",
          "models.memory.Memory",
          "models.memory.MemoryType",
          "models.memory.MemoryEmotionalValence",
          "models.memory.MemoryCreatedEvent",
          "models.memory.MemoryRecalledEvent",
          "models.memory.MemoryDecayedEvent",
          "utils.memory_utils.create_memory",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.EventBase"
        ],
        "dependencies": "{'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling",
          "Configuration"
        ],
        "complexity_score": 57,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "MemoryForgottenEvent",
              "MemoryManager"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/poi/services/resource_management_service.py",
        "lines": 877,
        "classes": [
          "ResourceManagementService"
        ],
        "functions": [
          "calculate_production",
          "calculate_consumption",
          "get_resource_balance",
          "update_resources",
          "set_resource_modifier",
          "add_resource",
          "remove_resource",
          "check_resource_scarcity",
          "handle_trade",
          "initialize_resources",
          "calculate_resource_production",
          "calculate_resource_consumption",
          "update_resources",
          "apply_shortage_effects",
          "trade_resources"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "typing.Tuple",
          "typing.Optional",
          "datetime.datetime",
          "models.PointOfInterest",
          "models.POIState",
          "models.POIType",
          "lifecycle_events_service.POILifecycleEventsService"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 52,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_production",
              "calculate_consumption",
              "handle_trade",
              "calculate_resource_production",
              "calculate_resource_consumption"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_resource_balance",
              "update_resources",
              "update_resources"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "ResourceManagementService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/poi/services/lifecycle_events_service.py",
        "lines": 852,
        "classes": [
          "POILifecycleEventsService"
        ],
        "functions": [
          "get_events",
          "add_event",
          "get_event_by_id",
          "update_event",
          "expire_event",
          "remove_event",
          "get_poi_history",
          "generate_founding_event",
          "generate_population_milestone_event",
          "generate_leadership_change_event",
          "process_event_effects",
          "generate_narrative_summary",
          "cleanup_expired_events"
        ],
        "imports": [
          "datetime.datetime",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Tuple",
          "typing.Union",
          "uuid",
          "models.PointOfInterest",
          "models.POIType"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 48,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_events",
              "get_event_by_id",
              "update_event",
              "get_poi_history"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_founding_event",
              "generate_population_milestone_event",
              "generate_leadership_change_event",
              "process_event_effects",
              "generate_narrative_summary"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "POILifecycleEventsService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/motif/router.py",
        "lines": 851,
        "classes": [],
        "functions": [
          "get_motif_service",
          "get_motif_manager"
        ],
        "imports": [
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.Query",
          "fastapi.WebSocket",
          "models.Motif",
          "models.MotifCreate",
          "models.MotifUpdate",
          "models.MotifFilter",
          "models.MotifScope",
          "models.MotifLifecycle",
          "models.MotifResponse",
          "models.MotifCategory",
          "service.MotifService",
          "repository.MotifRepository",
          "repository.Vector2",
          "consolidated_manager.MotifManager",
          "fastapi.WebSocketDisconnect"
        ],
        "dependencies": "{'fastapi'}",
        "responsibilities": [
          "Business Logic",
          "API/Routing",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 42,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_motif_service",
              "get_motif_manager"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/loot/loot_manager.py",
        "lines": 843,
        "classes": [
          "LootManager"
        ],
        "functions": [
          "get_instance",
          "__init__",
          "initialize",
          "generate_loot",
          "generate_location_loot",
          "identify_item",
          "enhance_item",
          "generate_shop_inventory",
          "restock_shop",
          "process_shop_transaction",
          "track_analytics"
        ],
        "imports": [
          "threading",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Tuple",
          "typing.Optional",
          "datetime.datetime",
          "uuid",
          "backend.systems.events.EventDispatcher",
          "backend.systems.loot.loot_core.generate_loot_bundle",
          "backend.systems.loot.loot_core.generate_location_specific_loot",
          "backend.systems.loot.loot_core.generate_item_identity",
          "backend.systems.loot.loot_shop.generate_shop_inventory",
          "backend.systems.loot.loot_shop.restock_shop_inventory",
          "backend.systems.loot.loot_shop.purchase_item_from_shop",
          "backend.systems.loot.loot_shop.sell_item_to_shop",
          "backend.systems.loot.loot_events.LootGeneratedEvent",
          "backend.systems.loot.loot_events.ItemIdentificationEvent",
          "backend.systems.loot.loot_events.ItemEnhancementEvent",
          "backend.systems.loot.loot_events.ShopInventoryEvent",
          "backend.systems.loot.loot_events.ShopRestockEvent",
          "backend.systems.loot.loot_events.ShopTransactionEvent",
          "backend.systems.loot.loot_events.LootAnalyticsEvent",
          "backend.systems.loot.loot_shop.get_region_economic_factors"
        ],
        "dependencies": "{'loot', 'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 52,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_instance"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_loot",
              "generate_location_loot",
              "generate_shop_inventory",
              "process_shop_transaction"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "LootManager"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/faction/services/consolidated_relationship_service.py",
        "lines": 832,
        "classes": [
          "ConsolidatedRelationshipService"
        ],
        "functions": [
          "get_relationship",
          "get_faction_relationships",
          "set_diplomatic_stance",
          "update_tension",
          "declare_war",
          "make_peace",
          "process_tension_decay",
          "resolve_war_outcome"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "typing.Tuple",
          "datetime.datetime",
          "logging",
          "random",
          "sqlalchemy.orm.Session",
          "backend.systems.faction.models.faction.Faction",
          "backend.systems.faction.models.faction.FactionRelationship",
          "backend.systems.faction.schemas.faction_types.DiplomaticStance",
          "backend.systems.faction.services.consolidated_faction_service.FactionError",
          "backend.systems.faction.services.consolidated_faction_service.FactionNotFoundError",
          "backend.systems.faction.services.consolidated_faction_service.RelationshipNotFoundError"
        ],
        "dependencies": "{'sqlalchemy', 'faction'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 41,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_relationship",
              "get_faction_relationships",
              "update_tension"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "process_tension_decay"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "ConsolidatedRelationshipService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/loot/loot_shop.py",
        "lines": 831,
        "classes": [],
        "functions": [
          "get_region_economic_factors",
          "calculate_base_price",
          "get_current_supply",
          "get_current_demand",
          "adjust_price_for_supply_demand",
          "get_dynamic_item_price",
          "generate_shop_inventory",
          "get_shop_type_specialization",
          "calculate_shop_price_modifier",
          "restock_shop_inventory",
          "purchase_item_from_shop",
          "sell_item_to_shop"
        ],
        "imports": [
          "random",
          "uuid.uuid4",
          "copy.deepcopy",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Tuple",
          "typing.Optional",
          "datetime.datetime",
          "backend.systems.events.EventDispatcher",
          "backend.systems.loot.loot_events.ShopInventoryEvent",
          "backend.systems.loot.loot_events.ShopRestockEvent",
          "backend.systems.loot.loot_events.ShopTransactionEvent",
          "backend.systems.loot.loot_core.generate_item_effects",
          "backend.systems.loot.loot_core.generate_item_identity",
          "backend.systems.loot.data_access.load_equipment_data",
          "backend.systems.loot.data_access.load_item_effects_data",
          "backend.systems.loot.loot_core.group_equipment_by_type"
        ],
        "dependencies": "{'loot', 'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 47,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_region_economic_factors",
              "get_current_supply",
              "get_current_demand",
              "get_dynamic_item_price",
              "get_shop_type_specialization"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_base_price",
              "generate_shop_inventory",
              "calculate_shop_price_modifier"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/events/event_types.py",
        "lines": 826,
        "classes": [
          "SystemEvent",
          "SystemStartup",
          "SystemShutdown",
          "SystemError",
          "SystemConfigChanged",
          "GameEvent",
          "GameInitialized",
          "GameSaved",
          "GameLoaded",
          "GameEnded",
          "CharacterEvent",
          "CharacterCreated",
          "CharacterUpdated",
          "CharacterDeleted",
          "CharacterMoved",
          "CharacterLeveledUp",
          "CharacterInteracted",
          "CharacterRelationshipChanged",
          "MoodChanged",
          "FactionEvent",
          "FactionCreated",
          "FactionUpdated",
          "FactionDeleted",
          "FactionRelationshipChanged",
          "MemoryEvent",
          "MemoryCreated",
          "MemoryUpdated",
          "MemoryDeleted",
          "MemoryRecalled",
          "RumorEvent",
          "RumorCreated",
          "RumorUpdated",
          "RumorDeleted",
          "RumorSpread",
          "POIEvent",
          "POIStateChanged",
          "POIControlChanged",
          "POIInfluenceChanged",
          "PopulationChanged",
          "NarrativeEvent",
          "NarrativeProgressed",
          "NarrativeBranchSelected",
          "NarrativeMotifIntroduced",
          "LootGeneratedEvent",
          "ItemIdentificationEvent",
          "ItemEnhancementEvent",
          "ShopInventoryEvent",
          "ShopRestockEvent",
          "ShopTransactionEvent",
          "LootAnalyticsEvent",
          "MemoryCreatedEvent",
          "MemoryReinforcedEvent",
          "MemoryDeletedEvent",
          "RumorSpreadEvent",
          "MotifChangedEvent",
          "PopulationChangedEvent",
          "POIStateChangedEvent",
          "FactionChangedEvent",
          "QuestUpdatedEvent",
          "QuestAcceptedEvent",
          "QuestCompletedEvent",
          "QuestAbandonedEvent",
          "QuestFailedEvent",
          "QuestStepUpdatedEvent",
          "CombatEvent",
          "TimeAdvancedEvent",
          "EventLoggedEvent",
          "RelationshipChangedEvent",
          "StorageEvent",
          "WorldStateChangedEvent",
          "GoalEvent",
          "GoalCreated",
          "GoalCompleted",
          "GoalFailed",
          "GoalProgressUpdated"
        ],
        "functions": [],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "event_base.EventBase"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 41,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "SystemEvent",
              "SystemStartup",
              "SystemShutdown",
              "SystemError",
              "SystemConfigChanged",
              "GameEvent",
              "GameInitialized",
              "GameSaved",
              "GameLoaded",
              "GameEnded",
              "CharacterEvent",
              "CharacterCreated",
              "CharacterUpdated",
              "CharacterDeleted",
              "CharacterMoved",
              "CharacterLeveledUp",
              "CharacterInteracted",
              "CharacterRelationshipChanged",
              "MoodChanged",
              "FactionEvent",
              "FactionCreated",
              "FactionUpdated",
              "FactionDeleted",
              "FactionRelationshipChanged",
              "MemoryEvent",
              "MemoryCreated",
              "MemoryUpdated",
              "MemoryDeleted",
              "MemoryRecalled",
              "RumorEvent",
              "RumorCreated",
              "RumorUpdated",
              "RumorDeleted",
              "RumorSpread",
              "POIEvent",
              "POIStateChanged",
              "POIControlChanged",
              "POIInfluenceChanged",
              "PopulationChanged",
              "NarrativeEvent",
              "NarrativeProgressed",
              "NarrativeBranchSelected",
              "NarrativeMotifIntroduced",
              "LootGeneratedEvent",
              "ItemIdentificationEvent",
              "ItemEnhancementEvent",
              "ShopInventoryEvent",
              "ShopRestockEvent",
              "ShopTransactionEvent",
              "LootAnalyticsEvent",
              "MemoryCreatedEvent",
              "MemoryReinforcedEvent",
              "MemoryDeletedEvent",
              "RumorSpreadEvent",
              "MotifChangedEvent",
              "PopulationChangedEvent",
              "POIStateChangedEvent",
              "FactionChangedEvent",
              "QuestUpdatedEvent",
              "QuestAcceptedEvent",
              "QuestCompletedEvent",
              "QuestAbandonedEvent",
              "QuestFailedEvent",
              "QuestStepUpdatedEvent",
              "CombatEvent",
              "TimeAdvancedEvent",
              "EventLoggedEvent",
              "RelationshipChangedEvent",
              "StorageEvent",
              "WorldStateChangedEvent",
              "GoalEvent",
              "GoalCreated",
              "GoalCompleted",
              "GoalFailed",
              "GoalProgressUpdated"
            ],
            "estimated_lines": 2250,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/world_generation/elevation_utils.py",
        "lines": 820,
        "classes": [],
        "functions": [
          "get_elevation_type",
          "generate_elevation_map",
          "generate_perlin_noise",
          "apply_terrain_features",
          "add_mountain_peak",
          "add_valley",
          "normalize_elevation_map",
          "calculate_slope",
          "identify_terrain_features",
          "generate_noise_map",
          "apply_island_falloff",
          "elevation_map_to_tiles",
          "smooth_elevation_map",
          "create_mountain_ranges",
          "generate_complete_elevation_map",
          "get_neighboring_tiles",
          "is_valid_elevation_transition"
        ],
        "imports": [
          "random",
          "math",
          "numpy",
          "typing.Dict",
          "typing.List",
          "typing.Tuple",
          "typing.Set",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "typing.Callable",
          "backend.systems.world_generation.models.BiomeType",
          "backend.systems.world_generation.models.ElevationType",
          "backend.systems.world_generation.models.RegionTile"
        ],
        "dependencies": "{'world_generation'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 50,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_elevation_type",
              "create_mountain_ranges",
              "get_neighboring_tiles"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_elevation_map",
              "generate_perlin_noise",
              "calculate_slope",
              "generate_noise_map",
              "generate_complete_elevation_map"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "normalize_elevation_map",
              "elevation_map_to_tiles",
              "smooth_elevation_map",
              "is_valid_elevation_transition"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_generation/settlement_service.py",
        "lines": 814,
        "classes": [
          "SettlementService"
        ],
        "functions": [
          "__init__",
          "generate_settlements_for_region",
          "_weighted_settlement_type",
          "_find_settlement_locations",
          "_calculate_water_access",
          "_calculate_resource_access",
          "_calculate_trade_access",
          "_count_neighboring_regions",
          "_generate_settlement",
          "_generate_settlement_name",
          "_calculate_economy_weights",
          "_generate_notable_buildings",
          "_get_existing_settlements_in_region",
          "_get_region_by_id"
        ],
        "imports": [
          "random",
          "math",
          "typing.Dict",
          "typing.List",
          "typing.Tuple",
          "typing.Set",
          "typing.Any",
          "typing.Optional",
          "world_generation_utils.get_elevation_at_point",
          "world_generation_utils.get_rainfall_at_point"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 52,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_settlements_for_region",
              "_calculate_water_access",
              "_calculate_resource_access",
              "_calculate_trade_access",
              "_generate_settlement",
              "_generate_settlement_name",
              "_calculate_economy_weights",
              "_generate_notable_buildings"
            ],
            "estimated_lines": 160,
            "priority": "high"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "_find_settlement_locations",
              "_get_existing_settlements_in_region",
              "_get_region_by_id"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "SettlementService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/poi/services/migration_service.py",
        "lines": 804,
        "classes": [
          "POIMigrationService"
        ],
        "functions": [
          "calculate_migration_factors",
          "calculate_poi_attractiveness",
          "calculate_migration_rate",
          "calculate_distance_penalty",
          "calculate_migration_flow",
          "process_migration",
          "process_regional_migration",
          "get_migration_history",
          "simulate_external_migration"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "typing.Tuple",
          "typing.Optional",
          "datetime.datetime",
          "random",
          "math",
          "uuid",
          "backend.systems.events.EventDispatcher",
          "backend.systems.poi.events.PopulationChanged",
          "models.PointOfInterest",
          "models.POIState",
          "models.POIType",
          "lifecycle_events_service.POILifecycleEventsService",
          "lifecycle_events_service.POILifecycleEventsService"
        ],
        "dependencies": "{'poi', 'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 50,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_migration_factors",
              "calculate_poi_attractiveness",
              "calculate_migration_rate",
              "calculate_distance_penalty",
              "calculate_migration_flow",
              "process_migration",
              "process_regional_migration"
            ],
            "estimated_lines": 140,
            "priority": "high"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_migration_history"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "POIMigrationService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/rumor/service.py",
        "lines": 797,
        "classes": [
          "RumorService"
        ],
        "functions": [
          "__new__",
          "__init__",
          "get_instance",
          "_fallback_mutation"
        ],
        "imports": [
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.Union",
          "typing.Callable",
          "typing.Tuple",
          "logging",
          "random",
          "asyncio",
          "datetime.datetime",
          "datetime.timedelta",
          "backend.systems.rumor.models.rumor.Rumor",
          "backend.systems.rumor.models.rumor.RumorVariant",
          "backend.systems.rumor.models.rumor.RumorSpread",
          "backend.systems.rumor.models.rumor.RumorCategory",
          "backend.systems.rumor.models.rumor.RumorSeverity",
          "backend.systems.rumor.models.rumor.RumorEvent",
          "backend.systems.rumor.repository.RumorRepository",
          "backend.systems.events.EventDispatcher",
          "backend.systems.rumor.decay_and_propagation.calculate_rumor_decay",
          "backend.systems.rumor.decay_and_propagation.calculate_mutation_probability",
          "backend.systems.rumor.decay_and_propagation.calculate_believability_for_entity",
          "backend.systems.rumor.decay_and_propagation.calculate_truth_decay"
        ],
        "dependencies": "{'rumor', 'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling",
          "Configuration"
        ],
        "complexity_score": 49,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_instance"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "RumorService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/diplomacy/models.py",
        "lines": 786,
        "classes": [
          "DiplomaticStatus",
          "TensionLevel",
          "WarSide",
          "TreatyType",
          "TreatyStatus",
          "FactionRelationship",
          "FactionTension",
          "War",
          "WarBattle",
          "NegotiationOffer",
          "NegotiationStatus",
          "Treaty",
          "Negotiation",
          "DiplomaticEventType",
          "DiplomaticEvent",
          "TreatyViolationType",
          "TreatyViolation",
          "DiplomaticIncidentType",
          "DiplomaticIncidentSeverity",
          "DiplomaticIncident",
          "UltimatumStatus",
          "Ultimatum",
          "SanctionType",
          "SanctionStatus",
          "Sanction",
          "WarOutcomeType",
          "TensionConfig",
          "WarConfig",
          "WarOutcome",
          "WarState"
        ],
        "functions": [
          "validate_standing",
          "validate_membership_level",
          "data",
          "from_canonical_relationship",
          "validate_tension_range",
          "end_date_must_be_future",
          "duration_days",
          "validate_status_with_violations"
        ],
        "imports": [
          "datetime.datetime",
          "datetime.timedelta",
          "enum.Enum",
          "enum.auto",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Union",
          "typing.Any",
          "uuid.UUID",
          "uuid.uuid4",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.field_validator",
          "pydantic.ConfigDict",
          "pydantic.model_validator"
        ],
        "dependencies": "{'pydantic'}",
        "responsibilities": [
          "Business Logic",
          "Data Models",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 55,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "validate_standing",
              "validate_membership_level",
              "validate_tension_range",
              "validate_status_with_violations"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "duration_days"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "DiplomaticStatus",
              "TensionLevel",
              "WarSide",
              "TreatyType",
              "TreatyStatus",
              "FactionRelationship",
              "FactionTension",
              "War",
              "WarBattle",
              "NegotiationOffer",
              "NegotiationStatus",
              "Treaty",
              "Negotiation",
              "DiplomaticEventType",
              "DiplomaticEvent",
              "TreatyViolationType",
              "TreatyViolation",
              "DiplomaticIncidentType",
              "DiplomaticIncidentSeverity",
              "DiplomaticIncident",
              "UltimatumStatus",
              "Ultimatum",
              "SanctionType",
              "SanctionStatus",
              "Sanction",
              "WarOutcomeType",
              "TensionConfig",
              "WarConfig",
              "WarOutcome",
              "WarState"
            ],
            "estimated_lines": 900,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/dialogue/war_integration.py",
        "lines": 785,
        "classes": [
          "DialogueWarIntegration"
        ],
        "functions": [
          "__init__",
          "add_war_context_to_dialogue",
          "get_war_dialogue_options",
          "get_tension_dialogue_context",
          "get_war_narrative_description",
          "_get_active_wars",
          "_get_significant_tensions",
          "_get_war_factions",
          "_get_faction_war_perspective",
          "_get_war_sides_description",
          "_get_faction_name",
          "_get_war_state_description",
          "_get_tension_state",
          "_calculate_war_risk",
          "_get_tension_description",
          "_get_war_news_dialogue",
          "_get_war_propaganda_dialogue",
          "_get_peace_dialogue",
          "_get_threat_dialogue",
          "_get_war_progress_description",
          "_get_war_victim_description"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "logging",
          "datetime.datetime",
          "backend.systems.tension_war.services.war_manager.WarManager",
          "backend.systems.tension_war.services.tension_manager.TensionManager"
        ],
        "dependencies": "{'tension_war'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 58,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_war_dialogue_options",
              "get_tension_dialogue_context",
              "get_war_narrative_description",
              "_get_active_wars",
              "_get_significant_tensions",
              "_get_war_factions",
              "_get_faction_war_perspective",
              "_get_war_sides_description",
              "_get_faction_name",
              "_get_war_state_description",
              "_get_tension_state",
              "_get_tension_description",
              "_get_war_news_dialogue",
              "_get_war_propaganda_dialogue",
              "_get_peace_dialogue",
              "_get_threat_dialogue",
              "_get_war_progress_description",
              "_get_war_victim_description"
            ],
            "estimated_lines": 360,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_calculate_war_risk"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "DialogueWarIntegration"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/quest/faction_integration.py",
        "lines": 780,
        "classes": [
          "FactionQuestContext",
          "QuestFactionIntegration"
        ],
        "functions": [
          "register_event_handlers",
          "generate_faction_quest",
          "generate_rivalry_quest",
          "generate_alliance_quest",
          "apply_faction_influence",
          "get_faction_standings"
        ],
        "imports": [
          "logging",
          "random",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "dataclasses.dataclass",
          "dataclasses.field",
          "backend.systems.events.get_event_dispatcher",
          "models.Quest",
          "models.QuestStep",
          "generator.QuestGenerator",
          "backend.systems.faction.FactionFacade",
          "utils.QuestUtils"
        ],
        "dependencies": "{'events', 'faction'}",
        "responsibilities": [
          "Business Logic",
          "Data Models",
          "Database Operations"
        ],
        "complexity_score": 60,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_faction_quest",
              "generate_rivalry_quest",
              "generate_alliance_quest"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "apply_faction_influence"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_faction_standings"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "FactionQuestContext",
              "QuestFactionIntegration"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/loot/loot_core.py",
        "lines": 775,
        "classes": [],
        "functions": [
          "group_equipment_by_type",
          "validate_item",
          "calculate_item_power_score",
          "gpt_name_and_flavor",
          "generate_item_identity",
          "generate_item_effects",
          "generate_loot_bundle",
          "merge_loot_sets",
          "generate_location_specific_loot"
        ],
        "imports": [
          "random",
          "uuid.uuid4",
          "copy.deepcopy",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Tuple",
          "typing.Optional",
          "datetime.datetime",
          "math",
          "backend.systems.events.EventDispatcher",
          "backend.systems.loot.loot_events.LootGeneratedEvent",
          "backend.systems.loot.loot_events.LootAnalyticsEvent"
        ],
        "dependencies": "{'loot', 'events'}",
        "responsibilities": [
          "Business Logic",
          "Event Handling"
        ],
        "complexity_score": 44,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "validate_item",
              "calculate_item_power_score",
              "generate_item_identity",
              "generate_item_effects",
              "generate_loot_bundle",
              "generate_location_specific_loot"
            ],
            "estimated_lines": 120,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/combat/combat_facade.py",
        "lines": 750,
        "classes": [
          "CombatFacade"
        ],
        "functions": [
          "initialize_combat",
          "execute_action",
          "apply_damage",
          "apply_effect",
          "create_and_apply_effect",
          "remove_effect",
          "process_effects",
          "get_active_effects",
          "get_turn_order",
          "advance_turn",
          "get_valid_targets",
          "end_combat",
          "_execute_attack",
          "_execute_skill",
          "_execute_item",
          "_execute_movement"
        ],
        "imports": [
          "logging",
          "typing.Any",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Union",
          "typing.Tuple",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.CombatEvent",
          "backend.systems.combat.combat_types_stub.Character",
          "backend.systems.combat.combat_types_stub.CombatState",
          "backend.systems.combat.combat_types_stub.CombatAction",
          "backend.systems.combat.combat_types_stub.StatusEffect",
          "backend.systems.combat.combat_types_stub.DamageCalculation",
          "backend.systems.combat.combat_types_stub.ActionResult",
          "backend.systems.combat.unified_combat_utils.DamageType",
          "backend.systems.combat.unified_combat_utils.StatusEffectType",
          "backend.systems.combat.unified_combat_utils.calculate_base_damage",
          "backend.systems.combat.unified_combat_utils.apply_critical_hit",
          "backend.systems.combat.unified_combat_utils.calculate_mitigation",
          "backend.systems.combat.unified_combat_utils.apply_full_damage_calculation",
          "backend.systems.combat.unified_combat_utils.get_valid_targets",
          "backend.systems.combat.unified_combat_utils.get_turn_order",
          "backend.systems.combat.unified_combat_utils.resolve_combat_action",
          "backend.systems.combat.unified_combat_utils.apply_status_effect",
          "backend.systems.combat.unified_combat_utils.process_status_effects",
          "backend.systems.combat.unified_combat_utils.remove_status_effect",
          "backend.systems.combat.unified_combat_utils.dispel_effects",
          "backend.systems.combat.unified_combat_utils.is_attack_successful",
          "backend.systems.combat.unified_effects.EffectType",
          "backend.systems.combat.unified_effects.EffectPipeline",
          "backend.systems.combat.unified_effects.CombatEffect",
          "backend.systems.combat.unified_effects.BuffEffect",
          "backend.systems.combat.unified_effects.DebuffEffect",
          "backend.systems.combat.unified_effects.DamageOverTimeEffect",
          "backend.systems.combat.unified_effects.HealOverTimeEffect",
          "backend.systems.combat.unified_effects.ConditionEffect",
          "backend.systems.combat.unified_effects.ResistanceEffect",
          "backend.systems.combat.unified_effects.VulnerabilityEffect",
          "backend.systems.combat.unified_effects.ImmunityEffect",
          "backend.systems.combat.combat_validator.validate_combat_action",
          "backend.systems.combat.combat_validator.validate_effect_application",
          "backend.systems.combat.combat_validator.validate_damage_parameters",
          "backend.systems.combat.combat_validator.ValidationResult"
        ],
        "dependencies": "{'combat', 'events'}",
        "responsibilities": [
          "Business Logic",
          "Data Models",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 59,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "execute_action",
              "process_effects",
              "_execute_attack",
              "_execute_skill",
              "_execute_item",
              "_execute_movement"
            ],
            "estimated_lines": 120,
            "priority": "high"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "create_and_apply_effect",
              "get_active_effects",
              "get_turn_order",
              "get_valid_targets"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "CombatFacade"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_generation/service_utils.py",
        "lines": 749,
        "classes": [],
        "functions": [
          "create_humidity_map",
          "create_temperature_map",
          "adjust_biomes_by_temperature_humidity",
          "generate_region_terrain",
          "create_region_from_tiles",
          "smooth_coastlines",
          "add_beaches",
          "expand_water_bodies",
          "apply_biome_adjacency_rules"
        ],
        "imports": [
          "os",
          "json",
          "random",
          "math",
          "uuid",
          "numpy",
          "typing.Dict",
          "typing.List",
          "typing.Tuple",
          "typing.Set",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "typing.Callable",
          "backend.systems.world_generation.models.World",
          "backend.systems.world_generation.models.Continent",
          "backend.systems.world_generation.models.Region",
          "backend.systems.world_generation.models.RegionTile",
          "backend.systems.world_generation.models.River",
          "backend.systems.world_generation.models.Resource",
          "backend.systems.world_generation.models.BiomeType",
          "backend.systems.world_generation.models.ResourceType",
          "backend.systems.world_generation.elevation_utils.generate_complete_elevation_map",
          "backend.systems.world_generation.elevation_utils.elevation_map_to_tiles",
          "backend.systems.world_generation.elevation_utils.get_elevation_type",
          "backend.systems.world_generation.coastline_utils.identify_coastlines",
          "backend.systems.world_generation.coastline_utils.smooth_coastline",
          "backend.systems.world_generation.coastline_utils.place_beaches",
          "backend.systems.world_generation.river_generator.generate_rivers_for_region",
          "backend.systems.world_generation.resource_utils.assign_resources_to_region",
          "backend.systems.world_generation.resource_utils.generate_special_resource_clusters",
          "backend.systems.world_generation.biome_utils.load_adjacency_rules",
          "backend.systems.world_generation.biome_utils.apply_adjacency_rules"
        ],
        "dependencies": "{'world_generation'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 54,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "create_humidity_map",
              "create_temperature_map",
              "create_region_from_tiles"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_region_terrain"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_generation/world_utils.py",
        "lines": 745,
        "classes": [],
        "functions": [
          "generate_region",
          "walk_region",
          "pick_valid_tile",
          "claim_region_hexes_for_city",
          "generate_settlements",
          "generate_non_settlement_pois",
          "generate_minor_nature_squares",
          "choose_poi_type",
          "determine_biome",
          "get_elevation_at_point",
          "get_moisture_at_point"
        ],
        "imports": [
          "random",
          "logging",
          "typing.Dict",
          "typing.List",
          "typing.Tuple",
          "typing.Any",
          "typing.Optional",
          "typing.Set",
          "uuid.uuid4",
          "datetime.datetime",
          "math",
          "math"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 47,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_region",
              "generate_settlements",
              "generate_non_settlement_pois",
              "generate_minor_nature_squares"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "claim_region_hexes_for_city"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_elevation_at_point",
              "get_moisture_at_point"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/population/utils.py",
        "lines": 742,
        "classes": [],
        "functions": [
          "calculate_growth_rate",
          "calculate_next_state",
          "estimate_population_timeline",
          "calculate_target_population",
          "calculate_catastrophe_impact",
          "calculate_war_impact",
          "calculate_resource_shortage_impact",
          "calculate_seasonal_growth_modifier",
          "calculate_seasonal_death_rate_modifier",
          "is_valid_transition",
          "estimate_time_to_state",
          "is_valid_state_progression",
          "get_poi_status_description",
          "calculate_migration_impact"
        ],
        "imports": [
          "math",
          "typing.Dict",
          "typing.Tuple",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "datetime.datetime",
          "datetime.timedelta",
          "backend.systems.population.models.POIPopulation",
          "backend.systems.population.models.POIState",
          "backend.systems.population.models.POIType"
        ],
        "dependencies": "{'population'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 43,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_growth_rate",
              "calculate_next_state",
              "calculate_catastrophe_impact",
              "calculate_war_impact",
              "calculate_resource_shortage_impact",
              "calculate_seasonal_growth_modifier",
              "calculate_seasonal_death_rate_modifier",
              "calculate_migration_impact"
            ],
            "estimated_lines": 160,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "estimate_population_timeline"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "calculate_target_population",
              "get_poi_status_description"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/inventory/validator.py",
        "lines": 723,
        "classes": [
          "InventoryValidator"
        ],
        "functions": [
          "validate_inventory_exists",
          "validate_item_exists",
          "validate_inventory_item_exists",
          "check_stackable_constraints",
          "check_inventory_constraints",
          "validate_add_item",
          "validate_remove_item",
          "validate_transfer_item",
          "validate_equip_item",
          "validate_unequip_item",
          "validate_bulk_transfer"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "typing.Tuple",
          "typing.Union",
          "logging",
          "sqlalchemy.and_",
          "backend.systems.inventory.models.Item",
          "backend.systems.inventory.models.Inventory",
          "backend.systems.inventory.models.InventoryItem",
          "backend.systems.inventory.schemas.ValidationResult",
          "backend.systems.shared.database.db"
        ],
        "dependencies": "{'sqlalchemy', 'inventory', 'shared'}",
        "responsibilities": [
          "Business Logic",
          "Data Models",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 41,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "validate_inventory_exists",
              "validate_item_exists",
              "validate_inventory_item_exists",
              "validate_add_item",
              "validate_remove_item",
              "validate_transfer_item",
              "validate_equip_item",
              "validate_unequip_item",
              "validate_bulk_transfer"
            ],
            "estimated_lines": 180,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "InventoryValidator"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_generation/api.py",
        "lines": 715,
        "classes": [],
        "functions": [
          "generate_world",
          "generate_custom_world",
          "load_world",
          "save_world",
          "subscribe_to_world_events",
          "get_world_info"
        ],
        "imports": [
          "asyncio",
          "logging",
          "uuid",
          "time",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "typing.Callable",
          "typing.Set",
          "typing.Tuple",
          "typing.Union",
          "backend.systems.world_generation.world_generator.WorldGenerator",
          "backend.systems.world_generation.seed_loader.load_world_seed",
          "backend.systems.events.event_dispatcher.EventDispatcher",
          "backend.systems.world_generation.events.WorldGenerationEventType",
          "backend.systems.world_generation.events.GenerationStartedEvent",
          "backend.systems.world_generation.events.GenerationCompletedEvent",
          "backend.systems.world_generation.events.GenerationStartedEvent",
          "backend.systems.world_generation.events.GenerationCompletedEvent",
          "backend.systems.world_generation.events.GenerationFailedEvent",
          "backend.systems.world_generation.events.GenerationProgressEvent",
          "backend.systems.world_generation.events.PhaseStartedEvent",
          "backend.systems.world_generation.events.PhaseCompletedEvent",
          "backend.systems.world_generation.events.PhaseFailedEvent",
          "backend.systems.world_generation.events.ComponentStartedEvent",
          "backend.systems.world_generation.events.ComponentCompletedEvent",
          "backend.systems.world_generation.events.ComponentFailedEvent",
          "backend.systems.world_generation.events.WorldSavedEvent",
          "backend.systems.world_generation.events.WorldLoadedEvent"
        ],
        "dependencies": "{'world_generation', 'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling",
          "Configuration"
        ],
        "complexity_score": 49,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_world",
              "generate_custom_world"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "load_world",
              "save_world",
              "get_world_info"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "subscribe_to_world_events"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/dialogue/population_integration.py",
        "lines": 703,
        "classes": [
          "DialoguePopulationIntegration"
        ],
        "functions": [
          "__init__",
          "add_population_data_to_context",
          "get_location_population_data",
          "get_occupation_dialogue",
          "get_social_status_dialogue",
          "modify_dialogue_for_demographics",
          "generate_demographic_comment",
          "generate_occupation_comment",
          "_generate_occupation_dialogue",
          "_get_character_social_status",
          "_get_most_notable_demographic"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "logging",
          "random",
          "backend.systems.population.population_service"
        ],
        "dependencies": "{'population'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 51,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "add_population_data_to_context"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_location_population_data",
              "get_occupation_dialogue",
              "get_social_status_dialogue",
              "_get_character_social_status",
              "_get_most_notable_demographic"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_demographic_comment",
              "generate_occupation_comment",
              "_generate_occupation_dialogue"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "DialoguePopulationIntegration"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/tension_war/services/diplomatic_manager.py",
        "lines": 690,
        "classes": [
          "DiplomaticManager"
        ],
        "functions": [
          "__init__",
          "broker_peace",
          "respond_to_peace_brokering",
          "get_peace_brokering_attempt",
          "get_peace_brokering_attempts_by_war",
          "get_peace_brokering_attempts_by_broker",
          "get_peace_brokering_attempts_by_faction",
          "apply_economic_sanctions",
          "lift_economic_sanctions",
          "get_sanction",
          "get_sanctions_between_factions",
          "get_sanctions_by_faction",
          "record_diplomatic_event",
          "get_diplomatic_events",
          "_apply_broker_reputation_bonus",
          "_emit_peace_brokering_event",
          "_emit_sanction_event"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Tuple",
          "datetime.datetime",
          "uuid",
          "random",
          "logging",
          "backend.systems.events.EventDispatcher",
          "models.WarOutcomeType",
          "models.TensionConfig",
          "models.enums.TensionLevel",
          "models.enums.SanctionType",
          "models.enums.PeaceBrokeringStatus",
          "utils.diplomatic_utils.calculate_peace_acceptance_chance",
          "utils.diplomatic_utils.evaluate_terms_favorability",
          "utils.diplomatic_utils.calculate_broker_reputation_bonus",
          "utils.diplomatic_utils.calculate_sanction_impact"
        ],
        "dependencies": "{'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling",
          "Configuration"
        ],
        "complexity_score": 54,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_peace_brokering_attempt",
              "get_peace_brokering_attempts_by_war",
              "get_peace_brokering_attempts_by_broker",
              "get_peace_brokering_attempts_by_faction",
              "get_sanction",
              "get_sanctions_between_factions",
              "get_sanctions_by_faction",
              "get_diplomatic_events"
            ],
            "estimated_lines": 160,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "_apply_broker_reputation_bonus",
              "_emit_peace_brokering_event",
              "_emit_sanction_event"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "DiplomaticManager"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/tension_war/services/peace_manager.py",
        "lines": 675,
        "classes": [
          "PeaceManager"
        ],
        "functions": [
          "__init__",
          "create_peace_offer",
          "evaluate_peace_offer",
          "_apply_peace_terms",
          "get_pending_peace_offers",
          "create_ceasefire",
          "accept_ceasefire",
          "reject_ceasefire",
          "record_ceasefire_violation",
          "broker_peace",
          "respond_to_brokering",
          "_determine_outcome_type_from_terms",
          "_apply_broker_reputation_bonus",
          "_emit_peace_offer_event",
          "_emit_peace_decision_event",
          "_emit_ceasefire_event",
          "_emit_peace_brokering_event"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "datetime.datetime",
          "uuid",
          "logging",
          "backend.systems.events.EventDispatcher",
          "models.WarOutcomeType",
          "models.PeaceConfig",
          "models.peace.PeaceOffer",
          "models.peace.PeaceBrokering",
          "models.peace.Ceasefire",
          "utils.peace_utils.evaluate_peace_terms",
          "utils.peace_utils.calculate_acceptance_chance",
          "utils.peace_utils.generate_counter_offer"
        ],
        "dependencies": "{'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling",
          "Configuration"
        ],
        "complexity_score": 47,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "create_peace_offer",
              "get_pending_peace_offers",
              "create_ceasefire"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "_apply_broker_reputation_bonus",
              "_emit_peace_offer_event",
              "_emit_peace_decision_event",
              "_emit_ceasefire_event",
              "_emit_peace_brokering_event"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "PeaceManager"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/tension_war/services/war_manager.py",
        "lines": 643,
        "classes": [
          "WarManager"
        ],
        "functions": [
          "__init__",
          "get_war_status",
          "declare_war",
          "get_war",
          "end_war",
          "advance_war_day",
          "_apply_territorial_changes",
          "_apply_resource_transfers",
          "_apply_population_impact",
          "_apply_reputation_changes",
          "_emit_war_declared_event",
          "_emit_war_ended_event",
          "_check_allies_joining_war",
          "_check_scheduled_battles",
          "generate_daily_raids",
          "_check_war_victory_conditions",
          "_prepare_war_end",
          "_calculate_tension_change",
          "_emit_territorial_change_event",
          "_emit_resource_transfer_event",
          "_emit_population_change_event",
          "_emit_reputation_change_event"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Tuple",
          "typing.Any",
          "random",
          "math",
          "datetime.datetime",
          "datetime.timedelta",
          "uuid",
          "logging",
          "backend.systems.events.EventDispatcher",
          "models.WarOutcomeType",
          "models.WarConfig",
          "models.war.Battle",
          "models.war.WarOutcome",
          "models.war.WarState",
          "models.war.ScheduledBattle",
          "models.war.CallToArms",
          "utils.war_utils.calculate_war_chances",
          "utils.war_utils.evaluate_battle_outcome",
          "utils.war_utils.calculate_resource_changes",
          "utils.war_utils.calculate_territorial_changes",
          "utils.war_utils.calculate_population_impact",
          "utils.war_utils.calculate_cultural_impact"
        ],
        "dependencies": "{'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling",
          "Configuration"
        ],
        "complexity_score": 58,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_war_status",
              "get_war"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "_apply_population_impact",
              "_apply_reputation_changes",
              "_emit_war_declared_event",
              "_emit_war_ended_event",
              "_emit_territorial_change_event",
              "_emit_resource_transfer_event",
              "_emit_population_change_event",
              "_emit_reputation_change_event"
            ],
            "estimated_lines": 160,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_daily_raids",
              "_calculate_tension_change"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "WarManager"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/faction/faction_facade.py",
        "lines": 639,
        "classes": [
          "FactionFacade"
        ],
        "functions": [
          "__init__",
          "create_faction",
          "get_faction",
          "get_faction_by_name",
          "get_factions",
          "update_faction",
          "delete_faction",
          "set_diplomatic_stance",
          "get_relationship",
          "get_faction_relationships",
          "update_tension",
          "declare_war",
          "make_peace",
          "process_tension_decay",
          "resolve_war_outcome",
          "assign_faction_to_character",
          "get_faction_members",
          "get_character_factions",
          "update_character_loyalty",
          "remove_character_from_faction",
          "calculate_affinity",
          "switch_character_faction",
          "calculate_faction_schism_probability",
          "assign_faction_to_poi",
          "propagate_faction_influence",
          "add_faction_goal"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "typing.Tuple",
          "sqlalchemy.orm.Session",
          "datetime.datetime",
          "backend.systems.faction.models.faction.Faction",
          "backend.systems.faction.models.faction.FactionRelationship",
          "backend.systems.faction.models.faction.FactionMembership",
          "backend.systems.faction.models.faction_goal.FactionGoal",
          "backend.systems.faction.schemas.faction_types.FactionType",
          "backend.systems.faction.schemas.faction_types.FactionAlignment",
          "backend.systems.faction.schemas.faction_types.DiplomaticStance",
          "backend.systems.faction.services.consolidated_faction_service.ConsolidatedFactionService",
          "backend.systems.faction.services.consolidated_faction_service.FactionError",
          "backend.systems.faction.services.consolidated_faction_service.FactionNotFoundError",
          "backend.systems.faction.services.consolidated_faction_service.DuplicateFactionError",
          "backend.systems.faction.services.consolidated_faction_service.InvalidFactionOperationError",
          "backend.systems.faction.services.consolidated_relationship_service.ConsolidatedRelationshipService",
          "backend.systems.faction.services.consolidated_membership_service.ConsolidatedMembershipService"
        ],
        "dependencies": "{'sqlalchemy', 'faction'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 46,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "create_faction",
              "get_faction",
              "get_faction_by_name",
              "get_factions",
              "update_faction",
              "delete_faction",
              "get_relationship",
              "get_faction_relationships",
              "update_tension",
              "get_faction_members",
              "get_character_factions",
              "update_character_loyalty"
            ],
            "estimated_lines": 240,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "process_tension_decay",
              "calculate_affinity",
              "calculate_faction_schism_probability"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "assign_faction_to_character",
              "assign_faction_to_poi",
              "propagate_faction_influence",
              "add_faction_goal"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "FactionFacade"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/npc/routers/npc_router.py",
        "lines": 633,
        "classes": [
          "NPCCreate",
          "NPCUpdate",
          "NPCMemoryRequest",
          "NPCRumorRequest",
          "NPCFactionAdjustment",
          "NPCLocationUpdate",
          "NPCLoyaltyUpdate",
          "NPCMotifRequest",
          "GenerateNPCsRequest"
        ],
        "functions": [
          "get_npc_service_from_session"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Union",
          "uuid.UUID",
          "fastapi.APIRouter",
          "fastapi.Path",
          "fastapi.Query",
          "fastapi.HTTPException",
          "fastapi.Depends",
          "fastapi.Body",
          "fastapi.BackgroundTasks",
          "pydantic.BaseModel",
          "pydantic.Field",
          "datetime.datetime",
          "backend.systems.npc.services.npc_service.get_npc_service",
          "backend.systems.npc.services.npc_service.NPCService",
          "backend.systems.shared.database.get_db_session",
          "sqlalchemy.orm.Session"
        ],
        "dependencies": "{'shared', 'sqlalchemy', 'pydantic', 'fastapi', 'npc'}",
        "responsibilities": [
          "Business Logic",
          "API/Routing",
          "Database Operations",
          "Data Models"
        ],
        "complexity_score": 55,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_npc_service_from_session"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "NPCCreate",
              "NPCUpdate",
              "NPCMemoryRequest",
              "NPCRumorRequest",
              "NPCFactionAdjustment",
              "NPCLocationUpdate",
              "NPCLoyaltyUpdate",
              "NPCMotifRequest",
              "GenerateNPCsRequest"
            ],
            "estimated_lines": 270,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/world_state/optimized_worldgen.py",
        "lines": 629,
        "classes": [
          "OptimizedWorldGenerator"
        ],
        "functions": [
          "create_world_generator",
          "__init__",
          "generate_world_map",
          "generate_region",
          "_generate_world_rivers",
          "_find_neighboring_cells",
          "_get_terrain_elevation",
          "_generate_points_of_interest"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Tuple",
          "typing.Optional",
          "typing.Any",
          "typing.Set",
          "random",
          "math",
          "time",
          "json",
          "numpy",
          "dataclasses.dataclass",
          "dataclasses.field",
          "os",
          "backend.systems.world_state.consolidated_world_models.WorldMap",
          "backend.systems.world_state.consolidated_world_models.Region",
          "backend.systems.world_state.consolidated_world_models.PointOfInterest",
          "backend.systems.world_state.consolidated_world_models.TerrainType",
          "backend.systems.world_state.utils.terrain_generator.TerrainGenerator",
          "backend.systems.world_state.utils.terrain_generator.TerrainConfig",
          "backend.systems.world_state.utils.terrain_generator.NoiseLayer",
          "backend.systems.world_state.utils.terrain_generator.BiomeInfo"
        ],
        "dependencies": "{'world_state'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "File I/O",
          "Configuration"
        ],
        "complexity_score": 55,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "create_world_generator",
              "_find_neighboring_cells",
              "_get_terrain_elevation"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_world_map",
              "generate_region",
              "_generate_world_rivers",
              "_generate_points_of_interest"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "OptimizedWorldGenerator"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/quest/generator.py",
        "lines": 619,
        "classes": [
          "QuestGenerator"
        ],
        "functions": [
          "generate_quest_title",
          "generate_quest_steps",
          "calculate_quest_reward",
          "generate_quest",
          "generate_journal_entry",
          "generate_arc_for_character",
          "generate_quest_from_poi",
          "generate_questline_from_region"
        ],
        "imports": [
          "logging",
          "random",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "datetime.datetime",
          "backend.systems.npc.NPCService",
          "backend.systems.world_state.WorldStateManager",
          "models.Quest",
          "models.QuestStep",
          "motif_integration.QuestMotifIntegration",
          "backend.systems.inventory.service.InventoryService"
        ],
        "dependencies": "{'npc', 'inventory', 'world_state'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 53,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_quest_title",
              "generate_quest_steps",
              "calculate_quest_reward",
              "generate_quest",
              "generate_journal_entry",
              "generate_arc_for_character",
              "generate_quest_from_poi",
              "generate_questline_from_region"
            ],
            "estimated_lines": 160,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "QuestGenerator"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/economy/utils/shop_utils.py",
        "lines": 618,
        "classes": [],
        "functions": [
          "get_shop_inventory",
          "restock_shop",
          "_generate_shop_inventory",
          "_generate_fallback_inventory",
          "_apply_current_pricing",
          "calculate_sale_value",
          "calculate_purchase_value",
          "get_shop_type_from_poi",
          "initialize_shop_metadata",
          "purchase_item_from_shop",
          "sell_item_to_shop"
        ],
        "imports": [
          "logging",
          "typing.Optional",
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "typing.Tuple",
          "datetime.datetime",
          "datetime.timedelta",
          "random",
          "backend.systems.poi.models.PointOfInterest",
          "backend.systems.poi.models.POIType",
          "backend.systems.inventory.models.Inventory",
          "backend.systems.inventory.models.Item",
          "backend.systems.inventory.models.InventoryItem",
          "backend.systems.loot.loot_shop.generate_shop_inventory",
          "backend.systems.loot.loot_shop.restock_shop_inventory",
          "backend.systems.loot.loot_shop.get_dynamic_item_price",
          "backend.systems.loot.loot_shop.calculate_base_price",
          "backend.systems.loot.loot_shop.get_region_economic_factors"
        ],
        "dependencies": "{'loot', 'inventory', 'poi'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 49,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_shop_inventory",
              "get_shop_type_from_poi"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "_generate_shop_inventory",
              "_generate_fallback_inventory",
              "calculate_sale_value",
              "calculate_purchase_value"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/poi/services/landmark_service.py",
        "lines": 604,
        "classes": [
          "LandmarkService"
        ],
        "functions": [
          "get_max_landmarks",
          "get_landmarks",
          "add_landmark",
          "remove_landmark",
          "generate_landmark_name",
          "generate_landmark_description",
          "generate_landmark_bonuses",
          "get_specific_landmark_bonus",
          "calculate_landmark_effects",
          "generate_random_landmark",
          "select_rarity",
          "select_weighted_category",
          "apply_landmark_effects"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Any",
          "typing.Tuple",
          "datetime.datetime",
          "random",
          "uuid",
          "models.PointOfInterest",
          "models.POIType"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 49,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_max_landmarks",
              "get_landmarks",
              "get_specific_landmark_bonus"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_landmark_name",
              "generate_landmark_description",
              "generate_landmark_bonuses",
              "calculate_landmark_effects",
              "generate_random_landmark"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "LandmarkService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/shared/utils/game/motif_utils.py",
        "lines": 589,
        "classes": [
          "Motif",
          "MotifManager"
        ],
        "functions": [
          "calculate_motif_influence",
          "select_motif",
          "apply_motif_to_value",
          "create_motif_influenced_value",
          "__init__",
          "activate",
          "get_current_weight",
          "get_influence_on",
          "to_dict",
          "from_dict",
          "__str__",
          "get_instance",
          "__init__",
          "add_motif",
          "remove_motif",
          "get_motif",
          "activate_motif",
          "get_motifs_by_category",
          "get_motifs_by_tag",
          "select_weighted_motif",
          "get_combined_influence",
          "get_top_influences",
          "to_dict",
          "from_dict"
        ],
        "imports": [
          "logging",
          "random",
          "typing.Dict",
          "typing.List",
          "typing.Set",
          "typing.Optional",
          "typing.Tuple",
          "typing.Any",
          "typing.Union",
          "typing.Callable",
          "math"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 56,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_motif_influence"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "create_motif_influenced_value",
              "get_current_weight",
              "get_influence_on",
              "get_instance",
              "get_motif",
              "get_motifs_by_category",
              "get_motifs_by_tag",
              "get_combined_influence",
              "get_top_influences"
            ],
            "estimated_lines": 180,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "Motif",
              "MotifManager"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/quest/api_router.py",
        "lines": 588,
        "classes": [],
        "functions": [],
        "imports": [
          "datetime.datetime",
          "typing.Dict",
          "typing.List",
          "typing.Any",
          "typing.Optional",
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.Body",
          "fastapi.Query",
          "fastapi.Path",
          "logging",
          "models.Quest",
          "models.QuestStep",
          "models.JournalEntry",
          "database.QuestRepository",
          "quest_manager.QuestManager",
          "utils.QuestValidator",
          "backend.systems.auth_user.services.get_current_active_user",
          "backend.systems.auth_user.services.authenticate_user",
          "backend.systems.shared.utils.common.error.ValidationError",
          "backend.systems.shared.utils.common.error.NotFoundError",
          "backend.systems.shared.utils.core.firebase_utils.get_collection"
        ],
        "dependencies": "{'firebase', 'auth_user', 'shared', 'fastapi'}",
        "responsibilities": [
          "Business Logic",
          "API/Routing",
          "Database Operations",
          "Data Models"
        ],
        "complexity_score": 46,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": []
      },
      {
        "path": "systems/magic/utils.py",
        "lines": 583,
        "classes": [],
        "functions": [
          "calculate_spell_power",
          "validate_spell_requirements",
          "generate_effect_description",
          "calculate_spell_difficulty",
          "parse_spell_target_area",
          "calculate_magic_learning_time",
          "format_spell_duration",
          "check_spell_compatibility",
          "can_cast_spell",
          "apply_spell_effect",
          "calculate_spell_duration",
          "calculate_magic_affinity",
          "format_spell_effects",
          "determine_dominant_school",
          "generate_magic_flavor_text",
          "calculate_magical_influence"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Tuple",
          "datetime.datetime",
          "models.SpellModel",
          "models.SpellEffect"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Utilities",
          "Database Operations"
        ],
        "complexity_score": 45,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_spell_power",
              "validate_spell_requirements",
              "generate_effect_description",
              "calculate_spell_difficulty",
              "calculate_magic_learning_time",
              "calculate_spell_duration",
              "calculate_magic_affinity",
              "generate_magic_flavor_text",
              "calculate_magical_influence"
            ],
            "estimated_lines": 180,
            "priority": "high"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "parse_spell_target_area"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "utilities.py",
            "responsibility": "Utilities",
            "functions": [
              "format_spell_duration",
              "format_spell_effects"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/region/router.py",
        "lines": 576,
        "classes": [],
        "functions": [
          "get_region_service",
          "update_region",
          "delete_region",
          "get_region_details_with_weather",
          "get_regions_by_continent",
          "list_all_regions",
          "get_region_map",
          "seed_region",
          "generate_region",
          "generate_new_region",
          "log_event_and_notify_npcs",
          "get_questlog",
          "add_quest"
        ],
        "imports": [
          "typing.List",
          "typing.Optional",
          "typing.Dict",
          "typing.Any",
          "typing.Tuple",
          "fastapi.APIRouter",
          "fastapi.HTTPException",
          "fastapi.status",
          "fastapi.Depends",
          "fastapi.Body",
          "fastapi.Query",
          "datetime.datetime",
          "json",
          "random",
          "backend.systems.region.models.RegionSchema",
          "backend.systems.region.models.EventSchema",
          "backend.systems.region.models.RegionGenerationSchema",
          "backend.systems.region.models.QuestlogEntrySchema",
          "backend.systems.region.service.region_service",
          "backend.systems.region.service.RegionService",
          "backend.systems.world_state.utils.world_event_utils.log_world_event",
          "backend.systems.character.npc.npc_rumor_utils.sync_event_beliefs"
        ],
        "dependencies": "{'character', 'region', 'fastapi', 'world_state'}",
        "responsibilities": [
          "Business Logic",
          "API/Routing",
          "Database Operations",
          "File I/O"
        ],
        "complexity_score": 52,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_region_service",
              "update_region",
              "delete_region",
              "get_region_details_with_weather",
              "get_regions_by_continent",
              "get_region_map",
              "get_questlog"
            ],
            "estimated_lines": 140,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_region",
              "generate_new_region"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/equipment/identify_item_utils.py",
        "lines": 565,
        "classes": [],
        "functions": [
          "calculate_identification_cost",
          "identify_item",
          "fully_identify_item",
          "is_fully_identified",
          "get_next_identifiable_level",
          "reveal_item_name_and_flavor",
          "gpt_flavor_identify_effect",
          "gpt_flavor_reveal_full_item"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "logging",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.EventBase",
          "events.ItemIdentifiedEvent",
          "events.ItemNameRevealedEvent",
          "events.NarrativeFlavorTextEvent",
          "backend.systems.shared.database.db",
          "backend.systems.economy.models.EconomicMetric",
          "backend.systems.economy.models.MetricType",
          "backend.systems.faction.models.Faction",
          "backend.systems.narrative.utils.gpt_flavor_identify_effect",
          "backend.systems.narrative.utils.gpt_flavor_reveal_full_item"
        ],
        "dependencies": "{'shared', 'economy', 'narrative', 'events', 'faction'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling"
        ],
        "complexity_score": 45,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_identification_cost"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_next_identifiable_level"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/dialogue/analytics_integration.py",
        "lines": 564,
        "classes": [
          "DialogueAnalyticsIntegration"
        ],
        "functions": [
          "__init__",
          "log_dialogue_event",
          "track_dialogue_topic",
          "log_player_response_choice",
          "track_character_interaction_frequency",
          "get_dialogue_metrics",
          "record_dialogue_quality_rating",
          "_update_dialogue_metrics"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Set",
          "logging",
          "datetime.datetime",
          "json",
          "os",
          "asyncio",
          "backend.systems.analytics.AnalyticsService",
          "backend.systems.analytics.AnalyticsEventType"
        ],
        "dependencies": "{'analytics'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "File I/O",
          "Configuration"
        ],
        "complexity_score": 52,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "track_character_interaction_frequency"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_dialogue_metrics",
              "_update_dialogue_metrics"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "DialogueAnalyticsIntegration"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/inventory/schemas.py",
        "lines": 541,
        "classes": [
          "ItemCategoryEnum",
          "ItemBase",
          "ItemCreate",
          "ItemUpdate",
          "ItemResponse",
          "InventoryItemBase",
          "InventoryItemCreate",
          "InventoryItemUpdate",
          "InventoryItemResponse",
          "InventoryBase",
          "InventoryCreate",
          "InventoryUpdate",
          "InventoryResponse",
          "InventoryDetailResponse",
          "InventoryStats",
          "InventoryTransferRequest",
          "ValidationResult",
          "ValidationResponse",
          "InventoryFilterParams",
          "PaginationParams",
          "PaginatedInventoryResponse",
          "BulkItemTransferRequest",
          "InventoryBackupData"
        ],
        "functions": [
          "validate_max_stack_size",
          "validate_equipment_slot",
          "validate_quantity",
          "validate_quantity",
          "validate_capacity",
          "validate_weight_limit",
          "validate_capacity",
          "validate_weight_limit",
          "validate_quantity",
          "validate_different_inventories",
          "is_error",
          "success",
          "error",
          "calculate_pages",
          "validate_different_inventories",
          "validate_items"
        ],
        "imports": [
          "typing.List",
          "typing.Dict",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "pydantic.BaseModel",
          "pydantic.Field",
          "pydantic.field_validator",
          "pydantic.model_validator",
          "pydantic.ConfigDict",
          "pydantic_core.ValidationError",
          "datetime.datetime",
          "enum.Enum"
        ],
        "dependencies": "{'pydantic'}",
        "responsibilities": [
          "Business Logic",
          "Data Models",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 57,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "validate_max_stack_size",
              "validate_equipment_slot",
              "validate_quantity",
              "validate_quantity",
              "validate_capacity",
              "validate_weight_limit",
              "validate_capacity",
              "validate_weight_limit",
              "validate_quantity",
              "validate_different_inventories",
              "calculate_pages",
              "validate_different_inventories",
              "validate_items"
            ],
            "estimated_lines": 260,
            "priority": "high"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "ItemCategoryEnum",
              "ItemBase",
              "ItemCreate",
              "ItemUpdate",
              "ItemResponse",
              "InventoryItemBase",
              "InventoryItemCreate",
              "InventoryItemUpdate",
              "InventoryItemResponse",
              "InventoryBase",
              "InventoryCreate",
              "InventoryUpdate",
              "InventoryResponse",
              "InventoryDetailResponse",
              "InventoryStats",
              "InventoryTransferRequest",
              "ValidationResult",
              "ValidationResponse",
              "InventoryFilterParams",
              "PaginationParams",
              "PaginatedInventoryResponse",
              "BulkItemTransferRequest",
              "InventoryBackupData"
            ],
            "estimated_lines": 690,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/character/core/character_utils.py",
        "lines": 540,
        "classes": [],
        "functions": [
          "generate_character_stats",
          "generate_character_skills",
          "validate_character_data",
          "validate_character_stats",
          "calculate_level",
          "calculate_ability_modifier",
          "calculate_hit_points",
          "calculate_mana_points",
          "calculate_proficiency_bonus",
          "calculate_saving_throw",
          "calculate_skill_bonus",
          "roll_dice",
          "has_spellcasting",
          "apply_level_up_benefits",
          "calculate_xp_for_level",
          "generate_random_name",
          "parse_coords",
          "perform_skill_check",
          "calculate_dr"
        ],
        "imports": [
          "math",
          "random",
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "typing.Tuple",
          "typing.List"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Utilities"
        ],
        "complexity_score": 46,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_character_stats",
              "generate_character_skills",
              "validate_character_data",
              "validate_character_stats",
              "calculate_level",
              "calculate_ability_modifier",
              "calculate_hit_points",
              "calculate_mana_points",
              "calculate_proficiency_bonus",
              "calculate_saving_throw",
              "calculate_skill_bonus",
              "calculate_xp_for_level",
              "generate_random_name",
              "calculate_dr"
            ],
            "estimated_lines": 280,
            "priority": "high"
          },
          {
            "module_name": "utilities.py",
            "responsibility": "Utilities",
            "functions": [
              "parse_coords"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_state/examples/integration_example.py",
        "lines": 519,
        "classes": [],
        "functions": [
          "print_section",
          "print_json",
          "setup_example_state",
          "direct_api_examples",
          "event_based_examples",
          "bulk_operations_example",
          "main"
        ],
        "imports": [
          "time",
          "json",
          "sys",
          "os",
          "datetime.datetime",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "backend.systems.world_state.main.initialize_world_state_system",
          "backend.systems.world_state.main.WorldStateSystem",
          "backend.systems.world_state.StateCategory",
          "backend.systems.world_state.WorldRegion",
          "backend.systems.events.EventDispatcher",
          "backend.systems.world_state.integration.event_integration.StateChangeEvent",
          "backend.systems.world_state.integration.event_integration.StateQueryEvent",
          "backend.systems.world_state.integration.event_integration.StateTimelineEvent",
          "backend.systems.world_state.features.derivative_state.DerivedStateRule",
          "backend.systems.world_state.features.derivative_state.create_formula_calculator",
          "traceback"
        ],
        "dependencies": "{'events', 'world_state'}",
        "responsibilities": [
          "Event Handling",
          "Database Operations",
          "File I/O",
          "Configuration"
        ],
        "complexity_score": 35,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": []
      },
      {
        "path": "systems/equipment/durability_utils.py",
        "lines": 515,
        "classes": [],
        "functions": [
          "get_durability_status",
          "calculate_combat_damage",
          "calculate_wear_damage",
          "apply_durability_damage",
          "calculate_repair_cost",
          "repair_equipment",
          "adjust_stats_for_durability",
          "get_durability_history"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "logging",
          "random",
          "sqlalchemy.orm.Session",
          "models.Equipment",
          "models.EquipmentDurabilityLog",
          "events.EquipmentDamagedEvent",
          "events.EquipmentRepairedEvent",
          "events.EquipmentBrokenEvent",
          "events.EquipmentRepairedFromBrokenEvent",
          "backend.systems.events.EventDispatcher",
          "backend.systems.events.EventBase",
          "backend.systems.shared.database.db",
          "backend.systems.inventory.models.Item",
          "backend.systems.inventory.models.InventoryItem"
        ],
        "dependencies": "{'sqlalchemy', 'inventory', 'events', 'shared'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling",
          "Configuration"
        ],
        "complexity_score": 38,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_durability_status",
              "get_durability_history"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_combat_damage",
              "calculate_wear_damage",
              "calculate_repair_cost"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/economy/services/market_service.py",
        "lines": 512,
        "classes": [
          "MarketService"
        ],
        "functions": [
          "__init__",
          "get_market",
          "get_markets_by_region",
          "create_market",
          "update_market",
          "delete_market",
          "calculate_price",
          "_calculate_supply_demand_modifier",
          "update_market_conditions",
          "calculate_price_index",
          "clear_cache"
        ],
        "imports": [
          "os",
          "json",
          "logging",
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "typing.Tuple",
          "typing.Union",
          "datetime.datetime",
          "random",
          "sqlalchemy.orm.Session",
          "backend.systems.economy.models.Market",
          "backend.systems.economy.models.MarketData",
          "backend.systems.economy.models.Resource",
          "backend.systems.economy.services.resource_service.ResourceService",
          "logging"
        ],
        "dependencies": "{'sqlalchemy', 'economy'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 57,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_market",
              "get_markets_by_region",
              "create_market",
              "update_market",
              "delete_market",
              "update_market_conditions"
            ],
            "estimated_lines": 120,
            "priority": "high"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_price",
              "_calculate_supply_demand_modifier",
              "calculate_price_index"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "MarketService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/magic/router.py",
        "lines": 506,
        "classes": [],
        "functions": [
          "create_magic_ability",
          "list_magic_abilities",
          "get_magic_ability",
          "update_magic_ability",
          "delete_magic_ability",
          "create_spell",
          "list_spells",
          "search_spells",
          "get_spell",
          "update_spell",
          "delete_spell",
          "cast_spell",
          "create_spellbook",
          "list_spellbooks",
          "get_spellbook",
          "get_character_spellbook",
          "add_spell_to_spellbook",
          "remove_spell_from_spellbook",
          "list_spell_effects",
          "get_spell_effect",
          "delete_spell_effect",
          "dispel_spell_effect",
          "modify_effect_duration",
          "list_magical_influences",
          "get_magical_influence",
          "get_spellbook_by_owner",
          "get_effects_by_target",
          "analyze_location_magic",
          "get_character_magic_summary",
          "process_magic_tick"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.List",
          "typing.Optional",
          "fastapi.APIRouter",
          "fastapi.HTTPException",
          "fastapi.Depends",
          "fastapi.Query",
          "fastapi.Path",
          "fastapi.Body",
          "sqlalchemy.orm.Session",
          "starlette.status",
          "backend.systems.shared.database.get_db_session",
          "backend.systems.auth_user.services.get_current_active_user",
          "schemas.MagicAbilityCreate",
          "schemas.MagicAbilityUpdate",
          "schemas.MagicAbilityResponse",
          "schemas.SpellCreate",
          "schemas.SpellUpdate",
          "schemas.SpellResponse",
          "schemas.SpellbookCreate",
          "schemas.SpellbookResponse",
          "schemas.SpellEffectCreate",
          "schemas.SpellEffectResponse",
          "schemas.CastSpellRequest",
          "schemas.MagicalInfluenceResponse",
          "schemas.MagicSchoolEnum",
          "schemas.EffectTypeEnum",
          "services.MagicService",
          "services.SpellService",
          "services.SpellbookService",
          "services.SpellEffectService"
        ],
        "dependencies": "{'sqlalchemy', 'auth_user', 'shared', 'fastapi'}",
        "responsibilities": [
          "Business Logic",
          "API/Routing",
          "Database Operations"
        ],
        "complexity_score": 53,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "create_magic_ability",
              "get_magic_ability",
              "update_magic_ability",
              "delete_magic_ability",
              "create_spell",
              "get_spell",
              "update_spell",
              "delete_spell",
              "create_spellbook",
              "get_spellbook",
              "get_character_spellbook",
              "get_spell_effect",
              "delete_spell_effect",
              "get_magical_influence",
              "get_spellbook_by_owner",
              "get_effects_by_target",
              "get_character_magic_summary"
            ],
            "estimated_lines": 340,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "analyze_location_magic"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "process_magic_tick"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/tension_war/services/proxy_war_manager.py",
        "lines": 502,
        "classes": [
          "ProxyWarManager"
        ],
        "functions": [
          "__init__",
          "start_proxy_war",
          "get_proxy_war",
          "get_proxy_wars_by_sponsor",
          "get_proxy_wars_targeting_faction",
          "get_proxy_wars_in_region",
          "update_funding_level",
          "check_discovery",
          "end_proxy_war",
          "record_proxy_war_event",
          "get_proxy_wars",
          "_emit_proxy_war_event"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "datetime.datetime",
          "uuid",
          "random",
          "logging",
          "backend.systems.events.EventDispatcher",
          "models.ProxyWarConfig",
          "models.enums.ProxyWarStatus",
          "utils.proxy_war_utils.calculate_discovery_risk",
          "utils.proxy_war_utils.calculate_proxy_war_effectiveness",
          "utils.proxy_war_utils.generate_proxy_group_name",
          "utils.proxy_war_utils.evaluate_proxy_war_impact"
        ],
        "dependencies": "{'events'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Event Handling",
          "Configuration"
        ],
        "complexity_score": 46,
        "refactoring_priority": "MEDIUM",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_proxy_war",
              "get_proxy_wars_by_sponsor",
              "get_proxy_wars_targeting_faction",
              "get_proxy_wars_in_region",
              "update_funding_level",
              "get_proxy_wars"
            ],
            "estimated_lines": 120,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "_emit_proxy_war_event"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "ProxyWarManager"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/diplomacy/router.py",
        "lines": 831,
        "classes": [],
        "functions": [
          "get_diplomacy_service",
          "get_tension_service"
        ],
        "imports": [
          "datetime.datetime",
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "uuid.UUID",
          "fastapi.APIRouter",
          "fastapi.Depends",
          "fastapi.HTTPException",
          "fastapi.Query",
          "fastapi.Body",
          "backend.systems.diplomacy.models.DiplomaticEventType",
          "backend.systems.diplomacy.models.DiplomaticIncidentType",
          "backend.systems.diplomacy.models.DiplomaticStatus",
          "backend.systems.diplomacy.models.SanctionStatus",
          "backend.systems.diplomacy.models.SanctionType",
          "backend.systems.diplomacy.models.TreatyType",
          "backend.systems.diplomacy.models.TreatyViolationType",
          "backend.systems.diplomacy.models.UltimatumStatus",
          "backend.systems.diplomacy.schemas.DiplomaticEventCreate",
          "backend.systems.diplomacy.schemas.DiplomaticEventSchema",
          "backend.systems.diplomacy.schemas.DiplomaticIncidentCreate",
          "backend.systems.diplomacy.schemas.DiplomaticIncidentSchema",
          "backend.systems.diplomacy.schemas.DiplomaticIncidentUpdate",
          "backend.systems.diplomacy.schemas.FactionRelationshipSchema",
          "backend.systems.diplomacy.schemas.NegotiationCreate",
          "backend.systems.diplomacy.schemas.NegotiationOfferCreate",
          "backend.systems.diplomacy.schemas.NegotiationSchema",
          "backend.systems.diplomacy.schemas.NegotiationUpdate",
          "backend.systems.diplomacy.schemas.SanctionCreate",
          "backend.systems.diplomacy.schemas.SanctionSchema",
          "backend.systems.diplomacy.schemas.SanctionUpdate",
          "backend.systems.diplomacy.schemas.SanctionViolationRecord",
          "backend.systems.diplomacy.schemas.TreatyCreate",
          "backend.systems.diplomacy.schemas.TreatySchema",
          "backend.systems.diplomacy.schemas.TreatyUpdate",
          "backend.systems.diplomacy.schemas.TreatyViolationCreate",
          "backend.systems.diplomacy.schemas.TreatyViolationSchema",
          "backend.systems.diplomacy.schemas.UltimatumCreate",
          "backend.systems.diplomacy.schemas.UltimatumSchema",
          "backend.systems.diplomacy.schemas.UltimatumUpdate",
          "backend.systems.diplomacy.services.DiplomacyService",
          "backend.systems.diplomacy.services.TensionService"
        ],
        "dependencies": "{'diplomacy', 'fastapi'}",
        "responsibilities": [
          "API/Routing",
          "Database Operations"
        ],
        "complexity_score": 32,
        "refactoring_priority": "LOW",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_diplomacy_service",
              "get_tension_service"
            ],
            "estimated_lines": 40,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/tension_war/utils/peace_utils.py",
        "lines": 821,
        "classes": [],
        "functions": [
          "evaluate_peace_offer",
          "calculate_acceptance_chance",
          "generate_peace_terms",
          "enforce_peace_treaty",
          "evaluate_ceasefire_violations",
          "evaluate_peace_terms",
          "generate_counter_offer"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "datetime.datetime",
          "datetime.timedelta",
          "random",
          "models.PeaceConfig",
          "models.WarOutcomeType",
          "models.TensionLevel",
          "models.PeaceConfig",
          "models.PeaceConfig"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Configuration"
        ],
        "complexity_score": 40,
        "refactoring_priority": "LOW",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_acceptance_chance",
              "generate_peace_terms",
              "generate_counter_offer"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/tension_war/utils/proxy_war_utils.py",
        "lines": 791,
        "classes": [],
        "functions": [
          "calculate_proxy_war_success_chance",
          "simulate_proxy_war",
          "calculate_proxy_war_cost",
          "evaluate_proxy_war_target",
          "calculate_discovery_risk",
          "calculate_proxy_war_effectiveness",
          "generate_proxy_group_name",
          "evaluate_proxy_war_impact"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "datetime.datetime",
          "datetime.timedelta",
          "random",
          "models.ProxyWarConfig",
          "models.ProxyWarOutcomeType",
          "random"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Database Operations",
          "Configuration"
        ],
        "complexity_score": 32,
        "refactoring_priority": "LOW",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_proxy_war_success_chance",
              "calculate_proxy_war_cost",
              "calculate_discovery_risk",
              "calculate_proxy_war_effectiveness",
              "generate_proxy_group_name"
            ],
            "estimated_lines": 100,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/world_generation/resource_utils.py",
        "lines": 724,
        "classes": [],
        "functions": [
          "generate_resource_name",
          "determine_resource_value",
          "generate_resource",
          "generate_resources_for_tile",
          "assign_resources_to_region",
          "generate_special_resource_clusters"
        ],
        "imports": [
          "random",
          "math",
          "typing.Dict",
          "typing.List",
          "typing.Tuple",
          "typing.Set",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "typing.Callable",
          "backend.systems.world_generation.models.BiomeType",
          "backend.systems.world_generation.models.ResourceType",
          "backend.systems.world_generation.models.Resource"
        ],
        "dependencies": "{'world_generation'}",
        "responsibilities": [
          "Business Logic",
          "Configuration"
        ],
        "complexity_score": 33,
        "refactoring_priority": "LOW",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "generate_resource_name",
              "generate_resource",
              "generate_resources_for_tile",
              "generate_special_resource_clusters"
            ],
            "estimated_lines": 80,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/tension_war/utils/war_utils.py",
        "lines": 686,
        "classes": [],
        "functions": [
          "calculate_disputed_regions",
          "calculate_war_chances",
          "evaluate_battle_outcome",
          "calculate_resource_changes",
          "simulate_war",
          "resolve_war",
          "calculate_territorial_changes",
          "calculate_population_impact",
          "calculate_cultural_impact"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "datetime.datetime",
          "datetime.timedelta",
          "random",
          "models.WarConfig",
          "models.WarOutcomeType",
          "models.TensionLevel"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Configuration"
        ],
        "complexity_score": 37,
        "refactoring_priority": "LOW",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_disputed_regions",
              "calculate_war_chances",
              "calculate_resource_changes",
              "calculate_territorial_changes",
              "calculate_population_impact",
              "calculate_cultural_impact"
            ],
            "estimated_lines": 120,
            "priority": "high"
          }
        ]
      },
      {
        "path": "systems/faction/services/consolidated_membership_service.py",
        "lines": 548,
        "classes": [
          "ConsolidatedMembershipService"
        ],
        "functions": [
          "assign_faction_to_character",
          "get_faction_members",
          "get_character_factions",
          "update_character_loyalty",
          "remove_character_from_faction",
          "calculate_faction_schism_probability",
          "switch_faction"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "typing.Union",
          "typing.Tuple",
          "datetime.datetime",
          "logging",
          "random",
          "sqlalchemy.orm.Session",
          "backend.systems.faction.models.faction.Faction",
          "backend.systems.faction.models.faction.FactionMembership",
          "backend.systems.faction.schemas.faction_types.FactionType",
          "backend.systems.faction.services.consolidated_faction_service.FactionError",
          "backend.systems.faction.services.consolidated_faction_service.FactionNotFoundError",
          "backend.systems.faction.services.consolidated_faction_service.MembershipNotFoundError"
        ],
        "dependencies": "{'sqlalchemy', 'faction'}",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 35,
        "refactoring_priority": "LOW",
        "suggested_modules": [
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "assign_faction_to_character"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_faction_members",
              "get_character_factions",
              "update_character_loyalty"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_faction_schism_probability"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "ConsolidatedMembershipService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/poi/services/poi_state_service.py",
        "lines": 525,
        "classes": [
          "POIStateService"
        ],
        "functions": [
          "get_state_info",
          "update_population",
          "transition_state",
          "evaluate_state",
          "apply_war_damage",
          "update_interaction_type"
        ],
        "imports": [
          "typing.Dict",
          "typing.Any",
          "typing.Optional",
          "typing.List",
          "datetime.datetime",
          "backend.systems.events.EventDispatcher",
          "backend.systems.poi.events.POIStateChanged",
          "backend.systems.poi.events.POIInteractionTypeChanged",
          "models.PointOfInterest",
          "models.POIState",
          "models.POIInteractionType"
        ],
        "dependencies": "{'poi', 'pydantic', 'events'}",
        "responsibilities": [
          "Event Handling",
          "Database Operations"
        ],
        "complexity_score": 36,
        "refactoring_priority": "LOW",
        "suggested_modules": [
          {
            "module_name": "database_operations.py",
            "responsibility": "Database Operations",
            "functions": [
              "get_state_info",
              "update_population",
              "update_interaction_type"
            ],
            "estimated_lines": 60,
            "priority": "medium"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "transition_state"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          },
          {
            "module_name": "models.py",
            "responsibility": "Data Models",
            "functions": [],
            "classes": [
              "POIStateService"
            ],
            "estimated_lines": 30,
            "priority": "medium"
          }
        ]
      },
      {
        "path": "systems/tension_war/utils/diplomatic_utils.py",
        "lines": 503,
        "classes": [],
        "functions": [
          "calculate_diplomatic_options",
          "evaluate_relation_changes",
          "calculate_sanction_effects",
          "generate_diplomatic_events",
          "evaluate_embassy_status",
          "calculate_peace_acceptance_chance",
          "evaluate_terms_favorability",
          "calculate_broker_reputation_bonus",
          "calculate_sanction_impact"
        ],
        "imports": [
          "typing.Dict",
          "typing.List",
          "typing.Optional",
          "typing.Any",
          "datetime.datetime"
        ],
        "dependencies": "set()",
        "responsibilities": [
          "Business Logic",
          "Database Operations"
        ],
        "complexity_score": 31,
        "refactoring_priority": "LOW",
        "suggested_modules": [
          {
            "module_name": "business_logic.py",
            "responsibility": "Business Logic",
            "functions": [
              "calculate_diplomatic_options",
              "calculate_sanction_effects",
              "generate_diplomatic_events",
              "calculate_peace_acceptance_chance",
              "calculate_broker_reputation_bonus",
              "calculate_sanction_impact"
            ],
            "estimated_lines": 120,
            "priority": "high"
          },
          {
            "module_name": "event_handling.py",
            "responsibility": "Event Handling",
            "functions": [
              "evaluate_relation_changes"
            ],
            "estimated_lines": 20,
            "priority": "medium"
          }
        ]
      }
    ],
    "modular_architecture": {
      "combat": [
        "business_logic.py",
        "database_operations.py",
        "models.py"
      ],
      "diplomacy": [
        "database_operations.py"
      ],
      "motif": [
        "database_operations.py"
      ],
      "services": [
        "database_operations.py",
        "event_handling.py",
        "models.py"
      ],
      "core": [
        "business_logic.py",
        "utilities.py"
      ],
      "world_generation": [
        "business_logic.py"
      ],
      "inventory": [
        "business_logic.py",
        "models.py"
      ],
      "mods": [
        "database_operations.py",
        "business_logic.py",
        "models.py"
      ],
      "world_state": [
        "database_operations.py",
        "business_logic.py",
        "models.py"
      ],
      "game": [
        "business_logic.py",
        "database_operations.py",
        "models.py"
      ],
      "quest": [],
      "utils": [
        "business_logic.py",
        "event_handling.py"
      ],
      "models": [
        "business_logic.py",
        "database_operations.py",
        "models.py"
      ],
      "events": [
        "models.py"
      ],
      "population": [
        "business_logic.py",
        "event_handling.py",
        "database_operations.py"
      ],
      "religion": [
        "database_operations.py",
        "business_logic.py",
        "models.py"
      ],
      "region": [
        "database_operations.py",
        "business_logic.py"
      ],
      "dialogue": [
        "event_handling.py",
        "database_operations.py",
        "models.py"
      ],
      "schemas": [
        "business_logic.py",
        "database_operations.py",
        "models.py"
      ],
      "persistence": [
        "database_operations.py",
        "models.py"
      ],
      "memory": [
        "database_operations.py",
        "business_logic.py",
        "models.py"
      ],
      "magic": [
        "database_operations.py",
        "event_handling.py",
        "business_logic.py"
      ],
      "features": [
        "database_operations.py",
        "business_logic.py",
        "models.py"
      ],
      "repositories": [
        "database_operations.py",
        "models.py"
      ],
      "integration": [
        "database_operations.py",
        "business_logic.py",
        "event_handling.py",
        "models.py"
      ],
      "loot": [
        "business_logic.py"
      ],
      "equipment": [
        "database_operations.py",
        "business_logic.py"
      ],
      "rumor": [
        "database_operations.py",
        "models.py"
      ],
      "faction": [
        "database_operations.py",
        "business_logic.py",
        "event_handling.py",
        "models.py"
      ],
      "routers": [
        "database_operations.py",
        "models.py"
      ],
      "examples": []
    },
    "dependency_map": {
      "combat/combat_class.py": "{'combat', 'events'}",
      "diplomacy/services.py": "{'diplomacy', 'events'}",
      "motif/consolidated_manager.py": "{'storage'}",
      "analytics/services/analytics_service.py": "{'events'}",
      "character/services/character_service.py": "{'shared', 'character', 'sqlalchemy', 'fastapi', 'world_state', 'events'}",
      "llm/core/dm_core.py": "{'motif', 'character', 'rumor', 'memory', 'tension_war', 'llm'}",
      "motif/utils.py": "set()",
      "world_generation/world_generation_utils.py": "{'world_generation'}",
      "world_generation/biome_utils.py": "set()",
      "inventory/utils.py": "{'sqlalchemy', 'inventory', 'shared'}",
      "character/services/goal_service.py": "{'character', 'events'}",
      "world_state/mods/mod_synchronizer.py": "{'pydantic', 'fastapi', 'world_state'}",
      "llm/core/faction_system.py": "{'firebase', 'pydantic', 'llm'}",
      "character/services/mood_service.py": "{'character', 'events'}",
      "combat/unified_effects.py": "{'events'}",
      "diplomacy/repository.py": "{'diplomacy', 'pydantic'}",
      "world_state/consolidated_manager.py": "{'events', 'shared', 'world_state'}",
      "world_generation/config.py": "{'world_generation', 'pydantic'}",
      "shared/utils/game/random_utils.py": "set()",
      "time/services/time_manager.py": "{'events', 'time'}",
      "llm/core/motif_system.py": "{'firebase', 'pydantic', 'llm'}",
      "world_generation/world_manager.py": "{'region'}",
      "quest/utils.py": "{'firebase', 'shared'}",
      "world_generation/components.py": "{'world_generation', 'data'}",
      "world_state/utils/tick_utils.py": "{'shared', 'world_state'}",
      "memory/models/memory.py": "{'events'}",
      "world_generation/world_generator.py": "{'world_generation', 'region'}",
      "events/event_dispatcher.py": "{'pydantic'}",
      "llm/core/event_integration.py": "{'pydantic'}",
      "world_generation/modding_system.py": "set()",
      "llm/core/gpt_integration.py": "{'events', 'llm'}",
      "npc/services/npc_service.py": "{'firebase', 'npc', 'events'}",
      "population/service.py": "{'population', 'events'}",
      "religion/services.py": "{'events', 'faction', 'quest'}",
      "quest/quest_manager.py": "{'firebase', 'events', 'shared'}",
      "quest/motif_integration.py": "{'events', 'motif', 'arc'}",
      "combat/unified_combat_utils.py": "{'combat'}",
      "quest/system_hooks.py": "{'world', 'rumor', 'memory', 'player', 'population', 'events'}",
      "inventory/service.py": "{'inventory', 'shared'}",
      "time/utils/time_utils.py": "{'time'}",
      "arc/services/arc_manager.py": "set()",
      "region/service.py": "{'region', 'data'}",
      "dialogue/faction_integration.py": "{'tension_war', 'character', 'faction'}",
      "dialogue/dialogue_system.py": "{'dialogue', 'llm'}",
      "world_state/utils/terrain_generator.py": "set()",
      "dialogue/relationship_integration.py": "{'character'}",
      "dialogue/quest_integration.py": "{'quest', 'arc'}",
      "economy/services/resource_service.py": "{'sqlalchemy', 'economy'}",
      "character/services/relationship_service.py": "{'character', 'sqlalchemy', 'events', 'shared'}",
      "combat/combat_animation_system.py": "set()",
      "quest/database.py": "{'firebase', 'shared'}",
      "combat/combat_area.py": "set()",
      "combat/action_system.py": "set()",
      "dialogue/cache.py": "set()",
      "data/schemas/biome_schema.py": "{'pydantic'}",
      "population/router.py": "{'population', 'fastapi'}",
      "world_state/persistence/state_storage.py": "{'world_state'}",
      "world_state/consolidated_world_models.py": "{'pydantic'}",
      "dialogue/region_integration.py": "{'region', 'poi'}",
      "economy/services/futures_service.py": "{'sqlalchemy', 'economy'}",
      "character/memory/memory_manager.py": "{'events'}",
      "crafting/services/crafting_service.py": "{'crafting', 'events'}",
      "region/generators.py": "{'region', 'data'}",
      "region/world_generator.py": "{'region', 'shared', 'data'}",
      "dialogue/poi_integration.py": "{'poi'}",
      "magic/services.py": "{'events'}",
      "combat/turn_queue.py": "set()",
      "shared/utils/core/json_storage_utils.py": "set()",
      "world_state/features/derivative_state.py": "{'events', 'world_state'}",
      "world_state/utils/world_event_utils.py": "{'firebase', 'motif', 'world_state'}",
      "dialogue/time_integration.py": "{'time'}",
      "llm/repositories/faction_repository.py": "set()",
      "auth_user/services/auth_service.py": "{'shared', 'fastapi'}",
      "world_state/loader.py": "{'shared', 'world_state'}",
      "faction/services/consolidated_faction_service.py": "{'sqlalchemy', 'faction'}",
      "combat/combat_state_manager.py": "{'events'}",
      "data/utils/data_file_loader.py": "set()",
      "character/models/goal.py": "{'events'}",
      "character/core/events/canonical_events.py": "{'pydantic'}",
      "world_state/integration/event_integration.py": "{'events', 'world_state'}",
      "loot/loot_routes.py": "{'loot', 'pydantic', 'fastapi'}",
      "world_generation/events.py": "{'events'}",
      "character/models/mood.py": "{'events'}",
      "dialogue/conversation.py": "{'events', 'dialogue'}",
      "character/core/character_builder.py": "{'character', 'sqlalchemy', 'shared'}",
      "combat/combat_routes.py": "{'combat', 'events', 'fastapi'}",
      "tension_war/utils/alliance_utils.py": "set()",
      "equipment/service.py": "{'narrative', 'inventory', 'events', 'shared'}",
      "quest/integration.py": "{'npc', 'events', 'world_state'}",
      "inventory/router.py": "{'inventory', 'auth_user', 'shared', 'fastapi'}",
      "motif/service.py": "{'shared', 'fastapi'}",
      "memory/services/memory_manager.py": "{'events'}",
      "poi/services/resource_management_service.py": "set()",
      "poi/services/lifecycle_events_service.py": "set()",
      "motif/router.py": "{'fastapi'}",
      "loot/loot_manager.py": "{'loot', 'events'}",
      "faction/services/consolidated_relationship_service.py": "{'sqlalchemy', 'faction'}",
      "loot/loot_shop.py": "{'loot', 'events'}",
      "events/event_types.py": "set()",
      "world_generation/elevation_utils.py": "{'world_generation'}",
      "world_generation/settlement_service.py": "set()",
      "poi/services/migration_service.py": "{'poi', 'events'}",
      "rumor/service.py": "{'rumor', 'events'}",
      "diplomacy/models.py": "{'pydantic'}",
      "dialogue/war_integration.py": "{'tension_war'}",
      "quest/faction_integration.py": "{'events', 'faction'}",
      "loot/loot_core.py": "{'loot', 'events'}",
      "combat/combat_facade.py": "{'combat', 'events'}",
      "world_generation/service_utils.py": "{'world_generation'}",
      "world_generation/world_utils.py": "set()",
      "population/utils.py": "{'population'}",
      "inventory/validator.py": "{'sqlalchemy', 'inventory', 'shared'}",
      "world_generation/api.py": "{'world_generation', 'events'}",
      "dialogue/population_integration.py": "{'population'}",
      "tension_war/services/diplomatic_manager.py": "{'events'}",
      "tension_war/services/peace_manager.py": "{'events'}",
      "tension_war/services/war_manager.py": "{'events'}",
      "faction/faction_facade.py": "{'sqlalchemy', 'faction'}",
      "npc/routers/npc_router.py": "{'shared', 'sqlalchemy', 'pydantic', 'fastapi', 'npc'}",
      "world_state/optimized_worldgen.py": "{'world_state'}",
      "quest/generator.py": "{'npc', 'inventory', 'world_state'}",
      "economy/utils/shop_utils.py": "{'loot', 'inventory', 'poi'}",
      "poi/services/landmark_service.py": "set()",
      "shared/utils/game/motif_utils.py": "set()",
      "quest/api_router.py": "{'firebase', 'auth_user', 'shared', 'fastapi'}",
      "magic/utils.py": "set()",
      "region/router.py": "{'character', 'region', 'fastapi', 'world_state'}",
      "equipment/identify_item_utils.py": "{'shared', 'economy', 'narrative', 'events', 'faction'}",
      "dialogue/analytics_integration.py": "{'analytics'}",
      "inventory/schemas.py": "{'pydantic'}",
      "character/core/character_utils.py": "set()",
      "world_state/examples/integration_example.py": "{'events', 'world_state'}",
      "equipment/durability_utils.py": "{'sqlalchemy', 'inventory', 'events', 'shared'}",
      "economy/services/market_service.py": "{'sqlalchemy', 'economy'}",
      "magic/router.py": "{'sqlalchemy', 'auth_user', 'shared', 'fastapi'}",
      "tension_war/services/proxy_war_manager.py": "{'events'}",
      "diplomacy/router.py": "{'diplomacy', 'fastapi'}",
      "tension_war/utils/peace_utils.py": "set()",
      "tension_war/utils/proxy_war_utils.py": "set()",
      "world_generation/resource_utils.py": "{'world_generation'}",
      "tension_war/utils/war_utils.py": "set()",
      "faction/services/consolidated_membership_service.py": "{'sqlalchemy', 'faction'}",
      "poi/services/poi_state_service.py": "{'poi', 'pydantic', 'events'}",
      "tension_war/utils/diplomatic_utils.py": "set()"
    },
    "risk_assessment": {
      "combat/combat_class.py": "MEDIUM",
      "diplomacy/services.py": "MEDIUM",
      "motif/consolidated_manager.py": "MEDIUM",
      "analytics/services/analytics_service.py": "MEDIUM",
      "character/services/character_service.py": "MEDIUM",
      "llm/core/dm_core.py": "MEDIUM",
      "motif/utils.py": "MEDIUM",
      "world_generation/world_generation_utils.py": "MEDIUM",
      "world_generation/biome_utils.py": "MEDIUM",
      "inventory/utils.py": "MEDIUM",
      "character/services/goal_service.py": "MEDIUM",
      "world_state/mods/mod_synchronizer.py": "MEDIUM",
      "llm/core/faction_system.py": "MEDIUM",
      "character/services/mood_service.py": "MEDIUM",
      "combat/unified_effects.py": "MEDIUM",
      "diplomacy/repository.py": "MEDIUM",
      "world_state/consolidated_manager.py": "MEDIUM",
      "world_generation/config.py": "MEDIUM",
      "shared/utils/game/random_utils.py": "MEDIUM",
      "time/services/time_manager.py": "MEDIUM",
      "llm/core/motif_system.py": "MEDIUM",
      "world_generation/world_manager.py": "MEDIUM",
      "quest/utils.py": "MEDIUM",
      "world_generation/components.py": "MEDIUM",
      "world_state/utils/tick_utils.py": "MEDIUM",
      "memory/models/memory.py": "MEDIUM",
      "world_generation/world_generator.py": "MEDIUM",
      "events/event_dispatcher.py": "MEDIUM",
      "llm/core/event_integration.py": "MEDIUM",
      "world_generation/modding_system.py": "MEDIUM",
      "llm/core/gpt_integration.py": "MEDIUM",
      "npc/services/npc_service.py": "MEDIUM",
      "population/service.py": "LOW",
      "religion/services.py": "MEDIUM",
      "quest/quest_manager.py": "LOW",
      "quest/motif_integration.py": "MEDIUM",
      "combat/unified_combat_utils.py": "MEDIUM",
      "quest/system_hooks.py": "MEDIUM",
      "inventory/service.py": "LOW",
      "time/utils/time_utils.py": "MEDIUM",
      "arc/services/arc_manager.py": "LOW",
      "region/service.py": "MEDIUM",
      "dialogue/faction_integration.py": "LOW",
      "dialogue/dialogue_system.py": "MEDIUM",
      "world_state/utils/terrain_generator.py": "MEDIUM",
      "dialogue/relationship_integration.py": "MEDIUM",
      "dialogue/quest_integration.py": "LOW",
      "economy/services/resource_service.py": "LOW",
      "character/services/relationship_service.py": "MEDIUM",
      "combat/combat_animation_system.py": "LOW",
      "quest/database.py": "MEDIUM",
      "combat/combat_area.py": "LOW",
      "combat/action_system.py": "MEDIUM",
      "dialogue/cache.py": "LOW",
      "data/schemas/biome_schema.py": "MEDIUM",
      "population/router.py": "LOW",
      "world_state/persistence/state_storage.py": "MEDIUM",
      "world_state/consolidated_world_models.py": "MEDIUM",
      "dialogue/region_integration.py": "LOW",
      "economy/services/futures_service.py": "LOW",
      "character/memory/memory_manager.py": "LOW",
      "crafting/services/crafting_service.py": "LOW",
      "region/generators.py": "LOW",
      "region/world_generator.py": "LOW",
      "dialogue/poi_integration.py": "LOW",
      "magic/services.py": "MEDIUM",
      "combat/turn_queue.py": "LOW",
      "shared/utils/core/json_storage_utils.py": "MEDIUM",
      "world_state/features/derivative_state.py": "LOW",
      "world_state/utils/world_event_utils.py": "MEDIUM",
      "dialogue/time_integration.py": "LOW",
      "llm/repositories/faction_repository.py": "MEDIUM",
      "auth_user/services/auth_service.py": "LOW",
      "world_state/loader.py": "MEDIUM",
      "faction/services/consolidated_faction_service.py": "LOW",
      "combat/combat_state_manager.py": "MEDIUM",
      "data/utils/data_file_loader.py": "MEDIUM",
      "character/models/goal.py": "LOW",
      "character/core/events/canonical_events.py": "LOW",
      "world_state/integration/event_integration.py": "MEDIUM",
      "loot/loot_routes.py": "LOW",
      "world_generation/events.py": "LOW",
      "character/models/mood.py": "LOW",
      "dialogue/conversation.py": "LOW",
      "character/core/character_builder.py": "LOW",
      "combat/combat_routes.py": "LOW",
      "tension_war/utils/alliance_utils.py": "LOW",
      "equipment/service.py": "LOW",
      "quest/integration.py": "LOW",
      "inventory/router.py": "LOW",
      "motif/service.py": "LOW",
      "memory/services/memory_manager.py": "LOW",
      "poi/services/resource_management_service.py": "LOW",
      "poi/services/lifecycle_events_service.py": "LOW",
      "motif/router.py": "LOW",
      "loot/loot_manager.py": "LOW",
      "faction/services/consolidated_relationship_service.py": "LOW",
      "loot/loot_shop.py": "LOW",
      "events/event_types.py": "LOW",
      "world_generation/elevation_utils.py": "LOW",
      "world_generation/settlement_service.py": "LOW",
      "poi/services/migration_service.py": "LOW",
      "rumor/service.py": "LOW",
      "diplomacy/models.py": "LOW",
      "dialogue/war_integration.py": "LOW",
      "quest/faction_integration.py": "LOW",
      "loot/loot_core.py": "LOW",
      "combat/combat_facade.py": "LOW",
      "world_generation/service_utils.py": "LOW",
      "world_generation/world_utils.py": "LOW",
      "population/utils.py": "LOW",
      "inventory/validator.py": "LOW",
      "world_generation/api.py": "LOW",
      "dialogue/population_integration.py": "LOW",
      "tension_war/services/diplomatic_manager.py": "LOW",
      "tension_war/services/peace_manager.py": "LOW",
      "tension_war/services/war_manager.py": "LOW",
      "faction/faction_facade.py": "LOW",
      "npc/routers/npc_router.py": "LOW",
      "world_state/optimized_worldgen.py": "LOW",
      "quest/generator.py": "LOW",
      "economy/utils/shop_utils.py": "LOW",
      "poi/services/landmark_service.py": "LOW",
      "shared/utils/game/motif_utils.py": "LOW",
      "quest/api_router.py": "LOW",
      "magic/utils.py": "LOW",
      "region/router.py": "LOW",
      "equipment/identify_item_utils.py": "LOW",
      "dialogue/analytics_integration.py": "LOW",
      "inventory/schemas.py": "LOW",
      "character/core/character_utils.py": "LOW",
      "world_state/examples/integration_example.py": "LOW",
      "equipment/durability_utils.py": "LOW",
      "economy/services/market_service.py": "LOW",
      "magic/router.py": "LOW",
      "tension_war/services/proxy_war_manager.py": "LOW",
      "diplomacy/router.py": "LOW",
      "tension_war/utils/peace_utils.py": "LOW",
      "tension_war/utils/proxy_war_utils.py": "LOW",
      "world_generation/resource_utils.py": "LOW",
      "tension_war/utils/war_utils.py": "LOW",
      "faction/services/consolidated_membership_service.py": "LOW",
      "poi/services/poi_state_service.py": "LOW",
      "tension_war/utils/diplomatic_utils.py": "LOW"
    },
    "implementation_phases": [
      {
        "phase": 1,
        "description": "Refactor critical monolithic files",
        "files": [
          "systems/combat/combat_class.py",
          "systems/diplomacy/services.py",
          "systems/motif/consolidated_manager.py",
          "systems/analytics/services/analytics_service.py",
          "systems/character/services/character_service.py",
          "systems/llm/core/dm_core.py",
          "systems/motif/utils.py",
          "systems/world_generation/world_generation_utils.py",
          "systems/world_generation/biome_utils.py",
          "systems/inventory/utils.py",
          "systems/character/services/goal_service.py",
          "systems/world_state/mods/mod_synchronizer.py",
          "systems/llm/core/faction_system.py",
          "systems/character/services/mood_service.py",
          "systems/combat/unified_effects.py",
          "systems/diplomacy/repository.py",
          "systems/world_state/consolidated_manager.py",
          "systems/world_generation/config.py",
          "systems/shared/utils/game/random_utils.py",
          "systems/time/services/time_manager.py",
          "systems/llm/core/motif_system.py",
          "systems/world_generation/world_manager.py",
          "systems/quest/utils.py",
          "systems/world_generation/components.py",
          "systems/world_state/utils/tick_utils.py",
          "systems/memory/models/memory.py",
          "systems/world_generation/world_generator.py",
          "systems/events/event_dispatcher.py",
          "systems/llm/core/event_integration.py",
          "systems/world_generation/modding_system.py",
          "systems/llm/core/gpt_integration.py"
        ],
        "estimated_effort": "High",
        "dependencies": [],
        "risks": [
          "API breaking changes",
          "Test coverage gaps"
        ]
      },
      {
        "phase": 2,
        "description": "Refactor high priority monolithic files",
        "files": [
          "systems/npc/services/npc_service.py",
          "systems/population/service.py",
          "systems/religion/services.py",
          "systems/quest/quest_manager.py",
          "systems/quest/motif_integration.py",
          "systems/combat/unified_combat_utils.py",
          "systems/quest/system_hooks.py",
          "systems/inventory/service.py",
          "systems/time/utils/time_utils.py",
          "systems/arc/services/arc_manager.py",
          "systems/region/service.py",
          "systems/dialogue/faction_integration.py",
          "systems/dialogue/dialogue_system.py",
          "systems/world_state/utils/terrain_generator.py",
          "systems/dialogue/relationship_integration.py",
          "systems/dialogue/quest_integration.py",
          "systems/economy/services/resource_service.py",
          "systems/character/services/relationship_service.py",
          "systems/combat/combat_animation_system.py",
          "systems/quest/database.py",
          "systems/combat/combat_area.py",
          "systems/combat/action_system.py",
          "systems/dialogue/cache.py",
          "systems/data/schemas/biome_schema.py",
          "systems/population/router.py",
          "systems/world_state/persistence/state_storage.py",
          "systems/world_state/consolidated_world_models.py",
          "systems/dialogue/region_integration.py",
          "systems/economy/services/futures_service.py",
          "systems/character/memory/memory_manager.py",
          "systems/crafting/services/crafting_service.py",
          "systems/region/generators.py",
          "systems/region/world_generator.py",
          "systems/dialogue/poi_integration.py",
          "systems/magic/services.py",
          "systems/combat/turn_queue.py",
          "systems/shared/utils/core/json_storage_utils.py",
          "systems/world_state/features/derivative_state.py",
          "systems/world_state/utils/world_event_utils.py",
          "systems/dialogue/time_integration.py",
          "systems/llm/repositories/faction_repository.py",
          "systems/auth_user/services/auth_service.py",
          "systems/world_state/loader.py",
          "systems/faction/services/consolidated_faction_service.py",
          "systems/combat/combat_state_manager.py",
          "systems/data/utils/data_file_loader.py",
          "systems/character/models/goal.py",
          "systems/character/core/events/canonical_events.py",
          "systems/world_state/integration/event_integration.py",
          "systems/loot/loot_routes.py",
          "systems/world_generation/events.py",
          "systems/character/models/mood.py",
          "systems/dialogue/conversation.py",
          "systems/character/core/character_builder.py"
        ],
        "estimated_effort": "Medium-High",
        "dependencies": [
          "Phase 1 completion"
        ],
        "risks": [
          "Integration complexity",
          "Performance impact"
        ]
      },
      {
        "phase": 3,
        "description": "Refactor medium priority files",
        "files": [
          "systems/combat/combat_routes.py",
          "systems/tension_war/utils/alliance_utils.py",
          "systems/equipment/service.py",
          "systems/quest/integration.py",
          "systems/inventory/router.py",
          "systems/motif/service.py",
          "systems/memory/services/memory_manager.py",
          "systems/poi/services/resource_management_service.py",
          "systems/poi/services/lifecycle_events_service.py",
          "systems/motif/router.py",
          "systems/loot/loot_manager.py",
          "systems/faction/services/consolidated_relationship_service.py",
          "systems/loot/loot_shop.py",
          "systems/events/event_types.py",
          "systems/world_generation/elevation_utils.py",
          "systems/world_generation/settlement_service.py",
          "systems/poi/services/migration_service.py",
          "systems/rumor/service.py",
          "systems/diplomacy/models.py",
          "systems/dialogue/war_integration.py",
          "systems/quest/faction_integration.py",
          "systems/loot/loot_core.py",
          "systems/combat/combat_facade.py",
          "systems/world_generation/service_utils.py",
          "systems/world_generation/world_utils.py",
          "systems/population/utils.py",
          "systems/inventory/validator.py",
          "systems/world_generation/api.py",
          "systems/dialogue/population_integration.py",
          "systems/tension_war/services/diplomatic_manager.py",
          "systems/tension_war/services/peace_manager.py",
          "systems/tension_war/services/war_manager.py",
          "systems/faction/faction_facade.py",
          "systems/npc/routers/npc_router.py",
          "systems/world_state/optimized_worldgen.py",
          "systems/quest/generator.py",
          "systems/economy/utils/shop_utils.py",
          "systems/poi/services/landmark_service.py",
          "systems/shared/utils/game/motif_utils.py",
          "systems/quest/api_router.py",
          "systems/magic/utils.py",
          "systems/region/router.py",
          "systems/equipment/identify_item_utils.py",
          "systems/dialogue/analytics_integration.py",
          "systems/inventory/schemas.py",
          "systems/character/core/character_utils.py",
          "systems/world_state/examples/integration_example.py",
          "systems/equipment/durability_utils.py",
          "systems/economy/services/market_service.py",
          "systems/magic/router.py",
          "systems/tension_war/services/proxy_war_manager.py"
        ],
        "estimated_effort": "Medium",
        "dependencies": [
          "Phase 2 completion"
        ],
        "risks": [
          "Time constraints",
          "Resource allocation"
        ]
      }
    ]
  }
}