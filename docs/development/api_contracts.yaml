openapi: 3.0.3
info:
  title: Visual DM Backend API
  description: Comprehensive API for the Visual DM tabletop game management system
  version: 1.0.0
  contact:
    name: Visual DM Development Team
    url: https://github.com/user/visual-dm
servers:
- url: http://localhost:8000
  description: Development server
- url: https://api.visualdm.com
  description: Production server
tags:
- name: economy
  description: Economy system endpoints
- name: motif
  description: Motif system endpoints
- name: tension_war
  description: Tension_War system endpoints
- name: world_generation
  description: World_Generation system endpoints
- name: diplomacy
  description: Diplomacy system endpoints
- name: combat
  description: Combat system endpoints
- name: magic
  description: Magic system endpoints
- name: character
  description: Character system endpoints
- name: auth_user
  description: Auth_User system endpoints
- name: rumor
  description: Rumor system endpoints
- name: time
  description: Time system endpoints
- name: population
  description: Population system endpoints
- name: region
  description: Region system endpoints
- name: inventory
  description: Inventory system endpoints
- name: world_state
  description: World_State system endpoints
- name: arc
  description: Arc system endpoints
- name: equipment
  description: Equipment system endpoints
- name: npc
  description: Npc system endpoints
paths:
  /inventory/{shop_id}:
    get:
      tags: &id001
      - shops
      summary: Get a shop's inventory
      description: Get a shop's inventory.
      operationId: economy_get_shop_inventory_endpoint
      parameters:
      - name: shop_id
        in: path
        required: true
        schema:
          type: integer
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': &id002
          description: Bad Request
        '401': &id003
          description: Unauthorized
        '404': &id004
          description: Not Found
        '422': &id005
          description: Validation Error
        '500': &id006
          description: Internal Server Error
  /sell/{shop_id}:
    post:
      tags: *id001
      summary: Sell an item to a shop
      description: Sell an item to a shop.
      operationId: economy_sell_item_to_shop
      parameters:
      - name: shop_id
        in: path
        required: true
        schema:
          type: integer
      - name: item_id
        in: query
        required: true
        schema:
          type: integer
      - name: quantity
        in: query
        required: true
        schema:
          type: integer
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /buy/{shop_id}:
    post:
      tags: *id001
      summary: Buy an item from a shop
      description: Buy an item from a shop.
      operationId: economy_buy_item_from_shop
      parameters:
      - name: shop_id
        in: path
        required: true
        schema:
          type: integer
      - name: item_id
        in: query
        required: true
        schema:
          type: integer
      - name: quantity
        in: query
        required: true
        schema:
          type: integer
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /restock/{shop_id}:
    post:
      tags: *id001
      summary: Restock a shop with new items
      description: Restock a shop with new items.
      operationId: economy_restock_shop_endpoint
      parameters:
      - name: shop_id
        in: path
        required: true
        schema:
          type: integer
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /preview_price:
    post:
      tags: *id001
      summary: Preview the price of an item with all economic modifiers applied
      description: Preview the price of an item with all economic modifiers applied.
      operationId: economy_preview_item_price
      parameters:
      - name: item_id
        in: query
        required: true
        schema:
          type: integer
      - name: shop_id
        in: query
        required: true
        schema:
          type: integer
      - name: is_buying
        in: query
        required: true
        schema:
          type: boolean
      - name: quantity
        in: query
        required: true
        schema:
          type: integer
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /economy/resources/{resource_id}:
    get:
      tags: &id007
      - economy
      summary: Get a resource by ID
      description: Get a resource by ID.
      operationId: economy_get_resource
      parameters:
      - name: resource_id
        in: path
        required: true
        schema:
          type: integer
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceData'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /economy/regions/{region_id}/resources:
    get:
      tags: *id007
      summary: Get all resources in a region
      description: Get all resources in a region.
      operationId: economy_get_region_resources
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: integer
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[ResourceData]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /economy/metrics/{metric_type}:
    get:
      tags: *id007
      summary: Get metrics history
      description: Get metrics history.
      operationId: economy_get_metrics
      parameters:
      - name: metric_type
        in: path
        required: true
        schema:
          type: string
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      - name: faction_id
        in: query
        required: true
        schema:
          type: string
      - name: resource_id
        in: query
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[EconomicMetric]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /economy/resources/{resource_id}/price/adjust:
    post:
      tags: *id007
      summary: Adjust the price of a resource based on supply and demand
      description: Adjust the price of a resource based on supply and demand.
      operationId: economy_adjust_resource_price
      parameters:
      - name: resource_id
        in: path
        required: true
        schema:
          type: integer
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dict'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /economy/trade:
    post:
      tags: *id007
      summary: Transfer resources between regions (trade)
      description: Transfer resources between regions (trade).
      operationId: economy_trade_resources
      parameters:
      - name: source_region_id
        in: query
        required: true
        schema:
          type: integer
      - name: target_region_id
        in: query
        required: true
        schema:
          type: integer
      - name: resource_id
        in: query
        required: true
        schema:
          type: integer
      - name: amount
        in: query
        required: true
        schema:
          type: number
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dict'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/:
    get:
      tags: &id008
      - motifs
      summary: Root endpoint for the Motif System API
      description: Root endpoint for the Motif System API.
      operationId: motif_read_root
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/motifs/:
    post:
      tags: *id008
      summary: Create a new motif
      description: Create a new motif.
      operationId: motif_create_motif
      parameters:
      - name: motif
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motif'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id008
      summary: List motifs with optional filtering
      description: List motifs with optional filtering.
      operationId: motif_list_motifs
      parameters:
      - name: category
        in: query
        required: true
        schema:
          type: string
      - name: scope
        in: query
        required: true
        schema:
          type: string
      - name: lifecycle
        in: query
        required: true
        schema:
          type: string
      - name: min_intensity
        in: query
        required: true
        schema:
          type: string
      - name: max_intensity
        in: query
        required: true
        schema:
          type: string
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      - name: effect_type
        in: query
        required: true
        schema:
          type: string
      - name: active_only
        in: query
        required: true
        schema:
          type: boolean
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[Motif]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/motifs/{motif_id}:
    get:
      tags: *id008
      summary: Get a specific motif by ID
      description: Get a specific motif by ID.
      operationId: motif_get_motif
      parameters:
      - name: motif_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motif'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    patch:
      tags: *id008
      summary: Update a motif
      description: Update a motif.
      operationId: motif_update_motif
      parameters:
      - name: motif_id
        in: path
        required: true
        schema:
          type: string
      - name: motif
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motif'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id008
      summary: Delete a motif
      description: Delete a motif.
      operationId: motif_delete_motif
      parameters:
      - name: motif_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/global/:
    get:
      tags: *id008
      summary: Get all active global motifs
      description: Get all active global motifs.
      operationId: motif_get_global_motifs
      parameters:
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[Motif]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/regional/{region_id}:
    get:
      tags: *id008
      summary: Get all active motifs for a specific region
      description: Get all active motifs for a specific region.
      operationId: motif_get_region_motifs
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[Motif]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/position/:
    get:
      tags: *id008
      summary: Get all motifs that affect a specific position
      description: Get all motifs that affect a specific position.
      operationId: motif_get_motifs_at_position
      parameters:
      - name: x
        in: query
        required: true
        schema:
          type: number
      - name: y
        in: query
        required: true
        schema:
          type: number
      - name: radius
        in: query
        required: true
        schema:
          type: number
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[Motif]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/context/:
    get:
      tags: *id008
      summary: Get a context dictionary describing the active motifs at a position
        or region
      description: "Get a context dictionary describing the active motifs at a position\
        \ or region.\n    This is useful for narrative generation."
      operationId: motif_get_motif_context
      parameters:
      - name: x
        in: query
        required: true
        schema:
          type: string
      - name: y
        in: query
        required: true
        schema:
          type: string
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/random:
    post:
      tags: *id008
      summary: Generate a random motif with specified scope
      description: Generate a random motif with specified scope.
      operationId: motif_generate_random_motif
      parameters:
      - name: scope
        in: query
        required: true
        schema:
          type: string
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motif'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/advance-lifecycles:
    post:
      tags: *id008
      summary: Advance the lifecycle of all motifs based on time
      description: "Advance the lifecycle of all motifs based on time.\n    Returns\
        \ the count of updated motifs."
      operationId: motif_advance_motif_lifecycles
      parameters:
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MotifResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/blend:
    post:
      tags: *id008
      summary: Blend multiple motifs to create a composite narrative effect
      description: "Blend multiple motifs to create a composite narrative effect.\n\
        \    Returns a dictionary with the blended narrative context."
      operationId: motif_blend_motifs
      parameters:
      - name: motif_ids
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/sequences/generate:
    post:
      tags: *id008
      summary: Generate a sequence of thematically related motifs for long-term narrative
        arcs
      description: "Generate a sequence of thematically related motifs for long-term\
        \ narrative arcs.\n\n    Parameters:\n    - sequence_length: Number of motifs\
        \ in the sequence (2-10)\n    - category: Optional specific starting category\n\
        \    - region_id: Optional region ID for regional motifs\n    - progressive_intensity:\
        \ If True, intensity will increase through the sequence\n\n    Returns the\
        \ generated sequence of motifs along with metadata."
      operationId: motif_generate_motif_sequence
      parameters:
      - name: sequence_length
        in: query
        required: true
        schema:
          type: integer
      - name: category
        in: query
        required: true
        schema:
          type: string
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      - name: progressive_intensity
        in: query
        required: true
        schema:
          type: boolean
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/sequences/{sequence_id}:
    get:
      tags: *id008
      summary: Get all motifs that are part of a specific sequence
      description: "Get all motifs that are part of a specific sequence.\n\n    Parameters:\n\
        \    - sequence_id: The unique identifier for the sequence\n\n    Returns\
        \ all motifs in the sequence with their progression info."
      operationId: motif_get_motif_sequence
      parameters:
      - name: sequence_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/sequences/{sequence_id}/advance:
    post:
      tags: *id008
      summary: Advance a motif sequence to its next step
      description: "Advance a motif sequence to its next step.\n\n    This moves the\
        \ sequence forward by:\n    1. Setting the current active motif to waning/dormant\n\
        \    2. Activating the next motif in the sequence\n\n    Parameters:\n   \
        \ - sequence_id: The unique identifier for the sequence\n    - force: If True,\
        \ force the advancement even if the current motif isn't ready to transition\n\
        \n    Returns the updated sequence info."
      operationId: motif_advance_motif_sequence
      parameters:
      - name: sequence_id
        in: path
        required: true
        schema:
          type: string
      - name: force
        in: query
        required: true
        schema:
          type: boolean
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/chaos/event:
    get:
      tags: *id008
      summary: Get a random chaos event from the predefined table
      description: Get a random chaos event from the predefined table.
      operationId: motif_get_random_chaos_event
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/chaos/inject:
    post:
      tags: *id008
      summary: Inject a chaos event into the world
      description: Inject a chaos event into the world.
      operationId: motif_inject_chaos_event
      parameters:
      - name: event_type
        in: query
        required: true
        schema:
          type: string
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      - name: context
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/chaos/trigger/{entity_id}:
    post:
      tags: *id008
      summary: Check if chaos should be triggered based on entity's motif state and
        trigger if needed
      description: Check if chaos should be triggered based on entity's motif state
        and trigger if needed.
      operationId: motif_trigger_chaos_if_needed
      parameters:
      - name: entity_id
        in: path
        required: true
        schema:
          type: string
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/chaos/force/{entity_id}:
    post:
      tags: *id008
      summary: Force a chaos event to occur for an entity, regardless of current motif
        state
      description: Force a chaos event to occur for an entity, regardless of current
        motif state.
      operationId: motif_force_chaos
      parameters:
      - name: entity_id
        in: path
        required: true
        schema:
          type: string
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/chaos/log:
    get:
      tags: *id008
      summary: Get the most recent chaos events from the world log
      description: Get the most recent chaos events from the world log.
      operationId: motif_get_chaos_log
      parameters:
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: offset
        in: query
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/narrative/context/:
    get:
      tags: *id008
      summary: Get enhanced narrative context suitable for GPT prompts
      description: Get enhanced narrative context suitable for GPT prompts.
      operationId: motif_get_enhanced_narrative_context
      parameters:
      - name: x
        in: query
        required: true
        schema:
          type: string
      - name: y
        in: query
        required: true
        schema:
          type: string
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      - name: context_size
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/apply-effects/{motif_id}:
    post:
      tags: *id008
      summary: Manually apply a motif's effects to target systems
      description: "Manually apply a motif's effects to target systems.\n\n    Parameters:\n\
        \    - motif_id: ID of the motif to apply\n    - target_systems: Optional\
        \ list of systems to target. If not provided, all systems will be affected.\n\
        \      Possible values: \"npc\", \"event\", \"quest\", \"faction\", \"environment\"\
        , \"economy\", \"narrative\"\n\n    Returns the results of applying the motif\
        \ effects."
      operationId: motif_apply_motif_effects
      parameters:
      - name: motif_id
        in: path
        required: true
        schema:
          type: integer
      - name: target_systems
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/batch/apply-effects:
    post:
      tags: *id008
      summary: Apply effects for all active motifs, optionally filtered by scope and
        region
      description: "Apply effects for all active motifs, optionally filtered by scope\
        \ and region.\n\n    Parameters:\n    - target_systems: Optional list of systems\
        \ to target. If not provided, all systems will be affected.\n    - scope:\
        \ Optional scope filter (GLOBAL, REGIONAL, LOCAL)\n    - region_id: Optional\
        \ region ID filter\n\n    Returns a summary of all applied effects."
      operationId: motif_apply_all_active_motif_effects
      parameters:
      - name: target_systems
        in: query
        required: true
        schema:
          type: string
      - name: scope
        in: query
        required: true
        schema:
          type: string
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/gpt-context:
    get:
      tags: *id008
      summary: "Generate a comprehensive GPT context for narrative generation, incorporating\
        \ motifs\n    with entity data, location, region, and world state"
      description: "Generate a comprehensive GPT context for narrative generation,\
        \ incorporating motifs\n    with entity data, location, region, and world\
        \ state.\n\n    Parameters:\n    - entity_id: Optional ID of entity (character,\
        \ NPC, etc.) to include specific context for\n    - region_id: Optional region\
        \ ID for regional context\n    - x, y: Optional coordinates for positional\
        \ context\n    - context_size: Size of context to generate ('small', 'medium',\
        \ 'large')\n\n    Returns a rich context dictionary formatted for direct use\
        \ in GPT prompts."
      operationId: motif_get_gpt_context
      parameters:
      - name: entity_id
        in: query
        required: true
        schema:
          type: string
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      - name: x
        in: query
        required: true
        schema:
          type: string
      - name: y
        in: query
        required: true
        schema:
          type: string
      - name: context_size
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/generate-event:
    post:
      tags: *id008
      summary: Generate a world event influenced by active motifs in the specified
        region or location
      description: "Generate a world event influenced by active motifs in the specified\
        \ region or location.\n\n    Parameters:\n    - region_id: Optional region\
        \ ID to place the event\n    - x, y: Optional coordinates to place the event\n\
        \    - event_type: Optional specific event type to generate, otherwise random\n\
        \n    Returns a world event with narrative context influenced by active motifs."
      operationId: motif_generate_world_event
      parameters:
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      - name: x
        in: query
        required: true
        schema:
          type: string
      - name: y
        in: query
        required: true
        schema:
          type: string
      - name: event_type
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/ws/notifications:
    websocket:
      tags: *id008
      summary: WebSocket endpoint for real-time motif change notifications
      description: "WebSocket endpoint for real-time motif change notifications.\n\
        \n    Clients can subscribe to notifications about motif creation, updates,\n\
        \    lifecycle changes, and other important motif system events."
      operationId: motif_motif_notifications_websocket
      parameters:
      - name: websocket
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/notifications/recent:
    get:
      tags: *id008
      summary: Retrieve recent motif system events for clients that can't use WebSockets
      description: "Retrieve recent motif system events for clients that can't use\
        \ WebSockets.\n\n    Parameters:\n    - limit: Maximum number of events to\
        \ return (default: 10)\n    - event_types: Optional filter for specific event\
        \ types\n    - since: Optional ISO timestamp to get events after a certain\
        \ time\n\n    Returns a list of recent motif-related events."
      operationId: motif_get_recent_motif_events
      parameters:
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: event_types
        in: query
        required: true
        schema:
          type: string
      - name: since
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/predict-trends:
    get:
      tags: *id008
      summary: Predict how the current set of motifs will evolve and interact over
        time
      description: "Predict how the current set of motifs will evolve and interact\
        \ over time.\n\n    Provides a forecast of expected motif progression, emergent\
        \ and waning themes,\n    and overall narrative stability over the specified\
        \ time period.\n\n    Parameters:\n    - time_range_days: Number of days into\
        \ the future to predict (1-30)\n    - include_region_specific: Whether to\
        \ include region-specific motifs\n    - include_dormant: Whether to include\
        \ dormant motifs that might re-emerge\n\n    Returns a comprehensive prediction\
        \ report with motif trends and narrative analysis."
      operationId: motif_predict_motif_trends
      parameters:
      - name: time_range_days
        in: query
        required: true
        schema:
          type: integer
      - name: include_region_specific
        in: query
        required: true
        schema:
          type: boolean
      - name: include_dormant
        in: query
        required: true
        schema:
          type: boolean
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/analyze-conflicts:
    get:
      tags: *id008
      summary: Analyze motifs for thematic conflicts and compatibility issues
      description: "Analyze motifs for thematic conflicts and compatibility issues.\n\
        \n    This helps ensure narrative coherence by identifying conflicts between\n\
        \    active motifs that could create contradictory themes.\n\n    Parameters:\n\
        \    - motif_ids: Optional list of specific motif IDs to analyze\n    - region_id:\
        \ Optional region ID to analyze motifs in a specific region\n\n    If neither\
        \ parameter is provided, global motifs will be analyzed.\n\n    Returns a\
        \ conflict analysis report with identified conflicts,\n    synergies, and\
        \ an overall compatibility score."
      operationId: motif_analyze_motif_conflicts
      parameters:
      - name: motif_ids
        in: query
        required: true
        schema:
          type: string
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/compatible-motifs/{motif_id}:
    get:
      tags: *id008
      summary: Find motifs that would be most compatible with a given motif
      description: "Find motifs that would be most compatible with a given motif.\n\
        \n    This is useful for suggesting complementary motifs to create a\n   \
        \ coherent narrative environment.\n\n    Parameters:\n    - motif_id: ID of\
        \ the motif to find compatible matches for\n    - count: Number of compatible\
        \ motifs to return (1-10)\n    - include_dormant: Whether to include dormant\
        \ motifs in the suggestions\n\n    Returns the primary motif and a list of\
        \ compatible motifs with\n    compatibility scores and explanations."
      operationId: motif_get_compatible_motifs
      parameters:
      - name: motif_id
        in: path
        required: true
        schema:
          type: string
      - name: count
        in: query
        required: true
        schema:
          type: integer
      - name: include_dormant
        in: query
        required: true
        schema:
          type: boolean
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/narrative/influence/:
    get:
      tags: *id008
      summary: Get motif narrative influence
      description: Get motif narrative influence.
      operationId: motif_get_motif_narrative_influence
      parameters:
      - name: x
        in: query
        required: true
        schema:
          type: string
      - name: y
        in: query
        required: true
        schema:
          type: string
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/active/:
    get:
      tags: *id008
      summary: Get all active motifs
      description: Get all active motifs.
      operationId: motif_get_all_active_motifs
      parameters:
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[Motif]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/motif/region/summary/{region_id}:
    get:
      tags: *id008
      summary: Get motif summary for a region
      description: Get motif summary for a region.
      operationId: motif_get_motif_summary_for_region
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /{region_id}:
    get:
      tags:
      - tension_war
      summary: Get the current tension values for a region
      description: "Get the current tension values for a region.\n\n    This endpoint\
        \ returns tension data for all faction pairs in the specified region."
      operationId: tension_war_get_region_tension
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TensionResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    post:
      tags:
      - tension_war
      summary: Modify tension values for a region
      description: "Modify tension values for a region.\n\n    This endpoint allows\
        \ adjusting tension between two factions in the specified region."
      operationId: tension_war_modify_region_tension
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TensionResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /{region_id}/reset:
    post:
      tags:
      - tension_war
      summary: Reset tension values for a region
      description: "Reset tension values for a region.\n\n    This endpoint resets\
        \ all tension values in the specified region to their default state."
      operationId: tension_war_reset_region_tension
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TensionResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /{region_id}/decay:
    post:
      tags:
      - tension_war
      summary: Apply natural decay to tension values for a region
      description: "Apply natural decay to tension values for a region.\n\n    This\
        \ endpoint applies the daily tension decay process for the specified region,\n\
        \    gradually pushing tension values toward neutral."
      operationId: tension_war_decay_region_tension
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: string
      - name: days
        in: query
        required: true
        schema:
          type: integer
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TensionResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /event:
    post:
      tags:
      - tension_war
      summary: Calculate and apply tension changes from an event
      description: "Calculate and apply tension changes from an event.\n\n    This\
        \ endpoint processes an event and applies appropriate tension changes\n  \
        \  to all affected faction pairs in the specified region."
      operationId: tension_war_calculate_event_tension
      parameters:
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TensionResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /{region_id}/history:
    get:
      tags:
      - tension_war
      summary: Get tension history between two factions
      description: "Get tension history between two factions.\n\n    This endpoint\
        \ returns the historical tension changes between the specified factions."
      operationId: tension_war_get_tension_history
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: string
      - name: faction_a
        in: query
        required: true
        schema:
          type: string
      - name: faction_b
        in: query
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TensionHistoryResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /wars:
    get:
      tags:
      - tension_war
      summary: Get all regions with factions at war
      description: "Get all regions with factions at war.\n\n    This endpoint returns\
        \ a list of all regions that have factions at war-level tension."
      operationId: tension_war_get_all_regions_at_war
      parameters:
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /world/continents:
    post:
      tags: &id009
      - World Generation
      summary: Creates a new continent with procedurally generated regions
      description: "Creates a new continent with procedurally generated regions.\n\
        \n    Args:\n        creation_request: Parameters for continent creation\n\
        \n    Returns:\n        The created continent with all generated regions\n\
        \n    Raises:\n        HTTPException: If continent creation fails"
      operationId: world_generation_create_continent_endpoint
      parameters:
      - name: creation_request
        in: query
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContinentSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id009
      summary: Lists all continents with pagination support
      description: "Lists all continents with pagination support.\n\n    Args:\n \
        \       limit: Maximum number of continents to return\n        offset: Offset\
        \ for pagination\n\n    Returns:\n        List of continents"
      operationId: world_generation_list_all_continents_endpoint
      parameters:
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: offset
        in: query
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[ContinentSchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /world/continents/{continent_id}:
    get:
      tags: *id009
      summary: Retrieves details of a continent by ID
      description: "Retrieves details of a continent by ID.\n\n    Args:\n       \
        \ continent_id: The ID of the continent to retrieve\n\n    Returns:\n    \
        \    The continent details\n\n    Raises:\n        HTTPException: If continent\
        \ not found"
      operationId: world_generation_get_continent_endpoint
      parameters:
      - name: continent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContinentSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id009
      summary: Deletes a continent
      description: "Deletes a continent.\n\n    Args:\n        continent_id: The ID\
        \ of the continent to delete\n\n    Raises:\n        HTTPException: If continent\
        \ not found"
      operationId: world_generation_delete_continent_endpoint
      parameters:
      - name: continent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /world/continents/{continent_id}/metadata:
    patch:
      tags: *id009
      summary: Updates metadata for a continent
      description: "Updates metadata for a continent.\n\n    Args:\n        continent_id:\
        \ The ID of the continent to update\n        metadata: The metadata to update\n\
        \n    Returns:\n        The updated continent\n\n    Raises:\n        HTTPException:\
        \ If continent not found"
      operationId: world_generation_update_continent_metadata_endpoint
      parameters:
      - name: continent_id
        in: path
        required: true
        schema:
          type: string
      - name: metadata
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContinentSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /treaties:
    post:
      tags: &id010
      - diplomacy
      summary: Create a new treaty between factions
      description: Create a new treaty between factions.
      operationId: diplomacy_create_treaty
      parameters:
      - name: treaty
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreatySchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id010
      summary: List treaties, optionally filtered
      description: List treaties, optionally filtered.
      operationId: diplomacy_list_treaties
      parameters:
      - name: faction_id
        in: query
        required: true
        schema:
          type: string
      - name: active_only
        in: query
        required: true
        schema:
          type: boolean
      - name: treaty_type
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[TreatySchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /treaties/{treaty_id}:
    get:
      tags: *id010
      summary: Get a treaty by ID
      description: Get a treaty by ID.
      operationId: diplomacy_get_treaty
      parameters:
      - name: treaty_id
        in: path
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreatySchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    patch:
      tags: *id010
      summary: Update a treaty
      description: Update a treaty.
      operationId: diplomacy_update_treaty
      parameters:
      - name: treaty_id
        in: path
        required: true
        schema:
          type: string
      - name: treaty_update
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreatySchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /treaties/{treaty_id}/expire:
    post:
      tags: *id010
      summary: Mark a treaty as expired
      description: Mark a treaty as expired.
      operationId: diplomacy_expire_treaty
      parameters:
      - name: treaty_id
        in: path
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreatySchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /negotiations:
    post:
      tags: *id010
      summary: Start a new negotiation
      description: Start a new negotiation.
      operationId: diplomacy_start_negotiation
      parameters:
      - name: negotiation
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NegotiationSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id010
      summary: Get all negotiations
      description: Get all negotiations.
      operationId: diplomacy_get_negotiations
      parameters:
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[NegotiationSchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /negotiations/{negotiation_id}:
    get:
      tags: *id010
      summary: Get a negotiation by ID
      description: Get a negotiation by ID.
      operationId: diplomacy_get_negotiation
      parameters:
      - name: negotiation_id
        in: path
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NegotiationSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    patch:
      tags: *id010
      summary: Update a negotiation
      description: Update a negotiation.
      operationId: diplomacy_update_negotiation
      parameters:
      - name: negotiation_id
        in: path
        required: true
        schema:
          type: string
      - name: updates
        in: query
        required: true
        schema:
          type: object
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NegotiationSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /negotiations/{negotiation_id}/offers:
    post:
      tags: *id010
      summary: Make an offer in a negotiation
      description: Make an offer in a negotiation.
      operationId: diplomacy_make_offer
      parameters:
      - name: negotiation_id
        in: path
        required: true
        schema:
          type: string
      - name: offer
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NegotiationSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /negotiations/{negotiation_id}/accept:
    post:
      tags: *id010
      summary: Accept the current offer in a negotiation
      description: Accept the current offer in a negotiation.
      operationId: diplomacy_accept_offer
      parameters:
      - name: negotiation_id
        in: path
        required: true
        schema:
          type: string
      - name: faction_id
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreatySchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /negotiations/{negotiation_id}/reject:
    post:
      tags: *id010
      summary: Reject the current offer in a negotiation
      description: Reject the current offer in a negotiation.
      operationId: diplomacy_reject_offer
      parameters:
      - name: negotiation_id
        in: path
        required: true
        schema:
          type: string
      - name: faction_id
        in: query
        required: true
        schema:
          type: string
      - name: final
        in: query
        required: true
        schema:
          type: boolean
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NegotiationSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /events:
    post:
      tags: *id010
      summary: Create a new diplomatic event
      description: Create a new diplomatic event.
      operationId: diplomacy_create_event
      parameters:
      - name: event
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiplomaticEventSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id010
      summary: List diplomatic events, optionally filtered
      description: List diplomatic events, optionally filtered.
      operationId: diplomacy_list_events
      parameters:
      - name: faction_id
        in: query
        required: true
        schema:
          type: string
      - name: event_type
        in: query
        required: true
        schema:
          type: string
      - name: start_time
        in: query
        required: true
        schema:
          type: string
      - name: end_time
        in: query
        required: true
        schema:
          type: string
      - name: public_only
        in: query
        required: true
        schema:
          type: boolean
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[DiplomaticEventSchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /relationships/{faction_id}:
    get:
      tags: *id010
      summary: Get all relationships for a faction
      description: Get all relationships for a faction.
      operationId: diplomacy_get_faction_relationships
      parameters:
      - name: faction_id
        in: path
        required: true
        schema:
          type: string
      - name: tension_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[FactionRelationshipSchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /relationships/{faction_a_id}/{faction_b_id}:
    get:
      tags: *id010
      summary: Get the relationship between two factions
      description: Get the relationship between two factions.
      operationId: diplomacy_get_relationship
      parameters:
      - name: faction_a_id
        in: path
        required: true
        schema:
          type: string
      - name: faction_b_id
        in: path
        required: true
        schema:
          type: string
      - name: tension_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FactionRelationshipSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    patch:
      tags: *id010
      summary: Update the relationship between two factions
      description: Update the relationship between two factions.
      operationId: diplomacy_update_relationship
      parameters:
      - name: faction_a_id
        in: path
        required: true
        schema:
          type: string
      - name: faction_b_id
        in: path
        required: true
        schema:
          type: string
      - name: updates
        in: query
        required: true
        schema:
          type: object
      - name: tension_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FactionRelationshipSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /tension/{faction_a_id}/{faction_b_id}:
    get:
      tags: *id010
      summary: Get tension between two factions (backward compatibility)
      description: Get tension between two factions (backward compatibility).
      operationId: diplomacy_get_tension
      parameters:
      - name: faction_a_id
        in: path
        required: true
        schema:
          type: string
      - name: faction_b_id
        in: path
        required: true
        schema:
          type: string
      - name: tension_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FactionRelationshipSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /war/check/{faction_a_id}/{faction_b_id}:
    post:
      tags: *id010
      summary: Check if two factions are at war (backward compatibility)
      description: Check if two factions are at war (backward compatibility).
      operationId: diplomacy_check_war_status
      parameters:
      - name: faction_a_id
        in: path
        required: true
        schema:
          type: string
      - name: faction_b_id
        in: path
        required: true
        schema:
          type: string
      - name: tension_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /violations:
    post:
      tags: *id010
      summary: Report a treaty violation
      description: Report a treaty violation.
      operationId: diplomacy_report_treaty_violation
      parameters:
      - name: violation
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreatyViolationSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id010
      summary: Get treaty violations, optionally filtered
      description: Get treaty violations, optionally filtered.
      operationId: diplomacy_get_treaty_violations
      parameters:
      - name: treaty_id
        in: query
        required: true
        schema:
          type: string
      - name: faction_id
        in: query
        required: true
        schema:
          type: string
      - name: violation_type
        in: query
        required: true
        schema:
          type: string
      - name: resolved
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[TreatyViolationSchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /violations/{violation_id}/acknowledge:
    post:
      tags: *id010
      summary: Acknowledge a treaty violation as the violator
      description: Acknowledge a treaty violation as the violator.
      operationId: diplomacy_acknowledge_violation
      parameters:
      - name: violation_id
        in: path
        required: true
        schema:
          type: string
      - name: faction_id
        in: query
        required: true
        schema:
          type: string
      - name: resolution_details
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreatyViolationSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /violations/{violation_id}/resolve:
    post:
      tags: *id010
      summary: Mark a treaty violation as resolved
      description: Mark a treaty violation as resolved.
      operationId: diplomacy_resolve_violation
      parameters:
      - name: violation_id
        in: path
        required: true
        schema:
          type: string
      - name: resolution_details
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TreatyViolationSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /compliance/{faction_id}:
    get:
      tags: *id010
      summary: Check if a faction is compliant with all its treaties
      description: Check if a faction is compliant with all its treaties.
      operationId: diplomacy_check_treaty_compliance
      parameters:
      - name: faction_id
        in: path
        required: true
        schema:
          type: string
      - name: violation_types
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /enforce-treaties:
    post:
      tags: *id010
      summary: Automatically enforce treaties by detecting violations
      description: Automatically enforce treaties by detecting violations.
      operationId: diplomacy_enforce_treaties
      parameters:
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /incidents:
    post:
      tags: *id010
      summary: Create a new diplomatic incident
      description: Create a new diplomatic incident.
      operationId: diplomacy_create_diplomatic_incident
      parameters:
      - name: incident
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiplomaticIncidentSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id010
      summary: List diplomatic incidents with optional filtering
      description: List diplomatic incidents with optional filtering.
      operationId: diplomacy_list_diplomatic_incidents
      parameters:
      - name: faction_id
        in: query
        required: true
        schema:
          type: string
      - name: as_perpetrator
        in: query
        required: true
        schema:
          type: boolean
      - name: as_victim
        in: query
        required: true
        schema:
          type: boolean
      - name: resolved
        in: query
        required: true
        schema:
          type: string
      - name: incident_type
        in: query
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: offset
        in: query
        required: true
        schema:
          type: integer
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[DiplomaticIncidentSchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /incidents/{incident_id}:
    get:
      tags: *id010
      summary: Get a diplomatic incident by ID
      description: Get a diplomatic incident by ID.
      operationId: diplomacy_get_diplomatic_incident
      parameters:
      - name: incident_id
        in: path
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiplomaticIncidentSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    patch:
      tags: *id010
      summary: Update a diplomatic incident
      description: Update a diplomatic incident.
      operationId: diplomacy_update_diplomatic_incident
      parameters:
      - name: incident_id
        in: path
        required: true
        schema:
          type: string
      - name: incident_update
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiplomaticIncidentSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /incidents/{incident_id}/resolve:
    post:
      tags: *id010
      summary: Mark a diplomatic incident as resolved
      description: Mark a diplomatic incident as resolved.
      operationId: diplomacy_resolve_diplomatic_incident
      parameters:
      - name: incident_id
        in: path
        required: true
        schema:
          type: string
      - name: resolution
        in: query
        required: true
        schema:
          type: object
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiplomaticIncidentSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /ultimatums:
    post:
      tags: *id010
      summary: Create a new ultimatum
      description: Create a new ultimatum.
      operationId: diplomacy_create_ultimatum
      parameters:
      - name: ultimatum
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UltimatumSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id010
      summary: List ultimatums with optional filtering
      description: List ultimatums with optional filtering.
      operationId: diplomacy_list_ultimatums
      parameters:
      - name: faction_id
        in: query
        required: true
        schema:
          type: string
      - name: as_issuer
        in: query
        required: true
        schema:
          type: boolean
      - name: as_recipient
        in: query
        required: true
        schema:
          type: boolean
      - name: status
        in: query
        required: true
        schema:
          type: string
      - name: active_only
        in: query
        required: true
        schema:
          type: boolean
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: offset
        in: query
        required: true
        schema:
          type: integer
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[UltimatumSchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /ultimatums/{ultimatum_id}:
    get:
      tags: *id010
      summary: Get an ultimatum by ID
      description: Get an ultimatum by ID.
      operationId: diplomacy_get_ultimatum
      parameters:
      - name: ultimatum_id
        in: path
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UltimatumSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    patch:
      tags: *id010
      summary: Update an ultimatum
      description: Update an ultimatum.
      operationId: diplomacy_update_ultimatum
      parameters:
      - name: ultimatum_id
        in: path
        required: true
        schema:
          type: string
      - name: ultimatum_update
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UltimatumSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /ultimatums/{ultimatum_id}/respond:
    post:
      tags: *id010
      summary: Respond to an ultimatum (accept or reject)
      description: Respond to an ultimatum (accept or reject).
      operationId: diplomacy_respond_to_ultimatum
      parameters:
      - name: ultimatum_id
        in: path
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UltimatumSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /ultimatums/check-expired:
    post:
      tags: *id010
      summary: Check for and process expired ultimatums
      description: Check for and process expired ultimatums.
      operationId: diplomacy_check_expired_ultimatums
      parameters:
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[UltimatumSchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /sanctions:
    post:
      tags: *id010
      summary: Create a new diplomatic sanction against a faction
      description: Create a new diplomatic sanction against a faction.
      operationId: diplomacy_create_sanction
      parameters:
      - name: sanction
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SanctionSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id010
      summary: List sanctions, optionally filtered by various parameters
      description: List sanctions, optionally filtered by various parameters.
      operationId: diplomacy_list_sanctions
      parameters:
      - name: imposer_id
        in: query
        required: true
        schema:
          type: string
      - name: target_id
        in: query
        required: true
        schema:
          type: string
      - name: sanction_type
        in: query
        required: true
        schema:
          type: string
      - name: status
        in: query
        required: true
        schema:
          type: string
      - name: active_only
        in: query
        required: true
        schema:
          type: boolean
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: offset
        in: query
        required: true
        schema:
          type: integer
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[SanctionSchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /sanctions/{sanction_id}:
    get:
      tags: *id010
      summary: Get a sanction by ID
      description: Get a sanction by ID.
      operationId: diplomacy_get_sanction
      parameters:
      - name: sanction_id
        in: path
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SanctionSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    patch:
      tags: *id010
      summary: Update an existing sanction
      description: Update an existing sanction.
      operationId: diplomacy_update_sanction
      parameters:
      - name: sanction_id
        in: path
        required: true
        schema:
          type: string
      - name: sanction_update
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SanctionSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /sanctions/{sanction_id}/lift:
    post:
      tags: *id010
      summary: Lift a diplomatic sanction
      description: Lift a diplomatic sanction.
      operationId: diplomacy_lift_sanction
      parameters:
      - name: sanction_id
        in: path
        required: true
        schema:
          type: string
      - name: reason
        in: query
        required: true
        schema:
          type: object
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SanctionSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /sanctions/{sanction_id}/violations:
    post:
      tags: *id010
      summary: Record a violation of a sanction
      description: Record a violation of a sanction.
      operationId: diplomacy_record_sanction_violation
      parameters:
      - name: sanction_id
        in: path
        required: true
        schema:
          type: string
      - name: violation
        in: query
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SanctionSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /sanctions/check-expired:
    post:
      tags: *id010
      summary: Check for and process expired sanctions
      description: Check for and process expired sanctions.
      operationId: diplomacy_check_expired_sanctions
      parameters:
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[SanctionSchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /factions/{faction_id}/treaties:
    get:
      tags: *id010
      summary: Get all treaties for a specific faction
      description: Get all treaties for a specific faction.
      operationId: diplomacy_get_faction_treaties
      parameters:
      - name: faction_id
        in: path
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[TreatySchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /treaties/{treaty_id}/violations:
    get:
      tags: *id010
      summary: Get all violations for a specific treaty
      description: Get all violations for a specific treaty.
      operationId: diplomacy_get_treaty_violations_for_treaty
      parameters:
      - name: treaty_id
        in: path
        required: true
        schema:
          type: string
      - name: diplomacy_service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[TreatyViolationSchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /combat/state:
    post:
      tags: &id011
      - Combat
      summary: Creates a new combat state
      description: "Creates a new combat state.\n    Optionally accepts initial data\
        \ for the combat setup.\n    If no data is provided, a minimal combat state\
        \ with a new combat_id is created.\n    The `Development_Bible.md` mentions\
        \ `POST /combat/state` to set current combat state.\n    This endpoint serves\
        \ to initialize/create a new combat instance."
      operationId: combat_create_combat_state_endpoint
      parameters:
      - name: initial_state_data
        in: query
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombatStateSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /combat/state/{combat_id}:
    get:
      tags: *id011
      summary: Retrieves the current state of a specific combat instance by its ID
      description: "Retrieves the current state of a specific combat instance by its\
        \ ID.\n    This aligns with `GET /combat/state` from `Development_Bible.md`,\
        \ but is made specific by ID."
      operationId: combat_get_combat_state_endpoint
      parameters:
      - name: combat_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombatStateSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    put:
      tags: *id011
      summary: Updates an existing combat state by its ID
      description: "Updates an existing combat state by its ID.\n    The `Development_Bible.md`\
        \ mentions `POST /combat/state` to set current combat state.\n    A PUT to\
        \ a specific combat_id is more RESTful for updates."
      operationId: combat_update_combat_state_endpoint
      parameters:
      - name: combat_id
        in: path
        required: true
        schema:
          type: string
      - name: combat_state_update
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CombatStateSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id011
      summary: Deletes a combat instance by its ID (e
      description: Deletes a combat instance by its ID (e.g., when combat ends).
      operationId: combat_delete_combat_state_endpoint
      parameters:
      - name: combat_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /combat/states:
    get:
      tags: *id011
      summary: Lists all active combat instances
      description: Lists all active combat instances. Useful for debugging or an overview.
      operationId: combat_list_all_combat_states_endpoint
      parameters: []
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[CombatStateSchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/abilities:
    post:
      tags: &id012
      - magic
      summary: Create a new magic ability
      description: Create a new magic ability.
      operationId: magic_create_magic_ability
      parameters:
      - name: ability
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagicAbilityResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id012
      summary: List magic abilities
      description: List magic abilities.
      operationId: magic_list_magic_abilities
      parameters:
      - name: skip
        in: query
        required: true
        schema:
          type: integer
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[MagicAbilityResponse]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/abilities/{ability_id}:
    get:
      tags: *id012
      summary: Get a magic ability by ID
      description: Get a magic ability by ID.
      operationId: magic_get_magic_ability
      parameters:
      - name: ability_id
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagicAbilityResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    put:
      tags: *id012
      summary: Update a magic ability
      description: Update a magic ability.
      operationId: magic_update_magic_ability
      parameters:
      - name: ability_id
        in: path
        required: true
        schema:
          type: integer
      - name: ability
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagicAbilityResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id012
      summary: Delete a magic ability
      description: Delete a magic ability.
      operationId: magic_delete_magic_ability
      parameters:
      - name: ability_id
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/spells:
    post:
      tags: *id012
      summary: Create a new spell
      description: Create a new spell.
      operationId: magic_create_spell
      parameters:
      - name: spell
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpellResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id012
      summary: List spells (for narrative/reference purposes only)
      description: List spells (for narrative/reference purposes only).
      operationId: magic_list_spells
      parameters:
      - name: skip
        in: query
        required: true
        schema:
          type: integer
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[SpellResponse]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/spells/search:
    get:
      tags: *id012
      summary: Search for spells by name and school
      description: Search for spells by name and school.
      operationId: magic_search_spells
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: school
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[SpellResponse]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/spells/{spell_id}:
    get:
      tags: *id012
      summary: Get spell information (for narrative/reference purposes only)
      description: Get spell information (for narrative/reference purposes only).
      operationId: magic_get_spell
      parameters:
      - name: spell_id
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpellResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    put:
      tags: *id012
      summary: Update a spell
      description: Update a spell.
      operationId: magic_update_spell
      parameters:
      - name: spell_id
        in: path
        required: true
        schema:
          type: integer
      - name: spell
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpellResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id012
      summary: Delete a spell
      description: Delete a spell.
      operationId: magic_delete_spell
      parameters:
      - name: spell_id
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/spells/cast:
    post:
      tags: *id012
      summary: Cast a spell on a target
      description: Cast a spell on a target.
      operationId: magic_cast_spell
      parameters:
      - name: cast_request
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpellEffectResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/spellbooks:
    post:
      tags: *id012
      summary: Create a new spellbook
      description: Create a new spellbook.
      operationId: magic_create_spellbook
      parameters:
      - name: spellbook
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpellbookResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id012
      summary: List spellbooks
      description: List spellbooks.
      operationId: magic_list_spellbooks
      parameters:
      - name: owner_type
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[SpellbookResponse]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/spellbooks/{spellbook_id}:
    get:
      tags: *id012
      summary: Get a spellbook by ID
      description: Get a spellbook by ID.
      operationId: magic_get_spellbook
      parameters:
      - name: spellbook_id
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpellbookResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/characters/{owner_id}/spellbook:
    get:
      tags: *id012
      summary: Get a character's spellbook
      description: Get a character's spellbook.
      operationId: magic_get_character_spellbook
      parameters:
      - name: owner_id
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpellbookResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/spellbooks/{spellbook_id}/spells/{spell_id}:
    post:
      tags: *id012
      summary: Add a spell to a spellbook
      description: Add a spell to a spellbook.
      operationId: magic_add_spell_to_spellbook
      parameters:
      - name: spellbook_id
        in: path
        required: true
        schema:
          type: integer
      - name: spell_id
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id012
      summary: Remove a spell from a spellbook
      description: Remove a spell from a spellbook.
      operationId: magic_remove_spell_from_spellbook
      parameters:
      - name: spellbook_id
        in: path
        required: true
        schema:
          type: integer
      - name: spell_id
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/effects:
    get:
      tags: *id012
      summary: List active magical effects (for narrative context only)
      description: List active magical effects (for narrative context only).
      operationId: magic_list_spell_effects
      parameters:
      - name: target_id
        in: query
        required: true
        schema:
          type: string
      - name: target_type
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[SpellEffectResponse]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/effects/{effect_id}:
    get:
      tags: *id012
      summary: Get details of a magical effect (for narrative context only)
      description: Get details of a magical effect (for narrative context only).
      operationId: magic_get_spell_effect
      parameters:
      - name: effect_id
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpellEffectResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id012
      summary: Delete a spell effect
      description: Delete a spell effect.
      operationId: magic_delete_spell_effect
      parameters:
      - name: effect_id
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/effects/{effect_id}/dispel:
    post:
      tags: *id012
      summary: Attempt to dispel a spell effect
      description: Attempt to dispel a spell effect.
      operationId: magic_dispel_spell_effect
      parameters:
      - name: effect_id
        in: path
        required: true
        schema:
          type: integer
      - name: dispel_power
        in: query
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/effects/{effect_id}/modify-duration:
    put:
      tags: *id012
      summary: Modify the duration of a spell effect
      description: Modify the duration of a spell effect.
      operationId: magic_modify_effect_duration
      parameters:
      - name: effect_id
        in: path
        required: true
        schema:
          type: integer
      - name: duration_change
        in: query
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpellEffectResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/influences:
    get:
      tags: *id012
      summary: List magical influences in the world (for narrative context only)
      description: List magical influences in the world (for narrative context only).
      operationId: magic_list_magical_influences
      parameters:
      - name: location_id
        in: query
        required: true
        schema:
          type: string
      - name: skip
        in: query
        required: true
        schema:
          type: integer
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[MagicalInfluenceResponse]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/influences/{influence_id}:
    get:
      tags: *id012
      summary: Get details of a magical influence (for narrative context only)
      description: Get details of a magical influence (for narrative context only).
      operationId: magic_get_magical_influence
      parameters:
      - name: influence_id
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MagicalInfluenceResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/spellbooks/{owner_type}/{owner_id}:
    get:
      tags: *id012
      summary: Get a spellbook by owner type and ID
      description: Get a spellbook by owner type and ID.
      operationId: magic_get_spellbook_by_owner
      parameters:
      - name: owner_type
        in: path
        required: true
        schema:
          type: string
      - name: owner_id
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpellbookResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/effects/{target_type}/{target_id}:
    get:
      tags: *id012
      summary: Get active effects for a specific target
      description: Get active effects for a specific target.
      operationId: magic_get_effects_by_target
      parameters:
      - name: target_type
        in: path
        required: true
        schema:
          type: string
      - name: target_id
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[SpellEffectResponse]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/locations/{location_id}/analysis:
    get:
      tags: *id012
      summary: Analyze magical influences in a location
      description: Analyze magical influences in a location.
      operationId: magic_analyze_location_magic
      parameters:
      - name: location_id
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/characters/{character_id}/magic-summary:
    get:
      tags: *id012
      summary: Get a summary of a character's magical abilities and current effects
        for narrative context
      description: Get a summary of a character's magical abilities and current effects
        for narrative context.
      operationId: magic_get_character_magic_summary
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /magic/system/process-tick:
    post:
      tags: *id012
      summary: Process a magic system tick (background system function)
      description: "Process a magic system tick (background system function).\n\n\
        \    This updates magical effects in the world and is not directly visible\
        \ to players."
      operationId: magic_process_magic_tick
      parameters:
      - name: db
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /transform:
    post:
      tags:
      - character
      summary: Transform Rumor
      description: ''
      operationId: character_transform_rumor
      parameters:
      - name: req
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumorTransformationResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /characters/{character_id}/relationships:
    get:
      tags: &id013
      - relationships
      summary: Get all relationships for a character, optionally filtered by type
      description: Get all relationships for a character, optionally filtered by type.
      operationId: character_get_character_relationships
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: type
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipListResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    post:
      tags: *id013
      summary: Create a new relationship for a character
      description: Create a new relationship for a character.
      operationId: character_create_relationship
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: relationship
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /characters/{character_id}/relationships/{target_id}/{relationship_type}:
    delete:
      tags: *id013
      summary: Delete a specific relationship
      description: Delete a specific relationship.
      operationId: character_delete_relationship
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: target_id
        in: path
        required: true
        schema:
          type: string
      - name: relationship_type
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /characters/{character_id}/relationships/faction:
    get:
      tags: *id013
      summary: Get all faction relationships for a character
      description: Get all faction relationships for a character.
      operationId: character_get_character_faction_relationships
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipListResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /characters/{character_id}/relationships/faction/{faction_id}/reputation:
    post:
      tags: *id013
      summary: Update a character's reputation with a faction
      description: Update a character's reputation with a faction.
      operationId: character_update_faction_reputation
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: faction_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /characters/{character_id}/relationships/quest:
    get:
      tags: *id013
      summary: Get all quest relationships for a character, optionally filtered by
        status
      description: Get all quest relationships for a character, optionally filtered
        by status.
      operationId: character_get_character_quest_relationships
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: status
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipListResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /characters/{character_id}/relationships/quest/{quest_id}/status:
    post:
      tags: *id013
      summary: Update a character's progress on a quest
      description: Update a character's progress on a quest.
      operationId: character_update_quest_progress
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: quest_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /characters/{character_id}/relationships/spatial/{location_id}/proximity:
    post:
      tags: *id013
      summary: Update the proximity between a character and a location
      description: Update the proximity between a character and a location.
      operationId: character_update_spatial_proximity
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: location_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /characters/{character_id}/relationships/spatial:
    get:
      tags: *id013
      summary: Get all locations for a character, optionally filtered by maximum distance
      description: Get all locations for a character, optionally filtered by maximum
        distance.
      operationId: character_get_character_locations
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: max_distance
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /characters/{user_id}/relationships/auth/{character_id}/link:
    post:
      tags: *id013
      summary: Create or update an auth relationship between a user and a character
      description: Create or update an auth relationship between a user and a character.
      operationId: character_create_auth_relationship
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /characters/{user_id}/relationships/auth/characters:
    get:
      tags: *id013
      summary: Get all characters for a user with their permissions and owner status
      description: Get all characters for a user with their permissions and owner
        status.
      operationId: character_get_user_characters
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /characters/{character_id}/relationships/auth/users:
    get:
      tags: *id013
      summary: Get all users for a character with their permissions and owner status
      description: Get all users for a character with their permissions and owner
        status.
      operationId: character_get_character_users
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /characters/{user_id}/relationships/auth/{character_id}/permission/{permission}:
    get:
      tags: *id013
      summary: Check if a user has a specific permission for a character
      description: Check if a user has a specific permission for a character.
      operationId: character_check_user_permission
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: permission
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /parties/{player_id}:
    post:
      tags: &id014
      - parties
      summary: Create a new party with a player and NPCs
      description: Create a new party with a player and NPCs.
      operationId: character_create_party
      parameters:
      - name: player_id
        in: path
        required: true
        schema:
          type: string
      - name: npc_ids
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /parties/{party_id}/members/{npc_id}:
    post:
      tags: *id014
      summary: Add an NPC to an existing party
      description: Add an NPC to an existing party.
      operationId: character_add_to_party
      parameters:
      - name: party_id
        in: path
        required: true
        schema:
          type: string
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /parties/{party_id}/members/{member_id}:
    delete:
      tags: *id014
      summary: Remove a member from a party
      description: Remove a member from a party.
      operationId: character_remove_from_party
      parameters:
      - name: party_id
        in: path
        required: true
        schema:
          type: string
      - name: member_id
        in: path
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /parties/{party_id}/level:
    get:
      tags: *id014
      summary: Get the total or average party level
      description: Get the total or average party level.
      operationId: character_get_party_level
      parameters:
      - name: party_id
        in: path
        required: true
        schema:
          type: string
      - name: mode
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /parties/{party_id}/xp/{amount}:
    post:
      tags: *id014
      summary: Award XP to all members of a party
      description: Award XP to all members of a party.
      operationId: character_award_xp_to_party
      parameters:
      - name: party_id
        in: path
        required: true
        schema:
          type: string
      - name: amount
        in: path
        required: true
        schema:
          type: integer
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /parties/abandon/{npc_id}:
    post:
      tags: *id014
      summary: Remove an NPC from any party they're in due to loyalty loss
      description: Remove an NPC from any party they're in due to loyalty loss.
      operationId: character_abandon_party
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /characters/:
    post:
      tags: &id015
      - characters
      summary: Create a new character
      description: Create a new character.
      operationId: character_create_character
      parameters:
      - name: character_data
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id015
      summary: List all characters
      description: List all characters.
      operationId: character_list_characters
      parameters:
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[CharacterList]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /characters/{character_id}:
    get:
      tags: *id015
      summary: Get a character by ID
      description: Get a character by ID.
      operationId: character_get_character
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id015
      summary: Delete a character by ID
      description: Delete a character by ID.
      operationId: character_delete_character
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    put:
      tags: *id015
      summary: Update a character by ID
      description: Update a character by ID.
      operationId: character_update_character
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: update_data
        in: query
        required: true
        schema:
          type: string
      - name: db
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /auth-relationships/{character_id}:
    get:
      tags: &id016
      - auth-relationships
      summary: Get the auth relationship between the current user and a character
      description: Get the auth relationship between the current user and a character.
      operationId: auth_user_get_relationship
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRelationshipResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    put:
      tags: *id016
      summary: Update the auth relationship between the current user and a character
      description: Update the auth relationship between the current user and a character.
      operationId: auth_user_update_relationship
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: relationship
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRelationshipResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id016
      summary: Delete the auth relationship between the current user and a character
      description: Delete the auth relationship between the current user and a character.
      operationId: auth_user_delete_relationship
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /auth-relationships/check/{character_id}/{permission}:
    get:
      tags: *id016
      summary: Check if the current user has a specific permission for a character
      description: Check if the current user has a specific permission for a character.
      operationId: auth_user_check_user_permission
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: permission
        in: path
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /auth-relationships/{character_id}/permissions:
    post:
      tags: *id016
      summary: Add a permission to the current user's relationship with a character
      description: Add a permission to the current user's relationship with a character.
      operationId: auth_user_add_user_permission
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: permission_request
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRelationshipResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /auth-relationships/{character_id}/permissions/{permission}:
    delete:
      tags: *id016
      summary: Remove a permission from the current user's relationship with a character
      description: Remove a permission from the current user's relationship with a
        character.
      operationId: auth_user_remove_user_permission
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: permission
        in: path
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRelationshipResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /auth-relationships/{character_id}/ownership:
    put:
      tags: *id016
      summary: Set or remove ownership status for the current user's relationship
        with a character
      description: Set or remove ownership status for the current user's relationship
        with a character.
      operationId: auth_user_set_character_ownership
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: ownership_request
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRelationshipResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /auth-relationships/{character_id}/transfer-ownership:
    post:
      tags: *id016
      summary: Transfer ownership of a character from the current user to another
        user
      description: Transfer ownership of a character from the current user to another
        user.
      operationId: auth_user_transfer_ownership
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: transfer_request
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRelationshipResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /auth-relationships/user/characters:
    get:
      tags: *id016
      summary: Get all characters that the current user has access to
      description: Get all characters that the current user has access to.
      operationId: auth_user_list_user_characters
      parameters:
      - name: include_permissions
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /auth-relationships/character/{character_id}/users:
    get:
      tags: *id016
      summary: Get all users that have access to a character
      description: Get all users that have access to a character.
      operationId: auth_user_list_character_users
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: include_permissions
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /auth-relationships/check-multi:
    post:
      tags: *id016
      summary: Check if the current user has a specific permission for multiple characters
      description: Check if the current user has a specific permission for multiple
        characters.
      operationId: auth_user_check_permission_for_multiple_characters
      parameters:
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /auth/token:
    post:
      tags: &id017
      - auth
      summary: OAuth2 compatible token login endpoint
      description: OAuth2 compatible token login endpoint.
      operationId: auth_user_login_for_access_token
      parameters:
      - name: form_data
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /auth/me:
    get:
      tags: *id017
      summary: Get current user information
      description: Get current user information.
      operationId: auth_user_read_users_me
      parameters:
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /auth/check-permission/{permission_name}:
    get:
      tags: *id017
      summary: Check if the current user has a specific permission
      description: "Check if the current user has a specific permission.\n    \n \
        \   Args:\n        permission_name: Name of the permission to check\n    \
        \    current_user: Current authenticated user\n        \n    Returns:\n  \
        \      JSON with has_permission boolean"
      operationId: auth_user_check_user_permission
      parameters:
      - name: permission_name
        in: path
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /rumors/:
    post:
      tags: &id018
      - rumors
      summary: Create a new rumor
      description: "Create a new rumor.\n\n    Args:\n        request: The rumor creation\
        \ details\n        service: The rumor service (injected)\n\n    Returns:\n\
        \        The created rumor"
      operationId: rumor_create_rumor
      parameters:
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumorResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id018
      summary: List rumors with filters
      description: "List rumors with filters.\n\n    Args:\n        filters: Rumor\
        \ filter parameters\n        service: The rumor service (injected)\n\n   \
        \ Returns:\n        List of rumors matching the criteria"
      operationId: rumor_list_rumors
      parameters:
      - name: filters
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumorsListResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /rumors/{rumor_id}:
    get:
      tags: *id018
      summary: Get a specific rumor by ID
      description: "Get a specific rumor by ID.\n\n    Args:\n        rumor_id: The\
        \ ID of the rumor to retrieve\n        service: The rumor service (injected)\n\
        \n    Returns:\n        The rumor details"
      operationId: rumor_get_rumor
      parameters:
      - name: rumor_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumorResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id018
      summary: Delete a rumor
      description: "Delete a rumor.\n\n    Args:\n        rumor_id: The ID of the\
        \ rumor to delete\n        service: The rumor service\n\n    Returns:\n  \
        \      Operation result"
      operationId: rumor_delete_rumor
      parameters:
      - name: rumor_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationSuccessResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /rumors/spread/{rumor_id}:
    post:
      tags: *id018
      summary: Spread a rumor from one entity to another
      description: "Spread a rumor from one entity to another.\n\n    Args:\n    \
        \    rumor_id: ID of the rumor to spread\n        request: The rumor spread\
        \ details\n        service: The rumor service (injected)\n\n    Returns:\n\
        \        Operation result"
      operationId: rumor_spread_rumor
      parameters:
      - name: rumor_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationSuccessResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /rumors/mutate/{rumor_id}:
    post:
      tags: *id018
      summary: Create a mutated variant of a rumor
      description: "Create a mutated variant of a rumor.\n\n    Args:\n        rumor_id:\
        \ ID of the rumor to mutate\n        request: The mutation details\n     \
        \   service: The rumor service (injected)\n\n    Returns:\n        The updated\
        \ rumor with the new variant"
      operationId: rumor_mutate_rumor
      parameters:
      - name: rumor_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumorResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /rumors/entity/{entity_id}:
    get:
      tags: *id018
      summary: Get all rumors known to an entity
      description: "Get all rumors known to an entity.\n\n    Args:\n        entity_id:\
        \ ID of the entity\n        min_believability: Minimum believability threshold\n\
        \        service: The rumor service\n\n    Returns:\n        List of rumors\
        \ the entity has heard"
      operationId: rumor_get_entity_rumors
      parameters:
      - name: entity_id
        in: path
        required: true
        schema:
          type: string
      - name: min_believability
        in: query
        required: true
        schema:
          type: number
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumorsListResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /rumors/context:
    post:
      tags: *id018
      summary: Get rumor context for narrative generation
      description: "Get rumor context for narrative generation.\n\n    Args:\n   \
        \     request: Context request parameters\n        service: The rumor service\n\
        \n    Returns:\n        Formatted rumor context"
      operationId: rumor_get_rumor_context
      parameters:
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RumorContextListResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /rumors/decay:
    post:
      tags: *id018
      summary: Apply decay to rumors that haven't been reinforced recently
      description: "Apply decay to rumors that haven't been reinforced recently.\n\
        \n    Args:\n        request: Decay parameters\n        service: The rumor\
        \ service\n\n    Returns:\n        Operation result"
      operationId: rumor_decay_rumors
      parameters:
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationSuccessResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/current:
    get:
      tags: &id019
      - time
      summary: Get the current game time
      description: Get the current game time.
      operationId: time_get_current_time
      parameters: []
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameTime'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/advance:
    post:
      tags: *id019
      summary: Advance the game time by the specified amount and unit
      description: Advance the game time by the specified amount and unit.
      operationId: time_advance_time
      parameters:
      - name: amount
        in: query
        required: true
        schema:
          type: integer
      - name: unit
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/events:
    get:
      tags: *id019
      summary: Get all scheduled time events or only upcoming ones
      description: Get all scheduled time events or only upcoming ones.
      operationId: time_get_events
      parameters:
      - name: upcoming_only
        in: query
        required: true
        schema:
          type: boolean
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[TimeEvent]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    post:
      tags: *id019
      summary: Schedule a new time event
      description: Schedule a new time event.
      operationId: time_schedule_event
      parameters:
      - name: event_type
        in: query
        required: true
        schema:
          type: string
      - name: callback_name
        in: query
        required: true
        schema:
          type: string
      - name: callback_data
        in: query
        required: true
        schema:
          type: string
      - name: trigger_time
        in: query
        required: true
        schema:
          type: string
      - name: time_offset
        in: query
        required: true
        schema:
          type: string
      - name: recurrence_interval
        in: query
        required: true
        schema:
          type: string
      - name: priority
        in: query
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/events/{event_id}:
    delete:
      tags: *id019
      summary: Cancel a scheduled time event
      description: Cancel a scheduled time event.
      operationId: time_cancel_event
      parameters:
      - name: event_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/calendar:
    get:
      tags: *id019
      summary: Get the game calendar configuration
      description: Get the game calendar configuration.
      operationId: time_get_calendar
      parameters: []
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarData'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/season:
    get:
      tags: *id019
      summary: Get the current season in the game world
      description: Get the current season in the game world.
      operationId: time_get_current_season
      parameters: []
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/str'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/weather:
    get:
      tags: *id019
      summary: Get the current weather conditions
      description: Get the current weather conditions.
      operationId: time_get_current_weather
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/calendar/dates:
    post:
      tags: *id019
      summary: Add an important date to the calendar
      description: Add an important date to the calendar.
      operationId: time_add_important_date
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: month
        in: query
        required: true
        schema:
          type: integer
      - name: day
        in: query
        required: true
        schema:
          type: integer
      - name: year
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/calendar/dates/{name}:
    delete:
      tags: *id019
      summary: Remove an important date from the calendar
      description: Remove an important date from the calendar.
      operationId: time_remove_important_date
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/progression/start:
    post:
      tags: *id019
      summary: Start automatic time progression
      description: Start automatic time progression.
      operationId: time_start_time_progression
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/progression/stop:
    post:
      tags: *id019
      summary: Stop automatic time progression
      description: Stop automatic time progression.
      operationId: time_stop_time_progression
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/progression/pause:
    post:
      tags: *id019
      summary: Pause time progression
      description: Pause time progression.
      operationId: time_pause_time
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/progression/resume:
    post:
      tags: *id019
      summary: Resume time progression
      description: Resume time progression.
      operationId: time_resume_time
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/scale:
    post:
      tags: *id019
      summary: Set the time scale for automatic progression
      description: Set the time scale for automatic progression.
      operationId: time_set_time_scale
      parameters:
      - name: scale
        in: query
        required: true
        schema:
          type: number
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/reset:
    post:
      tags: *id019
      summary: Reset the game time to initial default state (admin use only)
      description: Reset the game time to initial default state (admin use only).
      operationId: time_reset_time
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /time/save:
    post:
      tags: *id019
      summary: Save the current time system state to persistent storage
      description: Save the current time system state to persistent storage.
      operationId: time_save_time_state
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/:
    get:
      tags: &id020
      - population
      summary: Get all POI populations, optionally filtered by status
      description: "Get all POI populations, optionally filtered by status.\n\n  \
        \  Args:\n        status: Optional status to filter by (e.g., 'NORMAL', 'GROWING')\n\
        \n    Returns:\n        List of POI population data"
      operationId: population_get_all_populations
      parameters:
      - name: service
        in: query
        required: true
        schema:
          type: string
      - name: status
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[POIPopulation]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    post:
      tags: *id020
      summary: Create population data for a new POI
      description: "Create population data for a new POI.\n\n    Args:\n        request:\
        \ Population data for the new POI\n\n    Returns:\n        Created POI population\
        \ data\n\n    Raises:\n        HTTPException: If POI already exists (400)"
      operationId: population_create_population
      parameters:
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/POIPopulation'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/config:
    get:
      tags: *id020
      summary: Get the current population configuration
      description: "Get the current population configuration.\n\n    This endpoint\
        \ returns the configuration object containing global settings,\n    base rates,\
        \ and other system parameters.\n\n    Returns:\n        Current population\
        \ configuration"
      operationId: population_get_config
      parameters:
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PopulationConfig'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/config/global-multiplier:
    post:
      tags: *id020
      summary: Set the global population growth multiplier
      description: "Set the global population growth multiplier.\n\n    This endpoint\
        \ updates the global multiplier that affects all POI\n    population growth\
        \ calculations.\n\n    Args:\n        value: New global multiplier value\n\
        \n    Returns:\n        Confirmation of the update"
      operationId: population_set_global_multiplier
      parameters:
      - name: value
        in: query
        required: true
        schema:
          type: number
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/config/base-rate/{poi_type}:
    post:
      tags: *id020
      summary: Set the base growth rate for a specific POI type
      description: "Set the base growth rate for a specific POI type.\n\n    This\
        \ endpoint updates the base growth rate used for calculations\n    for all\
        \ POIs of the specified type.\n\n    Args:\n        poi_type: The POI type\
        \ to update\n        value: New base rate value\n\n    Returns:\n        Updated\
        \ base rates for all POI types"
      operationId: population_set_base_rate
      parameters:
      - name: value
        in: query
        required: true
        schema:
          type: number
      - name: poi_type
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/events:
    get:
      tags: *id020
      summary: Get population change events
      description: "Get population change events.\n\n    This endpoint returns a list\
        \ of recent population change events.\n\n    Args:\n        limit: Maximum\
        \ number of events to return\n\n    Returns:\n        List of population change\
        \ events\n\n    Raises:\n        HTTPException: If limit is invalid (400)"
      operationId: population_get_population_events
      parameters:
      - name: limit
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/by-state/{state}:
    get:
      tags: *id020
      summary: Get all populations filtered by state
      description: "Get all populations filtered by state.\n\n    This endpoint returns\
        \ all POI populations that match the specified state.\n\n    Args:\n     \
        \   state: The POI state to filter by\n\n    Returns:\n        List of POI\
        \ populations matching the state"
      operationId: population_get_populations_by_state
      parameters:
      - name: state
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[POIPopulation]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/by-type/{poi_type}:
    get:
      tags: *id020
      summary: Get all populations filtered by type
      description: "Get all populations filtered by type.\n\n    This endpoint returns\
        \ all POI populations that match the specified type.\n\n    Args:\n      \
        \  poi_type: The POI type to filter by\n\n    Returns:\n        List of POI\
        \ populations matching the type"
      operationId: population_get_populations_by_type
      parameters:
      - name: poi_type
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[POIPopulation]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/monthly-update:
    post:
      tags: *id020
      summary: Run the monthly population update for all POIs
      description: "Run the monthly population update for all POIs.\n\n    This endpoint\
        \ processes growth, state transitions, and other\n    time-based population\
        \ changes for all POIs.\n\n    Returns:\n        Confirmation that the update\
        \ has been queued for processing"
      operationId: population_run_monthly_update
      parameters:
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '202':
          description: Success
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/migration:
    post:
      tags: *id020
      summary: Handle population migration between two POIs
      description: "Handle population migration between two POIs.\n\n    This endpoint\
        \ moves population from a source POI to a destination POI,\n    updating both\
        \ POIs and emitting appropriate events.\n\n    Args:\n        request: Migration\
        \ details\n\n    Returns:\n        Update status for both POIs\n\n    Raises:\n\
        \        HTTPException: If either POI not found (404)"
      operationId: population_handle_migration
      parameters:
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/{poi_id}:
    get:
      tags: *id020
      summary: Get population data for a specific POI
      description: "Get population data for a specific POI.\n\n    Args:\n       \
        \ poi_id: Unique identifier for the POI\n\n    Returns:\n        POI population\
        \ data\n\n    Raises:\n        HTTPException: If POI not found (404)"
      operationId: population_get_population
      parameters:
      - name: poi_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/POIPopulation'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    put:
      tags: *id020
      summary: Update population data for a POI
      description: "Update population data for a POI.\n\n    Args:\n        poi_id:\
        \ Unique identifier for the POI\n        request: Updated population data\n\
        \n    Returns:\n        Updated POI population data\n\n    Raises:\n     \
        \   HTTPException: If POI not found (404)"
      operationId: population_update_population
      parameters:
      - name: poi_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/POIPopulation'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id020
      summary: Delete a POI's population data
      description: "Delete a POI's population data.\n\n    This endpoint removes all\
        \ population data for the specified POI.\n\n    Args:\n        poi_id: Unique\
        \ identifier for the POI\n\n    Raises:\n        HTTPException: If POI not\
        \ found (404)"
      operationId: population_delete_population
      parameters:
      - name: poi_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/status/{poi_id}:
    get:
      tags: *id020
      summary: Get detailed status information for a POI
      description: "Get detailed status information for a POI.\n\n    This endpoint\
        \ provides comprehensive information about a POI's current\n    status, including\
        \ population data, growth projections, and state details.\n\n    Args:\n \
        \       poi_id: Unique identifier for the POI\n\n    Returns:\n        Detailed\
        \ POI status information\n\n    Raises:\n        HTTPException: If POI not\
        \ found (404)"
      operationId: population_get_poi_status
      parameters:
      - name: poi_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/{poi_id}/population:
    patch:
      tags: *id020
      summary: Manually change a POI's population
      description: "Manually change a POI's population.\n\n    This endpoint allows\
        \ direct modification of a POI's population count,\n    useful for simulating\
        \ migration, disasters, or other events that cause\n    rapid population changes.\n\
        \n    Args:\n        poi_id: Unique identifier for the POI\n        request:\
        \ Population change request data\n\n    Returns:\n        Updated POI population\
        \ data\n\n    Raises:\n        HTTPException: If POI not found (404)"
      operationId: population_change_population
      parameters:
      - name: poi_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/POIPopulation'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/{poi_id}/convert-to-dungeon:
    post:
      tags: *id020
      summary: Convert a POI in Ruins state to a Dungeon
      description: "Convert a POI in Ruins state to a Dungeon.\n\n    This endpoint\
        \ changes a ruins POI to a dungeon state, simulating monster\n    occupation\
        \ of an abandoned location.\n\n    Args:\n        poi_id: Unique identifier\
        \ for the POI\n        request: State transition request data\n\n    Returns:\n\
        \        Updated POI population data\n\n    Raises:\n        HTTPException:\
        \ If POI not found (404) or invalid state (400)"
      operationId: population_convert_ruins_to_dungeon
      parameters:
      - name: poi_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/POIPopulation'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/{poi_id}/start-repopulation:
    post:
      tags: *id020
      summary: Start repopulating an abandoned or ruined POI
      description: "Start repopulating an abandoned or ruined POI.\n\n    This endpoint\
        \ transitions a POI to the Repopulating state and sets\n    an initial population.\n\
        \n    Args:\n        poi_id: Unique identifier for the POI\n        request:\
        \ State transition request data\n\n    Returns:\n        Updated POI population\
        \ data\n\n    Raises:\n        HTTPException: If POI not found (404) or invalid\
        \ state (400)"
      operationId: population_start_repopulation
      parameters:
      - name: poi_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/POIPopulation'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/{poi_id}/catastrophe:
    post:
      tags: *id020
      summary: Apply catastrophe effects to a POI's population
      description: "Apply catastrophe effects to a POI's population.\n\n    This endpoint\
        \ simulates the impact of catastrophes (e.g., disease, famine,\n    natural\
        \ disasters) on a POI's population.\n\n    Args:\n        poi_id: Unique identifier\
        \ for the POI\n        request: Catastrophe details\n\n    Returns:\n    \
        \    Updated POI population data\n\n    Raises:\n        HTTPException: If\
        \ POI not found (404)"
      operationId: population_handle_catastrophe
      parameters:
      - name: poi_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/POIPopulation'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/{poi_id}/war-impact:
    post:
      tags: *id020
      summary: Apply war damage to a POI's population
      description: "Apply war damage to a POI's population.\n\n    This endpoint simulates\
        \ the impact of war on a POI's population, reducing\n    the population based\
        \ on the damage level.\n\n    Args:\n        poi_id: Unique identifier for\
        \ the POI\n        request: War impact details\n\n    Returns:\n        Updated\
        \ POI population data\n\n    Raises:\n        HTTPException: If POI not found\
        \ (404)"
      operationId: population_handle_war_impact
      parameters:
      - name: poi_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/POIPopulation'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/{poi_id}/resource-shortage:
    post:
      tags: *id020
      summary: Handle the impact of resource shortages on a POI's population
      description: "Handle the impact of resource shortages on a POI's population.\n\
        \n    This endpoint simulates the effects of resource shortages on a POI's\
        \ population,\n    potentially reducing growth or causing population decline.\n\
        \n    Args:\n        poi_id: Unique identifier for the POI\n        request:\
        \ Resource shortage details\n\n    Returns:\n        Updated POI population\
        \ data\n\n    Raises:\n        HTTPException: If POI not found (404)"
      operationId: population_handle_resource_shortage
      parameters:
      - name: poi_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/POIPopulation'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/population/{poi_id}/seasonal-effect:
    post:
      tags: *id020
      summary: Apply seasonal effects to a POI's population
      description: "Apply seasonal effects to a POI's population.\n\n    This endpoint\
        \ simulates the impacts of seasonal changes on population\n    growth or decline.\n\
        \n    Args:\n        poi_id: Unique identifier for the POI\n        request:\
        \ Seasonal effect details\n\n    Returns:\n        Updated POI population\
        \ data\n\n    Raises:\n        HTTPException: If POI not found (404)"
      operationId: population_handle_seasonal_effect
      parameters:
      - name: poi_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/POIPopulation'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/{region_id}:
    post:
      tags: &id021
      - Regions
      summary: Update a region
      description: "Update a region.\n\n    Args:\n        region_id: The ID of the\
        \ region to update\n        data: The updated region data\n\n    Returns:\n\
        \        The updated region\n\n    Raises:\n        HTTPException: If the\
        \ region is not found"
      operationId: region_update_region
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: string
      - name: data
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionSchema'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id021
      summary: Delete a region
      description: "Delete a region.\n\n    Args:\n        region_id: The ID of the\
        \ region to delete\n\n    Raises:\n        HTTPException: If the region is\
        \ not found"
      operationId: region_delete_region
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/{region_id}/details:
    get:
      tags: *id021
      summary: Get region details with weather
      description: "Get region details with weather.\n\n    Args:\n        region_id:\
        \ The ID of the region to get\n\n    Returns:\n        Region details with\
        \ weather\n\n    Raises:\n        HTTPException: If the region is not found\
        \ or weather is unavailable"
      operationId: region_get_region_details_with_weather
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/by_continent/{continent_id}:
    get:
      tags: *id021
      summary: Get all regions in a continent
      description: "Get all regions in a continent.\n\n    Args:\n        continent_id:\
        \ The ID of the continent\n\n    Returns:\n        List of regions in the\
        \ continent"
      operationId: region_get_regions_by_continent
      parameters:
      - name: continent_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[RegionSchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/:
    get:
      tags: *id021
      summary: List all regions
      description: "List all regions.\n\n    Returns:\n        List of all regions"
      operationId: region_list_all_regions
      parameters: []
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[RegionSchema]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/map/{region_id}:
    get:
      tags: *id021
      summary: Fetch the full tile map for a region
      description: "Fetch the full tile map for a region.\n\n    Args:\n        region_id:\
        \ The ID of the region\n\n    Returns:\n        The region map with tiles\n\
        \n    Raises:\n        HTTPException: If there is an error fetching the map"
      operationId: region_get_region_map
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/seed/{region_id}:
    post:
      tags: *id021
      summary: Seeds a basic 10x10 region with clustered terrain tags
      description: "Seeds a basic 10x10 region with clustered terrain tags.\n\n  \
        \  Args:\n        region_id: The ID of the region to seed\n\n    Returns:\n\
        \        Success message\n\n    Raises:\n        HTTPException: If there is\
        \ an error seeding the region"
      operationId: region_seed_region
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/generate:
    post:
      tags: *id021
      summary: Create a new region with starting coordinates
      description: "Create a new region with starting coordinates.\n\n    Args:\n\
        \        params: Parameters for region generation\n\n    Returns:\n      \
        \  Information about the generated region\n\n    Raises:\n        HTTPException:\
        \ If there is an error generating the region"
      operationId: region_generate_region
      parameters:
      - name: params
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/generate/new:
    post:
      tags: *id021
      summary: Shortcut to generate a new region at the origin (0,0)
      description: "Shortcut to generate a new region at the origin (0,0).\n\n   \
        \ Returns:\n        Information about the generated region\n\n    Raises:\n\
        \        HTTPException: If there is an error generating the region"
      operationId: region_generate_new_region
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/log_event:
    post:
      tags: *id021
      summary: Log a world event and notify NPCs in the region
      description: "Log a world event and notify NPCs in the region.\n\n    Args:\n\
        \        event_data: The event data to log\n\n    Returns:\n        Information\
        \ about the logged event\n\n    Raises:\n        HTTPException: If there is\
        \ an error logging the event"
      operationId: region_log_event_and_notify_npcs
      parameters:
      - name: event_data
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/questlog/{character_id}:
    get:
      tags: *id021
      summary: Get a character's questlog
      description: "Get a character's questlog.\n\n    Args:\n        character_id:\
        \ The ID of the character\n\n    Returns:\n        The character's questlog"
      operationId: region_get_questlog
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    post:
      tags: *id021
      summary: Add a quest to a character's questlog
      description: "Add a quest to a character's questlog.\n\n    Args:\n        character_id:\
        \ The ID of the character\n        quest_entry: The quest to add\n\n    Returns:\n\
        \        Information about the added quest"
      operationId: region_add_quest
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: quest_entry
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/initialize:
    get:
      tags: *id021
      summary: Initialize the region system with optional seed
      description: Initialize the region system with optional seed.
      operationId: region_initialize_region_system
      parameters:
      - name: seed
        in: query
        required: true
        schema:
          type: string
      - name: load_existing
        in: query
        required: true
        schema:
          type: boolean
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/world/metadata:
    get:
      tags: *id021
      summary: Get metadata about the current world
      description: Get metadata about the current world.
      operationId: region_get_world_metadata
      parameters:
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/world/map:
    get:
      tags: *id021
      summary: Get world map data for rendering
      description: Get world map data for rendering.
      operationId: region_get_world_map
      parameters:
      - name: include_biomes
        in: query
        required: true
        schema:
          type: boolean
      - name: include_regions
        in: query
        required: true
        schema:
          type: boolean
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/world/regenerate:
    post:
      tags: *id021
      summary: Regenerate the entire world with new parameters
      description: Regenerate the entire world with new parameters.
      operationId: region_regenerate_world
      parameters:
      - name: seed
        in: query
        required: true
        schema:
          type: string
      - name: continent_count
        in: query
        required: true
        schema:
          type: integer
      - name: region_constraints
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/continents:
    get:
      tags: *id021
      summary: Get all continents in the world
      description: Get all continents in the world.
      operationId: region_get_all_continents
      parameters:
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/continents/{continent_id}:
    get:
      tags: *id021
      summary: Get detailed information about a specific continent
      description: Get detailed information about a specific continent.
      operationId: region_get_continent
      parameters:
      - name: continent_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/continents/generate:
    post:
      tags: *id021
      summary: Generate a new continent and add it to the world
      description: Generate a new continent and add it to the world.
      operationId: region_generate_new_continent
      parameters:
      - name: continent_name
        in: query
        required: true
        schema:
          type: string
      - name: origin_x
        in: query
        required: true
        schema:
          type: string
      - name: origin_y
        in: query
        required: true
        schema:
          type: string
      - name: size
        in: query
        required: true
        schema:
          type: string
      - name: region_constraints
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/regions:
    get:
      tags: *id021
      summary: Get all regions, optionally filtered by continent or biome type
      description: Get all regions, optionally filtered by continent or biome type.
      operationId: region_get_all_regions
      parameters:
      - name: continent_id
        in: query
        required: true
        schema:
          type: string
      - name: biome_type
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/regions/{region_id}:
    get:
      tags: *id021
      summary: Get detailed information about a specific region
      description: Get detailed information about a specific region.
      operationId: region_get_region
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/regions/at_coordinates:
    get:
      tags: *id021
      summary: Get regions at the specified coordinates
      description: Get regions at the specified coordinates.
      operationId: region_get_regions_at_coordinates
      parameters:
      - name: coordinates
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/regions/coordinates/{x}/{y}:
    get:
      tags: *id021
      summary: Get region at the specified coordinates
      description: Get region at the specified coordinates.
      operationId: region_get_region_by_coordinates
      parameters:
      - name: x
        in: path
        required: true
        schema:
          type: integer
      - name: y
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/regions/{region_id}/adjacent:
    get:
      tags: *id021
      summary: Get regions adjacent to the specified region
      description: Get regions adjacent to the specified region.
      operationId: region_get_adjacent_regions
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/regions/generate:
    post:
      tags: *id021
      summary: Generate a new individual region and add it to the world
      description: Generate a new individual region and add it to the world.
      operationId: region_generate_new_region
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: x
        in: query
        required: true
        schema:
          type: string
      - name: y
        in: query
        required: true
        schema:
          type: string
      - name: continent_id
        in: query
        required: true
        schema:
          type: string
      - name: biome_type
        in: query
        required: true
        schema:
          type: string
      - name: profile_constraints
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/biomes:
    get:
      tags: *id021
      summary: Get biome data for all biomes or a specific biome
      description: Get biome data for all biomes or a specific biome.
      operationId: region_get_biome_data
      parameters:
      - name: biome_type
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /regions/biomes/adjacency:
    get:
      tags: *id021
      summary: Get biome adjacency rules
      description: Get biome adjacency rules.
      operationId: region_get_adjacency_rules
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/items:
    get:
      tags: &id022
      - inventory
      summary: Get a list of items with optional filtering
      description: Get a list of items with optional filtering.
      operationId: inventory_get_items
      parameters:
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: offset
        in: query
        required: true
        schema:
          type: integer
      - name: category
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    post:
      tags: *id022
      summary: Create a new item
      description: Create a new item.
      operationId: inventory_create_item
      parameters:
      - name: item_data
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/items/{item_id}:
    get:
      tags: *id022
      summary: Get a specific item by ID
      description: Get a specific item by ID.
      operationId: inventory_get_item
      parameters:
      - name: item_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    put:
      tags: *id022
      summary: Update an existing item
      description: Update an existing item.
      operationId: inventory_update_item
      parameters:
      - name: item_id
        in: path
        required: true
        schema:
          type: integer
      - name: item_data
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id022
      summary: Delete an item
      description: Delete an item.
      operationId: inventory_delete_item
      parameters:
      - name: item_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventories:
    get:
      tags: *id022
      summary: Get a list of inventories with optional filtering
      description: Get a list of inventories with optional filtering.
      operationId: inventory_get_inventories
      parameters:
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: offset
        in: query
        required: true
        schema:
          type: integer
      - name: owner_id
        in: query
        required: true
        schema:
          type: string
      - name: inventory_type
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    post:
      tags: *id022
      summary: Create a new inventory
      description: Create a new inventory.
      operationId: inventory_create_inventory
      parameters:
      - name: inventory_data
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventories/{inventory_id}:
    get:
      tags: *id022
      summary: Get a specific inventory by ID
      description: Get a specific inventory by ID.
      operationId: inventory_get_inventory
      parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
      - name: with_items
        in: query
        required: true
        schema:
          type: boolean
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    put:
      tags: *id022
      summary: Update an existing inventory
      description: Update an existing inventory.
      operationId: inventory_update_inventory
      parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
      - name: inventory_data
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id022
      summary: Delete an inventory
      description: Delete an inventory.
      operationId: inventory_delete_inventory
      parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventories/{inventory_id}/items:
    get:
      tags: *id022
      summary: Get all items in an inventory
      description: Get all items in an inventory.
      operationId: inventory_get_inventory_items
      parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    post:
      tags: *id022
      summary: Add an item to an inventory
      description: Add an item to an inventory.
      operationId: inventory_add_item_to_inventory
      parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
      - name: item_data
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventories/{inventory_id}/items/{inventory_item_id}:
    delete:
      tags: *id022
      summary: Remove an item from an inventory
      description: Remove an item from an inventory.
      operationId: inventory_remove_item_from_inventory
      parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
      - name: inventory_item_id
        in: path
        required: true
        schema:
          type: integer
      - name: quantity
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    put:
      tags: *id022
      summary: Update an inventory item
      description: Update an inventory item.
      operationId: inventory_update_inventory_item
      parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
      - name: inventory_item_id
        in: path
        required: true
        schema:
          type: integer
      - name: item_updates
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/transfer:
    post:
      tags: *id022
      summary: Transfer items between inventories with authentication and permission
        checks
      description: "Transfer items between inventories with authentication and permission\
        \ checks.\n\n    This endpoint follows the Development Bible guidance by ensuring:\n\
        \    1. Authentication is required\n    2. Permission checks are performed\
        \ for both source and target inventories\n    3. All transfer operations use\
        \ the canonical transfer utility\n    4. Events are emitted for analytics\
        \ and UI integration"
      operationId: inventory_transfer_item
      parameters:
      - name: transfer_data
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventory/{from_inventory_id}/transfer/{to_inventory_id}/{inventory_item_id}:
    post:
      tags: *id022
      summary: Transfer an item from one inventory to another
      description: "Transfer an item from one inventory to another.\n\n    Args:\n\
        \        from_inventory_id: Source inventory ID\n        to_inventory_id:\
        \ Destination inventory ID\n        inventory_item_id: Inventory item ID to\
        \ transfer\n        quantity: Quantity to transfer\n\n    Returns:\n     \
        \   Transfer result"
      operationId: inventory_transfer_item
      parameters:
      - name: from_inventory_id
        in: path
        required: true
        schema:
          type: integer
      - name: to_inventory_id
        in: path
        required: true
        schema:
          type: integer
      - name: inventory_item_id
        in: path
        required: true
        schema:
          type: integer
      - name: quantity
        in: query
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventory/{from_inventory_id}/bulk-transfer/{to_inventory_id}:
    post:
      tags: *id022
      summary: Transfer multiple items between inventories in a single operation
      description: "Transfer multiple items between inventories in a single operation.\n\
        \n    This endpoint follows the Development Bible guidance by ensuring:\n\
        \    1. Authentication is required\n    2. Permission checks are performed\
        \ for both source and target inventories\n    3. All bulk transfer operations\
        \ use the canonical bulk transfer utility\n    4. Events are emitted for analytics\
        \ and UI integration"
      operationId: inventory_bulk_transfer_items
      parameters:
      - name: from_inventory_id
        in: path
        required: true
        schema:
          type: integer
      - name: to_inventory_id
        in: path
        required: true
        schema:
          type: integer
      - name: items_data
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventories/{inventory_id}/stats:
    get:
      tags: *id022
      summary: Get statistics for an inventory
      description: Get statistics for an inventory.
      operationId: inventory_get_inventory_stats
      parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventories/{inventory_id}/backup:
    post:
      tags: *id022
      summary: Create a backup of an inventory
      description: Create a backup of an inventory.
      operationId: inventory_backup_inventory
      parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventories/restore:
    post:
      tags: *id022
      summary: Restore an inventory from backup data
      description: Restore an inventory from backup data.
      operationId: inventory_restore_inventory
      parameters:
      - name: backup_data
        in: query
        required: true
        schema:
          type: string
      - name: owner_id
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventories/{inventory_id}/export:
    post:
      tags: *id022
      summary: Export an inventory to JSON format
      description: Export an inventory to JSON format.
      operationId: inventory_export_inventory
      parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventories/import:
    post:
      tags: *id022
      summary: Import an inventory from JSON format
      description: Import an inventory from JSON format.
      operationId: inventory_import_inventory
      parameters:
      - name: import_data
        in: query
        required: true
        schema:
          type: string
      - name: owner_id
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventories/{inventory_id}/swap:
    post:
      tags: *id022
      summary: Swap the positions of two items in the same inventory
      description: "Swap the positions of two items in the same inventory.\n\n   \
        \ Args:\n        inventory_id: ID of the inventory\n        swap_data: Dictionary\
        \ with item_id1 and item_id2\n\n    Returns:\n        Swap result"
      operationId: inventory_swap_items
      parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
      - name: swap_data
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventories/{inventory_id}/split-stack/{stack_id}:
    post:
      tags: *id022
      summary: Split an item stack into two separate stacks
      description: "Split an item stack into two separate stacks.\n\n    Args:\n \
        \       inventory_id: ID of the inventory\n        stack_id: ID of the stack\
        \ to split\n        quantity: Quantity to move to the new stack\n\n    Returns:\n\
        \        Split result with new stack details"
      operationId: inventory_split_stack
      parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
      - name: stack_id
        in: path
        required: true
        schema:
          type: integer
      - name: quantity
        in: query
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventories/{inventory_id}/combine-stacks:
    post:
      tags: *id022
      summary: Combine two item stacks in an inventory
      description: "Combine two item stacks in an inventory.\n\n    Args:\n      \
        \  inventory_id: ID of the inventory\n        combine_data: Dictionary with\
        \ source_stack_id, target_stack_id, and optional quantity\n\n    Returns:\n\
        \        Combine result"
      operationId: inventory_combine_stacks
      parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
      - name: combine_data
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventories/{inventory_id}/optimize-stacks:
    post:
      tags: *id022
      summary: Optimize inventory by combining stackable items of the same type
      description: "Optimize inventory by combining stackable items of the same type.\n\
        \n    Args:\n        inventory_id: ID of the inventory\n\n    Returns:\n \
        \       Optimization result with counts of combined and removed stacks"
      operationId: inventory_optimize_stacks
      parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/inventories/{inventory_id}/filter:
    post:
      tags: *id022
      summary: Filter inventory items by various criteria
      description: "Filter inventory items by various criteria.\n\n    Args:\n   \
        \     inventory_id: ID of the inventory\n        filters: Dictionary of filter\
        \ criteria, which may include:\n            - name: String to search in item\
        \ names\n            - description: String to search in item descriptions\n\
        \            - category: Category or list of categories to match\n       \
        \     - min_weight: Minimum weight\n            - max_weight: Maximum weight\n\
        \            - min_value: Minimum value\n            - max_value: Maximum\
        \ value\n            - is_equipped: Boolean to filter equipped/unequipped\
        \ items\n            - properties: Dictionary of property key-values to match\n\
        \            - sort_by: Field to sort by (name, weight, value, category)\n\
        \            - sort_dir: Sort direction (asc or desc)\n\n    Returns:\n  \
        \      Filtered items matching the criteria"
      operationId: inventory_filter_items
      parameters:
      - name: inventory_id
        in: path
        required: true
        schema:
          type: integer
      - name: filters
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /inventory/admin/inventory/run-migrations:
    post:
      tags: *id022
      summary: Run inventory system migrations to update database schema
      description: "Run inventory system migrations to update database schema.\n \
        \   This endpoint should only be accessible to administrators.\n\n    Returns:\n\
        \        Migration results"
      operationId: inventory_run_inventory_migrations
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /worldgen/biomes:
    get:
      tags: &id023
      - world_generation
      summary: Get information about all available biomes in the world generation
        system
      description: "Get information about all available biomes in the world generation\
        \ system.\n    \n    Returns a list of BiomeData objects containing details\
        \ about each biome."
      operationId: world_state_get_biomes
      parameters:
      - name: world_generator
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[BiomeData]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /worldgen/region:
    post:
      tags: *id023
      summary: Generate a single region with the specified parameters
      description: "Generate a single region with the specified parameters.\n    \n\
        \    Returns detailed region data including terrain, biomes, and points of\
        \ interest."
      operationId: world_state_generate_region
      parameters:
      - name: world_generator
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /worldgen/region/{x}/{y}:
    get:
      tags: *id023
      summary: Get a specific region by coordinates
      description: "Get a specific region by coordinates.\n    \n    Similar to generate_region\
        \ but using GET parameters."
      operationId: world_state_get_region
      parameters:
      - name: x
        in: path
        required: true
        schema:
          type: integer
      - name: y
        in: path
        required: true
        schema:
          type: integer
      - name: size
        in: query
        required: true
        schema:
          type: integer
      - name: seed
        in: query
        required: true
        schema:
          type: integer
      - name: continent_id
        in: query
        required: true
        schema:
          type: string
      - name: world_generator
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /worldgen/continent/{continent_id}:
    get:
      tags: *id023
      summary: Get data for a specific continent
      description: "Get data for a specific continent.\n    \n    This is a placeholder\
        \ for continent data - in a full implementation, this would\n    retrieve\
        \ data about the entire continent."
      operationId: world_state_get_continent
      parameters:
      - name: continent_id
        in: path
        required: true
        schema:
          type: string
      - name: world_seed
        in: query
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContinentResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /worldgen/world/{world_seed}:
    get:
      tags: *id023
      summary: Get data for an entire world
      description: "Get data for an entire world.\n    \n    This is a placeholder\
        \ for world data - in a full implementation, this would\n    retrieve data\
        \ about the entire world."
      operationId: world_state_get_world
      parameters:
      - name: world_seed
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorldResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /worldgen/test-region:
    get:
      tags: *id023
      summary: Generate a test region with default parameters
      description: "Generate a test region with default parameters.\n    \n    Useful\
        \ for testing the world generation system."
      operationId: world_state_test_region
      parameters:
      - name: size
        in: query
        required: true
        schema:
          type: integer
      - name: world_generator
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/world-state/:
    get:
      tags: &id024
      - world-state
      summary: Get the current world state
      description: Get the current world state.
      operationId: world_state_get_world_state
      parameters:
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorldStateResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    patch:
      tags: *id024
      summary: Update a specific value in the world state
      description: Update a specific value in the world state.
      operationId: world_state_update_world_state
      parameters:
      - name: update
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/world-state/history:
    get:
      tags: *id024
      summary: Get historical data for world state values
      description: Get historical data for world state values.
      operationId: world_state_get_world_state_history
      parameters:
      - name: keys
        in: query
        required: true
        schema:
          type: string
      - name: since
        in: query
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/world-state/events:
    post:
      tags: *id024
      summary: Create a new world event
      description: Create a new world event.
      operationId: world_state_create_world_event
      parameters:
      - name: event
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorldEventResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id024
      summary: Get world events with optional filtering
      description: Get world events with optional filtering.
      operationId: world_state_get_world_events
      parameters:
      - name: event_type
        in: query
        required: true
        schema:
          type: string
      - name: category
        in: query
        required: true
        schema:
          type: string
      - name: region
        in: query
        required: true
        schema:
          type: string
      - name: location
        in: query
        required: true
        schema:
          type: string
      - name: entity_id
        in: query
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[WorldEventResponse]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/world-state/events/{event_id}:
    get:
      tags: *id024
      summary: Get a specific world event by ID
      description: Get a specific world event by ID.
      operationId: world_state_get_world_event
      parameters:
      - name: event_id
        in: path
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorldEventResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/world-state/related-events/{event_id}:
    get:
      tags: *id024
      summary: Get events related to the specified event
      description: Get events related to the specified event.
      operationId: world_state_get_related_events
      parameters:
      - name: event_id
        in: path
        required: true
        schema:
          type: string
      - name: relationship_types
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[WorldEventResponse]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/world-state/process-tick:
    post:
      tags: *id024
      summary: Manually trigger a world tick processing cycle
      description: Manually trigger a world tick processing cycle.
      operationId: world_state_process_world_tick
      parameters:
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/world-state/chaos-event:
    post:
      tags: *id024
      summary: Inject a chaos event into the world
      description: Inject a chaos event into the world.
      operationId: world_state_inject_chaos_event
      parameters:
      - name: event_type
        in: query
        required: true
        schema:
          type: string
      - name: region
        in: query
        required: true
        schema:
          type: string
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/world-state/regions:
    get:
      tags: *id024
      summary: Get a list of valid world regions
      description: Get a list of valid world regions.
      operationId: world_state_get_world_regions
      parameters:
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[str]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/world-state/categories:
    get:
      tags: *id024
      summary: Get a list of valid state categories
      description: Get a list of valid state categories.
      operationId: world_state_get_state_categories
      parameters:
      - name: current_user
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[str]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/:
    post:
      tags: &id025
      - arcs
      summary: Create a new arc
      description: Create a new arc
      operationId: arc_create_arc
      parameters:
      - name: arc_manager
        in: query
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArcResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id025
      summary: Get arcs with optional filtering
      description: Get arcs with optional filtering
      operationId: arc_get_arcs
      parameters:
      - name: arc_type
        in: query
        required: true
        schema:
          type: string
      - name: status
        in: query
        required: true
        schema:
          type: string
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      - name: character_id
        in: query
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: arc_manager
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[ArcResponse]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/{arc_id}:
    get:
      tags: *id025
      summary: Get a specific arc by ID
      description: Get a specific arc by ID
      operationId: arc_get_arc
      parameters:
      - name: arc_id
        in: path
        required: true
        schema:
          type: string
      - name: arc_manager
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArcResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    put:
      tags: *id025
      summary: Update an existing arc
      description: Update an existing arc
      operationId: arc_update_arc
      parameters:
      - name: arc_id
        in: path
        required: true
        schema:
          type: string
      - name: arc_manager
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArcResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id025
      summary: Delete an arc
      description: Delete an arc
      operationId: arc_delete_arc
      parameters:
      - name: arc_id
        in: path
        required: true
        schema:
          type: string
      - name: arc_manager
        in: query
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/{arc_id}/activate:
    post:
      tags: *id025
      summary: Activate a pending arc
      description: Activate a pending arc
      operationId: arc_activate_arc
      parameters:
      - name: arc_id
        in: path
        required: true
        schema:
          type: string
      - name: arc_manager
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArcResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/{arc_id}/advance:
    post:
      tags: *id025
      summary: Advance arc to next step
      description: Advance arc to next step
      operationId: arc_advance_arc_step
      parameters:
      - name: arc_id
        in: path
        required: true
        schema:
          type: string
      - name: step_index
        in: query
        required: true
        schema:
          type: integer
      - name: method
        in: query
        required: true
        schema:
          type: string
      - name: arc_manager
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArcResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/{arc_id}/fail-step:
    post:
      tags: *id025
      summary: Mark an arc step as failed
      description: Mark an arc step as failed
      operationId: arc_fail_arc_step
      parameters:
      - name: arc_id
        in: path
        required: true
        schema:
          type: string
      - name: step_index
        in: query
        required: true
        schema:
          type: integer
      - name: reason
        in: query
        required: true
        schema:
          type: string
      - name: arc_manager
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArcResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/{arc_id}/steps:
    get:
      tags: *id025
      summary: Get all steps for an arc
      description: Get all steps for an arc
      operationId: arc_get_arc_steps
      parameters:
      - name: arc_id
        in: path
        required: true
        schema:
          type: string
      - name: arc_manager
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[ArcStepResponse]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/{arc_id}/generate-steps:
    post:
      tags: *id025
      summary: Generate new steps for an arc
      description: Generate new steps for an arc
      operationId: arc_generate_arc_steps
      parameters:
      - name: arc_id
        in: path
        required: true
        schema:
          type: string
      - name: step_count
        in: query
        required: true
        schema:
          type: string
      - name: context
        in: query
        required: true
        schema:
          type: string
      - name: arc_manager
        in: query
        required: true
        schema:
          type: string
      - name: arc_generator
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[ArcStepResponse]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/{arc_id}/quest-opportunities:
    get:
      tags: *id025
      summary: Get quest generation opportunities for an arc
      description: Get quest generation opportunities for an arc
      operationId: arc_get_quest_opportunities
      parameters:
      - name: arc_id
        in: path
        required: true
        schema:
          type: string
      - name: context
        in: query
        required: true
        schema:
          type: string
      - name: quest_integration
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[QuestOpportunityResponse]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/{arc_id}/generate-quest:
    post:
      tags: *id025
      summary: Generate a quest from an arc step
      description: Generate a quest from an arc step
      operationId: arc_generate_quest_from_arc
      parameters:
      - name: arc_id
        in: path
        required: true
        schema:
          type: string
      - name: step_id
        in: query
        required: true
        schema:
          type: string
      - name: context
        in: query
        required: true
        schema:
          type: string
      - name: force
        in: query
        required: true
        schema:
          type: boolean
      - name: quest_integration
        in: query
        required: true
        schema:
          type: string
      - name: arc_manager
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/{arc_id}/progression:
    get:
      tags: *id025
      summary: Get progression information for an arc
      description: Get progression information for an arc
      operationId: arc_get_arc_progression
      parameters:
      - name: arc_id
        in: path
        required: true
        schema:
          type: string
      - name: include_events
        in: query
        required: true
        schema:
          type: boolean
      - name: progression_tracker
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArcProgressionResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/generate:
    post:
      tags: *id025
      summary: Generate a new arc using AI
      description: Generate a new arc using AI
      operationId: arc_generate_new_arc
      parameters:
      - name: arc_generator
        in: query
        required: true
        schema:
          type: string
      - name: arc_manager
        in: query
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArcResponse'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/system/statistics:
    get:
      tags: *id025
      summary: Get overall arc system statistics
      description: Get overall arc system statistics
      operationId: arc_get_system_statistics
      parameters:
      - name: arc_manager
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/system/check-stalled:
    post:
      tags: *id025
      summary: Check for and mark stalled arcs
      description: Check for and mark stalled arcs
      operationId: arc_check_stalled_arcs
      parameters:
      - name: arc_manager
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List[UUID]'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/analytics/overview:
    get:
      tags: &id026
      - arc-analytics
      summary: Get high-level analytics overview
      description: Get high-level analytics overview
      operationId: arc_get_analytics_overview
      parameters:
      - name: days_back
        in: query
        required: true
        schema:
          type: integer
      - name: arc_type
        in: query
        required: true
        schema:
          type: string
      - name: progression_tracker
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/analytics/performance-metrics:
    get:
      tags: *id026
      summary: Get detailed performance metrics
      description: Get detailed performance metrics
      operationId: arc_get_performance_metrics
      parameters:
      - name: time_range
        in: query
        required: true
        schema:
          type: string
      - name: arc_types
        in: query
        required: true
        schema:
          type: string
      - name: regions
        in: query
        required: true
        schema:
          type: string
      - name: progression_tracker
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceMetrics'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/analytics/effectiveness/{arc_id}:
    get:
      tags: *id026
      summary: Get effectiveness report for a specific arc
      description: Get effectiveness report for a specific arc
      operationId: arc_get_arc_effectiveness
      parameters:
      - name: arc_id
        in: path
        required: true
        schema:
          type: string
      - name: include_detailed_analysis
        in: query
        required: true
        schema:
          type: boolean
      - name: progression_tracker
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArcEffectivenessReport'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/analytics/completion-trends:
    get:
      tags: *id026
      summary: Get arc completion trends over time
      description: Get arc completion trends over time
      operationId: arc_get_completion_trends
      parameters:
      - name: period
        in: query
        required: true
        schema:
          type: string
      - name: arc_types
        in: query
        required: true
        schema:
          type: string
      - name: look_back_days
        in: query
        required: true
        schema:
          type: integer
      - name: progression_tracker
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/analytics/failure-analysis:
    get:
      tags: *id026
      summary: Get analysis of arc failures and common failure patterns
      description: Get analysis of arc failures and common failure patterns
      operationId: arc_get_failure_analysis
      parameters:
      - name: arc_types
        in: query
        required: true
        schema:
          type: string
      - name: days_back
        in: query
        required: true
        schema:
          type: integer
      - name: include_recommendations
        in: query
        required: true
        schema:
          type: boolean
      - name: progression_tracker
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/analytics/system-health:
    get:
      tags: *id026
      summary: Get overall system health metrics
      description: Get overall system health metrics
      operationId: arc_get_system_health
      parameters:
      - name: progression_tracker
        in: query
        required: true
        schema:
          type: string
      - name: arc_manager
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealthReport'
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/analytics/engagement-metrics:
    get:
      tags: *id026
      summary: Get player engagement metrics related to arcs
      description: Get player engagement metrics related to arcs
      operationId: arc_get_engagement_metrics
      parameters:
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      - name: character_id
        in: query
        required: true
        schema:
          type: string
      - name: days_back
        in: query
        required: true
        schema:
          type: integer
      - name: progression_tracker
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/analytics/bottlenecks:
    get:
      tags: *id026
      summary: Identify common progression bottlenecks in arcs
      description: Identify common progression bottlenecks in arcs
      operationId: arc_identify_progression_bottlenecks
      parameters:
      - name: arc_type
        in: query
        required: true
        schema:
          type: string
      - name: minimum_occurrence
        in: query
        required: true
        schema:
          type: integer
      - name: days_back
        in: query
        required: true
        schema:
          type: integer
      - name: progression_tracker
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/analytics/success-patterns:
    get:
      tags: *id026
      summary: Analyze patterns in successfully completed arcs
      description: Analyze patterns in successfully completed arcs
      operationId: arc_analyze_success_patterns
      parameters:
      - name: arc_type
        in: query
        required: true
        schema:
          type: string
      - name: minimum_sample_size
        in: query
        required: true
        schema:
          type: integer
      - name: days_back
        in: query
        required: true
        schema:
          type: integer
      - name: progression_tracker
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/analytics/impact-assessment:
    get:
      tags: *id026
      summary: Assess the impact of specific arcs on the game world
      description: Assess the impact of specific arcs on the game world
      operationId: arc_assess_arc_impact
      parameters:
      - name: arc_ids
        in: query
        required: true
        schema:
          type: string
      - name: include_downstream_effects
        in: query
        required: true
        schema:
          type: boolean
      - name: progression_tracker
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/analytics/prediction-accuracy:
    get:
      tags: *id026
      summary: Get accuracy metrics for arc progression predictions
      description: Get accuracy metrics for arc progression predictions
      operationId: arc_get_prediction_accuracy
      parameters:
      - name: days_back
        in: query
        required: true
        schema:
          type: integer
      - name: prediction_types
        in: query
        required: true
        schema:
          type: string
      - name: progression_tracker
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/analytics/cohort-analysis:
    get:
      tags: *id026
      summary: Perform cohort analysis on arc performance
      description: Perform cohort analysis on arc performance
      operationId: arc_perform_cohort_analysis
      parameters:
      - name: cohort_type
        in: query
        required: true
        schema:
          type: string
      - name: metric
        in: query
        required: true
        schema:
          type: string
      - name: look_back_months
        in: query
        required: true
        schema:
          type: integer
      - name: progression_tracker
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /arcs/analytics/custom-report:
    post:
      tags: *id026
      summary: Generate a custom analytics report with specified filters and metrics
      description: Generate a custom analytics report with specified filters and metrics
      operationId: arc_generate_custom_report
      parameters:
      - name: filters
        in: query
        required: true
        schema:
          type: string
      - name: metrics
        in: query
        required: true
        schema:
          type: string
      - name: time_range
        in: query
        required: true
        schema:
          type: string
      - name: export_format
        in: query
        required: true
        schema:
          type: string
      - name: progression_tracker
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /equipment/sets:
    get:
      tags: &id027
      - equipment
      summary: Get all available equipment sets
      description: "Get all available equipment sets.\n\n    Returns:\n        Dict\
        \ with equipment sets information"
      operationId: equipment_get_all_equipment_sets
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    post:
      tags: *id027
      summary: Create a new equipment set
      description: "Create a new equipment set.\n\n    Args:\n        name: Name of\
        \ the equipment set\n        description: Description of the equipment set\n\
        \        item_ids: List of item IDs that belong to this set\n        set_bonuses:\
        \ Dictionary mapping number of pieces to bonuses\n\n    Returns:\n       \
        \ Dict with created equipment set information"
      operationId: equipment_create_equipment_set
      parameters:
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: description
        in: query
        required: true
        schema:
          type: string
      - name: item_ids
        in: query
        required: true
        schema:
          type: string
      - name: set_bonuses
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /equipment/sets/{set_id}:
    get:
      tags: *id027
      summary: Get a specific equipment set by ID
      description: "Get a specific equipment set by ID.\n\n    Args:\n        set_id:\
        \ ID of the equipment set\n\n    Returns:\n        Dict with equipment set\
        \ information"
      operationId: equipment_get_equipment_set_by_id
      parameters:
      - name: set_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    put:
      tags: *id027
      summary: Update an existing equipment set
      description: "Update an existing equipment set.\n\n    Args:\n        set_id:\
        \ ID of the equipment set to update\n        name: Optional new name for the\
        \ equipment set\n        description: Optional new description\n        item_ids:\
        \ Optional new list of item IDs\n        set_bonuses: Optional new set bonuses\n\
        \n    Returns:\n        Dict with updated equipment set information"
      operationId: equipment_update_equipment_set
      parameters:
      - name: set_id
        in: path
        required: true
        schema:
          type: integer
      - name: name
        in: query
        required: true
        schema:
          type: string
      - name: description
        in: query
        required: true
        schema:
          type: string
      - name: item_ids
        in: query
        required: true
        schema:
          type: string
      - name: set_bonuses
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id027
      summary: Delete an equipment set
      description: "Delete an equipment set.\n\n    Args:\n        set_id: ID of the\
        \ equipment set to delete\n\n    Returns:\n        Dict with deletion result"
      operationId: equipment_delete_equipment_set
      parameters:
      - name: set_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /equipment/{character_id}/equip:
    post:
      tags: *id027
      summary: Equip an item from inventory to a character's equipment slot
      description: "Equip an item from inventory to a character's equipment slot.\n\
        \n    Args:\n        character_id: ID of the character\n        item_id: ID\
        \ of the item to equip\n        slot: Slot to equip the item in\n\n    Returns:\n\
        \        Dict with success status and result information"
      operationId: equipment_equip_item
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: integer
      - name: item_id
        in: query
        required: true
        schema:
          type: integer
      - name: slot
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /equipment/{character_id}/unequip:
    post:
      tags: *id027
      summary: Unequip an item from a character's equipment slot
      description: "Unequip an item from a character's equipment slot.\n\n    Args:\n\
        \        character_id: ID of the character\n        slot: Slot to unequip\
        \ the item from\n\n    Returns:\n        Dict with success status and result\
        \ information"
      operationId: equipment_unequip_item
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: integer
      - name: slot
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /equipment/{character_id}:
    get:
      tags: *id027
      summary: Get a character's equipped items
      description: "Get a character's equipped items.\n\n    Args:\n        character_id:\
        \ ID of the character\n\n    Returns:\n        Dict with equipment information"
      operationId: equipment_get_character_equipment
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /equipment/{character_id}/swap:
    post:
      tags: *id027
      summary: Swap an equipped item with a new item in one operation
      description: "Swap an equipped item with a new item in one operation.\n\n  \
        \  Args:\n        character_id: ID of the character\n        slot: Slot to\
        \ swap item in\n        new_item_id: ID of the new item to equip\n\n    Returns:\n\
        \        Dict with success status and result information"
      operationId: equipment_swap_equipment
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: integer
      - name: slot
        in: query
        required: true
        schema:
          type: string
      - name: new_item_id
        in: query
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /equipment/durability/{equipment_id}/damage/combat:
    post:
      tags: *id027
      summary: Apply combat damage to an equipment item
      description: "Apply combat damage to an equipment item.\n\n    Args:\n     \
        \   equipment_id: ID of the equipment\n        equipment_type: Type of equipment\
        \ (weapon, armor, shield, accessory)\n        combat_intensity: Multiplier\
        \ for combat intensity (1.0 is normal)\n        is_critical: Whether this\
        \ was a critical hit (more damage)\n\n    Returns:\n        Dict with damage\
        \ result"
      operationId: equipment_apply_combat_damage
      parameters:
      - name: equipment_id
        in: path
        required: true
        schema:
          type: integer
      - name: equipment_type
        in: query
        required: true
        schema:
          type: string
      - name: combat_intensity
        in: query
        required: true
        schema:
          type: number
      - name: is_critical
        in: query
        required: true
        schema:
          type: boolean
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /equipment/durability/{equipment_id}/damage/wear:
    post:
      tags: *id027
      summary: Apply wear and tear damage to an equipment item
      description: "Apply wear and tear damage to an equipment item.\n\n    Args:\n\
        \        equipment_id: ID of the equipment\n        equipment_type: Type of\
        \ equipment (weapon, armor, shield, accessory)\n        time_worn: Hours the\
        \ equipment has been worn/used\n        environmental_factor: Multiplier for\
        \ environmental conditions (rain, heat, etc.)\n\n    Returns:\n        Dict\
        \ with damage result"
      operationId: equipment_apply_wear_damage
      parameters:
      - name: equipment_id
        in: path
        required: true
        schema:
          type: integer
      - name: equipment_type
        in: query
        required: true
        schema:
          type: string
      - name: time_worn
        in: query
        required: true
        schema:
          type: number
      - name: environmental_factor
        in: query
        required: true
        schema:
          type: number
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /equipment/durability/{equipment_id}/repair:
    post:
      tags: *id027
      summary: Repair an equipment item
      description: "Repair an equipment item.\n\n    Args:\n        equipment_id:\
        \ ID of the equipment\n        repair_amount: Amount of durability to restore\
        \ (None for full repair)\n        full_repair: Force full repair regardless\
        \ of repair_amount\n\n    Returns:\n        Dict with repair result"
      operationId: equipment_repair_equipment
      parameters:
      - name: equipment_id
        in: path
        required: true
        schema:
          type: integer
      - name: repair_amount
        in: query
        required: true
        schema:
          type: string
      - name: full_repair
        in: query
        required: true
        schema:
          type: boolean
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /equipment/durability/{equipment_id}/status:
    get:
      tags: *id027
      summary: Get the durability status of an equipment item
      description: "Get the durability status of an equipment item.\n\n    Args:\n\
        \        equipment_id: ID of the equipment\n\n    Returns:\n        Dict with\
        \ durability status information"
      operationId: equipment_get_durability_status
      parameters:
      - name: equipment_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /equipment/durability/{equipment_id}/repair-cost:
    get:
      tags: *id027
      summary: Calculate the cost to repair an equipment item
      description: "Calculate the cost to repair an equipment item.\n\n    Args:\n\
        \        equipment_id: ID of the equipment\n        repair_amount: Optional\
        \ specific amount to repair, otherwise full repair\n\n    Returns:\n     \
        \   Dict with repair cost information"
      operationId: equipment_get_repair_cost
      parameters:
      - name: equipment_id
        in: path
        required: true
        schema:
          type: integer
      - name: repair_amount
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /equipment/durability/{equipment_id}/history:
    get:
      tags: *id027
      summary: Get durability change history for an equipment item
      description: "Get durability change history for an equipment item.\n\n    Args:\n\
        \        equipment_id: ID of the equipment\n        limit: Maximum number\
        \ of log entries to return\n\n    Returns:\n        Dict with durability history"
      operationId: equipment_get_durability_history
      parameters:
      - name: equipment_id
        in: path
        required: true
        schema:
          type: integer
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /equipment/{character_id}/identify:
    post:
      tags: *id027
      summary: Identify a single unknown effect on an item
      description: "Identify a single unknown effect on an item.\n\n    Args:\n  \
        \      character_id: ID of the character\n        item_id: ID of the item\
        \ to identify\n        region: Optional region name for economic modifiers\n\
        \        faction_id: Optional faction ID for discounts\n\n    Returns:\n \
        \       Dict with identification result"
      operationId: equipment_identify_item
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: integer
      - name: item_id
        in: query
        required: true
        schema:
          type: integer
      - name: region
        in: query
        required: true
        schema:
          type: string
      - name: faction_id
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /equipment/{character_id}/identify_full:
    post:
      tags: *id027
      summary: Fully identify all effects on an item at once (requires special NPC)
      description: "Fully identify all effects on an item at once (requires special\
        \ NPC).\n\n    Args:\n        character_id: ID of the character\n        item_id:\
        \ ID of the item to identify\n        npc_id: ID of the NPC performing the\
        \ identification (must have special permissions)\n\n    Returns:\n       \
        \ Dict with full identification result"
      operationId: equipment_identify_item_full
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: integer
      - name: item_id
        in: query
        required: true
        schema:
          type: integer
      - name: npc_id
        in: query
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /equipment/{character_id}/set_bonuses:
    get:
      tags: *id027
      summary: Get all active set bonuses for a character
      description: "Get all active set bonuses for a character.\n\n    Args:\n   \
        \     character_id: ID of the character\n\n    Returns:\n        Dict with\
        \ active set bonuses information"
      operationId: equipment_get_character_set_bonuses
      parameters:
      - name: character_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npcs/:
    post:
      tags: &id028
      - npcs
      summary: Create a new NPC
      description: Create a new NPC.
      operationId: npc_create_npc
      parameters:
      - name: npc_data
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    get:
      tags: *id028
      summary: List NPCs, optionally filtered by location or faction
      description: List NPCs, optionally filtered by location or faction.
      operationId: npc_list_npcs
      parameters:
      - name: poi_id
        in: query
        required: true
        schema:
          type: string
      - name: region_id
        in: query
        required: true
        schema:
          type: string
      - name: faction_id
        in: query
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: offset
        in: query
        required: true
        schema:
          type: integer
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npcs/{npc_id}:
    get:
      tags: *id028
      summary: Get an NPC by ID
      description: Get an NPC by ID.
      operationId: npc_get_npc
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    patch:
      tags: *id028
      summary: Update an NPC
      description: Update an NPC.
      operationId: npc_update_npc
      parameters:
      - name: npc_data
        in: query
        required: true
        schema:
          type: string
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    delete:
      tags: *id028
      summary: Delete an NPC
      description: Delete an NPC.
      operationId: npc_delete_npc
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npcs/{npc_id}/location:
    get:
      tags: *id028
      summary: Get an NPC's current location
      description: Get an NPC's current location.
      operationId: npc_get_npc_location
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    patch:
      tags: *id028
      summary: Update an NPC's location
      description: Update an NPC's location.
      operationId: npc_update_npc_location
      parameters:
      - name: location_data
        in: query
        required: true
        schema:
          type: string
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npcs/{npc_id}/memories:
    get:
      tags: *id028
      summary: Get memories for a specific NPC
      description: Get memories for a specific NPC.
      operationId: npc_get_npc_memories
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: offset
        in: query
        required: true
        schema:
          type: integer
      - name: tags
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    post:
      tags: *id028
      summary: Add a memory to an NPC
      description: Add a memory to an NPC.
      operationId: npc_add_memory_to_npc
      parameters:
      - name: memory_data
        in: query
        required: true
        schema:
          type: string
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npcs/{npc_id}/factions:
    get:
      tags: *id028
      summary: Get faction status for a specific NPC
      description: Get faction status for a specific NPC.
      operationId: npc_get_npc_faction_status
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npcs/{npc_id}/factions/adjust:
    post:
      tags: *id028
      summary: Adjust an NPC's allegiance to a faction
      description: Adjust an NPC's allegiance to a faction.
      operationId: npc_adjust_npc_faction_allegiance
      parameters:
      - name: adjustment_data
        in: query
        required: true
        schema:
          type: string
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npcs/{npc_id}/rumors:
    get:
      tags: *id028
      summary: Get rumors known by a specific NPC
      description: Get rumors known by a specific NPC.
      operationId: npc_get_npc_rumors
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    post:
      tags: *id028
      summary: Add a rumor to an NPC
      description: Add a rumor to an NPC.
      operationId: npc_add_rumor_to_npc
      parameters:
      - name: rumor_data
        in: query
        required: true
        schema:
          type: string
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npcs/{npc_id}/motifs:
    get:
      tags: *id028
      summary: Get motifs for a specific NPC
      description: Get motifs for a specific NPC.
      operationId: npc_get_npc_motifs
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    post:
      tags: *id028
      summary: Apply a specific motif to an NPC
      description: Apply a specific motif to an NPC.
      operationId: npc_apply_motif_to_npc
      parameters:
      - name: motif_data
        in: query
        required: true
        schema:
          type: string
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npcs/{npc_id}/loyalty/{character_id}:
    get:
      tags: *id028
      summary: Get an NPC's loyalty towards a character
      description: Get an NPC's loyalty towards a character.
      operationId: npc_get_npc_loyalty
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: character_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npcs/{npc_id}/loyalty:
    post:
      tags: *id028
      summary: Update an NPC's loyalty towards a character
      description: Update an NPC's loyalty towards a character.
      operationId: npc_update_npc_loyalty
      parameters:
      - name: loyalty_data
        in: query
        required: true
        schema:
          type: string
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npcs/generate:
    post:
      tags: *id028
      summary: Generate NPCs for a POI or region
      description: Generate NPCs for a POI or region.
      operationId: npc_generate_npcs
      parameters:
      - name: generation_data
        in: query
        required: true
        schema:
          type: string
      - name: background_tasks
        in: query
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npcs/{npc_id}/regenerate-goals:
    post:
      tags: *id028
      summary: Regenerate an NPC's goals
      description: Regenerate an NPC's goals.
      operationId: npc_regenerate_npc_goals
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/memories/{npc_id}:
    get:
      tags: &id029
      - npc-systems
      summary: Get memories for a specific NPC
      description: Get memories for a specific NPC.
      operationId: npc_get_npc_memories
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: limit
        in: query
        required: true
        schema:
          type: integer
      - name: offset
        in: query
        required: true
        schema:
          type: integer
      - name: tags
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
    post:
      tags: *id029
      summary: Create a new memory for an NPC
      description: Create a new memory for an NPC.
      operationId: npc_create_npc_memory
      parameters:
      - name: memory_request
        in: query
        required: true
        schema:
          type: string
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/memories/{npc_id}/{memory_id}:
    delete:
      tags: *id029
      summary: Delete a specific memory from an NPC
      description: Delete a specific memory from an NPC.
      operationId: npc_delete_npc_memory
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: memory_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/memories/{npc_id}/summary:
    get:
      tags: *id029
      summary: Get a summary of an NPC's memories
      description: Get a summary of an NPC's memories.
      operationId: npc_get_npc_memory_summary
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/factions/{npc_id}:
    get:
      tags: *id029
      summary: Get faction status for a specific NPC
      description: Get faction status for a specific NPC.
      operationId: npc_get_npc_faction_status
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/factions/{npc_id}/adjust:
    post:
      tags: *id029
      summary: Adjust an NPC's allegiance to a faction
      description: Adjust an NPC's allegiance to a faction.
      operationId: npc_adjust_npc_faction_allegiance
      parameters:
      - name: adjustment
        in: query
        required: true
        schema:
          type: string
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/rumors/{npc_id}:
    get:
      tags: *id029
      summary: Get rumors known by a specific NPC
      description: Get rumors known by a specific NPC.
      operationId: npc_get_npc_rumors
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/rumors/seed:
    post:
      tags: *id029
      summary: Seed a rumor to random NPCs
      description: Seed a rumor to random NPCs.
      operationId: npc_seed_rumor_to_npcs
      parameters:
      - name: seed_request
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/rumors/network/{rumor_id}:
    get:
      tags: *id029
      summary: Get the network of NPCs who know a specific rumor
      description: Get the network of NPCs who know a specific rumor.
      operationId: npc_get_rumor_spread_network
      parameters:
      - name: rumor_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/rumors/decay:
    post:
      tags: *id029
      summary: Run the rumor decay process
      description: Run the rumor decay process.
      operationId: npc_run_rumor_decay
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/population/update:
    post:
      tags: *id029
      summary: Run the monthly population update process
      description: Run the monthly population update process.
      operationId: npc_run_population_update
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/population/metrics:
    get:
      tags: *id029
      summary: Get global population metrics
      description: Get global population metrics.
      operationId: npc_get_population_metrics
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/population/multiplier/{multiplier}:
    post:
      tags: *id029
      summary: Set the global population multiplier
      description: Set the global population multiplier.
      operationId: npc_set_global_population_multiplier
      parameters:
      - name: multiplier
        in: path
        required: true
        schema:
          type: number
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/population/poi/{poi_id}:
    post:
      tags: *id029
      summary: Adjust population for a specific POI
      description: Adjust population for a specific POI.
      operationId: npc_adjust_population_for_poi
      parameters:
      - name: adjustment_data
        in: query
        required: true
        schema:
          type: string
      - name: poi_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/motifs/{npc_id}:
    get:
      tags: *id029
      summary: Get motifs applied to a specific NPC
      description: Get motifs applied to a specific NPC.
      operationId: npc_get_npc_motifs
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/motifs/apply/global:
    post:
      tags: *id029
      summary: Apply global motifs to all NPCs
      description: Apply global motifs to all NPCs.
      operationId: npc_apply_global_motifs
      parameters: []
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/motifs/apply/regional/{region_id}:
    post:
      tags: *id029
      summary: Apply regional motifs to all NPCs in a region
      description: Apply regional motifs to all NPCs in a region.
      operationId: npc_apply_regional_motifs
      parameters:
      - name: region_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /api/npc/systems/motifs/apply/npc/{npc_id}/{motif_id}:
    post:
      tags: *id029
      summary: Apply a specific motif to an NPC
      description: Apply a specific motif to an NPC.
      operationId: npc_apply_motif_to_npc
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: motif_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /npcs/{npc_id}/update-location:
    post:
      tags: &id030
      - npcs
      - locations
      summary: Update an NPC's location based on mobility settings
      description: "Update an NPC's location based on mobility settings.\n\n    Parameters:\n\
        \    -----------\n    npc_id: UUID\n        The NPC ID to update location\
        \ for\n\n    Returns:\n    --------\n    Dict containing results of the operation,\
        \ including whether the NPC moved\n    and if so, where to and why."
      operationId: npc_update_npc_location
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /npcs/{npc_id}/location:
    get:
      tags: *id030
      summary: Get an NPC's current location
      description: "Get an NPC's current location.\n\n    Parameters:\n    -----------\n\
        \    npc_id: UUID\n        The NPC ID to get location for\n\n    Returns:\n\
        \    --------\n    Dict containing the NPC's current location information."
      operationId: npc_get_npc_location
      parameters:
      - name: npc_id
        in: path
        required: true
        schema:
          type: string
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
  /npcs/daily-movement-tick:
    post:
      tags: *id030
      summary: Trigger movement updates for all NPCs at once (daily tick)
      description: "Trigger movement updates for all NPCs at once (daily tick).\n\n\
        \    This route is intended for automated daily updates to simulate\n    world\
        \ activity.\n\n    Returns:\n    --------\n    Summary of NPC movements."
      operationId: npc_run_daily_movement_tick
      parameters:
      - name: service
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Successful Response
        '400': *id002
        '401': *id003
        '404': *id004
        '422': *id005
        '500': *id006
components:
  schemas:
    Error:
      type: object
      properties:
        detail:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
      required:
      - detail
    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          description: Success message
      required:
      - status
    ValidationError:
      type: object
      properties:
        detail:
          type: array
          items:
            type: object
            properties:
              loc:
                type: array
                items:
                  type: string
              msg:
                type: string
              type:
                type: string
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
