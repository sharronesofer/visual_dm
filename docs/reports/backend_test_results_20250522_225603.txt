============================= test session starts ==============================
platform darwin -- Python 3.11.5, pytest-8.3.5, pluggy-1.6.0 -- /Users/Sharrone/.pyenv/versions/3.11.5/bin/python3.11
cachedir: .pytest_cache
rootdir: /Users/Sharrone/Dreamforge
configfile: pytest.ini
plugins: anyio-4.9.0, asyncio-0.26.0, mock-3.14.0, cov-6.1.1
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=function, asyncio_default_test_loop_scope=function
collecting ... 
----------------------------- live log collection ------------------------------
22:56:05 [INFO] backend.systems.storage.json_storage: JSONStorageManager initialized with base path: /Users/Sharrone/Dreamforge/data
22:56:05 [INFO] backend.systems.memory.memory_manager: MemoryManager initialized
collected 31 items

backend/tests/systems/memory/test_memory_categories.py::TestMemoryCategories::test_categorize_memory_content FAILED [  3%]
backend/tests/systems/memory/test_memory_categories.py::TestMemoryCategories::test_get_category_modifier FAILED [  6%]
backend/tests/systems/memory/test_memory_categories.py::TestMemoryCategories::test_categorize_memory_with_entities FAILED [  9%]
backend/tests/systems/memory/test_memory_categories.py::TestMemoryCategories::test_categorize_with_emotional_valence FAILED [ 12%]
backend/tests/systems/memory/test_saliency_scoring.py::TestSaliencyScoring::test_calculate_initial_importance PASSED [ 16%]
backend/tests/systems/memory/test_saliency_scoring.py::TestSaliencyScoring::test_calculate_initial_importance_categories PASSED [ 19%]
backend/tests/systems/memory/test_saliency_scoring.py::TestSaliencyScoring::test_calculate_memory_saliency PASSED [ 22%]
backend/tests/systems/memory/test_saliency_scoring.py::TestSaliencyScoring::test_calculate_memory_relevance PASSED [ 25%]
backend/tests/systems/memory/test_saliency_scoring.py::TestSaliencyScoring::test_category_influence_on_saliency PASSED [ 29%]
backend/tests/systems/memory/test_memory.py::TestMemory::test_memory_initialization PASSED [ 32%]
backend/tests/systems/memory/test_memory.py::TestMemory::test_custom_memory_id SKIPPED [ 35%]
backend/tests/systems/memory/test_memory.py::TestMemory::test_memory_with_tags PASSED [ 38%]
backend/tests/systems/memory/test_memory.py::TestMemory::test_to_dict_and_from_dict PASSED [ 41%]
backend/tests/systems/memory/test_memory.py::TestMemory::test_recall_tracking PASSED [ 45%]
backend/tests/systems/memory/test_memory.py::TestMemory::test_add_remove_tags PASSED [ 48%]
backend/tests/systems/memory/test_memory.py::TestMemory::test_memory_strength_update PASSED [ 51%]
backend/tests/systems/memory/test_memory.py::TestMemory::test_importance_influence_on_decay FAILED [ 54%]
backend/tests/systems/memory/test_memory.py::TestMemory::test_memory_relevance_calculation PASSED [ 58%]
backend/tests/systems/memory/test_memory_manager.py::TestMemoryManager::test_create_memory 
-------------------------------- live log setup --------------------------------
22:56:06 [INFO] backend.systems.memory.memory_manager: MemoryManager initialized
PASSED                                                                   [ 61%]
backend/tests/systems/memory/test_memory_manager.py::TestMemoryManager::test_get_memories_with_cache 
-------------------------------- live log setup --------------------------------
22:56:06 [INFO] backend.systems.memory.memory_manager: MemoryManager initialized
PASSED                                                                   [ 64%]
backend/tests/systems/memory/test_memory_manager.py::TestMemoryManager::test_get_memories_loading_from_storage 
-------------------------------- live log setup --------------------------------
22:56:06 [INFO] backend.systems.memory.memory_manager: MemoryManager initialized
PASSED                                                                   [ 67%]
backend/tests/systems/memory/test_memory_manager.py::TestMemoryManager::test_get_memories_with_filters 
-------------------------------- live log setup --------------------------------
22:56:06 [INFO] backend.systems.memory.memory_manager: MemoryManager initialized
PASSED                                                                   [ 70%]
backend/tests/systems/memory/test_memory_manager.py::TestMemoryManager::test_remember 
-------------------------------- live log setup --------------------------------
22:56:06 [INFO] backend.systems.memory.memory_manager: MemoryManager initialized
PASSED                                                                   [ 74%]
backend/tests/systems/memory/test_memory_manager.py::TestMemoryManager::test_update_memory_importance 
-------------------------------- live log setup --------------------------------
22:56:06 [INFO] backend.systems.memory.memory_manager: MemoryManager initialized
PASSED                                                                   [ 77%]
backend/tests/systems/memory/test_memory_manager.py::TestMemoryManager::test_forget_memory 
-------------------------------- live log setup --------------------------------
22:56:06 [INFO] backend.systems.memory.memory_manager: MemoryManager initialized
PASSED                                                                   [ 80%]
backend/tests/systems/memory/test_memory_manager.py::TestMemoryManager::test_run_memory_decay 
-------------------------------- live log setup --------------------------------
22:56:06 [INFO] backend.systems.memory.memory_manager: MemoryManager initialized
FAILED                                                                   [ 83%]
backend/tests/systems/memory/test_memory_manager.py::TestMemoryManager::test_load_character_memories 
-------------------------------- live log setup --------------------------------
22:56:06 [INFO] backend.systems.memory.memory_manager: MemoryManager initialized
PASSED                                                                   [ 87%]
backend/tests/systems/memory/test_memory_manager.py::TestMemoryManager::test_save_memory 
-------------------------------- live log setup --------------------------------
22:56:06 [INFO] backend.systems.memory.memory_manager: MemoryManager initialized
PASSED                                                                   [ 90%]
backend/tests/systems/memory/test_memory_manager.py::TestMemoryManager::test_event_handlers 
-------------------------------- live log setup --------------------------------
22:56:06 [INFO] backend.systems.memory.memory_manager: MemoryManager initialized
PASSED                                                                   [ 93%]
backend/tests/systems/memory/test_memory_manager.py::TestMemoryManager::test_concurrent_memory_operations 
-------------------------------- live log setup --------------------------------
22:56:06 [INFO] backend.systems.memory.memory_manager: MemoryManager initialized
PASSED                                                                   [ 96%]
backend/tests/systems/memory/test_memory_manager.py::TestMemoryManager::test_error_handling 
-------------------------------- live log setup --------------------------------
22:56:06 [INFO] backend.systems.memory.memory_manager: MemoryManager initialized
FAILED                                                                   [100%]

=================================== FAILURES ===================================
_____________ TestMemoryCategories.test_categorize_memory_content ______________

self = <systems.memory.test_memory_categories.TestMemoryCategories object at 0x1051ad210>

    def test_categorize_memory_content(self):
        """Test that memory content is correctly categorized based on keywords."""
        # Test battle/combat content
        combat_content = "I fought in a battle against the orcs"
        combat_categories = categorize_memory_content(combat_content)
        # Check that categorization returns a set with MemoryCategory enums
        assert isinstance(combat_categories, set)
        assert MemoryCategory.COMBAT in combat_categories
    
        # Test location-related content
        location_content = "I visited the castle on the hill"
        location_categories = categorize_memory_content(location_content)
        # In the current implementation, this might be classified as PERSONAL or DISCOVERY
        # Check that we get a valid category rather than a specific one
        assert len(location_categories) > 0
        assert any(isinstance(cat, MemoryCategory) for cat in location_categories)
    
        # Test relationship content
        relationship_content = "I met with my brother and we talked about family"
        relationship_categories = categorize_memory_content(relationship_content)
>       assert MemoryCategory.RELATIONSHIP in relationship_categories
E       AssertionError: assert <MemoryCategory.RELATIONSHIP: 'relationship'> in {<MemoryCategory.PERSONAL: 'personal'>}
E        +  where <MemoryCategory.RELATIONSHIP: 'relationship'> = MemoryCategory.RELATIONSHIP

backend/tests/systems/memory/test_memory_categories.py:34: AssertionError
_______________ TestMemoryCategories.test_get_category_modifier ________________

self = <systems.memory.test_memory_categories.TestMemoryCategories object at 0x1051af390>

    def test_get_category_modifier(self):
        """Test retrieving modifiers for memory categories."""
        # Test importance modifiers
        trauma_importance = get_category_modifier(MemoryCategory.TRAUMA, "importance")
        discovery_importance = get_category_modifier(MemoryCategory.DISCOVERY, "importance")
    
        # Categories like trauma should have higher importance modifiers
>       assert trauma_importance > 0
E       TypeError: '>' not supported between instances of 'NoneType' and 'int'

backend/tests/systems/memory/test_memory_categories.py:72: TypeError
__________ TestMemoryCategories.test_categorize_memory_with_entities ___________

self = <systems.memory.test_memory_categories.TestMemoryCategories object at 0x1051b4350>

    def test_categorize_memory_with_entities(self):
        """Test categorizing memories with related entities."""
        # Test with related character entities
        family_related_memory = "I thought about what to do"
        family_entities = ["father", "mother", "brother"]
    
>       family_categories = categorize_memory_content(family_related_memory, related_entities=family_entities)
E       TypeError: categorize_memory_content() got an unexpected keyword argument 'related_entities'

backend/tests/systems/memory/test_memory_categories.py:110: TypeError
_________ TestMemoryCategories.test_categorize_with_emotional_valence __________

self = <systems.memory.test_memory_categories.TestMemoryCategories object at 0x1051b5c90>

    def test_categorize_with_emotional_valence(self):
        """Test that emotional valence affects categorization."""
        basic_content = "I had a conversation with the merchant"
    
        # Without emotional valence
        basic_categories = categorize_memory_content(basic_content)
    
        # With positive valence
>       positive_categories = categorize_memory_content(
            basic_content,
            emotional_valence=MemoryEmotionalValence.POSITIVE
        )
E       TypeError: categorize_memory_content() got an unexpected keyword argument 'emotional_valence'

backend/tests/systems/memory/test_memory_categories.py:143: TypeError
________________ TestMemory.test_importance_influence_on_decay _________________

self = <systems.memory.test_memory.TestMemory object at 0x1051c7c50>

    def test_importance_influence_on_decay(self):
        """Test that importance affects decay rate."""
        # Arrange
        high_importance_memory = Memory(
            owner_id="char123",
            content="A very important memory",
            memory_type=MemoryType.EXPERIENCE,
            importance=0.9
        )
    
        low_importance_memory = Memory(
            owner_id="char123",
            content="A less important memory",
            memory_type=MemoryType.EXPERIENCE,
            importance=0.3
        )
    
        # Act - use a larger time difference to make decay differences more apparent
        current_time = time.time() + 100000  # 100000 seconds later (>1 day)
        original_high = high_importance_memory.current_strength
        original_low = low_importance_memory.current_strength
    
        high_importance_memory.update_strength(current_time)
        low_importance_memory.update_strength(current_time)
    
        # Assert - The high importance memory should decay less
        high_decay = original_high - high_importance_memory.current_strength
        low_decay = original_low - low_importance_memory.current_strength
    
        # To account for possible floating-point precision issues, we use assertLess
        # or check with a small epsilon value
        if high_decay == low_decay:
            # If they're equal, check that the importances are close as well
            assert abs(high_importance_memory.importance - low_importance_memory.importance) < 0.01
        else:
>           assert high_decay < low_decay
E           assert 0.05622771964380513 < 0.056227719641721685

backend/tests/systems/memory/test_memory.py:210: AssertionError
___________________ TestMemoryManager.test_run_memory_decay ____________________

self = <systems.memory.test_memory_manager.TestMemoryManager object at 0x1051eef10>
memory_manager = <backend.systems.memory.memory_manager.MemoryManager object at 0x105dafe90>
mock_storage = <AsyncMock id='4393130512'>

    @pytest.mark.asyncio
    async def test_run_memory_decay(self, memory_manager, mock_storage):
        """Test the memory decay process."""
        # Arrange - Add memories with different types to cache
        character_id_1 = "char1"
        character_id_2 = "char2"
    
        # Character 1 memories
        memory_manager._memory_cache[character_id_1] = {}
        core_memory = Memory(
            character_id=character_id_1,
            world_id="world1",
            content="Core memory",
            importance=0.9,
            is_core=True
        )
    
        regular_memory_1 = Memory(
            character_id=character_id_1,
            world_id="world1",
            content="Regular memory",
            importance=0.4,
            is_core=False
        )
    
        # Character 2 memories
        memory_manager._memory_cache[character_id_2] = {}
        regular_memory_2 = Memory(
            character_id=character_id_2,
            world_id="world1",
            content="Regular memory for char2",
            importance=0.3,
            is_core=False
        )
    
        low_importance_memory = Memory(
            character_id=character_id_2,
            world_id="world1",
            content="Low importance memory",
            importance=0.1,
            is_core=False
        )
    
        # Add memories to cache
        memory_manager._memory_cache[character_id_1][core_memory.id] = core_memory
        memory_manager._memory_cache[character_id_1][regular_memory_1.id] = regular_memory_1
        memory_manager._memory_cache[character_id_2][regular_memory_2.id] = regular_memory_2
        memory_manager._memory_cache[character_id_2][low_importance_memory.id] = low_importance_memory
    
        # Act - Run memory decay
        decay_factor = 0.05  # Normal decay factor
        forgotten_count = await memory_manager.run_memory_decay(decay_factor=decay_factor)
    
        # Assert
        # Verify total memories (one should be below threshold and forgotten)
        total_memories = (
            len(memory_manager._memory_cache.get(character_id_1, {})) +
            len(memory_manager._memory_cache.get(character_id_2, {}))
        )
    
        # Depending on implementation, at least the low_importance_memory (0.1)
        # should be forgotten or have reduced importance
        if forgotten_count > 0:
            # If forgotten, it should be removed from the cache
            assert low_importance_memory.id not in memory_manager._memory_cache.get(character_id_2, {})
            assert total_memories == 3
        else:
            # If not forgotten, importance should be reduced
>           assert memory_manager._memory_cache.get(character_id_2, {}).get(low_importance_memory.id).importance < 0.1
E           AssertionError: assert 0.1 < 0.1
E            +  where 0.1 = Memory(id='69abb301-3e79-4931-84c6-244d92ee17f3', character_id='char2', world_id='world1', content='Low importance memory', created_at=datetime.datetime(2025, 5, 23, 2, 56, 6, 361277), last_accessed=datetime.datetime(2025, 5, 23, 2, 56, 6, 361277), importance=0.1, related_entities=[], metadata={}, is_core=False).importance
E            +    where Memory(id='69abb301-3e79-4931-84c6-244d92ee17f3', character_id='char2', world_id='world1', content='Low importance memory', created_at=datetime.datetime(2025, 5, 23, 2, 56, 6, 361277), last_accessed=datetime.datetime(2025, 5, 23, 2, 56, 6, 361277), importance=0.1, related_entities=[], metadata={}, is_core=False) = <built-in method get of dict object at 0x105db9480>('69abb301-3e79-4931-84c6-244d92ee17f3')
E            +      where <built-in method get of dict object at 0x105db9480> = {'69abb301-3e79-4931-84c6-244d92ee17f3': Memory(id='69abb301-3e79-4931-84c6-244d92ee17f3', character_id='char2', world_id='world1', content='Low importance memory', created_at=datetime.datetime(2025, 5, 23, 2, 56, 6, 361277), last_accessed=datetime.datetime(2025, 5, 23, 2, 56, 6, 361277), importance=0.1, related_entities=[], metadata={}, is_core=False), 'cd1c741a-9699-4b18-b733-a304b740be3d': Memory(id='cd1c741a-9699-4b18-b733-a304b740be3d', character_id='char2', world_id='world1', content='Regular memory for char2', created_at=datetime.datetime(2025, 5, 23, 2, 56, 6, 361264), last_accessed=datetime.datetime(2025, 5, 23, 2, 56, 6, 361264), importance=0.3, related_entities=[], metadata={}, is_core=False)}.get
E            +        where {'69abb301-3e79-4931-84c6-244d92ee17f3': Memory(id='69abb301-3e79-4931-84c6-244d92ee17f3', character_id='char2', world_id='world1', content='Low importance memory', created_at=datetime.datetime(2025, 5, 23, 2, 56, 6, 361277), last_accessed=datetime.datetime(2025, 5, 23, 2, 56, 6, 361277), importance=0.1, related_entities=[], metadata={}, is_core=False), 'cd1c741a-9699-4b18-b733-a304b740be3d': Memory(id='cd1c741a-9699-4b18-b733-a304b740be3d', character_id='char2', world_id='world1', content='Regular memory for char2', created_at=datetime.datetime(2025, 5, 23, 2, 56, 6, 361264), last_accessed=datetime.datetime(2025, 5, 23, 2, 56, 6, 361264), importance=0.3, related_entities=[], metadata={}, is_core=False)} = <built-in method get of dict object at 0x105dae240>('char2', {})
E            +          where <built-in method get of dict object at 0x105dae240> = {'char1': {'0b00c2cf-eacf-43e1-981e-fc009e82160e': Memory(id='0b00c2cf-eacf-43e1-981e-fc009e82160e', character_id='char1', world_id='world1', content='Core memory', created_at=datetime.datetime(2025, 5, 23, 2, 56, 6, 361213), last_accessed=datetime.datetime(2025, 5, 23, 2, 56, 6, 361222), importance=0.9, related_entities=[], metadata={}, is_core=True), '6f565e7b-2351-43b6-90c3-d0599cd905d4': Memory(id='6f565e7b-2351-43b6-90c3-d0599cd905d4', character_id='char1', world_id='world1', content='Regular memory', created_at=datetime.datetime(2025, 5, 23, 2, 56, 6, 361249), last_accessed=datetime.datetime(2025, 5, 23, 2, 56, 6, 361250), importance=0.4, related_entities=[], metadata={}, is_core=False)}, 'char2': {'69abb301-3e79-4931-84c6-244d92ee17f3': Memory(id='69abb301-3e79-4931-84c6-244d92ee17f3', character_id='char2', world_id='world1', content='Low importance memory', created_at=datetime.datetime(2025, 5, 23, 2, 56, 6, 361277), last_accessed=datetime.datetime(2025, 5, 23, 2, 56, 6, 361277), importance=0.1, related_entities=[], metadata={}, is_core=False), 'cd1c741a-9699-4b18-b733-a304b740be3d': Memory(id='cd1c741a-9699-4b18-b733-a304b740be3d', character_id='char2', world_id='world1', content='Regular memory for char2', created_at=datetime.datetime(2025, 5, 23, 2, 56, 6, 361264), last_accessed=datetime.datetime(2025, 5, 23, 2, 56, 6, 361264), importance=0.3, related_entities=[], metadata={}, is_core=False)}}.get
E            +            where {'char1': {'0b00c2cf-eacf-43e1-981e-fc009e82160e': Memory(id='0b00c2cf-eacf-43e1-981e-fc009e82160e', character_id='char1', world_id='world1', content='Core memory', created_at=datetime.datetime(2025, 5, 23, 2, 56, 6, 361213), last_accessed=datetime.datetime(2025, 5, 23, 2, 56, 6, 361222), importance=0.9, related_entities=[], metadata={}, is_core=True), '6f565e7b-2351-43b6-90c3-d0599cd905d4': Memory(id='6f565e7b-2351-43b6-90c3-d0599cd905d4', character_id='char1', world_id='world1', content='Regular memory', created_at=datetime.datetime(2025, 5, 23, 2, 56, 6, 361249), last_accessed=datetime.datetime(2025, 5, 23, 2, 56, 6, 361250), importance=0.4, related_entities=[], metadata={}, is_core=False)}, 'char2': {'69abb301-3e79-4931-84c6-244d92ee17f3': Memory(id='69abb301-3e79-4931-84c6-244d92ee17f3', character_id='char2', world_id='world1', content='Low importance memory', created_at=datetime.datetime(2025, 5, 23, 2, 56, 6, 361277), last_accessed=datetime.datetime(2025, 5, 23, 2, 56, 6, 361277), importance=0.1, related_entities=[], metadata={}, is_core=False), 'cd1c741a-9699-4b18-b733-a304b740be3d': Memory(id='cd1c741a-9699-4b18-b733-a304b740be3d', character_id='char2', world_id='world1', content='Regular memory for char2', created_at=datetime.datetime(2025, 5, 23, 2, 56, 6, 361264), last_accessed=datetime.datetime(2025, 5, 23, 2, 56, 6, 361264), importance=0.3, related_entities=[], metadata={}, is_core=False)}} = <backend.systems.memory.memory_manager.MemoryManager object at 0x105dafe90>._memory_cache
E            +      and   '69abb301-3e79-4931-84c6-244d92ee17f3' = Memory(id='69abb301-3e79-4931-84c6-244d92ee17f3', character_id='char2', world_id='world1', content='Low importance memory', created_at=datetime.datetime(2025, 5, 23, 2, 56, 6, 361277), last_accessed=datetime.datetime(2025, 5, 23, 2, 56, 6, 361277), importance=0.1, related_entities=[], metadata={}, is_core=False).id

backend/tests/systems/memory/test_memory_manager.py:407: AssertionError
---------------------------- Captured stderr setup -----------------------------
INFO:backend.systems.memory.memory_manager:MemoryManager initialized
------------------------------ Captured log setup ------------------------------
INFO     backend.systems.memory.memory_manager:memory_manager.py:104 MemoryManager initialized
____________________ TestMemoryManager.test_error_handling _____________________

self = <systems.memory.test_memory_manager.TestMemoryManager object at 0x1051f9c10>
memory_manager = <backend.systems.memory.memory_manager.MemoryManager object at 0x105e74f90>
mock_storage = <AsyncMock id='4393870800'>

    @pytest.mark.asyncio
    async def test_error_handling(self, memory_manager, mock_storage):
        """Test error handling in memory operations."""
        # Arrange
        character_id = "char_error"
        memory_manager._memory_cache[character_id] = {}
    
        # Test: Storage failure during loading
        mock_storage.get.side_effect = Exception("Storage error")
    
        # Act & Assert - Should handle gracefully without raising
        memories = await memory_manager.get_memories(character_id)
        assert character_id in memory_manager._memory_cache
    
        # Reset mock
        mock_storage.get.side_effect = None
        mock_storage.get.return_value = {}
    
        # Test: Storage failure during saving
        memory = Memory(
            character_id=character_id,
            world_id="world1",
            content="Memory that will fail to save",
            importance=0.6
        )
    
        mock_storage.set.side_effect = Exception("Save error")
    
        # Act & Assert - Should still add to cache but not raise exception
>       created_memory = await memory_manager.create_memory(
            character_id=character_id,
            world_id="world1",
            content=memory.content,
            importance=memory.importance
        )

backend/tests/systems/memory/test_memory_manager.py:588: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
backend/systems/memory/memory_manager.py:160: in create_memory
    await self._save_memory(memory)
backend/systems/memory/memory_manager.py:462: in _save_memory
    await self.storage.set(storage_path, memories_dict)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <AsyncMock name='mock.set' id='4393802064'>
args = ('memories/char_error', {'d0b55215-29a8-4561-b5a4-295f59388b4b': {'character_id': 'char_error', 'content': 'Memory that will fail to save', 'created_at': '2025-05-23T02:56:06.430054', 'id': 'd0b55215-29a8-4561-b5a4-295f59388b4b', ...}})
kwargs = {}
_call = call('memories/char_error', {'d0b55215-29a8-4561-b5a4-295f59388b4b': {'id': 'd0b55215-29a8-4561-b5a4-295f59388b4b', 'c...accessed': '2025-05-23T02:56:06.430055', 'importance': 0.6, 'related_entities': [], 'metadata': {}, 'is_core': False}})
effect = Exception('Save error')

    async def _execute_mock_call(self, /, *args, **kwargs):
        # This is nearly just like super(), except for special handling
        # of coroutines
    
        _call = _Call((args, kwargs), two=True)
        self.await_count += 1
        self.await_args = _call
        self.await_args_list.append(_call)
    
        effect = self.side_effect
        if effect is not None:
            if _is_exception(effect):
>               raise effect
E               Exception: Save error

../.pyenv/versions/3.11.5/lib/python3.11/unittest/mock.py:2237: Exception
---------------------------- Captured stderr setup -----------------------------
INFO:backend.systems.memory.memory_manager:MemoryManager initialized
------------------------------ Captured log setup ------------------------------
INFO     backend.systems.memory.memory_manager:memory_manager.py:104 MemoryManager initialized
=============================== warnings summary ===============================
../.pyenv/versions/3.11.5/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
../.pyenv/versions/3.11.5/lib/python3.11/site-packages/pydantic/_internal/_config.py:323
  /Users/Sharrone/.pyenv/versions/3.11.5/lib/python3.11/site-packages/pydantic/_internal/_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

backend/systems/storage/events.py:13
  /Users/Sharrone/Dreamforge/backend/systems/storage/events.py:13: DeprecationWarning: Importing from backend.systems.events.event_dispatcher is deprecated. Use backend.app.core.events.event_dispatcher instead.
    from backend.systems.events.event_dispatcher import EventDispatcher

../.pyenv/versions/3.11.5/lib/python3.11/site-packages/_pytest/config/__init__.py:1441
  /Users/Sharrone/.pyenv/versions/3.11.5/lib/python3.11/site-packages/_pytest/config/__init__.py:1441: PytestConfigWarning: Unknown config option: verbose
  
    self._warn_or_fail_if_strict(f"Unknown config option: {key}\n")

backend/tests/systems/memory/test_memory_manager.py: 13 warnings
  /Users/Sharrone/.pyenv/versions/3.11.5/lib/python3.11/site-packages/pytest_asyncio/plugin.py:884: DeprecationWarning: The event_loop fixture provided by pytest-asyncio has been redefined in
  /Users/Sharrone/Dreamforge/backend/tests/conftest.py:245
  Replacing the event_loop fixture with a custom implementation is deprecated
  and will lead to errors in the future.
  If you want to request an asyncio event loop with a scope other than function
  scope, use the "loop_scope" argument to the asyncio mark when marking the tests.
  If you want to return different types of event loops, use the event_loop_policy
  fixture.
  
    warnings.warn(

backend/tests/systems/memory/test_memory_manager.py: 13 warnings
  /Users/Sharrone/Dreamforge/backend/systems/memory/memory_manager.py:109: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    self.event_dispatcher.subscribe("character.created", self._on_character_created)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

backend/tests/systems/memory/test_memory_manager.py: 13 warnings
  /Users/Sharrone/Dreamforge/backend/systems/memory/memory_manager.py:110: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    self.event_dispatcher.subscribe("character.deleted", self._on_character_deleted)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

backend/tests/systems/memory/test_memory_manager.py: 13 warnings
  /Users/Sharrone/Dreamforge/backend/systems/memory/memory_manager.py:113: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    self.event_dispatcher.subscribe("narrative.generated", self._on_narrative_generated)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

backend/tests/systems/memory/test_memory_manager.py: 13 warnings
  /Users/Sharrone/Dreamforge/backend/systems/memory/memory_manager.py:116: RuntimeWarning: coroutine 'AsyncMockMixin._execute_mock_call' was never awaited
    self.event_dispatcher.subscribe("character.interaction", self._on_character_interaction)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

backend/tests/systems/memory/test_memory_manager.py: 91 warnings
  /Users/Sharrone/Dreamforge/backend/systems/memory/memory_manager.py:451: PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    mem_dict = mem.dict()

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED backend/tests/systems/memory/test_memory_categories.py::TestMemoryCategories::test_categorize_memory_content
FAILED backend/tests/systems/memory/test_memory_categories.py::TestMemoryCategories::test_get_category_modifier
FAILED backend/tests/systems/memory/test_memory_categories.py::TestMemoryCategories::test_categorize_memory_with_entities
FAILED backend/tests/systems/memory/test_memory_categories.py::TestMemoryCategories::test_categorize_with_emotional_valence
FAILED backend/tests/systems/memory/test_memory.py::TestMemory::test_importance_influence_on_decay
FAILED backend/tests/systems/memory/test_memory_manager.py::TestMemoryManager::test_run_memory_decay
FAILED backend/tests/systems/memory/test_memory_manager.py::TestMemoryManager::test_error_handling
============ 7 failed, 23 passed, 1 skipped, 160 warnings in 1.62s =============


Test Duration: 3.15 seconds
Exit Code: 1
